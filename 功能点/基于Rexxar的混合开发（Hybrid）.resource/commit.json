{"compress":true,"commitItems":[["c89a524c-8b19-4691-88c7-19331cfa5535",1511510004105,"#混合开发（Hybrid）\n混合开发是 Native 和 Web 技术一起用，开发者以 Native 代码为主体，在合适的地方部分使用 Web 技术。比如在 Android 中的 Activity 内放置一个 Webview（一个浏览器引擎，只拥有渲染 HTML，CSS 和执行 JavaScript 的核心功能）。这样，部分用户界面就可以在 WebView 中使用 Web 技术实现。\n\n促使我们在移动开发中使用 Web 技术主要动力在于，相比于 Native 技术，Web 技术具有诸多优势：\n\n* 高效率的界面开发：HTML，CSS，JavaScript 的组合被证明在用户界面开发方面具有很高的效率。\n\n* 跨平台：统一的浏览器内核标准，使得 Web 技术具有跨平台特性。iOS 和 Android 可以使用一套代码。\n\n* 热更新：可越过发布渠道自主更新应用。\n\n这些优势都和开发效率有关。Web 技术具有这些优势的原因是，Web 技术是一个开放标准。基于开放的标准已经发展出来庞大生态，而且这个生态从 PC 时代发展至今已积累多年，开发者可以利用生态中产出的各种成果，从而省去很多重复工作。\n\n在大型移动应用的开发中，项目代码庞杂，通常还需要 iOS，Android，移动 Web 和 桌面 Web 全平台支持。相对于同时开发几个版本，使用混合开发显然可以在代码重用、开发成本和效率方面有很大的优势，在权衡性能体验的前提下，使用混合开发是非常现实的选择。\n\n#Rexxar 是什么\nRexxar是一个针对移动端的混合开发框架。支持Android、iOS和移动Web。\n\n####Rexxar主要由三部分组成：\n\n* Rexxar-web：前端代码库。包括一套打包、调试、发布工具，以及公共前端组件，和对Rexxar Container实现的Widget的调用。\n\n* Rexxar-Router：路由表，将每个页面分配一个服务器端链接，以及一个本地URI，通过路由表来访问页面。\n\n* Rexxar-container：增强版WebView，封装了一些Native API支持，包括OAuth授权、图片缓存等。\n\nRexxar目前已经开源，并且分为3个项目，你可以只使用其中某个项目来开发对应平台的代码：\n\n* Rexxar Web：https://github.com/douban/rexxar-web\n\n* Rexxar iOS：https://github.com/douban/rexxar-ios\n\n* Rexxar Android：https://github.com/douban/rexxar-android\n\n####Rexxar 主要由以下三部分组成：\n\n * **Rexxar Route**，我们使用 URL 来标识每一个页面。在 App 中通过指明 URL 跳转到此页面。所以，需要一个路由表。通过路由表可以根据 URL 找到一个 Rexxar Web 的对应资源来正确展示相应页面；\n\n* **Rexxar Web**，前端代码库，由 HTML、CSS、JavaScript、Image 等组成，用来提供在移动客户端使用的用户页面；\n\n* **Rexxar Container**，一个前端代码的运行容器。它其实是一个内嵌的浏览器(WebView)，我们为内嵌浏览器提供了一些必要的原生端支持，包括 API 的 OAuth 授权、图片缓存、Native UI 组件的调用等；现在有 Android 和 iOS 两个版本的实现。\n\n在项目实践中，Rexxar Web 和 Rexxar Route 由一个项目实现，并部署于同一个 Web 项目中。\n\n####**Rexxar Route**\n\nRexxar Route 比较简单，只需要表达一个路由表即可。我们使用了一个 json 文件来表达路由表。\n![](http://ou21vt4uz.bkt.clouddn.com/rexxar_routes.png)\n\n发布的每个版本的 App 安装包都会包含最新版本的 routes.json 文件。在 App 启动时，都会尝试下载最新版本的 routes.json。在遇到无法解析的 URL 时，也会去下载新版 routes.json,或者根据 URL 查询本机缓存的路由表 routes.json不能找到对应的资源记录时，也会请求 Rexxar Route 服务，获得最新的全量路由表 routes.json，更新本地缓存。\n\n####**Rexxar Web**\n\nRexxar Web 是 Rexxar 前端实现。Rexxar Container 的实现和 Rexxar Web 的实现是分离的。Rexxar Container 对 Rexxar Web 使用何种技术实现并不关心。所以，可以选择自己的前端技术和 Rexxar Container 进行组合。豆瓣选择的是 React 作为前端开发框架。\n\n####**Rexxar Container**\n\nRexxar Container 是提供了一个运行前端代码的容器。它也是一个内嵌的浏览器（WebView）。不是只简单的load一个 URL 地址，还对内嵌的浏览器做了很多开发，为其包装了很多附加功能。\n\n#### **Rexxar Container 的技术实现**\n\nRexxar Container 主要的工作是截获 Rexxar Web 的数据请求和原生功能请求。Rexxar Container 截获请求之后，做相应的反应。这种 Native 和 Web 的交互被抽象成三种接口:\n\n   * Decorator：修改数据请求。例如，数据请求加上 OAuth 认证信息。\n    \n   * Widget: 调用某些 Native UI 组件。例如，调起一个 Toast。\n    \n   * ContainerAPI：给 Web 一个 Native 的计算结果。例如，给出当前位置信息。\n\n这三种接口都是由 Rexxar Web 发起某种形式的 URL 调用的。Rexxar Web 的业务代码在 App 的 Rexxar Container 内工作方式，和在普通浏览器里差别不大。我们只是在 Web 技术的基础上做了一些拓展，保留了大部分 Web 原有的编写和运行方式。代码都是标准 Web 式的，没有为原生移动开发做太多定制。因此，移植到 Web 平台，在各种浏览器中，代码无需做太多修改就可以正确运行。以 URL 作为协议，也为 Web 和 Native 划定了清晰的边界和数据传递方式。\n\nRexxar在iOS 和 Android 各开发了一个 Rexxar Container。iOS 和 Android 平台截获请求的方式由于平台差异，并不完全相同。但本质上都是在 Web 和 Native 之间实现了一个 Proxy。Web 发出的请求会被 Proxy 预先处理。要么是修改后再发出去，要么是由 Rexxar Container 自己处理。\n\n具体的实现可以参看两个平台的项目代码。\n\n#### **Rexxar Container 需要实现的功能**\n\n* Rexxar Route 路由表的更新，已经在客户端的保存；\n\n* 为 Rexxar Web 前端代码发出的 API 请求提供包装。带上必要的 OAuth 参数；\n\n* 缓存 Rexxar Web 前端代码所需要的静态文件，包括 HTML、CSS、JavaScript、Image(图片素材)等；\n    \n* 缓存 Rexxar Web 中所需要加载的资源文件，例如图片等；\n    \n* 通过协议为 Rexxar Web 提供一些原生支持的功能：包括 Native UI 组件调用，获取 Native 的计算结果。\n\n####**Rexxar Container 和 Rexxar Web 之间的交互**\n\n混合开发实践中，都会涉及到 Native 和 Web 如何通信的问题。这是因为我们把一件事情交给两种技术完成，那么它们之间便会存在有一些通信和协调。在 Rexxar 中是通过从 Rexxar Web 发出 HTTP 请求的方式，由 Rexxar Container 截获的方式进行通信。Native 和 Web 之间协议是由 URL 定义的。Rexxar Web 访问某个特定的 URL, Rexxar Container 截获这些 URL 请求，调用 Native 代码完成相应的功能。\n\n例如，Rexxar 中 UI 相关的功能的协议如下：\n\n* 请求 douban://rexxar.douban.com/widget/nav_title，可以定义 Navigation Bar Title。\n    \n* 请求 douban://rexxar.douban.com/widget/nav_menu，可以定义 Navigation Bar Button。\n\n* 请求 douban://rexxar.douban.com/widget/toast，可以出现一个消息通知 toast。\n\nRexxar Web 具体前端实现是在 DOM 中加入一个 iframe 来加载此 URL，以来完成对 Rexxar Container 的通知。\n\n用 Rexxar 完成的页面，不仅仅在 App 内使用，还会在移动 Web 页面上使用。还有其他的移动站点，例如分享到外部（如微信，微博，QQ等）的页面希望复用 Rexxar 在 App 内的工作成果。这样 Native 和 Web 之间的通信是可定义的，可控的则需要我们将 Native 和 Web 的通信以协议的形式规范起来。一些协议在移动 Web 是被可以自动被忽略（比如，nav_title, nav_menu），或者用移动 Web 支持的形式再实现一次（比如，toast）。这样，Rexxar 中的前端业务代码无需太多改动，即可迁移到移动 Web 和桌面 Web 端。\n\n# rexxar在移动端如何加载、解析、渲染web模板\n\n####**Rexxar 的工作流程图**\n\n![](http://ou21vt4uz.bkt.clouddn.com/Rexxar%20%E9%A1%B5%E9%9D%A2%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png)\n\n####**Rexxar 页面执行过程**\n\n![](http://lincode.github.io/images/blog/Rexxar.png)\n\n####**Rexxar 的工作流**\n\n客户端接到一个页面请求，要打开一个 URL：douban://douban.com/rexxar_demo。\n\n* 1.根据 URL 查询本机缓存的路由表 routes.json，看是否能够找到对应的资源记录(一般是一个 HTML 文件)。如果找到不到，请求 Rexxar Route 服务，获得最新的全量路由表 routes.json，更新本地缓存，找到对应的资源记录；\n\n* 2.根据路由表指示的 HTML 文件的路径，看本地是否找到对应的文件。如果找不到，请求 Rexxar Web 资源服务器，更新本地缓存；在 Rexxar Container 里展示该 HTML 文件；如有需要，会在 Container 中请求图片资源，图片资源也有缓存，Rexxar Container 会先检查本地缓存。如不存在，会请求 CDN 的图片或者图片服务器；\n\n* 3.Rexxar Web 前端代码在 Container 里继续执行，发出 API 请求。Rexxar Container 代理这些请求，为 API 请求添加 OAuth 验证，或增加某些参数；\n\n* 4.Rexxar Web 前端代码继续执行，根据 API 返回的结果，展示响应的页面，可能会请求 CDN 的图片或者图片服务器等；\n\n* 5.Rexxar Web 前端代码继续执行，如果需要修改 NavigationBar 等原生界面，可能通过定义好的协议请求 URL： douban://rexxar.douban.com；\n\n* 6.Rexxar Container 拦截请求，按定义好的协议作出反应。例如，修改 NavigationBar 上的按钮。如果需要，会向 Rexxar Web 回调约定好的 Javascript 函数。\n\n#rexxar的使用流程\n\n### 安装\n\n#### gradle\n\n```groovy\n   compile 'com.douban.rexxar:core:0.3.5.3'\n```\n\n\n### 配置\n\n#### 1. 初始化\n\n在Application的`onCreate`中调用\n\n```Java\n  Rexxar.initialize(Context context);\n```\n\n#### 2. 设置路由表文件 api：\n\n```Java\n  RouteManager.getInstance().setRouteApi(\"https://raw.githubusercontent.com/douban/rexxar-web/master/example/dist/routes.json\");\n```\n\nRexxar 使用 uri 来标识页面，提供一个正确的 uri 就可以打开对应的页面，路由表提供了每个 uri 对应的 html 资源的下载地址。\n\nDemo 中的路由表如下：\n\n```json\n\n{\n  \"items\": [\n    {\n      \"deploy_time\": \"Sun, 09 Oct 2016 05:54:22 GMT\",\n      \"remote_file\": \"https://raw.githubusercontent.com/douban/rexxar-web/master/example/dist/rexxar/demo-252452ae58.html\",\n      \"uri\": \"douban://douban.com/rexxar_demo[/]?.*\"\n    }\n  ],\n  \"partial_items\": [\n    {\n      \"deploy_time\": \"Sun, 09 Oct 2016 05:54:22 GMT\",\n      \"remote_file\": \"https://raw.githubusercontent.com/douban/rexxar-web/master/example/dist/rexxar/demo-252452ae58.html\",\n      \"uri\": \"douban://partial.douban.com/rexxar_demo/_.*\"\n    }\n  ],\n  \"deploy_time\": \"Sun, 09 Oct 2016 05:54:22 GMT\"\n}\n\n\n```\n\n#### 3. 设置需要代理或缓存的请求host\n\n```Java\n  ResourceProxy.getInstance().addProxyHosts(List<>() hosts);\n```\n\nRexxar是通过`WebViewClient`的`shouldInterceptRequest`方法来拦拦截请求，请求线上数据并返回给'webview'。为了减少不必要的流程破坏，只有明确需要拦截的hosts（支持正则）的请求才会被拦截代理，并根据mime-type决定哪些内容需要缓存。\n\n#### 4. 预置资源文件\n\n使用 Rexxar 一般会预置一份路由表，以及资源文件在应用包中。这样就可以减少用户的下载，加快第一次打开页面的速度。在没有网络的情况下，如果没有数据请求的话，页面也可访问。这都有利于用户体验。\n预置文件路径是`assets/rexxar`, 暂不支持修改。\n\n\n\n### 使用 RexxarWebView\n\n直接使用 `RexxarWebView` 为的混合开发客户端容器。或者也可以在 `RexxarWebView` 基础上实现你自己的客户端容器。\n\n为了初始化 RexxarWebView，你需要只一个 url。在路由表文件 api 提供的路由表中可以找到这个 url。这个 url 标识了该页面所需使用的资源文件的位置。Rexxar Container 会通过 url 在路由表中寻找对应的 javascript，css，html 资源文件。\n\n```Java\n  // 根据uri打开指定的web页面\n  mWebView.loadUri(\"douban://douban.com/rexxar_demo\");\n```\n\n## 定制你自己的 Rexxar Container\n\n我们暴露了三类接口。供开发者更方便地扩展属于自己的特定功能实现。\n\n### 定制 RexxarWidget\n\nRexxar Container 提供了一些原生 UI 组件，供 Rexxar Web 使用。RexxarWidget 是一个 Java 协议（Protocol）。该协议是对这类原生 UI 组件的抽象。如果，你需要实现某些原生 UI 组件，例如，弹出一个 Toast，或者添加原生效果的下拉刷新，你就可以实现一个符合 RexxarWidget 协议的类，并实现以下方法：`getPath:`, `handle:`。\n\n在 Demo 中可以找到一个例子：`TitleWidget` ，通过它可以设置导航栏的标题文字。\n\n```Java\n\n    public class TitleWidget implements RexxarWidget {\n\n    static final String KEY_TITLE = \"title\";\n\n    @Override\n    public String getPath() {\n        return \"/widget/nav_title\";\n    }\n\n    @Override\n    public boolean handle(WebView view, String url) {\n        if (TextUtils.isEmpty(url)) {\n            return false;\n        }\n        Uri uri = Uri.parse(url);\n        if (TextUtils.equals(uri.getPath(), getPath())) {\n            String title = uri.getQueryParameter(KEY_TITLE);\n            if (null != view && view.getContext() instanceof Activity) {\n                ((Activity)view.getContext()).setTitle(Uri.decode(title));\n            }\n            return true;\n        }\n        return false;\n    }\n}\n```\n\n### 定制 RexxarContainerAPI\n\n我们常常需要在 Rexxar Container 和 Rexxar Web 之间做数据交互。比如 Rexxar Container 可以为 Rexxar Web 提供一些计算结果。如果你需要提供一些由原生代码计算的数据给 Rexxar Web 使用，你就可以选择实现 RexxarContainerAPI 协议（Protocol），并实现以下三个方法：`getPath:`, `call:`。\n\n在 Demo 中可以找到一个例子：`LocationAPI`。这个例子中，`LocationAPI` 返回了设备所在城市信息。当然，这个 ContainerAPI 仅仅是一个示例，它提供的是一个假数据，数据永远不会变化。你当然可以遵守 `RexxarContainerAPI` 协议，实现一个类似的但是数据是真实的功能。\n\n```Java\n\n    static class LocationAPI implements RexxarContainerAPI {\n\n        @Override\n        public String getPath() {\n            return \"/loc\";\n        }\n\n        @Override\n        public Response call(Request request) {\n            Response.Builder responseBuilder = newResponseBuilder(request);\n            try {\n                JSONObject jsonObject = new JSONObject();\n                jsonObject.put(\"lat\", \"0.0\");\n                jsonObject.put(\"lng\", \"0.0\");\n                responseBuilder.body(ResponseBody.create(MediaType.parse(Constants.MIME_TYPE_JSON), jsonObject.toString()));\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            return responseBuilder.build();\n        }\n    }\n```\n\n\n### 定制 Rexxar Decorator\n\n如果你需要修改运行在 Rexxar Container 中的 Rexxar Web 所发出的请求。例如，在 http 头中添加登录信息，你可以自定义OkHttpClient，`Rexxar.setOkHttpClient(OkHttpClient okHttpClient)`\n\n在 Demo 中可以找到一个例子：`AuthInterceptor`。这个例子为 Rexxar Web 发出的请求添加了登录信息。\n\n```Java\n\n    public class AuthInterceptor implements Interceptor{\n\n        @Override\n        public Response intercept(Chain chain) throws IOException {\n            Request request = chain.request();\n\n            String url = request.url().toString();\n            if (TextUtils.isEmpty(url)) {\n                return null;\n            }\n\n            Request.Builder builder = request.newBuilder();\n            builder.header(\"Authorization\", \"123456789\");\n            return chain.proceed(builder.build());\n        }\n    }\n\n    // Rexxar初始化时设置\n    Rexxar.setOkHttpClient(new OkHttpClient().newBuilder()\n            .retryOnConnectionFailure(true)\n            .addNetworkInterceptor(new AuthInterceptor())\n            .build());\n```\n\n## 高级使用\n\n### native调用js方法\n\n```\n\n    // 方法名\n    RexxarWebView.callFunction(String functionName)\n    \n    // 方法名和json数据\n    RexxarWebView.callFunction(String functionName, String jsonString)\n    \n```\n  \n## Partial RexxarWebView\n\n如果，你发现一个页面无法全部使用 Rexxar 实现。你可以在一个原生页面内内嵌一个 `RexxarWebView`，部分功能使用原生实现，另一部分功能使用 Rexxar 实现。\n\n\nDemo 中的给出了一个示例。\n\n```\n mRexxarWebView.loadPartialUri(\"douban://douban.com/rexxar_demo\");\n```\n\n#rexxar使用过程中的限制及注意事项\n\n* 1.性能方面\n\nWeb 的性能没法和 Native 相比。这种状况可能会长期存在。因为，前端代码运行于内嵌浏览器之上，和直接调用原生系统相比，理论上总会存在性能上的差距，可以用规避的方式面对性能问题：即性能问题会明显影响到用户体验时，我们就不使用 Rexxar 来做，而是使用传统 Native 写两份代码，一份 iOS，一份 Android。这样就限缩了 Rexxar 的使用范围。\n\n* 2.内存问题\n\nRexxar在客户端的实现其实就是一个定制了更多功能的WebView。由于Rexxar使用的是系统的WebView。所以对App的体积没有影响。但是Rexxar同时使用很多个WebView带来的内存问题，这是需要注意的。\n\n* 3.错误报告\n\nRexxar的Crash有两种：\n\n* 一种是JavaScript的错误，也就是应用逻辑的问题。这类错误他们在WebView中做了捕获，然后通过App的日志系统发回服务器。\n    \n* 一种是WebView的Crash，这种错误WebView自己无法捕获，现在是通过fabric，Umeng，bugly这种原生的Crash收集系统收集。\n\n在应用中使用 Rexxar 之后，在收集到的 Crash Report 中，JavaScript 的相关错误，和浏览器相关的错误开始增加。而对这类错误，由于移动应用的使用环境更为复杂，错误报告经过了 JavaScript 引擎，原生系统两层之后，给出的错误信息并不够明确。豆瓣在这方面的经验也并不多，现在还没有很好的办法降低这类错误。这对提高 App 的稳定性带来了问题。\n\n#为什么不用PhonGap/Cordova\n\n在混合开发中早已有了很成熟的方案，就是PhoneGap和它的后继者Cordoba. 为什么豆瓣还要造自己的轮子呢？\n\n郭麟说，如果Hybrid方案定义为前端和原生技术的混合使用，那他们认为PhoneGap/Cordova严格来说不算是Hybrid方案，因为它的目标是全面使用前端技术开发移动应用，而不是前端和原生技术混合使用。但是，包括Cordova，还可以加上React Native，以及Rexxar的目标是一致的：使用前端技术来开发移动应用，提高工程效率。\n\n豆瓣实际上使用PhoneGap开发过一款移动App，并在AppStore上架了，这个应用叫豆瓣音乐人，因此，其实豆瓣对PhoneGap/Cordova已经有一定了解和使用经验。为何在开发豆瓣App时又造了一个叫Rexxar的“轮子”呢？这是因为，他们对PhoneGap/Cordova这个项目的理念并不完全赞同，Rexxar的出发点和PhoneGap/Cordova并不一样。\n\nPhoneGap/Cordova这个项目极具野心。它希望完全使用前端技术完成移动开发。所以，可以看到它尽力让前端技术完成尽量多的开发工作，只在前端无法直接调用的原生系统功能方面提供了前端可用的接口。主流的PhoneGap/Cordova项目将业务逻辑都实现在一个WebView中。目标是，让开发者只使用前端技术就可以完成一个移动应用的所有开发工作。这种做法需要有一个前提：前端技术可以解决移动开发的所有需求。他们认为PhoneGap/Cordova这个理念在现阶段有些过于理想化了，或者说过于激进了。\n\nRexxar则相对实际，或者说保守一些。郭麟表示，他们仍然认为，**现阶段，甚至在相当遥远的未来，移动开发中前端技术都不太可能完全代替原生技术。**但他们同时承认，**移动开发中总是存在部分功能是适合使用前端技术完成的。**在他们的认识中，前端技术和原生技术应该是共存的。移动开发中，前端技术不会完全代替原生技术；而有了前端技术的加入，移动开发的效率会提高。基于这种认识，豆瓣开发了Rexxar。\n\n可以看到，**Rexxar立足于在一个原生项目使用前端技术，而不是整个项目都使用前端技术实现。**他们甚至提供一个页面部分使用Rexxar完成，部分使用原生技术实现的方案。豆瓣希望借助前端技术优秀的排版能力、开发速度、通用性，来弥补原生开发在这方面的不足。在微信作为主要内容分享渠道的今天，这样做还带来了一个额外的好处，Rexxar页面可以平滑的使用在微信中。\n\n总结而言，如果Rexxar和PhoneGap/Cordova比较的话，大目标是一致的：使用前端技术开发移动应用。实现技术栈差不多：使用WebView，提供调用原生功能的接口。但是，出发点不一样。PhoneGap/Cordova致力于完全使用前端技术进行移动开发；Rexxar致力于在移动项目中部分使用前端技术。\n\n#鼓励移动开发者学习前端技术\n\n目前，我们移动团队大约有十多位客户端工程师，其中 iOS 和 Android 各一半。可以委派一位优秀的前端工程师专门支持App中的混合开发，他负责Rexxar Web的开发，提供基础设施。同时如果有一些较复杂的业务要用Rexxar实现，他也会参与和指导业务开发。\n\n使用Rexxar这类混合开发技术，使得团队开发的技术栈向前端技术偏斜了。所以，较理想的配置是团队中加入较优秀的前端工程师，由他来处理基础设施的开发，和疑难问题的解决。同时，整个团队需要理解混合开发所带来的优势，认可这个开发方式的转变，并且愿意学习和调整自己的技术栈。\n\n在项目中，在合适的场景中，可以优先使用Rexxar。在团队中，应该鼓励非前端工程师学习和使用前端技术。由于以前专门组织了关于前端技术内部培训，让有意愿的非前端工程师具有了可以使用前端技术进行日常开发的基本能力。期望在App的日常开发中，大部分Rexxar页面都可以由客户端工程师完成，前端工程师会帮忙做Code Review和解决疑难问题。😄\n\n#总结与展望\n\n通过在移动开发中使用Rexxar，在一定程度上提高了开发效率。以前一个页面需要 iOS 和 Android 两位工程师各开发一遍，现在只需要一位工程师写一次前端代码，甚至还可以应用到移动 Web 站上去。前端技术在开发界面方面也有效率上的优势，热部署能力，使他们规避了发布移动应用的审核过程，也让bug修复过程更便利。\n\n豆瓣将Rexxar这个项目开源，一方面，是因为提高移动开发的工程效率是一个普遍问题，而他们的实践结果也证明Rexxar确实帮助改善了工程效率。所以，他们认为Rexxar应该能给大家提供一些借鉴的方向。另一方面，是为了提高项目本身的质量，没有方案是完美的，Rexxar也还存在不少问题。开源这个项目，促使他们提高了整个项目的代码质量。同时，也更容易听到大家的意见和建议。\n\n虽然Rexxar仍然存在一些问题和使用上的限制。但是在有限的使用中，豆瓣App团队仍然收获不少。在未来他们会持续推动Rexxar在豆瓣移动开发中的使用。对于Rexxar未来的发展，他们主要关注两个方面：\n\n* 一方面是基础设施，比如，如何在产品中，更好地监控Rexxar页面出现的问题，如何调试和解决Rexxar页面出现的bug。如果希望在大型项目中使用Rexxar，这些基础设施是应该配备的；\n\n* 另一方面是性能，Rexxar仍然跑在浏览器引擎中。浏览器引擎这个中间层提高了工程效率，但也因为性能问题局限了其使用范围。所以，他们会花一些精力提高Rexxar的运行效率。比如，Rexxar的iOS版一直在关注从UIWebView迁移到WKWebView的可能性。\n\n\n\n",[[1511509959064,["gengmei_pxf@gengmei123.local",[[1,1549," "]],[1549,1549],[1550,1550]]],[1511510001908,["gengmei_pxf@gengmei123.local",[[1,1," "]],[1,1],[2,2]]],[1511510183555,["gengmei_pxf@gengmei123.local",[[1,637," "]],[637,637],[638,638]]],[1511510186745,["gengmei_pxf@gengmei123.local",[[1,697," "]],[697,697],[698,698]]],[1511510230973,["gengmei_pxf@gengmei123.local",[[1,1128,"   "]],[1128,1128],[1131,1131]]],[1511510232572,["gengmei_pxf@gengmei123.local",[[-1,1128,"   "]],[1131,1131],[1128,1128]]],[1511510233669,["gengmei_pxf@gengmei123.local",[[1,1128," "]],[1128,1128],[1129,1129]]],[1511512322072,["gengmei_pxf@gengmei123.local",[[-1,638,"Rexxar"],[1,644,"HybridWebView"]],[638,644],[651,651]]],[1511512338000,["gengmei_pxf@gengmei123.local",[[-1,656,"Rexxar"],[1,662,"HybridWebView"]],[656,662],[669,669]]],[1511512350653,["gengmei_pxf@gengmei123.local",[[-1,685,"支持Android、iOS和移动Web。"]],[684,704],[684,684]]],[1511512354084,["gengmei_pxf@gengmei123.local",[[1,685,"支持Android、iOS和移动Web。"]],[684,684],[684,704]]],[1511512362127,["gengmei_pxf@gengmei123.local",[[-1,685,"支持Android"]],[685,694],[685,685]]],[1511512366320,["gengmei_pxf@gengmei123.local",[[1,678,"支持Android"]],[678,678],[687,687]]],[1511512370789,["gengmei_pxf@gengmei123.local",[[-1,678,"支持Android"]],[687,687],[678,678]]],[1511512373599,["gengmei_pxf@gengmei123.local",[[1,677,"支持Android"]],[677,677],[686,686]]],[1511512377852,["gengmei_pxf@gengmei123.local",[[-1,694,"、iOS和移动Web。"]],[694,705],[694,694]]],[1511512393414,["gengmei_pxf@gengmei123.local",[[-1,701,"Rexxar"],[1,707,"HybridWebView"]],[701,707],[714,714]]],[1511512422727,["gengmei_pxf@gengmei123.local",[[-1,729,"xxar-web"],[1,737,"sourceProxy"]],[727,737],[740,740]]],[1511512436613,["gengmei_pxf@gengmei123.local",[[-1,807,"exxar-R"],[-1,818,"r"]],[806,819],[811,811]]],[1511512450061,["gengmei_pxf@gengmei123.local",[[-1,857,"Rexxar-container"],[1,873,"HybridWebView"]],[857,873],[870,870]]],[1511512456228,["gengmei_pxf@gengmei123.local",[[-1,644,"WebView"]],[638,651],[644,644]]],[1511512457459,["gengmei_pxf@gengmei123.local",[[-1,655,"WebView"]],[649,662],[655,655]]],[1511512464282,["gengmei_pxf@gengmei123.local",[[-1,693,"WebView"]],[687,700],[693,693]]],[1511512497832,["gengmei_pxf@gengmei123.local",[[1,658,"jiyu"]],[658,658],[662,662]]],[1511512499128,["gengmei_pxf@gengmei123.local",[[-1,657,"个jiyu"]],[662,662],[657,657]]],[1511512502594,["gengmei_pxf@gengmei123.local",[[1,657,"个jiyuji"]],[657,657],[664,664]]],[1511512505233,["gengmei_pxf@gengmei123.local",[[-1,658,"jiyuji"]],[664,664],[658,658]]],[1511512512460,["gengmei_pxf@gengmei123.local",[[1,658,"基于Rexxar"]],[658,658],[666,666]]],[1511512515915,["gengmei_pxf@gengmei123.local",[[1,660,"豆瓣"]],[660,660],[662,662]]],[1511512521827,["gengmei_pxf@gengmei123.local",[[1,668,"框架"]],[668,668],[670,670]]],[1511512525659,["gengmei_pxf@gengmei123.local",[[1,670,"修改"]],[670,670],[672,672]]],[1511512535376,["gengmei_pxf@gengmei123.local",[[-1,668,"框架修改"]],[672,672],[668,668]]],[1511512536970,["gengmei_pxf@gengmei123.local",[[1,668,"框架"]],[668,668],[670,670]]],[1511512557306,["gengmei_pxf@gengmei123.local",[[-1,658,"基于豆瓣Rexxar框架"]],[658,670],[658,658]]],[1511512577496,["gengmei_pxf@gengmei123.local",[[1,679,"，它是基于豆瓣Rexxar框架修改的"]],[679,679],[697,697]]],[1511512622501,["gengmei_pxf@gengmei123.local",[[-1,744,"包括一套打包、调试、发布工具，以及公共前端组件，和对Rexxar Container实现的Widget的调用"],[1,798,"负责资源管理，比如获取缓存的资源，写入缓存资源，请求线上资源"]],[744,798],[774,774]]],[1511512657678,["gengmei_pxf@gengmei123.local",[[-1,738,"前端代码库"],[1,743,"资源代理"]],[738,743],[742,742]]],[1511512708138,["gengmei_pxf@gengmei123.local",[[1,827,"\n"]],[825,825],[826,826]]],[1511512708525,["gengmei_pxf@gengmei123.local",[[1,826,"负责通过uri找到对应的html页面，一条Route包含一个uri的正则匹配规则和一个html地址"]],[826,826],[875,875]]],[1511512713809,["gengmei_pxf@gengmei123.local",[[-1,826,"负责通过uri找到对应的html页面，一条Route包含一个uri的正则匹配规则和一个html地址"]],[875,875],[826,826]]],[1511512718798,["gengmei_pxf@gengmei123.local",[[-1,788,"将每个页面分配一个服务器端链接，以及一个本地URI，通过路由表来访问页面。"],[1,825,"负责通过uri找到对应的html页面，一条Route包含一个uri的正则匹配规则和一个html地址。"]],[788,825],[838,838]]],[1511512721298,["gengmei_pxf@gengmei123.local",[[-1,840,"\n"]],[840,840],[839,839]]],[1511512886879,["gengmei_pxf@gengmei123.local",[[-1,895,"图片缓存"],[1,899,"封装了webview的cookie 和 所需要传递的参数"]],[895,899],[923,923]]],[1511512895228,["gengmei_pxf@gengmei123.local",[[-1,894,"、封装了"]],[898,898],[894,894]]],[1511512896822,["gengmei_pxf@gengmei123.local",[[1,894,"，"]],[894,894],[895,895]]],[1511512920741,["gengmei_pxf@gengmei123.local",[[-1,895,"webview的c"],[1,904,"CWebView的"]],[895,904],[903,903]]],[1511513004066,[null,[[-1,895,"C"],[1,904,"C"]],[895,895],[905,905]]],[1511513004066,[null,[[1,895,"C"],[-1,903,"C"]],[905,905],[895,895]]],[1511512963121,["gengmei_pxf@gengmei123.local",[[-1,872,"Native API支持，包括OAuth授权，"]],[872,895],[872,872]]],[1511513124081,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511513124081,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511513118716,["gengmei_pxf@gengmei123.local",[[1,886,"的加载，webView加载状态监听的处理，"]],[886,886],[907,907]]],[1511513184193,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511513184193,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511513128774,["gengmei_pxf@gengmei123.local",[[1,907,"页面load完成后加载的数据"]],[907,907],[921,921]]],[1511513153850,["gengmei_pxf@gengmei123.local",[[-1,916,"加载的"]],[919,919],[916,916]]],[1511513159836,["gengmei_pxf@gengmei123.local",[[1,918,"的获取，"]],[918,918],[922,922]]],[1511513172610,["gengmei_pxf@gengmei123.local",[[-1,887,"加载"]],[889,889],[887,887]]],[1511513174300,["gengmei_pxf@gengmei123.local",[[1,887,"同步"]],[887,887],[889,889]]],[1511513184019,["gengmei_pxf@gengmei123.local",[[-1,890,"w"],[1,891,"W"]],[890,897],[897,897]]],[1511513244077,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511513244077,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511513207403,["gengmei_pxf@gengmei123.local",[[1,903,"回调"]],[903,903],[905,905]]],[1511513364092,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511513364092,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511513356618,["gengmei_pxf@gengmei123.local",[[-1,923,"，"]],[924,924],[923,923]]],[1511513358860,["gengmei_pxf@gengmei123.local",[[-1,925," "]],[926,926],[925,925]]],[1511513360027,["gengmei_pxf@gengmei123.local",[[-1,923," "]],[924,924],[923,923]]],[1511513424076,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511513424076,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511513375410,["gengmei_pxf@gengmei123.local",[[-1,936,"Rexxar目前已经开源，并且分为3个项目，你可以只使用其中某个项目来开发对应平台的代码：\n\n* Rexxar Web：https://github.com/douban/rexxar-web\n\n* Rexxar iOS：https://github.com/douban/rexxar-ios\n\n* Rexxar Android：https://github.com/douban/rexxar-android"]],[936,1142],[936,936]]],[1511513375906,["gengmei_pxf@gengmei123.local",[[-1,937,"\n"]],[936,936],[935,935]]],[1511513376258,["gengmei_pxf@gengmei123.local",[[-1,936,"\n"]],[935,935],[934,934]]],[1511513664081,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511513664082,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511513629585,["gengmei_pxf@gengmei123.local",[[-1,936,"#### Rexxar 主要由以下三部分组成：\n\n * **Rexxar Route**，我们使用 URL 来标识每一个页面。在 App 中通过指明 URL 跳转到此页面。所以，需要一个路由表。通过路由表可以根据 URL 找到一个 Rexxar Web 的对应资源来正确展示相应页面；\n\n* **Rexxar Web**，前端代码库，由 HTML、CSS、JavaScript、Image 等组成，用来提供在移动客户端使用的用户页面；\n\n* **Rexxar Container**，一个前端代码的运行容器。它其实是一个内嵌的浏览器(WebView)，我们为内嵌浏览器提供了一些必要的原生端支持，包括 API 的 OAuth 授权、图片缓存、Native UI 组件的调用等；现在有 Android 和 iOS 两个版本的实现。\n"]],[936,1301],[936,936]]],[1511513630043,["gengmei_pxf@gengmei123.local",[[-1,936,"\n"]],[936,936],[935,935]]],[1511513651056,["gengmei_pxf@gengmei123.local",[[-1,936,"在项目实践中，Rexxar Web 和 Rexxar Route 由一个项目实现，并部署于同一个 Web 项目中。\n"]],[935,993],[935,935]]],[1511513651497,["gengmei_pxf@gengmei123.local",[[-1,936,"\n"]],[935,935],[934,934]]],[1511513724071,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511513724071,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511513665359,["gengmei_pxf@gengmei123.local",[[1,936,"\n"]],[935,935],[936,936]]],[1511513665607,["gengmei_pxf@gengmei123.local",[[1,937,"\n"]],[936,936],[937,937]]],[1511513670468,["gengmei_pxf@gengmei123.local",[[1,936,"#### “”"]],[936,936],[943,943]]],[1511513671257,["gengmei_pxf@gengmei123.local",[[-1,941,"“”"]],[943,943],[941,941]]],[1511513672996,["gengmei_pxf@gengmei123.local",[[1,941,"****"]],[941,941],[945,945]]],[1511513674578,["gengmei_pxf@gengmei123.local",[[1,943,"ResourceProxy"]],[943,943],[956,956]]],[1511513678455,["gengmei_pxf@gengmei123.local",[[1,960,"\n"]],[958,958],[959,959]]],[1511513680183,["gengmei_pxf@gengmei123.local",[[1,961,"\n"]],[959,959],[960,960]]],[1511513699863,["gengmei_pxf@gengmei123.local",[[-1,1316,"Web**\n\nRexxar Web 是 Rexxar 前端实现。Rexxar Container 的实现和 Rexxar Web 的实现是分离的。Rexxar Container 对 Rexxar Web 使用何种技术实现并不关心。所以，可以选择自己的前端技术和 Rexxar Container 进行组合。豆瓣选择的是 React 作为前端开发框架。\n\n####**Rexxar "]],[1302,1493],[1302,1302]]],[1511513705162,["gengmei_pxf@gengmei123.local",[[1,1307," "]],[1307,1307],[1308,1308]]],[1511513713634,["gengmei_pxf@gengmei123.local",[[-1,1440,"Rexxar Container"],[1,1456,"HybridWebView"]],[1440,1456],[1453,1453]]],[1511513722181,["gengmei_pxf@gengmei123.local",[[1,1440,"Rexxar Container"],[-1,1440,"HybridWebView"]],[1453,1453],[1440,1456]]],[1511513784068,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511513784068,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511513726064,["gengmei_pxf@gengmei123.local",[[-1,1310,"Rexxar Containe"],[1,1325,"HybridWebView"]],[1310,1325],[1323,1323]]],[1511513732128,["gengmei_pxf@gengmei123.local",[[-1,1328,"Rexxar Container"],[1,1344,"HybridWebView"]],[1328,1344],[1341,1341]]],[1511513750568,["gengmei_pxf@gengmei123.local",[[-1,1323,"r"]],[1324,1324],[1323,1323]]],[1511513844068,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511513844068,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511513801324,["gengmei_pxf@gengmei123.local",[[-1,1254," Rexxar Route "]],[1254,1268],[1254,1254]]],[1511513805629,["gengmei_pxf@gengmei123.local",[[1,1254,"远程"]],[1254,1254],[1256,1256]]],[1511513810212,["gengmei_pxf@gengmei123.local",[[1,1258,"器"]],[1258,1258],[1259,1259]]],[1511513814026,["gengmei_pxf@gengmei123.local",[[-1,1259,"，"]],[1259,1260],[1259,1259]]],[1511513819819,["gengmei_pxf@gengmei123.local",[[-1,1269," "]],[1270,1270],[1269,1269]]],[1511513822220,["gengmei_pxf@gengmei123.local",[[1,1269," "]],[1269,1269],[1270,1270]]],[1511514024079,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511514024079,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511513969223,["gengmei_pxf@gengmei123.local",[[1,960,"资源管理"]],[960,960],[964,964]]],[1511513979359,["gengmei_pxf@gengmei123.local",[[1,960,"ResourceProxy负责"]],[960,960],[975,975]]],[1511513987880,["gengmei_pxf@gengmei123.local",[[1,979,"，"]],[979,979],[980,980]]],[1511514084064,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511514084064,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511514082412,["gengmei_pxf@gengmei123.local",[[1,980,"空闲时间去加载"]],[980,980],[987,987]]],[1511514144122,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511514144122,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511514088444,["gengmei_pxf@gengmei123.local",[[1,987,"html文件，"]],[987,987],[994,994]]],[1511514133427,["gengmei_pxf@gengmei123.local",[[-1,984,"去加"],[1,986,"下"]],[980,993],[992,992]]],[1511514444070,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511514444070,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511514431551,["gengmei_pxf@gengmei123.local",[[1,993,"然后换成"]],[993,993],[997,997]]],[1511514432197,["gengmei_pxf@gengmei123.local",[[-1,995,"换成"]],[997,997],[995,995]]],[1511514433959,["gengmei_pxf@gengmei123.local",[[1,995,"缓存"]],[995,995],[997,997]]],[1511514438133,["gengmei_pxf@gengmei123.local",[[-1,992,"，"]],[993,993],[992,992]]],[1511514439777,["gengmei_pxf@gengmei123.local",[[1,996,"，"]],[996,996],[997,997]]],[1511514504057,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511514504057,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511514498398,["gengmei_pxf@gengmei123.local",[[1,997,"读取预置到asset中资源"]],[997,997],[1010,1010]]],[1511514564055,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511514564055,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511514511293,["gengmei_pxf@gengmei123.local",[[1,1010,"，缓存中的资源"]],[1010,1010],[1017,1017]]],[1511514525017,["gengmei_pxf@gengmei123.local",[[-1,1008,"资源，"],[1,1011,"h"]],[1008,1011],[1008,1009]]],[1511514525470,["gengmei_pxf@gengmei123.local",[[1,1009,"e"]],[1008,1009],[1008,1010]]],[1511514525757,["gengmei_pxf@gengmei123.local",[[-1,1008,"he"],[1,1010,"和"]],[1008,1010],[1009,1009]]],[1511514539516,["gengmei_pxf@gengmei123.local",[[1,1015,"，请求线上资源等。"]],[1015,1015],[1024,1024]]],[1511514559315,["gengmei_pxf@gengmei123.local",[[1,1007,"文件"]],[1007,1007],[1009,1009]]],[1511514561768,["gengmei_pxf@gengmei123.local",[[-1,1009,"中"]],[1010,1010],[1009,1009]]],[1511514624055,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511514624055,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511514600440,["gengmei_pxf@gengmei123.local",[[-1,1035,"exxar R"]],[1034,1041],[1034,1034]]],[1511514609999,["gengmei_pxf@gengmei123.local",[[-1,1044,"exxar R"]],[1043,1050],[1043,1043]]],[1511514684059,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511514684059,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511514648157,["gengmei_pxf@gengmei123.local",[[-1,1049,"比较简单"]],[1049,1053],[1049,1049]]],[1511514651055,["gengmei_pxf@gengmei123.local",[[1,1049,"路由表"]],[1049,1049],[1052,1052]]],[1511514660093,["gengmei_pxf@gengmei123.local",[[-1,1053,"只需要表达一个路由表即可。"]],[1053,1066],[1053,1053]]],[1511514663405,["gengmei_pxf@gengmei123.local",[[-1,1074,"。"]],[1075,1075],[1074,1074]]],[1511514664312,["gengmei_pxf@gengmei123.local",[[1,1074,"，"]],[1074,1074],[1075,1075]]],[1511514744054,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511514744054,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511514717199,["gengmei_pxf@gengmei123.local",[[1,1075,"根据route地址，请求route * <p> * 返回route的原始内容"]],[1075,1075],[1113,1113]]],[1511514722803,["gengmei_pxf@gengmei123.local",[[-1,1092," * <p> * "]],[1092,1101],[1092,1092]]],[1511514725005,["gengmei_pxf@gengmei123.local",[[1,1092,"然后"]],[1092,1092],[1094,1094]]],[1511514727287,["gengmei_pxf@gengmei123.local",[[1,1106,"，"]],[1106,1106],[1107,1107]]],[1511514804053,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511514804053,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511514789714,["gengmei_pxf@gengmei123.local",[[1,1107,"管理Route科缓存"]],[1107,1107],[1117,1117]]],[1511514800081,["gengmei_pxf@gengmei123.local",[[-1,1114,"科"]],[1115,1115],[1114,1114]]],[1511514864053,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511514864053,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511514806251,["gengmei_pxf@gengmei123.local",[[1,1116,"Route列表，"]],[1116,1116],[1124,1124]]],[1511514811478,["gengmei_pxf@gengmei123.local",[[-1,1107,"管理Route"]],[1114,1114],[1107,1107]]],[1511514818793,["gengmei_pxf@gengmei123.local",[[1,1107,"通过"]],[1107,1107],[1109,1109]]],[1511514831106,["gengmei_pxf@gengmei123.local",[[1,1119,"配置Route 策略"]],[1119,1119],[1129,1129]]],[1511514833055,["gengmei_pxf@gengmei123.local",[[-1,1126," "]],[1127,1127],[1126,1126]]],[1511514834754,["gengmei_pxf@gengmei123.local",[[1,1128,"，"]],[1128,1128],[1129,1129]]],[1511514855342,["gengmei_pxf@gengmei123.local",[[-1,1128,"，"]],[1129,1129],[1128,1128]]],[1511514861727,["gengmei_pxf@gengmei123.local",[[1,1128,"等操作来管理"]],[1128,1128],[1134,1134]]],[1511514924053,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511514924053,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511514867609,["gengmei_pxf@gengmei123.local",[[1,1134,"Route。"]],[1134,1134],[1140,1140]]],[1511514984054,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511514984054,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511514978322,["gengmei_pxf@gengmei123.local",[[1,1141,"\n"]],[1140,1140],[1141,1141]]],[1511515164058,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511515164058,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511515143799,["gengmei_pxf@gengmei123.local",[[-1,1179,"rexxar"],[1,1185,"hybrid"],[-1,1191,"s"]],[1146,1196],[1195,1195]]],[1511515344058,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511515344059,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511515302862,["gengmei_pxf@gengmei123.local",[[-1,1517,"#### **Rexxar Container 的技术实现**\n\nRexxar Container 主要的工作是截获 Rexxar Web 的数据请求和原生功能请求。Rexxar Container 截获请求之后，做相应的反应。这种 Native 和 Web 的交互被抽象成三种接口:\n\n   * Decorator：修改数据请求。例如，数据请求加上 OAuth 认证信息。\n    \n   * Widget: 调用某些 Native UI 组件。例如，调起一个 Toast。\n    \n   * ContainerAPI：给 Web 一个 Native 的计算结果。例如，给出当前位置信息。\n\n这三种接口都是由 Rexxar Web 发起某种形式的 URL 调用的。Rexxar Web 的业务代码在 App 的 Rexxar Container 内工作方式，和在普通浏览器里差别不大。我们只是在 Web 技术的基础上做了一些拓展，保留了大部分 Web 原有的编写和运行方式。代码都是标准 Web 式的，没有为原生移动开发做太多定制。因此，移植到 Web 平台，在各种浏览器中，代码无需做太多修改就可以正确运行。以 URL 作为协议，也为 Web 和 Native 划定了清晰的边界和数据传递方式。\n\nRexxar在iOS 和 Android 各开发了一个 Rexxar Container。iOS 和 Android 平台截获请求的方式由于平台差异，并不完全相同。但本质上都是在 Web 和 Native 之间实现了一个 Proxy。Web 发出的请求会被 Proxy 预先处理。要么是修改后再发出去，要么是由 Rexxar Container 自己处理。\n\n具体的实现可以参看两个平台的项目代码。\n\n#### **Rexxar Container 需要实现的功能**\n\n* Rexxar Route 路由表的更新，已经在客户端的保存；\n\n* 为 Rexxar Web 前端代码发出的 API 请求提供包装。带上必要的 OAuth 参数；\n\n* 缓存 Rexxar Web 前端代码所需要的静态文件，包括 HTML、CSS、JavaScript、Image(图片素材)等；\n    \n* 缓存 Rexxar Web 中所需要加载的资源文件，例如图片等；\n    \n* 通过协议为 Rexxar Web 提供一些原生支持的功能：包括 Native UI 组件调用，获取 Native 的计算结果。\n\n####**Rexxar Container 和 Rexxar Web 之间的交互**\n\n混合开发实践中，都会涉及到 Native 和 Web 如何通信的问题。这是因为我们把一件事情交给两种技术完成，那么它们之间便会存在有一些通信和协调。在 Rexxar 中是通过从 Rexxar Web 发出 HTTP 请求的方式，由 Rexxar Container 截获的方式进行通信。Native 和 Web 之间协议是由 URL 定义的。Rexxar Web 访问某个特定的 URL, Rexxar Container 截获这些 URL 请求，调用 Native 代码完成相应的功能。\n\n例如，Rexxar 中 UI 相关的功能的协议如下：\n\n* 请求 douban://rexxar.douban.com/widget/nav_title，可以定义 Navigation Bar Title。\n    \n* 请求 douban://rexxar.douban.com/widget/nav_menu，可以定义 Navigation Bar Button。\n\n* 请求 douban://rexxar.douban.com/widget/toast，可以出现一个消息通知 toast。\n\nRexxar Web 具体前端实现是在 DOM 中加入一个 iframe 来加载此 URL，以来完成对 Rexxar Container 的通知。\n\n用 Rexxar 完成的页面，不仅仅在 App 内使用，还会在移动 Web 页面上使用。还有其他的移动站点，例如分享到外部（如微信，微博，QQ等）的页面希望复用 Rexxar 在 App 内的工作成果。这样 Native 和 Web 之间的通信是可定义的，可控的则需要我们将 Native 和 Web 的通信以协议的形式规范起来。一些协议在移动 Web 是被可以自动被忽略（比如，nav_title, nav_menu），或者用移动 Web 支持的形式再实现一次（比如，toast）。这样，Rexxar 中的前端业务代码无需太多改动，即可迁移到移动 Web 和桌面 Web 端。\n"]],[1517,3474],[1517,1517]]],[1511515303950,["gengmei_pxf@gengmei123.local",[[-1,1517,"\n"]],[1517,1517],[1516,1516]]],[1511515325577,["gengmei_pxf@gengmei123.local",[[-1,1519,"rexxar"],[1,1525,"Hybrid"]],[1519,1525],[1525,1525]]],[1511515333542,["gengmei_pxf@gengmei123.local",[[1,1550," "]],[1550,1550],[1551,1551]]],[1511515335248,["gengmei_pxf@gengmei123.local",[[-1,1553,"Rexxar"],[1,1559,"Hybrid"]],[1553,1559],[1559,1559]]],[1511515343576,["gengmei_pxf@gengmei123.local",[[-1,1683,"Rexxar"],[1,1689,"Hybrid"]],[1683,1689],[1689,1689]]],[1511515404040,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511515404040,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511515344903,["gengmei_pxf@gengmei123.local",[[-1,1760,"Rexxar"],[1,1766,"Hybrid"]],[1760,1766],[1766,1766]]],[1511517024022,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511517024022,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511516976261,["gengmei_pxf@gengmei123.local",[[1,1670,"%20%281%29"]],[1574,1674],[1684,1684]]],[1511517924006,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511517924006,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511517914323,["gengmei_pxf@gengmei123.local",[[-1,1914," Rexxar Route "]],[1914,1928],[1914,1914]]],[1511517983987,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511517983987,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511517924143,["gengmei_pxf@gengmei123.local",[[-1,2004," Rexxar Web "]],[2004,2016],[2004,2004]]],[1511517940242,["gengmei_pxf@gengmei123.local",[[-1,2018," Rexxar Container "],[1,2036,"HybridWebView"]],[2018,2036],[2031,2031]]],[1511517949394,["gengmei_pxf@gengmei123.local",[[-1,2052,"Container"],[1,2061,"HybridWebView"]],[2052,2061],[2065,2065]]],[1511517957298,["gengmei_pxf@gengmei123.local",[[-1,2083,"Rexxar Container "],[1,2100,"HybridWebView"]],[2083,2100],[2096,2096]]],[1511518043987,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511518043987,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511517991278,["gengmei_pxf@gengmei123.local",[[-1,2134,".Rexxar Web "]],[2134,2146],[2134,2134]]],[1511517993280,["gengmei_pxf@gengmei123.local",[[-1,2140,"Container"],[1,2149,"HybridWebView"]],[2140,2149],[2153,2153]]],[1511517996167,["gengmei_pxf@gengmei123.local",[[-1,2153," "]],[2154,2154],[2153,2153]]],[1511517998399,["gengmei_pxf@gengmei123.local",[[-1,2139," "]],[2140,2140],[2139,2139]]],[1511518004768,["gengmei_pxf@gengmei123.local",[[-1,2168,"Rexxar Container "],[1,2185,"HybridWebView"]],[2168,2185],[2181,2181]]],[1511518103986,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511518103986,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511518051641,["gengmei_pxf@gengmei123.local",[[-1,2188,"为 API 请求添加 OAuth 验证"],[1,2207,"WebView的Cookie的同步，WebView加载状态监听回调的处理，页面load完成后数据的获取和所需要传递的参数等"]],[2188,2207],[2249,2249]]],[1511518058052,["gengmei_pxf@gengmei123.local",[[-1,2249,"，或增加某些参数"]],[2249,2257],[2249,2249]]],[1511518064308,["gengmei_pxf@gengmei123.local",[[-1,2256,"Rexxar Web "]],[2256,2267],[2256,2256]]],[1511518072619,["gengmei_pxf@gengmei123.local",[[-1,2314,"Rexxar Web "]],[2314,2325],[2314,2314]]],[1511518086883,["gengmei_pxf@gengmei123.local",[[-1,2327,"修改 NavigationBar 等原生界面，可能通过定义好的协议请求 URL： douban://rexxar.douban.com"]],[2327,2394],[2327,2327]]],[1511518090380,["gengmei_pxf@gengmei123.local",[[1,2327,"与"]],[2327,2327],[2328,2328]]],[1511518098432,["gengmei_pxf@gengmei123.local",[[-1,2327,"与"]],[2328,2328],[2327,2327]]],[1511518102461,["gengmei_pxf@gengmei123.local",[[1,2327,"修改 NavigationBar 等原生界面，可能通过定义好的协议请求 URL： douban://rexxar.douban.com"]],[2327,2327],[2327,2394]]],[1511518163987,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511518163987,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511518126918,["gengmei_pxf@gengmei123.local",[[-1,2330,"Naviga"],[-1,2337,"ionBar"]],[2330,2343],[2330,2331]]],[1511518127132,["gengmei_pxf@gengmei123.local",[[1,2331,"i"]],[2330,2331],[2330,2332]]],[1511518127295,["gengmei_pxf@gengmei123.local",[[1,2332,"'t"]],[2330,2332],[2330,2334]]],[1511518127778,["gengmei_pxf@gengmei123.local",[[-1,2332,"'"],[1,2334,"l"]],[2330,2334],[2330,2334]]],[1511518128019,["gengmei_pxf@gengmei123.local",[[1,2334,"e"]],[2330,2334],[2330,2335]]],[1511518128747,["gengmei_pxf@gengmei123.local",[[1,2335,"B"]],[2330,2335],[2330,2336]]],[1511518128990,["gengmei_pxf@gengmei123.local",[[1,2336,"a"]],[2330,2336],[2330,2337]]],[1511518129263,["gengmei_pxf@gengmei123.local",[[1,2337,"r"]],[2330,2337],[2330,2338]]],[1511518344000,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511518344000,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511518318850,["gengmei_pxf@gengmei123.local",[[-1,2355,"请求 URL： douban://rexxar.douban.com"]],[2355,2389],[2355,2355]]],[1511518323917,["gengmei_pxf@gengmei123.local",[[1,2355,"进行交互"]],[2355,2355],[2359,2359]]],[1511518403985,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511518403985,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511518350684,["gengmei_pxf@gengmei123.local",[[-1,2366,"Rexxar Container 拦截请求"],[1,2387,"前端代码继续执行"]],[2366,2387],[2374,2374]]],[1511518523993,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511518523993,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511518479534,["gengmei_pxf@gengmei123.local",[[-1,2357,"交互"]],[2359,2359],[2357,2357]]],[1511518483686,["gengmei_pxf@gengmei123.local",[[1,2357,"调用"]],[2357,2357],[2359,2359]]],[1511518643992,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511518643992,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511518642639,["gengmei_pxf@gengmei123.local",[[-1,2345,"可能"]],[2347,2347],[2345,2345]]],[1511518703980,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511518703980,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511518644624,["gengmei_pxf@gengmei123.local",[[1,2345,"可以"]],[2345,2345],[2347,2347]]],[1511518648089,["gengmei_pxf@gengmei123.local",[[1,2359,"，"]],[2359,2359],[2360,2360]]],[1511518943987,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511518943987,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511518910801,["gengmei_pxf@gengmei123.local",[[-1,2323,"如果需要修改 titleBar 等原生界面，可以通过定义好的协议进行调用"],[1,2359,"js和native的加护"]],[2323,2359],[2335,2335]]],[1511518911669,["gengmei_pxf@gengmei123.local",[[-1,2333,"加护"]],[2335,2335],[2333,2333]]],[1511518917071,["gengmei_pxf@gengmei123.local",[[1,2333,"交互"]],[2333,2333],[2335,2335]]],[1511518921158,["gengmei_pxf@gengmei123.local",[[-1,2339,"* 6.前端代码继续执行，按定义好的协议作出反应。例如，修改 NavigationBar 上的按钮。如果需要，会向 Rexxar Web 回调约定好的 Javascript 函数。\n"]],[2338,2429],[2338,2338]]],[1511518921678,["gengmei_pxf@gengmei123.local",[[-1,2339,"\n"]],[2338,2338],[2337,2337]]],[1511518922949,["gengmei_pxf@gengmei123.local",[[-1,2335,"，；"]],[2337,2337],[2335,2335]]],[1511518923703,["gengmei_pxf@gengmei123.local",[[1,2335,"；"]],[2335,2335],[2336,2336]]],[1511519123985,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511519123985,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511519064875,["gengmei_pxf@gengmei123.local",[[-1,2339,"rexxar"],[1,2345,"Hybrid"]],[2339,2345],[2345,2345]]],[1511519068322,["gengmei_pxf@gengmei123.local",[[1,2339," "]],[2339,2339],[2340,2340]]],[1511519074441,["gengmei_pxf@gengmei123.local",[[1,1768," "]],[1768,1768],[1769,1769]]],[1511519075642,["gengmei_pxf@gengmei123.local",[[1,1691," "]],[1691,1691],[1692,1692]]],[1511519118105,["gengmei_pxf@gengmei123.local",[[-1,1809,"douban"],[1,1815,"http"],[-1,1818,"dou"],[1,1823,"cke"],[1,1824,"d.igengmei"],[-1,1829,"rexxar_demo"],[1,1840,"hybrid/topic_reply/19227490"]],[1809,1840],[1864,1864]]],[1511519183971,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511519183971,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511519170271,["gengmei_pxf@gengmei123.local",[[1,2160,"。"]],[2160,2160],[2161,2161]]],[1511519171692,["gengmei_pxf@gengmei123.local",[[-1,2160,"。"]],[2161,2161],[2160,2160]]],[1511519172422,["gengmei_pxf@gengmei123.local",[[1,2160,"."]],[2160,2160],[2161,2161]]],[1511521583941,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511521583941,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511521545936,["gengmei_pxf@gengmei123.local",[[-1,2380,"### 安装\n\n#### gradle\n\n```groovy\n   compile 'com.douban.rexxar:core:0.3.5.3'\n```\n\n"]],[2380,2460],[2380,2380]]],[1511521546527,["gengmei_pxf@gengmei123.local",[[-1,2380,"\n"]],[2380,2380],[2379,2379]]],[1511521673537,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511521673537,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511521660762,["gengmei_pxf@gengmei123.local",[[1,2439,"/**\n * 配置HybridWebView */  private void initHybridWebView(Context context) {\n        "],[-1,2446,"initialize("],[1,2457,"setConfig(new Rexxar.Config().\n                        setContext(context).\n                        setAsyncLoadRoute(true).\n                        setOkHttpClient(new OkHttpClient().newBuilder()\n                                .retryOnConnectionFailure(true)\n//                .addNetworkInterceptor(new AuthInterceptor())\n  .build()).\n                        setRouteConfig(new RouteManager.Route"],[1,2460,"fig(\"h"],[1,2461,"tps://raw.githubus"],[1,2462,"rcontent.com/p"],[1,2463,"file/Hybird/mas"],[1,2464,"er/routes/routes.json\")).\n  "],[1,2465,"                     setUserAgent("],[-1,2467,"ntext"],[1,2472,"m.wanmeizhensuo.zhensuo.common.webview.core.Constants.USER_AGENT).\n                        setWindowClient(com.wanmeizhensuo.zhensuo.common.webview.core.Constants.WINDOW_CLIENT).\n                        setProtocolName(com.wanmeizhensuo.zhensuo.common.webview.core.Constants.PROTOCOL_NAME)\n        "],[1,2474,"\n  }"]],[2439,2474],[3359,3359]]],[1511521733535,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511521733535,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511521684143,["gengmei_pxf@gengmei123.local",[[-1,2439,"/**\n * 配置HybridWebView */  private void initHybridWebView(Context context) {\n        "],[1,2531,"initialize("],[-1,2531,"setConfig(new Rexxar.Config().\n                        setContext(context).\n                        setAsyncLoadRoute(true).\n                        setOkHttpClient(new OkHttpClient().newBuilder()\n                                .retryOnConnectionFailure(true)\n//                .addNetworkInterceptor(new AuthInterceptor())\n  .build()).\n                        setRouteConfig(new RouteManager.Route"],[-1,2933,"fig(\"h"],[-1,2940,"tps://raw.githubus"],[-1,2959,"rcontent.com/p"],[-1,2974,"file/Hybird/mas"],[-1,2990,"er/routes/routes.json\")).\n  "],[-1,3019,"                     setUserAgent("],[1,3055,"ntext"],[-1,3055,"m.wanmeizhensuo.zhensuo.common.webview.core.Constants.USER_AGENT).\n                        setWindowClient(com.wanmeizhensuo.zhensuo.common.webview.core.Constants.WINDOW_CLIENT).\n                        setProtocolName(com.wanmeizhensuo.zhensuo.common.webview.core.Constants.PROTOCOL_NAME)\n        "],[-1,3355,"\n  }"]],[3359,3359],[2439,2474]]],[1511522093553,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511522093553,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511522079897,["gengmei_pxf@gengmei123.local",[[-1,2429,"```Java\n  Rexxar.initialize(Context context);\n```"]],[2429,2478],[2429,2429]]],[1511522084334,["gengmei_pxf@gengmei123.local",[[1,2429,"![]*"]],[2429,2429],[2433,2433]]],[1511522085123,["gengmei_pxf@gengmei123.local",[[-1,2432,"*"]],[2433,2433],[2432,2432]]],[1511522085895,["gengmei_pxf@gengmei123.local",[[1,2432,"()"]],[2432,2432],[2434,2434]]],[1511522149767,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511522149767,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511522097772,["gengmei_pxf@gengmei123.local",[[1,2433,"http://ou21vt4uz.bkt.clouddn.com/Rexxar_init.png"]],[2433,2433],[2481,2481]]],[1511522292457,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511522292457,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511522271809,["gengmei_pxf@gengmei123.local",[[1,2484,"\n"]],[2482,2482],[2483,2483]]],[1511522272239,["gengmei_pxf@gengmei123.local",[[1,2485,"\n"]],[2483,2483],[2484,2484]]],[1511522285221,["gengmei_pxf@gengmei123.local",[[1,2485,"![Rexxar_init]($res/Rexxar_init.png)\n\n"]],[2484,2484],[2522,2522]]],[1511522352454,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511522352454,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511522344036,["gengmei_pxf@gengmei123.local",[[-1,2485,"![Rexxar_init]($res/Rexxar_init.png)\n\n"]],[2522,2522],[2484,2484]]],[1511522344434,["gengmei_pxf@gengmei123.local",[[-1,2485,"\n"]],[2484,2484],[2483,2483]]],[1511522344797,["gengmei_pxf@gengmei123.local",[[-1,2484,"\n"]],[2483,2483],[2482,2482]]],[1511522345236,["gengmei_pxf@gengmei123.local",[[-1,2433,"http://ou21vt4uz.bkt.clouddn.com/Rexxar_init.png"]],[2481,2481],[2433,2433]]],[1511522345803,["gengmei_pxf@gengmei123.local",[[-1,2432,"()"]],[2434,2434],[2432,2432]]],[1511522346213,["gengmei_pxf@gengmei123.local",[[1,2432,"*"]],[2432,2432],[2433,2433]]],[1511522346628,["gengmei_pxf@gengmei123.local",[[-1,2429,"![]*"]],[2433,2433],[2429,2429]]],[1511522347014,["gengmei_pxf@gengmei123.local",[[1,2429,"```Java\n  Rexxar.initialize(Context context);\n```"]],[2429,2429],[2429,2478]]],[1511522350070,["gengmei_pxf@gengmei123.local",[[1,2439,"/**\n * 配置HybridWebView */  private void initHybridWebView(Context context) {\n        "],[-1,2446,"initialize("],[1,2457,"setConfig(new Rexxar.Config().\n                        setContext(context).\n                        setAsyncLoadRoute(true).\n                        setOkHttpClient(new OkHttpClient().newBuilder()\n                                .retryOnConnectionFailure(true)\n//                .addNetworkInterceptor(new AuthInterceptor())\n  .build()).\n                        setRouteConfig(new RouteManager.Route"],[1,2460,"fig(\"h"],[1,2461,"tps://raw.githubus"],[1,2462,"rcontent.com/p"],[1,2463,"file/Hybird/mas"],[1,2464,"er/routes/routes.json\")).\n  "],[1,2465,"                     setUserAgent("],[-1,2467,"ntext"],[1,2472,"m.wanmeizhensuo.zhensuo.common.webview.core.Constants.USER_AGENT).\n                        setWindowClient(com.wanmeizhensuo.zhensuo.common.webview.core.Constants.WINDOW_CLIENT).\n                        setProtocolName(com.wanmeizhensuo.zhensuo.common.webview.core.Constants.PROTOCOL_NAME)\n        "],[1,2474,"\n  }"]],[2439,2474],[3359,3359]]],[1511522412456,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511522412456,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511522365128,["gengmei_pxf@gengmei123.local",[[-1,3002,"u"]],[3003,3003],[3002,3002]]],[1511522369331,["gengmei_pxf@gengmei123.local",[[1,3002,"u"]],[3002,3002],[3003,3003]]],[1511522370146,["gengmei_pxf@gengmei123.local",[[-1,2439,"/**\n * 配置HybridWebView */  private void initHybridWebView(Context context) {\n        "],[1,2531,"initialize("],[-1,2531,"setConfig(new Rexxar.Config().\n                        setContext(context).\n                        setAsyncLoadRoute(true).\n                        setOkHttpClient(new OkHttpClient().newBuilder()\n                                .retryOnConnectionFailure(true)\n//                .addNetworkInterceptor(new AuthInterceptor())\n  .build()).\n                        setRouteConfig(new RouteManager.Route"],[-1,2933,"fig(\"h"],[-1,2940,"tps://raw.githubus"],[-1,2959,"rcontent.com/p"],[-1,2974,"file/Hybird/mas"],[-1,2990,"er/routes/routes.json\")).\n  "],[-1,3019,"                     setUserAgent("],[1,3055,"ntext"],[-1,3055,"m.wanmeizhensuo.zhensuo.common.webview.core.Constants.USER_AGENT).\n                        setWindowClient(com.wanmeizhensuo.zhensuo.common.webview.core.Constants.WINDOW_CLIENT).\n                        setProtocolName(com.wanmeizhensuo.zhensuo.common.webview.core.Constants.PROTOCOL_NAME)\n        "],[-1,3355,"\n  }"]],[3359,3359],[2439,2474]]],[1511522373965,["gengmei_pxf@gengmei123.local",[[1,2439,"/**\n * 配置HybridWebView */  private void initHybridWebView(Context context) {\n        "],[-1,2446,"initialize("],[1,2457,"setConfig(new Rexxar.Config().\n                        setContext(context).\n                        setAsyncLoadRoute(true).\n                        setOkHttpClient(new OkHttpClient().newBuilder()\n                                .retryOnConnectionFailure(true)\n//                .addNetworkInterceptor(new AuthInterceptor())\n  .build()).\n                        setRouteConfig(new RouteManager.Route"],[1,2460,"fig(\"h"],[1,2461,"tps://raw.githubus"],[1,2462,"rcontent.com/p"],[1,2463,"file/Hybird/mas"],[1,2464,"er/routes/routes.json\")).\n  "],[1,2465,"                     setUserAgent("],[-1,2467,"ntext"],[1,2472,"m.wanmeizhensuo.zhensuo.common.webview.core.Constants.USER_AGENT).\n                        setWindowClient(com.wanmeizhensuo.zhensuo.common.webview.core.Constants.WINDOW_CLIENT).\n                        setProtocolName(com.wanmeizhensuo.zhensuo.common.webview.core.Constants.PROTOCOL_NAME)\n        "],[1,2474,"\n  }"]],[2439,2474],[3359,3359]]],[1511522472450,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511522472450,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511522454381,["gengmei_pxf@gengmei123.local",[[-1,3032,"        "]],[3040,3040],[3032,3032]]],[1511522456069,["gengmei_pxf@gengmei123.local",[[-1,3015,"\n"]],[3016,3016],[3015,3015]]],[1511522462365,["gengmei_pxf@gengmei123.local",[[-1,3113,"            "]],[3125,3125],[3113,3113]]],[1511522462668,["gengmei_pxf@gengmei123.local",[[-1,3112,"\n"]],[3113,3113],[3112,3112]]],[1511522466893,["gengmei_pxf@gengmei123.local",[[-1,3235," "]],[3213,3213],[3212,3212]]],[1511522467301,["gengmei_pxf@gengmei123.local",[[-1,3211,"\n"]],[3212,3212],[3211,3211]]],[1511522472092,["gengmei_pxf@gengmei123.local",[[-1,3321,"        "]],[3329,3329],[3321,3321]]],[1511522488928,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511522488928,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511522472568,["gengmei_pxf@gengmei123.local",[[-1,3320,"\n"]],[3321,3321],[3320,3320]]],[1511522476028,["gengmei_pxf@gengmei123.local",[[-1,3323,"  "]],[3325,3325],[3323,3323]]],[1511522476412,["gengmei_pxf@gengmei123.local",[[-1,3322,"\n"]],[3323,3323],[3322,3322]]],[1511522485484,["gengmei_pxf@gengmei123.local",[[-1,2869,"                        "]],[2893,2893],[2869,2869]]],[1511522485884,["gengmei_pxf@gengmei123.local",[[-1,2868,"\n"]],[2869,2869],[2868,2868]]],[1511522577823,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511522577823,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511522555683,["gengmei_pxf@gengmei123.local",[[1,3302,"![]"]],[3302,3302],[3305,3305]]],[1511522557833,["gengmei_pxf@gengmei123.local",[[-1,3302,"![]"]],[3305,3305],[3302,3302]]],[1511522558271,["gengmei_pxf@gengmei123.local",[[1,2868,"\n"]],[2868,2868],[2869,2869]]],[1511522571612,["gengmei_pxf@gengmei123.local",[[1,3305,"![Rexxar_init 2]($res/Rexxar_init%202.png)\n\n"]],[3304,3304],[3348,3348]]],[1511522637824,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511522637824,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511522613307,["gengmei_pxf@gengmei123.local",[[-1,3305,"![Rexxar_init 2]($res/Rexxar_init%202.png)\n\n"]],[3348,3348],[3304,3304]]],[1511522613803,["gengmei_pxf@gengmei123.local",[[1,2869,"                        "]],[2869,2869],[2893,2893]]],[1511522669237,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511522669237,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511522642530,["gengmei_pxf@gengmei123.local",[[-1,3435,"douban/rexxar-web"],[1,3452,"pxfile/Hybird"],[1,3460,"rout"],[-1,3461,"xample/di"],[-1,3471,"t"]],[3361,3487],[3477,3477]]],[1511522658531,["gengmei_pxf@gengmei123.local",[[-1,3625,"Sun"],[1,3628,"Thu"],[-1,3633,"Oct"],[1,3636,"Nov"],[-1,3640,"6 05:54:22"],[1,3650,"7 03:11:15"],[-1,3657,"    "],[-1,3713,"douban/rexxar-web"],[1,3730,"pxfile/Hybird"],[-1,3738,"example/dist/rexxar/demo-252452ae58"],[1,3773,"polygon"],[-1,3783,"    "],[-1,3795,"douban"],[1,3801,"http"],[-1,3804,"dou"],[1,3809,"cke"],[1,3810,"d.igengmei"],[-1,3815,"rexxar_demo"],[1,3826,"hybrid/topic_reply/19227490"],[-1,3834,"  "],[-1,3894,"Sun"],[1,3897,"Thu"],[-1,3902,"Oct"],[1,3905,"Nov"],[-1,3909,"6 05:54:22"],[1,3919,"7 03:11:15"],[-1,3926,"    "],[-1,3982,"douban/rexxar-web"],[1,3999,"pxfile/Hybird"],[-1,4007,"example/dist/rexxar/demo-252452ae58"],[1,4042,"polygon"],[-1,4052,"    "],[-1,4064,"douban"],[1,4070,"http"],[-1,4073,"partial.dou"],[1,4086,"cke"],[1,4087,"d.igengmei"],[-1,4092,"rexxar_demo"],[1,4103,"hybrid/topic_reply/19227490"],[-1,4109,"  "],[-1,4138,"Sun"],[1,4141,"Thu"],[-1,4146,"Oct"],[1,4149,"Nov"],[-1,4153,"6 05:54:22"],[1,4163,"7 03:11:15"],[-1,4168,"\n"],[1,4169," "]],[3582,4170],[4126,4126]]],[1511522725097,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511522725097,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511522679733,["gengmei_pxf@gengmei123.local",[[1,3659,"\t\t"]],[3659,3659],[3661,3661]]],[1511522682017,["gengmei_pxf@gengmei123.local",[[-1,3659,"\t\t"]],[3661,3661],[3659,3659]]],[1511522684967,["gengmei_pxf@gengmei123.local",[[1,3659,"    "]],[3659,3659],[3663,3663]]],[1511522687691,["gengmei_pxf@gengmei123.local",[[1,3751,"    "]],[3751,3751],[3755,3755]]],[1511522690767,["gengmei_pxf@gengmei123.local",[[1,3918,"    "]],[3918,3918],[3922,3922]]],[1511522694070,["gengmei_pxf@gengmei123.local",[[1,4010,"    "]],[4009,4009],[4013,4013]]],[1511522698278,["gengmei_pxf@gengmei123.local",[[1,4085,"  "]],[4085,4085],[4087,4087]]],[1511522702164,["gengmei_pxf@gengmei123.local",[[1,3828,"  "]],[3828,3828],[3830,3830]]],[1511522785098,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511522785098,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511522765645,["gengmei_pxf@gengmei123.local",[[-1,3483,"Rexxar"],[1,3489,"Hybrid"]],[3483,3489],[3489,3489]]],[1511522770893,["gengmei_pxf@gengmei123.local",[[-1,4254,"Rexxar"],[1,4260,"Hybrid"]],[4254,4260],[4260,4260]]],[1511522782956,["gengmei_pxf@gengmei123.local",[[-1,4254,"Hybrid"],[1,4260,"Rexxar"]],[4254,4260],[4260,4260]]],[1511522845098,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511522845098,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511522804522,["gengmei_pxf@gengmei123.local",[[-1,7,"Hybrid"],[1,13,"Rexxar"]],[7,13],[7,13]]],[1511522805253,["gengmei_pxf@gengmei123.local",[[-1,638,"Hybrid"],[1,644,"Rexxar"]],[638,644],[638,644]]],[1511522805916,["gengmei_pxf@gengmei123.local",[[-1,649,"Hybrid"],[1,655,"Rexxar"]],[649,655],[649,655]]],[1511522806765,["gengmei_pxf@gengmei123.local",[[-1,705,"Hybrid"],[1,711,"Rexxar"]],[705,711],[705,711]]],[1511522807595,["gengmei_pxf@gengmei123.local",[[-1,1519,"Hybrid"],[1,1525,"Rexxar"]],[1519,1525],[1519,1525]]],[1511522808067,["gengmei_pxf@gengmei123.local",[[-1,1553,"Hybrid"],[1,1559,"Rexxar"]],[1553,1559],[1553,1559]]],[1511522808515,["gengmei_pxf@gengmei123.local",[[-1,1694,"Hybrid"],[1,1700,"Rexxar"]],[1694,1700],[1694,1700]]],[1511522808957,["gengmei_pxf@gengmei123.local",[[-1,1772,"Hybrid"],[1,1778,"Rexxar"]],[1772,1778],[1772,1778]]],[1511522809820,["gengmei_pxf@gengmei123.local",[[-1,2367,"Hybrid"],[1,2373,"Rexxar"]],[2367,2373],[2367,2373]]],[1511522810653,["gengmei_pxf@gengmei123.local",[[-1,3483,"Hybrid"],[1,3489,"Rexxar"]],[3483,3489],[3483,3489]]],[1511522811730,["gengmei_pxf@gengmei123.local",[[-1,9260,"Hybrid"],[1,9266,"Rexxar"]],[9260,9266],[9260,9266]]],[1511522812422,["gengmei_pxf@gengmei123.local",[[-1,9312,"Hybrid"],[1,9318,"Rexxar"]],[9312,9318],[9312,9318]]],[1511522905101,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511522905101,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511522890679,["gengmei_pxf@gengmei123.local",[[-1,4557,"Rexxar"],[1,4563,"Hybrid"]],[4557,4570],[4570,4570]]],[1511522892271,["gengmei_pxf@gengmei123.local",[[-1,4578,"Rexxar"],[1,4584,"Hybrid"]],[4578,4591],[4591,4591]]],[1511522896824,["gengmei_pxf@gengmei123.local",[[-1,4613,"Rexxar"],[1,4619,"Hybrid"]],[4613,4626],[4626,4626]]],[1511522900175,["gengmei_pxf@gengmei123.local",[[-1,4651,"Rexxar"],[1,4657,"Hybrid"]],[4651,4664],[4664,4664]]],[1511522965096,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511522965096,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511522907600,["gengmei_pxf@gengmei123.local",[[-1,4731,"Rexxar Container "],[1,4748,"HybridWebView"]],[4731,4748],[4744,4744]]],[1511522932359,["gengmei_pxf@gengmei123.local",[[-1,4839,"douban"],[1,4845,"http"],[-1,4848,"dou"],[1,4853,"cke"],[1,4854,"d.igengmei"],[-1,4859,"rexxar_demo"],[1,4870,"hybrid/topic_reply/19227490"]],[4839,4870],[4894,4894]]],[1511522950212,["gengmei_pxf@gengmei123.local",[[-1,4903,"## 定制你自己的 Rexxar Container\n\n我们暴露了三类接口。供开发者更方便地扩展属于自己的特定功能实现。\n\n### 定制 RexxarWidget\n\nRexxar Container 提供了一些原生 UI 组件，供 Rexxar Web 使用。RexxarWidget 是一个 Java 协议（Protocol）。该协议是对这类原生 UI 组件的抽象。如果，你需要实现某些原生 UI 组件，例如，弹出一个 Toast，或者添加原生效果的下拉刷新，你就可以实现一个符合 RexxarWidget 协议的类，并实现以下方法：`getPath:`, `handle:`。\n\n在 Demo 中可以找到一个例子：`TitleWidget` ，通过它可以设置导航栏的标题文字。\n\n```Java\n\n    public class TitleWidget implements RexxarWidget {\n\n    static final String KEY_TITLE = \"title\";\n\n    @Override\n    public String getPath() {\n        return \"/widget/nav_title\";\n    }\n\n    @Override\n    public boolean handle(WebView view, String url) {\n        if (TextUtils.isEmpty(url)) {\n            return false;\n        }\n        Uri uri = Uri.parse(url);\n        if (TextUtils.equals(uri.getPath(), getPath())) {\n            String title = uri.getQueryParameter(KEY_TITLE);\n            if (null != view && view.getContext() instanceof Activity) {\n                ((Activity)view.getContext()).setTitle(Uri.decode(title));\n            }\n            return true;\n        }\n        return false;\n    }\n}\n```\n\n### 定制 RexxarContainerAPI\n\n我们常常需要在 Rexxar Container 和 Rexxar Web 之间做数据交互。比如 Rexxar Container 可以为 Rexxar Web 提供一些计算结果。如果你需要提供一些由原生代码计算的数据给 Rexxar Web 使用，你就可以选择实现 RexxarContainerAPI 协议（Protocol），并实现以下三个方法：`getPath:`, `call:`。\n\n在 Demo 中可以找到一个例子：`LocationAPI`。这个例子中，`LocationAPI` 返回了设备所在城市信息。当然，这个 ContainerAPI 仅仅是一个示例，它提供的是一个假数据，数据永远不会变化。你当然可以遵守 `RexxarContainerAPI` 协议，实现一个类似的但是数据是真实的功能。\n\n```Java\n\n    static class LocationAPI implements RexxarContainerAPI {\n\n        @Override\n        public String getPath() {\n            return \"/loc\";\n        }\n\n        @Override\n        public Response call(Request request) {\n            Response.Builder responseBuilder = newResponseBuilder(request);\n            try {\n                JSONObject jsonObject = new JSONObject();\n                jsonObject.put(\"lat\", \"0.0\");\n                jsonObject.put(\"lng\", \"0.0\");\n                responseBuilder.body(ResponseBody.create(MediaType.parse(Constants.MIME_TYPE_JSON), jsonObject.toString()));\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            return responseBuilder.build();\n        }\n    }\n```\n\n\n### 定制 Rexxar Decorator\n\n如果你需要修改运行在 Rexxar Container 中的 Rexxar Web 所发出的请求。例如，在 http 头中添加登录信息，你可以自定义OkHttpClient，`Rexxar.setOkHttpClient(OkHttpClient okHttpClient)`\n\n在 Demo 中可以找到一个例子：`AuthInterceptor`。这个例子为 Rexxar Web 发出的请求添加了登录信息。\n\n```Java\n\n    public class AuthInterceptor implements Interceptor{\n\n        @Override\n        public Response intercept(Chain chain) throws IOException {\n            Request request = chain.request();\n\n            String url = request.url().toString();\n            if (TextUtils.isEmpty(url)) {\n                return null;\n            }\n\n            Request.Builder builder = request.newBuilder();\n            builder.header(\"Authorization\", \"123456789\");\n            return chain.proceed(builder.build());\n        }\n    }\n\n    // Rexxar初始化时设置\n    Rexxar.setOkHttpClient(new OkHttpClient().newBuilder()\n            .retryOnConnectionFailure(true)\n            .addNetworkInterceptor(new AuthInterceptor())\n            .build());\n```\n\n## 高级使用\n\n### native调用js方法\n\n```\n\n    // 方法名\n    RexxarWebView.callFunction(String functionName)\n    \n    // 方法名和json数据\n    RexxarWebView.callFunction(String functionName, String jsonString)\n    \n```\n  \n## Partial RexxarWebView\n\n如果，你发现一个页面无法全部使用 Rexxar 实现。你可以在一个原生页面内内嵌一个 `RexxarWebView`，部分功能使用原生实现，另一部分功能使用 Rexxar 实现。\n\n\nDemo 中的给出了一个示例。\n\n```\n mRexxarWebView.loadPartialUri(\"douban://douban.com/rexxar_demo\");\n```\n"]],[4903,8482],[4903,4903]]],[1511522951189,["gengmei_pxf@gengmei123.local",[[-1,4903,"\n"]],[4903,4903],[4902,4902]]],[1511522952827,["gengmei_pxf@gengmei123.local",[[-1,4902,"\n"]],[4902,4902],[4901,4901]]],[1511522956998,["gengmei_pxf@gengmei123.local",[[1,4903," "]],[4903,4903],[4904,4904]]],[1511522964757,["gengmei_pxf@gengmei123.local",[[1,7309," "]],[7309,7309],[7310,7310]]],[1511523003066,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511523003066,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511522967511,["gengmei_pxf@gengmei123.local",[[1,6850," "]],[6850,6850],[6851,6851]]],[1511522972301,["gengmei_pxf@gengmei123.local",[[1,5613," "]],[5613,5613],[5614,5614]]],[1511523183076,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511523183076,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511523137191,["gengmei_pxf@gengmei123.local",[[1,3482,"![]()"]],[3482,3482],[3487,3487]]],[1511523156142,["gengmei_pxf@gengmei123.local",[[1,3486,"http://ou21vt4uz.bkt.clouddn.com/Rexxar_route.png"]],[3486,3486],[3535,3535]]],[1511523180713,["gengmei_pxf@gengmei123.local",[[1,3627,"\n"]],[3625,3625],[3626,3626]]],[1511523181357,["gengmei_pxf@gengmei123.local",[[1,3626,"![](http://ou21vt4uz.bkt.clouddn.com/hybrid_route.png)"]],[3626,3626],[3680,3680]]],[1511523182914,["gengmei_pxf@gengmei123.local",[[1,3626,"\n"]],[3625,3625],[3626,3626]]],[1511523243063,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511523243063,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511523191357,["gengmei_pxf@gengmei123.local",[[1,4363,"![]()"]],[4363,4363],[4368,4368]]],[1511523192049,["gengmei_pxf@gengmei123.local",[[1,4369,"\n"]],[4368,4368],[4369,4369]]],[1511523208029,["gengmei_pxf@gengmei123.local",[[1,4367,"http://ou21vt4uz.bkt.clouddn.com/Rexxar_host.png"]],[4367,4367],[4415,4415]]],[1511523218281,["gengmei_pxf@gengmei123.local",[[-1,4290,"```Java\n  ResourceProxy.getInstance().addProxyHosts(List<>() hosts);\n```"]],[4290,4362],[4290,4290]]],[1511523218778,["gengmei_pxf@gengmei123.local",[[-1,4290,"\n"]],[4290,4290],[4289,4289]]],[1511523228873,["gengmei_pxf@gengmei123.local",[[-1,3683,"```json\n\n{\n  \"items\": [\n    {\n      \"deploy_time\": \"Thu, 09 Nov 2017 03:11:15 GMT\",\n      \"remote_file\": \"https://raw.githubusercontent.com/pxfile/Hybird/master/polygon.html\",\n      \"uri\": \"http://backend.igengmei.com/hybrid/topic_reply/19227490[/]?.*\"\n    }\n  ],\n  \"partial_items\": [\n    {\n      \"deploy_time\": \"Thu, 09 Nov 2017 03:11:15 GMT\",\n      \"remote_file\": \"https://raw.githubusercontent.com/pxfile/Hybird/master/polygon.html\",\n      \"uri\": \"http://backend.igengmei.com/hybrid/topic_reply/19227490/_.*\"\n    }\n  ],\n  \"deploy_time\": \"Thu, 09 Nov 2017 03:11:15 GMT\" }\n\n\n```\n"]],[3682,4262],[3682,3682]]],[1511523229689,["gengmei_pxf@gengmei123.local",[[-1,3683,"\n"]],[3682,3682],[3681,3681]]],[1511523241840,["gengmei_pxf@gengmei123.local",[[-1,3351,"```Java\n  RouteManager.getInstance().setRouteApi(\"https://raw.githubusercontent.com/pxfile/Hybird/master/routes/routes.json\");\n```"]],[3351,3481],[3351,3351]]],[1511523242320,["gengmei_pxf@gengmei123.local",[[-1,3351,"\n"]],[3351,3351],[3350,3350]]],[1511523303064,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511523303064,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511523244720,["gengmei_pxf@gengmei123.local",[[1,3406,"\n"]],[3405,3405],[3406,3406]]],[1511523251450,["gengmei_pxf@gengmei123.local",[[1,4281,"!"]],[4281,4281],[4282,4282]]],[1511523252785,["gengmei_pxf@gengmei123.local",[[-1,4281,"!"]],[4282,4282],[4281,4281]]],[1511523253744,["gengmei_pxf@gengmei123.local",[[1,4282,"\n"]],[4281,4281],[4282,4282]]],[1511523256187,["gengmei_pxf@gengmei123.local",[[1,4282,"![]()"]],[4282,4282],[4287,4287]]],[1511523264089,["gengmei_pxf@gengmei123.local",[[1,4286,"http://ou21vt4uz.bkt.clouddn.com/Rexxar_loadUri.png"]],[4286,4286],[4337,4337]]],[1511523265847,["gengmei_pxf@gengmei123.local",[[1,4339,"\n"]],[4338,4338],[4339,4339]]],[1511523270232,["gengmei_pxf@gengmei123.local",[[-1,4170,"```Java\n  // 根据uri打开指定的web页面\n  mWebView.loadUri(\"http://backend.igengmei.com/hybrid/topic_reply/19227490\");\n```"]],[4170,4281],[4170,4170]]],[1511523270761,["gengmei_pxf@gengmei123.local",[[-1,4170,"\n"]],[4170,4170],[4169,4169]]],[1511523419911,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511523419911,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511523374518,["gengmei_pxf@gengmei123.local",[[1,3328,"![]()"]],[3328,3328],[3333,3333]]],[1511523375381,["gengmei_pxf@gengmei123.local",[[1,3332,"http://ou21vt4uz.bkt.clouddn.com/Rexxar_init.png"]],[3332,3332],[3380,3380]]],[1511523388715,["gengmei_pxf@gengmei123.local",[[-1,2429,"```Java\n  /**\n * 配置HybridWebView */  private void initHybridWebView(Context context) {\n        Rexxar.setConfig(new Rexxar.Config().\n                        setContext(context).\n                        setAsyncLoadRoute(true).\n                        setOkHttpClient(new OkHttpClient().newBuilder()\n                                .retryOnConnectionFailure(true)\n//                .addNetworkInterceptor(new AuthInterceptor())\n  .build()).\n                        setRouteConfig(new RouteManager.RouteConfig(\"https://raw.githubusercontent.com/pxfile/Hybird/master/routes/routes.json\")).                setUserAgent(com.wanmeizhensuo.zhensuo.common.webview.core.Constants.USER_AGENT).            setWindowClient(com.wanmeizhensuo.zhensuo.common.webview.core.Constants.WINDOW_CLIENT).                       setProtocolName(com.wanmeizhensuo.zhensuo.common.webview.core.Constants.PROTOCOL_NAME));}\n```"]],[2429,3327],[2429,2429]]],[1511523389251,["gengmei_pxf@gengmei123.local",[[-1,2429,"\n"]],[2429,2429],[2428,2428]]],[1511523391747,["gengmei_pxf@gengmei123.local",[[1,2483,"\n"]],[2482,2482],[2483,2483]]],[1511524494591,[null,[[-1,872,"C"],[1,881,"C"]],[872,872],[882,882]]],[1511524494591,[null,[[1,872,"C"],[-1,880,"C"]],[882,882],[872,872]]],[1511524462930,["gengmei_pxf@gengmei123.local",[[-1,2414,"`onCreate`"]],[2415,2424],[2414,2414]]]]],["d350bf72-f866-45dc-bb36-19538f47a25d",1511751499539,"# 混合开发（Rexxar）\n混合开发是 Native 和 Web 技术一起用，开发者以 Native 代码为主体，在合适的地方部分使用 Web 技术。比如在 Android 中的 Activity 内放置一个 Webview（一个浏览器引擎，只拥有渲染 HTML，CSS 和执行 JavaScript 的核心功能）。这样，部分用户界面就可以在 WebView 中使用 Web 技术实现。\n\n促使我们在移动开发中使用 Web 技术主要动力在于，相比于 Native 技术，Web 技术具有诸多优势：\n\n* 高效率的界面开发：HTML，CSS，JavaScript 的组合被证明在用户界面开发方面具有很高的效率。\n\n* 跨平台：统一的浏览器内核标准，使得 Web 技术具有跨平台特性。iOS 和 Android 可以使用一套代码。\n\n* 热更新：可越过发布渠道自主更新应用。\n\n这些优势都和开发效率有关。Web 技术具有这些优势的原因是，Web 技术是一个开放标准。基于开放的标准已经发展出来庞大生态，而且这个生态从 PC 时代发展至今已积累多年，开发者可以利用生态中产出的各种成果，从而省去很多重复工作。\n\n在大型移动应用的开发中，项目代码庞杂，通常还需要 iOS，Android，移动 Web 和 桌面 Web 全平台支持。相对于同时开发几个版本，使用混合开发显然可以在代码重用、开发成本和效率方面有很大的优势，在权衡性能体验的前提下，使用混合开发是非常现实的选择。\n\n# Rexxar 是什么\nRexxar是一个针对移动端支持Android的混合开发框架，它是基于豆瓣Rexxar框架修改的。\n\n#### Rexxar主要由三部分组成：\n\n* ResourceProxy：资源代理。负责资源管理，比如获取缓存的资源，写入缓存资源，请求线上资源。\n\n* Route：路由表，负责通过uri找到对应的html页面，一条Route包含一个uri的正则匹配规则和一个html地址。\n\n* HybridWebView：增强版WebView，封装了一些WebView的Cookie的同步，WebView加载状态监听回调的处理，页面load完成后数据的获取和所需要传递的参数等。\n\n#### **ResourceProxy**\n\nResourceProxy负责资源管理，空闲时间下载html文件然后缓存，读取预置到asset文件和缓存中的资源，请求线上资源等。\n\n#### **Route**\n\nRoute 路由表，我们使用了一个 json 文件来表达路由表，根据route地址，请求route然后返回route的原始内容，通过缓存Route列表，配置Route策略等操作来管理Route。\n\n![](http://ou21vt4uz.bkt.clouddn.com/hybrid_route.png)\n\n发布的每个版本的 App 安装包都会包含最新版本的 routes.json 文件。在 App 启动时，都会尝试下载最新版本的 routes.json。在遇到无法解析的 URL 时，也会去下载新版 routes.json,或者根据 URL 查询本机缓存的路由表 routes.json不能找到对应的资源记录时，也会请求远程服务器获得最新的全量路由表 routes.json，更新本地缓存。\n\n#### **HybridWebView**\n\nHybridWebView 是提供了一个运行前端代码的容器。它也是一个内嵌的浏览器（WebView）。不是只简单的load一个 URL 地址，还对内嵌的浏览器做了很多开发，为其包装了很多附加功能。\n\n# Rexxar在移动端如何加载、解析、渲染web模板\n\n#### **Rexxar 的工作流程图**\n\n![](http://ou21vt4uz.bkt.clouddn.com/Rexxar%20%E9%A1%B5%E9%9D%A2%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%20%281%29.png)\n\n#### **Rexxar 页面执行过程**\n\n![](http://lincode.github.io/images/blog/Rexxar.png)\n\n#### **Rexxar 的工作流**\n\n客户端接到一个页面请求，要打开一个 URL：http://backend.igengmei.com/hybrid/topic_reply/19227490。\n\n* 1.根据 URL 查询本机缓存的路由表 routes.json，看是否能够找到对应的资源记录(一般是一个 HTML 文件)。如果找到不到，请求服务，获得最新的全量路由表 routes.json，更新本地缓存，找到对应的资源记录；\n\n* 2.根据路由表指示的 HTML 文件的路径，看本地是否找到对应的文件。如果找不到，请求资源服务器，更新本地缓存；在HybridWebView里展示该 HTML 文件；如有需要，会在 HybridWebView 中请求图片资源，图片资源也有缓存，HybridWebView会先检查本地缓存。如不存在，会请求 CDN 的图片或者图片服务器；\n\n* 3.前端代码在HybridWebView里继续执行，发出 API 请求。HybridWebView代理这些请求，WebView的Cookie的同步，WebView加载状态监听回调的处理，页面load完成后数据的获取和所需要传递的参数等；\n\n* 4.前端代码继续执行，根据 API 返回的结果，展示响应的页面，可能会请求 CDN 的图片或者图片服务器等；\n\n* 5.前端代码继续执行，js和native的交互；\n\n# Rexxar的使用流程\n\n### 配置\n\n#### 1. 初始化\n\n在Application的中调用\n\n![](http://ou21vt4uz.bkt.clouddn.com/Rexxar_init.png)\n\n#### 2. 设置路由表文件 api：\n\n![](http://ou21vt4uz.bkt.clouddn.com/Rexxar_route.png)\n\nRexxar 使用 uri 来标识页面，提供一个正确的 uri 就可以打开对应的页面，路由表提供了每个 uri 对应的 html 资源的下载地址。\n\nDemo 中的路由表如下：\n\n![](http://ou21vt4uz.bkt.clouddn.com/hybrid_route.png)\n\n#### 3. 设置需要代理或缓存的请求host\n\n![](http://ou21vt4uz.bkt.clouddn.com/Rexxar_host.png)\n\nRexxar是通过`WebViewClient`的`shouldInterceptRequest`方法来拦拦截请求，请求线上数据并返回给'webview'。为了减少不必要的流程破坏，只有明确需要拦截的hosts（支持正则）的请求才会被拦截代理，并根据mime-type决定哪些内容需要缓存。\n\n#### 4. 预置资源文件\n\n使用 Rexxar 一般会预置一份路由表，以及资源文件在应用包中。这样就可以减少用户的下载，加快第一次打开页面的速度。在没有网络的情况下，如果没有数据请求的话，页面也可访问。这都有利于用户体验。\n预置文件路径是`assets/rexxar`, 暂不支持修改。\n\n\n\n### 使用 HybridWebView\n\n直接使用 `HybridWebView` 为的混合开发客户端容器。或者也可以在 `HybridWebView` 基础上实现你自己的客户端容器。\n\n为了初始化 HybridWebView，你需要只一个 url。在路由表文件 api 提供的路由表中可以找到这个 url。这个 url 标识了该页面所需使用的资源文件的位置。HybridWebView会通过 url 在路由表中寻找对应的 javascript，css，html 资源文件。\n\n![](http://ou21vt4uz.bkt.clouddn.com/Rexxar_loadUri.png)\n\n# rexxar使用过程中的限制及注意事项\n\n* 1.性能方面\n\nWeb 的性能没法和 Native 相比。这种状况可能会长期存在。因为，前端代码运行于内嵌浏览器之上，和直接调用原生系统相比，理论上总会存在性能上的差距，可以用规避的方式面对性能问题：即性能问题会明显影响到用户体验时，我们就不使用 Rexxar 来做，而是使用传统 Native 写两份代码，一份 iOS，一份 Android。这样就限缩了 Rexxar 的使用范围。\n\n* 2.内存问题\n\nRexxar在客户端的实现其实就是一个定制了更多功能的WebView。由于Rexxar使用的是系统的WebView。所以对App的体积没有影响。但是Rexxar同时使用很多个WebView带来的内存问题，这是需要注意的。\n\n* 3.错误报告\n\nRexxar的Crash有两种：\n\n* 一种是JavaScript的错误，也就是应用逻辑的问题。这类错误他们在WebView中做了捕获，然后通过App的日志系统发回服务器。\n    \n* 一种是WebView的Crash，这种错误WebView自己无法捕获，现在是通过fabric，Umeng，bugly这种原生的Crash收集系统收集。\n\n在应用中使用 Rexxar 之后，在收集到的 Crash Report 中，JavaScript 的相关错误，和浏览器相关的错误开始增加。而对这类错误，由于移动应用的使用环境更为复杂，错误报告经过了 JavaScript 引擎，原生系统两层之后，给出的错误信息并不够明确。豆瓣在这方面的经验也并不多，现在还没有很好的办法降低这类错误。这对提高 App 的稳定性带来了问题。\n\n# 为什么不用PhonGap/Cordova\n\n在混合开发中早已有了很成熟的方案，就是PhoneGap和它的后继者Cordoba. 为什么豆瓣还要造自己的轮子呢？\n\n郭麟说，如果Rexxar方案定义为前端和原生技术的混合使用，那他们认为PhoneGap/Cordova严格来说不算是Rexxar方案，因为它的目标是全面使用前端技术开发移动应用，而不是前端和原生技术混合使用。但是，包括Cordova，还可以加上React Native，以及Rexxar的目标是一致的：使用前端技术来开发移动应用，提高工程效率。\n\n豆瓣实际上使用PhoneGap开发过一款移动App，并在AppStore上架了，这个应用叫豆瓣音乐人，因此，其实豆瓣对PhoneGap/Cordova已经有一定了解和使用经验。为何在开发豆瓣App时又造了一个叫Rexxar的“轮子”呢？这是因为，他们对PhoneGap/Cordova这个项目的理念并不完全赞同，Rexxar的出发点和PhoneGap/Cordova并不一样。\n\nPhoneGap/Cordova这个项目极具野心。它希望完全使用前端技术完成移动开发。所以，可以看到它尽力让前端技术完成尽量多的开发工作，只在前端无法直接调用的原生系统功能方面提供了前端可用的接口。主流的PhoneGap/Cordova项目将业务逻辑都实现在一个WebView中。目标是，让开发者只使用前端技术就可以完成一个移动应用的所有开发工作。这种做法需要有一个前提：前端技术可以解决移动开发的所有需求。他们认为PhoneGap/Cordova这个理念在现阶段有些过于理想化了，或者说过于激进了。\n\nRexxar则相对实际，或者说保守一些。郭麟表示，他们仍然认为，**现阶段，甚至在相当遥远的未来，移动开发中前端技术都不太可能完全代替原生技术。**但他们同时承认，**移动开发中总是存在部分功能是适合使用前端技术完成的。**在他们的认识中，前端技术和原生技术应该是共存的。移动开发中，前端技术不会完全代替原生技术；而有了前端技术的加入，移动开发的效率会提高。基于这种认识，豆瓣开发了Rexxar。\n\n可以看到，**Rexxar立足于在一个原生项目使用前端技术，而不是整个项目都使用前端技术实现。**他们甚至提供一个页面部分使用Rexxar完成，部分使用原生技术实现的方案。豆瓣希望借助前端技术优秀的排版能力、开发速度、通用性，来弥补原生开发在这方面的不足。在微信作为主要内容分享渠道的今天，这样做还带来了一个额外的好处，Rexxar页面可以平滑的使用在微信中。\n\n总结而言，如果Rexxar和PhoneGap/Cordova比较的话，大目标是一致的：使用前端技术开发移动应用。实现技术栈差不多：使用WebView，提供调用原生功能的接口。但是，出发点不一样。PhoneGap/Cordova致力于完全使用前端技术进行移动开发；Rexxar致力于在移动项目中部分使用前端技术。\n\n# 鼓励移动开发者学习前端技术\n\n目前，我们移动团队大约有十多位客户端工程师，其中 iOS 和 Android 各一半。可以委派一位优秀的前端工程师专门支持App中的混合开发，他负责Rexxar Web的开发，提供基础设施。同时如果有一些较复杂的业务要用Rexxar实现，他也会参与和指导业务开发。\n\n使用Rexxar这类混合开发技术，使得团队开发的技术栈向前端技术偏斜了。所以，较理想的配置是团队中加入较优秀的前端工程师，由他来处理基础设施的开发，和疑难问题的解决。同时，整个团队需要理解混合开发所带来的优势，认可这个开发方式的转变，并且愿意学习和调整自己的技术栈。\n\n在项目中，在合适的场景中，可以优先使用Rexxar。在团队中，应该鼓励非前端工程师学习和使用前端技术。由于以前专门组织了关于前端技术内部培训，让有意愿的非前端工程师具有了可以使用前端技术进行日常开发的基本能力。期望在App的日常开发中，大部分Rexxar页面都可以由客户端工程师完成，前端工程师会帮忙做Code Review和解决疑难问题。😄\n\n# 总结与展望\n\n通过在移动开发中使用Rexxar，在一定程度上提高了开发效率。以前一个页面需要 iOS 和 Android 两位工程师各开发一遍，现在只需要一位工程师写一次前端代码，甚至还可以应用到移动 Web 站上去。前端技术在开发界面方面也有效率上的优势，热部署能力，使他们规避了发布移动应用的审核过程，也让bug修复过程更便利。\n\n豆瓣将Rexxar这个项目开源，一方面，是因为提高移动开发的工程效率是一个普遍问题，而他们的实践结果也证明Rexxar确实帮助改善了工程效率。所以，他们认为Rexxar应该能给大家提供一些借鉴的方向。另一方面，是为了提高项目本身的质量，没有方案是完美的，Rexxar也还存在不少问题。开源这个项目，促使他们提高了整个项目的代码质量。同时，也更容易听到大家的意见和建议。\n\n虽然Rexxar仍然存在一些问题和使用上的限制。但是在有限的使用中，豆瓣App团队仍然收获不少。在未来他们会持续推动Rexxar在豆瓣移动开发中的使用。对于Rexxar未来的发展，他们主要关注两个方面：\n\n* 一方面是基础设施，比如，如何在产品中，更好地监控Rexxar页面出现的问题，如何调试和解决Rexxar页面出现的bug。如果希望在大型项目中使用Rexxar，这些基础设施是应该配备的；\n\n* 另一方面是性能，Rexxar仍然跑在浏览器引擎中。浏览器引擎这个中间层提高了工程效率，但也因为性能问题局限了其使用范围。所以，他们会花一些精力提高Rexxar的运行效率。比如，Rexxar的iOS版一直在关注从UIWebView迁移到WKWebView的可能性。\n\n\n\n",[[1511751471394,["gengmei_pxf@gengmei123.local",[[-1,3375,"r"],[1,3376,"R"]],[3375,3381],[3381,3381]]],[1511751572900,["gengmei_pxf@gengmei123.local",[[-1,5351,"多"]],[5352,5352],[5351,5351]]],[1511752527799,["gengmei_pxf@gengmei123.local",[[1,0,"#"]],[0,0],[1,1]]],[1511752529707,["gengmei_pxf@gengmei123.local",[[-1,0,"#"]],[1,1],[0,0]]],[1511752531020,["gengmei_pxf@gengmei123.local",[[1,0,"\n"]],[0,0],[1,1]]],[1511752540982,["gengmei_pxf@gengmei123.local",[[1,0,"# Rexxr"]],[0,0],[7,7]]],[1511752542557,["gengmei_pxf@gengmei123.local",[[-1,6,"r"]],[7,7],[6,6]]],[1511752545375,["gengmei_pxf@gengmei123.local",[[1,6,"arfxiang"]],[6,6],[14,14]]],[1511752546701,["gengmei_pxf@gengmei123.local",[[-1,8,"fxiang"]],[14,14],[8,8]]],[1511752553871,["gengmei_pxf@gengmei123.local",[[1,8,"分享的内容"]],[8,8],[13,13]]],[1511752556948,["gengmei_pxf@gengmei123.local",[[1,14,"\n"]],[13,13],[14,14]]],[1511752577651,["gengmei_pxf@gengmei123.local",[[1,14,"## 什么是混合开发，"]],[14,14],[25,25]]],[1511752580202,["gengmei_pxf@gengmei123.local",[[1,25,"为怎么"]],[25,25],[28,28]]],[1511752581311,["gengmei_pxf@gengmei123.local",[[-1,25,"为怎么"]],[28,28],[25,25]]],[1511752591953,["gengmei_pxf@gengmei123.local",[[1,25,"为什么要引入Rexxar"]],[25,25],[37,37]]],[1511752592423,["gengmei_pxf@gengmei123.local",[[1,38,"\n"]],[37,37],[38,38]]],[1511752594938,["gengmei_pxf@gengmei123.local",[[1,38,"## "]],[38,38],[41,41]]],[1511752600433,["gengmei_pxf@gengmei123.local",[[1,17,"* "]],[17,17],[19,19]]],[1511752609852,["gengmei_pxf@gengmei123.local",[[-1,14,"## "]],[17,17],[14,14]]],[1511752613139,["gengmei_pxf@gengmei123.local",[[-1,37,"## "]],[40,40],[37,37]]],[1511752614590,["gengmei_pxf@gengmei123.local",[[1,37,"* "]],[37,37],[39,39]]],[1511752618876,["gengmei_pxf@gengmei123.local",[[1,16,"1."]],[16,16],[18,18]]],[1511752620540,["gengmei_pxf@gengmei123.local",[[1,41,"2."]],[41,41],[43,43]]],[1511752624789,["gengmei_pxf@gengmei123.local",[[1,44,"\n"]],[43,43],[44,44]]],[1511752625110,["gengmei_pxf@gengmei123.local",[[1,45,"\n"]],[44,44],[45,45]]],[1511752636683,["gengmei_pxf@gengmei123.local",[[-1,39,"* 2."]],[43,43],[39,39]]],[1511752639120,["gengmei_pxf@gengmei123.local",[[1,39,"* "]],[39,39],[41,41]]],[1511752651799,["gengmei_pxf@gengmei123.local",[[1,41,"2.Rexxar是什么"]],[41,41],[52,52]]],[1511752653213,["gengmei_pxf@gengmei123.local",[[1,55,"\n"]],[52,52],[53,53]]],[1511752674143,["gengmei_pxf@gengmei123.local",[[1,53,"* 3.Rexxar在移动端如何加载、解析、渲染web模板"]],[53,53],[82,82]]],[1511752683574,["gengmei_pxf@gengmei123.local",[[-1,63,"在移动端如何"],[1,69,"d"]],[63,69],[63,64]]],[1511752683750,["gengmei_pxf@gengmei123.local",[[-1,63,"d"],[1,64,"的"]],[63,64],[64,64]]],[1511752690954,["gengmei_pxf@gengmei123.local",[[1,63,"d"],[-1,63,"的"]],[64,64],[63,64]]],[1511752691602,["gengmei_pxf@gengmei123.local",[[1,63,"在移动端如何"],[-1,63,"d"]],[63,64],[63,69]]],[1511752694228,["gengmei_pxf@gengmei123.local",[[1,85,"\n"]],[82,82],[83,83]]],[1511752696998,["gengmei_pxf@gengmei123.local",[[1,83,"*  4."]],[83,83],[88,88]]],[1511752698444,["gengmei_pxf@gengmei123.local",[[-1,85," 4."]],[88,88],[85,85]]],[1511752712364,["gengmei_pxf@gengmei123.local",[[1,85,"4.Rexxar的使用"]],[85,85],[96,96]]],[1511752712956,["gengmei_pxf@gengmei123.local",[[1,99,"\n"]],[96,96],[97,97]]],[1511752715440,["gengmei_pxf@gengmei123.local",[[1,97,"*5."]],[97,97],[100,100]]],[1511752717268,["gengmei_pxf@gengmei123.local",[[-1,98,"5."]],[100,100],[98,98]]],[1511752726126,["gengmei_pxf@gengmei123.local",[[1,98," 5.Rexxar使用过程中的限制及注意事项"]],[98,98],[120,120]]],[1511752726763,["gengmei_pxf@gengmei123.local",[[1,123,"\n"]],[120,120],[121,121]]],[1511752752301,["gengmei_pxf@gengmei123.local",[[1,121,"* 6.Rexxar与奇台"]],[121,121],[134,134]]],[1511752752923,["gengmei_pxf@gengmei123.local",[[-1,132,"奇台"]],[134,134],[132,132]]],[1511752758573,["gengmei_pxf@gengmei123.local",[[1,132,"其他混合"]],[132,132],[136,136]]],[1511752764733,["gengmei_pxf@gengmei123.local",[[1,136,"开发框架的对比"]],[136,136],[143,143]]],[1511752855311,["gengmei_pxf@gengmei123.local",[[1,144,"* 7. "]],[144,144],[149,149]]],[1511752856804,["gengmei_pxf@gengmei123.local",[[-1,148," "]],[149,149],[148,148]]],[1511752858855,["gengmei_pxf@gengmei123.local",[[1,148,"总结与展望\n"]],[148,148],[154,154]]],[1511752860076,["gengmei_pxf@gengmei123.local",[[-1,155,"\n"]],[154,154],[153,153]]],[1511753870905,["gengmei_pxf@gengmei123.local",[[-1,1334,"hybrid"],[1,1340,"Rexxar"]],[1301,1350],[1350,1350]]],[1511753883533,["gengmei_pxf@gengmei123.local",[[1,1334,"hybrid"],[-1,1334,"Rexxar"]],[1350,1350],[1301,1350]]],[1511754041838,["gengmei_pxf@gengmei123.local",[[-1,1334,"hybrid"],[1,1340,"Rexxar"]],[1301,1350],[1350,1350]]],[1511754044993,["gengmei_pxf@gengmei123.local",[[1,1334,"hybrid"],[-1,1334,"Rexxar"]],[1350,1350],[1301,1350]]],[1511754061062,["gengmei_pxf@gengmei123.local",[[-1,1334,"hybrid"],[1,1340,"Rexxar"]],[1301,1350],[1350,1350]]],[1511754134836,["gengmei_pxf@gengmei123.local",[[-1,1334,"R"],[1,1335,"r"]],[1301,1350],[1350,1350]]],[1511754705613,["gengmei_pxf@gengmei123.local",[[-1,2834,"hybrid"],[1,2840,"rexxar"]],[2801,2850],[2850,2850]]],[1511755261127,["gengmei_pxf@gengmei123.local",[[-1,3931,"他们"]],[3933,3933],[3931,3931]]],[1511755298333,["gengmei_pxf@gengmei123.local",[[-1,4011,"fabric，Umeng，"]],[4011,4024],[4011,4011]]],[1511755350429,["gengmei_pxf@gengmei123.local",[[1,4956," "]],[4956,4956],[4957,4957]]],[1511755359837,["gengmei_pxf@gengmei123.local",[[1,5007," "]],[5007,5007],[5008,5008]]],[1511755366386,["gengmei_pxf@gengmei123.local",[[-1,4994,"。"]],[4995,4995],[4994,4994]]],[1511755367404,["gengmei_pxf@gengmei123.local",[[1,4994," "]],[4994,4994],[4995,4995]]],[1511755369692,["gengmei_pxf@gengmei123.local",[[1,4997,"."]],[4997,4997],[4998,4998]]],[1511755372018,["gengmei_pxf@gengmei123.local",[[-1,4997,"."]],[4998,4998],[4997,4997]]],[1511755374977,["gengmei_pxf@gengmei123.local",[[-1,4994," "]],[4995,4995],[4994,4994]]],[1511755377378,["gengmei_pxf@gengmei123.local",[[-1,4956," "]],[4957,4957],[4956,4956]]],[1511755381770,["gengmei_pxf@gengmei123.local",[[-1,5005," "]],[5006,5006],[5005,5005]]],[1511755386090,["gengmei_pxf@gengmei123.local",[[-1,5029,"的。"]],[5031,5031],[5029,5029]]],[1511755387575,["gengmei_pxf@gengmei123.local",[[1,5029,"的。"]],[5029,5029],[5031,5031]]],[1511755388658,["gengmei_pxf@gengmei123.local",[[-1,5030,"。"]],[5031,5031],[5030,5030]]],[1511755392572,["gengmei_pxf@gengmei123.local",[[1,4995,"。"]],[4995,4995],[4996,4996]]],[1511755395587,["gengmei_pxf@gengmei123.local",[[1,5033,"。"]],[5033,5033],[5034,5034]]],[1511755398745,["gengmei_pxf@gengmei123.local",[[-1,5168,"。"]],[5169,5169],[5168,5168]]],[1511755400587,["gengmei_pxf@gengmei123.local",[[1,5170,"。"]],[5170,5170],[5171,5171]]],[1511755416747,["gengmei_pxf@gengmei123.local",[[-1,4306,"郭麟说，"]],[4306,4310],[4306,4306]]],[1511755466156,["gengmei_pxf@gengmei123.local",[[-1,4938,"郭麟表示，他们仍然认为，"]],[4938,4950],[4938,4938]]],[1511755471083,["gengmei_pxf@gengmei123.local",[[-1,4980,"但他们同时承认，"]],[4980,4988],[4980,4980]]],[1511755478064,["gengmei_pxf@gengmei123.local",[[-1,4977,"**"],[-1,4980,"**"]],[4977,4982],[4978,4978]]],[1511755495912,["gengmei_pxf@gengmei123.local",[[1,4977,"**"],[1,4978,"**"]],[4978,4978],[4977,4982]]],[1511755496416,["gengmei_pxf@gengmei123.local",[[1,4980,"但他们同时承认，"]],[4980,4980],[4980,4988]]],[1511755498504,["gengmei_pxf@gengmei123.local",[[1,4938,"郭麟表示，他们仍然认为，"]],[4938,4938],[4938,4950]]],[1511755503834,["gengmei_pxf@gengmei123.local",[[-1,4938,"郭麟表示，"]],[4938,4943],[4938,4938]]],[1511763311664,["gengmei_pxf@gengmei123.local",[[-1,3507,"R"],[1,3508,"r"]],[3474,3525],[3525,3525]]],[1511763479257,["gengmei_pxf@gengmei123.local",[[1,2878,"![]()"]],[2878,2878],[2883,2883]]],[1511763480234,["gengmei_pxf@gengmei123.local",[[1,2882,"http://ou21vt4uz.bkt.clouddn.com/rexxar_hosts.png"]],[2882,2882],[2931,2931]]],[1511763484398,["gengmei_pxf@gengmei123.local",[[1,2878,"\n"]],[2877,2877],[2878,2878]]],[1511763485983,["gengmei_pxf@gengmei123.local",[[1,2934,"\n"]],[2933,2933],[2934,2934]]]]]]}
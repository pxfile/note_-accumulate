{"compress":true,"commitItems":[["b8d0fe81-1bbe-4860-9857-be583ba5e65f",1521533468466,"",[[1521533450693,["gengmei_pxf@gengmei123.local",[[1,0,"Android 内部类\n===\n\n\n## 一、为何使用内部类\n\n*   内部类提供了更好的封装，只有外部类能访问内部类\n*   内部类可以独立继承一个接口，不受外部类是否继承接口影响\n*   内部类中的属性和方法即使是外部类也不能直接访问，相反内部类可以直接访问外部类的属性和方法，即使private\n*   利于回调函数的编写\n\n**一个内部类的例子**：\n\n```\npublic class OuterClass {\n    private String outerName;\n    private int outerAge;\n    public class InnerClass{\n        private String innerName;\n        private int innerAge;\n    }\n}\n\n```\n\n## 二、内部类与外部类的联系\n\n### 2.1 内部类是一个相对独立的实体，与外部类不是is-a关系\n\n内部类是一个编译时概念，编译后外部类及其内部类会生成两个独立的class文件： `OuterClass.class`和`OuterClass$InnerClass.class`，我用`javac`编译器对上面的`OuterClass`进行编译：\n\n```\n D:\\>javac OuterClass.class\n\n```\n\n编译后的结果：\n\n![这里写图片描述](http://img.blog.csdn.net/20160630170618001)\n\n### 2.2 内部类可以直接访问外部类的元素，但是外部类不可以直接访问内部类的元素\n\n```\npublic class OuterClass {\n\n    private String outerName;\n    private int outerAge;\n\n    public class InnerClass{\n        private int innerName;\n        InnerClass(){\n            //内部类可以访问外部类的元素\n            outerName=\"I am outer class\";\n            outerAge=23;\n        }\n        public void display(){\n            System.out.println(outerName+\" and my age is \"+outerAge);\n        }\n    }\n    public static void main(String[] args) {\n        OuterClass outerClass = new OuterClass();\n        OuterClass.InnerClass innerClass = outerClass.new InnerClass();\n        innerClass.display();\n    }\n}\n\n```\n\n在上面例子中我们可以看到，内部类可以直接访问外部类属性，尽管外部类属性是用private修饰的。这是因为在创建外部类时，内部类会自动捕获一个外部类的引用，所以内部类访问外部类元素，实际上是通过他所持有外部类引用访问的。在java中，我们可以通过`OuterClass.this`来获得外部类的引用，请看下面例子：\n\n```\npublic class OuterClass {\n    public void display(){\n        System.out.println(\"this is OuterClass...\");\n    }\n    public class InnerClass{\n        //获取外部类的引用\n        public OuterClass getOuterClass(){\n            return OuterClass.this;\n        }\n        public void innerDisplay(){\n            //内部类也可以通过外部类的引用访问外部元素\n            getOuterClass().display();\n        }\n    }\n    public static void main(String[] args) {\n        OuterClass outerClass = new OuterClass();\n        OuterClass.InnerClass innerClass = outerClass.new InnerClass();\n        innerClass.innerDisplay();\n    }\n}\n\n```\n\n### 2.3 外部类可以通过内部类引用**间接**访问内部类元素\n\n```\npublic class OuterClass {\n    public void display(){\n        //外部类访问内部类元素，需要通过内部类引用访问\n        InnerClass innerClass=new InnerClass();\n        innerClass.innerDisplay();\n    }\n    public class InnerClass{\n        public void innerDisplay(){\n            System.out.println(\"I am inner class\");\n        }\n    }\n    public static void main(String[] args) {\n        OuterClass outerClass=new OuterClass();\n        outerClass.display();\n    }\n}\n\n```\n\n## 三、创建内部类\n\n### 3.1 在外部类外面（或外部类main方法）创建内部了对象\n\n其实上面`2.2`例子中我们已经看到了如何创建内部类。如果要创建一个内部类对象，必须利用`outerClass.new`来创建：\n\n```\nOuterClass outerClass = new OuterClass();\nOuterClass.InnerClass innerClass = outerClass.new InnerClass();\n\n```\n\n其实我们还可以一步到位：\n\n```\nOuterClass.InnerClass innerClass=new OuterClass().new InnerClass();\n\n```\n\n内部类创建方法示例：\n\n```\npublic static void main(String[] args) {\n    //先创建外部类对象，再创建内部类对象\n    OuterClass outerClass = new OuterClass();\n    OuterClass.InnerClass innerClass1 = outerClass.new InnerClass();\n    innerClass1.innerDisplay();\n    //一步到位创建\n    OuterClass.InnerClass innerClass2=new OuterClass().new InnerClass();\n    innerClass2.innerDisplay();\n}\n\n```\n\n### 3.2 在外部类里面创建内部类\n\n正如`2.3`代码中`display()`方法那样，在外部类里面创建内部类，就像创建普通对象一样直接创建：\n\n```\nInnerClass innerClass=new InnerClass()\n\n```\n\n## 四、内部类的种类：\n\n在Java中内部类主要分为成员内部类、方法内部类、匿名内部类、静态内部类。\n\n### 4.1 成员内部类\n\n成员内部类也是最普通的内部类，它是外部类的一个成员，所以他是可以无限制的访问外围类的所有成员属性和方法，尽管是private的，但是外围类要访问内部类的成员属性和方法则需要通过内部类实例来访问。\n\n在成员内部类中要注意两点：\n\n1.  成员内部类中不能存在任何static的变量和方法\n2.  成员内部类是依附于外围类的，所以只有先创建了外围类才能够创建内部类\n\n### 4.2 方法内部类\n\n方法内部类定义在外部类的方法中，局部内部类和成员内部类基本一致，只是它们的作用域不同，方法内部类只能在该方法中被使用，出了该方法就会失效。 对于这个类的使用主要是应用与解决比较复杂的问题，想创建一个类来辅助我们的解决方案，到那时又不希望这个类是公共可用的，所以就产生了局部内部类。\n\n### 4.3 匿名内部类\n\n匿名内部类其实就是一个没有名字的方法内部类，所以它符合方法内部类的所有约束，初次之外，还有一些地方需要注意：\n\n1.  匿名内部类是没有访问修饰符的。\n2.  匿名内部类必须继承一个抽象类或者实现一个接口\n3.  匿名内部类中不能存在任何静态成员或方法\n4.  匿名内部类是没有构造方法的，因为它没有类名。\n\n一般使用匿名内部类的场景是，要继承或实现的接口只有一个抽象方法，比如添加一个监听器：\n\n```\npublic class Button {\n    public void click(){\n        //匿名内部类，实现的是ActionListener接口\n        new ActionListener(){\n            public void onAction(){\n                System.out.println(\"click action...\");\n            }\n        }.onAction();\n    }\n    //匿名内部类必须继承或实现一个已有的接口\n    public interface ActionListener{\n        public void onAction();\n    }\n\n    public static void main(String[] args) {\n        Button button=new Button();\n        button.click();\n    }\n}\n\n```\n\n### 4.4 静态内部类\n\n关键字`static`可以修饰成员变量、方法、代码块，其实它还可以修饰内部类，使用`static`修饰的内部类我们称之为静态内部类。静态内部类与非静态内部类之间存在一个最大的区别，我们知道非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围内，但是静态内部类却没有。没有这个引用就意味着：\n\n1.  静态内部类的创建是不需要依赖于外围类，可以直接创建\n2.  静态内部类不可以使用任何外围类的非static成员变量和方法，而内部类则都可以\n\n    ```\n    public class OuterClass {\n        private static String outerName;\n        public  int age;\n\n        static class InnerClass1{\n            /* 在静态内部类中可以存在静态成员 */\n            public static String _innerName = \"static variable\";\n            public void display(){\n                /*\n                 * 静态内部类只能访问外部类的静态成员变量和方法\n                 * 不能访问外部类的非静态成员变量和方法\n                 */\n                System.out.println(\"OutClass name :\" + outerName);\n            }\n        }\n        class InnerClass2{\n            /* 非静态内部类中不能存在静态成员 */\n            public String _innerName = \"no static variable\";\n            /* 非静态内部类中可以调用外部类的任何成员,不管是静态的还是非静态的 */\n            public void display(){\n                System.out.println(\"OuterClass name：\" + outerName);\n                System.out.println(\"OuterClass age：\" + age);\n            }\n        }\n        public void display(){\n            /* 外部类能直接访问静态内部类静态元素 */\n            System.out.println(InnerClass1._innerName);\n            /* 静态内部类可以直接创建实例不需要依赖于外部类 */\n            new InnerClass1().display();\n            /* 非静态内部的创建需要依赖于外部类 */\n            OuterClass.InnerClass2 inner2 = new OuterClass().new InnerClass2();\n            /* 非静态内部类的成员需要使用非静态内部类的实例访问 */\n            System.out.println(inner2._innerName);\n            inner2.display();\n        }\n\n        public static void main(String[] args) {\n            OuterClass outer = new OuterClass();\n            outer.display();\n        }\n    }\n    ```"]],[0,0],[6127,6127]]],[1521533460549,["gengmei_pxf@gengmei123.local",[[-1,466," "],[1,467," "],[-1,5975,"\n"]],[5976,5976],[5975,5975]]],[1521533465102,["gengmei_pxf@gengmei123.local",[[-1,4782,"\n"]],[4782,4782],[4781,4781]]],[1521533499995,["gengmei_pxf@gengmei123.local",[[1,3588,"\n"]],[3586,3586],[3587,3587]]],[1521533500645,["gengmei_pxf@gengmei123.local",[[1,3589,"\n"]],[3587,3587],[3588,3588]]],[1521533502862,["gengmei_pxf@gengmei123.local",[[1,3588,"！【】"]],[3588,3588],[3591,3591]]],[1521533503667,["gengmei_pxf@gengmei123.local",[[-1,3588,"！【】"]],[3591,3591],[3588,3588]]],[1521533506197,["gengmei_pxf@gengmei123.local",[[1,3588,"![]()"]],[3588,3588],[3593,3593]]],[1521533507294,["gengmei_pxf@gengmei123.local",[[1,3592,"https://t11.baidu.com/it/u=3374719981,1384879290&fm=173&s=A8C2B74ABEE0B76C18D9CC070000A0C3&w=640&h=333&img.JPEG"]],[3592,3592],[3703,3703]]],[1521533525010,["gengmei_pxf@gengmei123.local",[[1,3863,"\n"]],[3862,3862],[3863,3863]]],[1521533528397,["gengmei_pxf@gengmei123.local",[[1,3863,"!["]],[3863,3863],[3865,3865]]],[1521533529261,["gengmei_pxf@gengmei123.local",[[1,3865,"]()"]],[3865,3865],[3868,3868]]],[1521533530151,["gengmei_pxf@gengmei123.local",[[1,3867,"https://t10.baidu.com/it/u=3534311715,1105954985&fm=173&s=A8C2834FCAA5F3745E71C40F0000B0C3&w=640&h=201&img.JPEG"]],[3867,3867],[3978,3978]]],[1521533553482,["gengmei_pxf@gengmei123.local",[[1,6360,"\n\n"]],[6360,6360],[6361,6361]]],[1521533556378,["gengmei_pxf@gengmei123.local",[[-1,6361,"\n"],[1,6362,"![]()"]],[6361,6361],[6366,6366]]],[1521533557731,["gengmei_pxf@gengmei123.local",[[1,6365,"https://t12.baidu.com/it/u=2540737979,3017205369&fm=173&s=A8C2A74A1AE0A7740C4D840F0000E0C3&w=640&h=268&img.JPEG"]],[6365,6365],[6476,6476]]],[1521533578688,["gengmei_pxf@gengmei123.local",[[1,4666,"\n"]],[4664,4664],[4665,4665]]],[1521533580890,["gengmei_pxf@gengmei123.local",[[1,4665,"![]()"]],[4665,4665],[4670,4670]]],[1521533582259,["gengmei_pxf@gengmei123.local",[[1,4669,"https://t10.baidu.com/it/u=2720160774,1172617468&fm=173&s=A8C2874E9AE6A36C5E7DE40F0000E0C3&w=640&h=436&img.JPEG"]],[4669,4669],[4780,4780]]],[1521533602967,["gengmei_pxf@gengmei123.local",[[1,3993,"()"]],[3993,3993],[3995,3995]]],[1521533608105,["gengmei_pxf@gengmei123.local",[[1,3994,"OnClicksjian"]],[3994,3994],[4006,4006]]],[1521533609048,["gengmei_pxf@gengmei123.local",[[-1,4001,"sjian"]],[4006,4006],[4001,4001]]],[1521533610458,["gengmei_pxf@gengmei123.local",[[1,4001,"事件"]],[4001,4001],[4003,4003]]],[1521533626280,["gengmei_pxf@gengmei123.local",[[-1,17,"\n"]],[16,16],[15,15]]]]]]}
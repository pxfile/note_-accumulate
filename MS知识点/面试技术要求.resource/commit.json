{"compress":true,"commitItems":[["8a910798-ad83-47d5-b124-342038087040",1521280520222,"",[[1521280516875,["gengmei_pxf@gengmei123.local",[[1,0,"技术要求\n===\n\n\n技术基础(CS/JAVA/Android)\t\nCS基础：\n字符集体系\n网络基础：网络协议栈类别和层次；大端和小端对齐\n数据结构：实现，特点，复杂度\n操作系统：内存管理，堆栈，虚拟内存\n数据库基础：索引，事务，基本的CRUD\nJAVA基础：\n基础语法\n集合和泛型\nJVM(内存模型，垃圾回收，类加载机制)\n并发处理，线程安全\nAndroid基础\n展示层：Activity、fragment、View\n逻辑层：Handler，线程/多线程(同步和互斥)、定时器、序列化、Service、Broadcast、JNI\n数据层：ContentProvide、数据库、网络通信\n工程类：gradle，方法数、混淆，打包\n技术深度(Android)\t\nAndroid技术深度\nAndroid深度：\nFramework源码理解AMS，PMS，WMS\nAndroid虚拟机相关\nAndroid核心机制相关Zygote、Binder、Hook\n性能优化：\n绘制优化；启动优化：内存优化；存储优化；\n稳定性优化；耗电优化；安装包优化\n安全：\n存储安全，传输安全等\n其他面试人亮点\n设计能力，技术视野，技术选型\t\n设计能力：\n面向对象设计思想\n设计模式\n流程开发框架，MVP，MVVM，AOP\n设计框架TDD，DDD等\n技术视野：\nAndroid技术特性\n开源框架及原理（OKHTTP、Retrofit、GreenDao等）\n组件化\n插件化\n技术选型：\n特性/性能/可用性/方法数/安全性/学习成本等"]],[0,0],[649,649]]],[1521280519177,["gengmei_pxf@gengmei123.local",[[-1,10,"\n"]],[10,10],[9,9]]]]],["8fd21a43-8679-45aa-84e7-3452c582c619",1521522490478,"技术要求\n===\n\n技术基础(CS/JAVA/Android)\t\nCS基础：\n字符集体系\n网络基础：网络协议栈类别和层次；大端和小端对齐\n数据结构：实现，特点，复杂度\n操作系统：内存管理，堆栈，虚拟内存\n数据库基础：索引，事务，基本的CRUD\nJAVA基础：\n基础语法\n集合和泛型\nJVM(内存模型，垃圾回收，类加载机制)\n并发处理，线程安全\nAndroid基础\n展示层：Activity、fragment、View\n逻辑层：Handler，线程/多线程(同步和互斥)、定时器、序列化、Service、Broadcast、JNI\n数据层：ContentProvide、数据库、网络通信\n工程类：gradle，方法数、混淆，打包\n技术深度(Android)\t\nAndroid技术深度\nAndroid深度：\nFramework源码理解AMS，PMS，WMS\nAndroid虚拟机相关\nAndroid核心机制相关Zygote、Binder、Hook\n性能优化：\n绘制优化；启动优化：内存优化；存储优化；\n稳定性优化；耗电优化；安装包优化\n安全：\n存储安全，传输安全等\n其他面试人亮点\n设计能力，技术视野，技术选型\t\n设计能力：\n面向对象设计思想\n设计模式\n流程开发框架，MVP，MVVM，AOP\n设计框架TDD，DDD等\n技术视野：\nAndroid技术特性\n开源框架及原理（OKHTTP、Retrofit、GreenDao等）\n组件化\n插件化\n技术选型：\n特性/性能/可用性/方法数/安全性/学习成本等",[[1521522484817,["gengmei_pxf@gengmei123.local",[[1,648,"\n\n"]],[648,648],[649,649]]],[1521522485013,["gengmei_pxf@gengmei123.local",[[1,650,"\n"]],[649,649],[650,650]]],[1521522485904,["gengmei_pxf@gengmei123.local",[[1,650,"问得最多的是自定义 View 基本每家都问，问 View 的绘制流程，自定义View的步骤，有时会涉及到细节比如 PhoneWindow 实例是在哪个类哪个方法中实例化的，Selector 是怎么实现的，View 动画是怎么实现的为什么移动后点击事件还在原来的位置，属性动画的原理机制。Android 系统源码部分，事件拦截和分发，进程间的通信方式，应用的创建启动流程，Handler 是怎么导致内存泄露的。第三方库的源码，Glide、OkHttp 和 Retrofit 问得比较多，MVC，MVP和 MVVM 开发模式优缺点，常用设计模式理解问得也多，大公司 Binder 驱动和虚拟机方面问得比较多。数据结构和算法，Java 的常用集合实现原理，比如 ArrayList ，LinkedHashMap 的实现原理，缓存淘汰策略，红黑树和二叉树，最短路径规划，海量数据筛选，很荣幸的是面试官目前还没有要我手写算法。性能优化，如何检测一段代码的执行时间，界面卡顿如何修复，滑动不流畅怎么处理， 50fps 有什么办法可以提高到 60fps，内存泄露怎么检测，leakcanay 的原理。线程和线程池，wait() 和 sleep() 的区别，同步锁，线程池的参数详解，AsyncTask 源码参数详解，我能记得的大概就这些了。最后还啰嗦一下，有很多公司标明了，你必须要会 C 和 C++， OpenGL 或 OpenCv 或音视频编解码。选工作的时候要小心，我写的是熟悉，因为像音视频和 OpenCv 图像处理这些方面，没做个6、7年最好不要写精通。"]],[650,650],[1325,1325]]]]],["20578b84-808a-4694-ac93-cb309950280b",1521540341966,"技术要求\n===\n\n技术基础(CS/JAVA/Android)\t\nCS基础：\n字符集体系\n网络基础：网络协议栈类别和层次；大端和小端对齐\n数据结构：实现，特点，复杂度\n操作系统：内存管理，堆栈，虚拟内存\n数据库基础：索引，事务，基本的CRUD\nJAVA基础：\n基础语法\n集合和泛型\nJVM(内存模型，垃圾回收，类加载机制)\n并发处理，线程安全\nAndroid基础\n展示层：Activity、fragment、View\n逻辑层：Handler，线程/多线程(同步和互斥)、定时器、序列化、Service、Broadcast、JNI\n数据层：ContentProvide、数据库、网络通信\n工程类：gradle，方法数、混淆，打包\n技术深度(Android)\t\nAndroid技术深度\nAndroid深度：\nFramework源码理解AMS，PMS，WMS\nAndroid虚拟机相关\nAndroid核心机制相关Zygote、Binder、Hook\n性能优化：\n绘制优化；启动优化：内存优化；存储优化；\n稳定性优化；耗电优化；安装包优化\n安全：\n存储安全，传输安全等\n其他面试人亮点\n设计能力，技术视野，技术选型\t\n设计能力：\n面向对象设计思想\n设计模式\n流程开发框架，MVP，MVVM，AOP\n设计框架TDD，DDD等\n技术视野：\nAndroid技术特性\n开源框架及原理（OKHTTP、Retrofit、GreenDao等）\n组件化\n插件化\n技术选型：\n特性/性能/可用性/方法数/安全性/学习成本等\n\n问得最多的是自定义 View 基本每家都问，问 View 的绘制流程，自定义View的步骤，有时会涉及到细节比如 PhoneWindow 实例是在哪个类哪个方法中实例化的，Selector 是怎么实现的，View 动画是怎么实现的为什么移动后点击事件还在原来的位置，属性动画的原理机制。Android 系统源码部分，事件拦截和分发，进程间的通信方式，应用的创建启动流程，Handler 是怎么导致内存泄露的。第三方库的源码，Glide、OkHttp 和 Retrofit 问得比较多，MVC，MVP和 MVVM 开发模式优缺点，常用设计模式理解问得也多，大公司 Binder 驱动和虚拟机方面问得比较多。数据结构和算法，Java 的常用集合实现原理，比如 ArrayList ，LinkedHashMap 的实现原理，缓存淘汰策略，红黑树和二叉树，最短路径规划，海量数据筛选，很荣幸的是面试官目前还没有要我手写算法。性能优化，如何检测一段代码的执行时间，界面卡顿如何修复，滑动不流畅怎么处理， 50fps 有什么办法可以提高到 60fps，内存泄露怎么检测，leakcanay 的原理。线程和线程池，wait() 和 sleep() 的区别，同步锁，线程池的参数详解，AsyncTask 源码参数详解，我能记得的大概就这些了。最后还啰嗦一下，有很多公司标明了，你必须要会 C 和 C++， OpenGL 或 OpenCv 或音视频编解码。选工作的时候要小心，我写的是熟悉，因为像音视频和 OpenCv 图像处理这些方面，没做个6、7年最好不要写精通。\n",[[1521540314720,["gengmei_pxf@gengmei123.local",[[-1,650,"问得最多的是自定义 View 基本每家都问，问 View 的绘制流程，自定义View的步骤，有时会涉及到细节比如 PhoneWindow 实例是在哪个类哪个方法中实例化的，Selector 是怎么实现的，View 动画是怎么实现的为什么移动后点击事件还在原来的位置，属性动画的原理机制。Android 系统源码部分，事件拦截和分发，进程间的通信方式，应用的创建启动流程，Handler 是怎么导致内存泄露的。第三方库的源码，Glide、OkHttp 和 Retrofit 问得比较多，MVC，MVP和 MVVM 开发模式优缺点，常用设计模式理解问得也多，大公司 Binder 驱动和虚拟机方面问得比较多。数据结构和算法，Java 的常用集合实现原理，比如 ArrayList ，LinkedHashMap 的实现原理，缓存淘汰策略，红黑树和二叉树，最短路径规划，海量数据筛选，很荣幸的是面试官目前还没有要我手写算法。性能优化，如何检测一段代码的执行时间，界面卡顿如何修复，滑动不流畅怎么处理， 50fps 有什么办法可以提高到 60fps，内存泄露怎么检测，leakcanay 的原理。线程和线程池，wait() 和 sleep() 的区别，同步锁，线程池的参数详解，AsyncTask 源码参数详解，我能记得的大概就这些了。最后还啰嗦一下，有很多公司标明了，你必须要会 C 和 C++， OpenGL 或 OpenCv 或音视频编解码。选工作的时候要小心，我写的是熟悉，因为像音视频和 OpenCv 图像处理这些方面，没做个6、7年最好不要写精通。"]],[650,1325],[650,650]]],[1521540316130,["gengmei_pxf@gengmei123.local",[[-1,650,"\n"]],[650,650],[649,649]]],[1521540316578,["gengmei_pxf@gengmei123.local",[[-1,649,"\n"]],[649,649],[648,648]]]]]]}
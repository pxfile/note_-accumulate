{"compress":true,"commitItems":[["45501600-c4e8-4de6-97f5-3085077f3d2e",1520146438800,"",[[1520146392322,["gengmei_pxf@localhost",[[1,0,"*   视频加密传输"]],[0,0],[10,10]]],[1520146396233,["gengmei_pxf@localhost",[[-1,0,"*   "]],[4,4],[0,0]]],[1520146399281,["gengmei_pxf@localhost",[[1,6,"\n\n"]],[6,6],[7,7]]],[1520146400899,["gengmei_pxf@localhost",[[-1,7,"\n"],[1,8,"=="]],[7,7],[9,9]]],[1520146401696,["gengmei_pxf@localhost",[[1,9,"\n\n"]],[9,9],[10,10]]],[1520146402024,["gengmei_pxf@localhost",[[1,11,"\n"]],[10,10],[11,11]]],[1520146524239,["gengmei_pxf@localhost",[[1,11,"## 为什么要加密视频\n\n付费观看视频的模式是很多平台的核心业务，如果视频被录制并非法传播，付费业务将受到严重威胁。因此对视频服务进行加密的技术变得尤为重要。\n\n本文所指的视频加密是为了让要保护的视频不能轻易被下载，即使下载到了也是加密后的内容，其它人解开加密后的内容需要付出非常大的代价。\n\n无法做到严格的让要保护的视频不被录制，原因在于你需要在客户端播放出视频的原内容，解密的流程在客户端的话不法分子就能模拟整个流程，最保守也能用屏幕录制软件录制到视频的原内容(可以通过加水印的方法缓解下)。我们的目标是让他获取原内容的代价更大。\n\n## 常见视频加密技术\n\n视频加密技术分为两种：\n\n1.  防盗链：通过验证的用户才能访问到没有加密的视频内容，这种方案存在视频很容易就被下载的风险，严格来说这不属于加密。这种方式其实是资源访问授权，它实现起来简单。\n2.  加密视频本身：通过对称加密算法加密视频内容本身，用户获得加密后的视频内容，通过验证的用户可以获取解密视频的密钥，在客户端解密后播放。这种方式实现起来流程复杂会带来更多的计算量。\n\n一般结合这两种技术一起用，第1种技术很成熟也有很多教程就不再复述，本文主要介绍第2种加密技术。\n\n## 流媒体加密技术原理\n\n看视频分为两种，看点播和看录播。\n要看点播可以通过下载完整个视频后再看，或者通过流媒体边下边看。\n看直播只能通过流媒体看最新的画面。\n\n加密整个视频的技术很简单，把视频看成一个文件采用加密文件的技术，这种技术太多就不介绍了。\n加密流媒体的技术很少，也很难找到学习资料，本文主要介绍流媒体加密技术。\n\n常见的应用与浏览器播放的流媒体传输协议有：\n\n*   HLS：Apple 推出的基于 HTTP 协议的 MP4 分片传输协议，可用于点播和直播场景。每下载一个分片都需要发生一次 HTTP 请求，所以严格来说 HLS 不能称为流媒体传输协议。\n*   HTTP-FLV：基于 HTTP 长连接的 FLV 分块 tag 传输协议，可用于点播和直播场景。\n*   RTMP：基于 TCP 的 FLV 分块 message 传输协议，用于 Flash 客户端。\n\n#### 流媒体加密原理\n\n可以看出一个规律这些流媒体传输协议都必须把视频流拆分成连续的小块之后再被传送，只不过分块的大小和视频容器的格式不一样而已。\n\n**流媒体加密技术的核心就在于对这每一小块视频分别使用对称加密算法，在服务端加密客户端解密，通过权限验证的用户才能拿到解密一小块视频的密钥。**\n\n#### 为什么不用 HTTPS 加密\n\n可能有人会问为什么不用 HTTPS 加密？原因是 HTTPS 在网络传输层进行非对称加密，目的是为了防止中间人窃听劫持，任何人都可以和我们的服务器建立 HTTPS 链接获取到原数据。而视频加密的目的不是为了防止有中间人窃听我们的视频数据，而是要让视频数据本身被加密。\n\n#### 为什么选择对称加密\n\n现代成熟的加密技术分为对称加密算法和公钥密码算法(非对称加密)。之所以选择对称加密是因为流媒体要求很强的实时性，数据量又很大。公钥密码算法的计算都比较复杂，效率较低，适合对少量数据进行加密。对称加密效率相对较高，所以流媒体加密首选对称加密。例如在 SSH 登入的时候会先通过公钥密码算法传输一个密钥，再用这个密钥用作对称加密算法的密钥，在数据传输过程中使用对称加密算法来提示数据传输效率。\n\n## HLS 加密\n\nHLS 是目前最成熟的支持流媒体加密的能应用在浏览器里的流媒体传输协议，HLS 原生支持加密，下面来详细介绍它。\n\n在介绍如何加密 HLS 先了解下 HLS 相比于其它流媒体传输协议的优缺点。\n优点在于：\n\n*   建立在 HTTP 之上，使用简单，接入代价小。\n*   分片技术有利于 CDN 加速技术的实施。\n*   部分浏览器原生支持，支持点播和录播。\n\n缺点在于：\n\n*   用作直播时延迟太大。\n*   移动端支持还好，PC端只有 Safari 原生支持。\n\n#### HLS 加密原理\n\nHLS 由两部分构成，一个是 .m3u8 文件，一个是 .ts 视频文件（TS 是视频文件格式的一种）。整个过程是，浏览器会首先去请求 .m3u8 的索引文件，然后解析 m3u8，找出对应的 .ts 文件链接，并开始下载。\n[![hls](https://user-images.githubusercontent.com/5773264/28862374-6f2bcb24-7797-11e7-9671-4a7a471dfb8a.png)](https://user-images.githubusercontent.com/5773264/28862374-6f2bcb24-7797-11e7-9671-4a7a471dfb8a.png)\n\nm3u8 文件是一个文本文件，在开启 HLS 加密时，内容大致如下：\n\n```\n#EXTM3U\n#EXT-X-VERSION:6\n#EXT-X-TARGETDURATION:10\n#EXT-X-MEDIA-SEQUENCE:26\n#EXT-X-KEY:METHOD=AES-128,URI=\"https://priv.example.com/key.do?k=1\"\n#EXTINF:9.901,\nhttp://media.example.com/segment26.ts\n#EXT-X-KEY:METHOD=AES-128,URI=\"https://priv.example.com/key.do?k=2\"\n#EXTINF:9.501,\nhttp://media.example.com/segment28.ts\n\n```\n\n这个文件描述了每个 TS 分片的 URL ，但这些分片都是加密后的内容，要还原出原内容需要从\n\n```\n#EXT-X-KEY:METHOD=AES-128,URI=\"https://priv.example.com/key.do?k=1\"\n\n```\n\n中解析出获取解密密钥的URL `https://priv.example.com/key.do` 和对称加密算法 `AES-128` 。\n获取到密钥后再在客户端解密出原内容。\n可以看出启用 HLS 加密后会多出更多的事情：\n\n*   针对每个 TS 需要去请求获取密钥。\n*   需要多提供一个给客户端获取密钥的鉴权服务。\n*   针对每个 TS 需要去执行对称加密的解密计算。\n\n这会带来更多的网络请求和计算量，可能会对延迟和性能造成一定的不良影响。\n\n#### HLS 加密实战\n\n支持 HLS 的客户端都原生支持加密，所以要开启 HLS 加密你只需要修改你的服务端：\n\n*   修改 HLS 视频服务，对 TS 加密，往 m3u8 中加入 `EXT-X-KEY` 字段。\n*   提供给客户端获取密钥的鉴权服务，即上面的 `https://priv.example.com/key.do?k=1` 所指向的服务。\n\n目前大多数云服务都支持 HLS 加密服务，如果你想直接搭建 HLS 加密服务可以使用 [nginx-rtmp-module](https://github.com/arut/nginx-rtmp-module/wiki/Directives#hls_keys)。\n\n#### HLS 兼容方案\n\n目前 HLS 存在兼容性问题：\n\n*   针对桌面端低版本浏览器例如 IE，可以使用 Flash 技术来播放 HLS ，详细使用见开源项目 [flashls](https://github.com/mangui/flashls)。\n*   针对非Safari高版本浏览器例如 Chrome ，可以使用 Media Source Extensions API 去实现播放 HLS，详细使用见开源项目 [hls.js](https://github.com/video-dev/hls.js)。\n*   针对即不原生支持 HLS又不支持 Media Source Extensions 也不支持 Flash 的浏览器，常见于部分低版本移动端浏览器，我也找不到什么好办法。\n\nflashls 和 hls.js 都支持 HLS 加密技术。\n\n#### 破解 HLS 加密\n\n有加密就有破解，在明白 HLS 加密原理后，你想过如何去破解它吗？先定义下破解成功是指：获取到视频加密前的完整原文件。我想到的方法是：\n\n1.  先付费买一个可正常观看受保护视频的账号。\n2.  用抓包工具抓下所有网络请求(可以筛选下限制到只保存 HLS 和 获取key 的请求，防止保存太多垃圾数据)。\n3.  第2步保存下来了加密后的 TS 分片和加密分片所需要的密钥。\n4.  写一个脚本以 m3u8 为索引一一解密出加密后的 TS 分片的原文件，再把 TS 拼接成完整的视频原文件。\n\n似乎破解的难度也不会很复杂。\n\n## 总结\n\n目前流媒体加密技术还不成熟，除了 HLS 协议提供了方便成熟的方案外，其它协议的加密技术还不成熟。\n\nRTMP 协议提供了一个变种版 RTMPE 可以加密流媒体，原理和 HLS 加密类似，但是我还找不到合适的服务端去支持 RTMPE 协议。"]],[11,11],[3849,3849]]],[1520146567100,["gengmei_pxf@localhost",[[-1,92,"本文所指的视频加密是为了让要保护的视频不能轻易被下载，即使下载到了也是加密后的内容，其它人解开加密后的内容需要付出非常大的代价。\n\n无法做到严格的让要保护的视频不被录制，原因在于你需要在客户端播放出视频的原内容，解密的流程在客户端的话不法分子就能模拟整个流程，最保守也能用屏幕录制软件录制到视频的原内容(可以通过加水印的方法缓解下)。我们的目标是让他获取原内容的代价更大。\n"],[-1,2531," "],[1,2532," "],[-1,2565," "],[1,2566," "],[-1,2573," "],[1,2574," "],[-1,2583," "],[1,2584," "],[-1,2839," "],[1,2840," "],[-1,2851," "],[1,2852," "],[-1,2880," "],[1,2881," "],[-1,2918," "],[1,2919," "],[-1,2970," "],[1,2971," "],[-1,3145," "],[1,3146," "],[-1,3274," "],[1,3275," "]],[92,279],[92,92]]],[1520146567536,["gengmei_pxf@localhost",[[-1,92,"\n"]],[92,92],[91,91]]],[1520146567621,["gengmei_pxf@localhost",[[-1,91,"\n"]],[91,91],[90,90]]],[1520146569047,["gengmei_pxf@localhost",[[1,91,"\n"]],[90,90],[91,91]]],[1520146625959,["gengmei_pxf@localhost",[[1,71,"需要"]],[71,71],[73,73]]],[1520146631692,["gengmei_pxf@localhost",[[-1,82,"的技术变得尤为重要"]],[82,91],[82,82]]],[1520146634418,["gengmei_pxf@localhost",[[-1,68,"。"]],[69,69],[68,68]]],[1520146634886,["gengmei_pxf@localhost",[[1,68,"，"]],[68,68],[69,69]]],[1520146673371,["gengmei_pxf@localhost",[[-1,300,"，第1种技术很成熟也有很多教程就不再复述，本文主要介绍第2种加密技术"]],[300,334],[300,300]]],[1520146723779,["gengmei_pxf@localhost",[[-1,416,"，这种技术太多就不介绍了"]],[416,428],[416,416]]],[1520146760784,["gengmei_pxf@localhost",[[-1,439,"本文主要"]],[439,443],[439,439]]],[1520146765143,["gengmei_pxf@localhost",[[1,439,"一下SHI "]],[439,439],[445,445]]],[1520146766568,["gengmei_pxf@localhost",[[-1,441,"SHI "]],[445,445],[441,441]]],[1520146795222,["gengmei_pxf@localhost",[[1,441,"是参考大神们相关技术文档直接"]],[441,441],[455,455]]],[1520146796133,["gengmei_pxf@localhost",[[-1,453,"直接"]],[455,455],[453,453]]],[1520146797663,["gengmei_pxf@localhost",[[1,453,"总结"]],[453,453],[455,455]]],[1520146800179,["gengmei_pxf@localhost",[[1,455,"的"]],[455,455],[456,456]]],[1520146802740,["gengmei_pxf@localhost",[[-1,456,"介绍"]],[458,458],[456,456]]],[1520146878257,["gengmei_pxf@localhost",[[-1,1270,"，下面来详细介绍它"]],[1271,1279],[1270,1270]]],[1520147016214,["gengmei_pxf@localhost",[[-1,2822,"#### HLS 兼容方案\n\n目前 HLS 存在兼容性问题：\n\n*   针对桌面端低版本浏览器例如 IE，可以使用 Flash 技术来播放 HLS ，详细使用见开源项目 [flashls](https://github.com/mangui/flashls)。\n*   针对非Safari高版本浏览器例如 Chrome ，可以使用 Media Source Extensions API 去实现播放 HLS，详细使用见开源项目 [hls.js](https://github.com/video-dev/hls.js)。\n*   针对即不原生支持 HLS又不支持 Media Source Extensions 也不支持 Flash 的浏览器，常见于部分低版本移动端浏览器，我也找不到什么好办法。\n\nflashls 和 hls.js 都支持 HLS 加密技术。"]],[2822,3202],[2822,2822]]],[1520147016803,["gengmei_pxf@localhost",[[-1,2823,"\n"]],[2822,2822],[2821,2821]]],[1520147017170,["gengmei_pxf@localhost",[[-1,2822,"\n"]],[2821,2821],[2820,2820]]],[1520147070680,["gengmei_pxf@localhost",[[1,83,"。“边播放边解密”，这是加密解密的最优方案"]],[82,82],[103,103]]],[1520147158820,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520147158821,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520147116433,["gengmei_pxf@localhost",[[1,715,"\n"]],[713,713],[714,714]]],[1520147116864,["gengmei_pxf@localhost",[[1,716,"\n"]],[714,714],[715,715]]],[1520147117419,["gengmei_pxf@localhost",[[1,715,"苹果公司的HLS（Http Live Stream）协议，他这个协议是苹果的动态码率自适应技术,主要用于PC和Apple终端的音视频服务。其包括一个m3u8的索引文件,TS(Transport Stream)媒体分片文件和key加密串文件。"]],[715,715],[835,835]]],[1520147122650,["gengmei_pxf@localhost",[[-1,715,"苹果公司的HLS（Http Live Stream）协议，他这个协议是苹果的动态码率自适应技术,主要用于PC和Apple终端的音视频服务。其包括一个m3u8的索引文件,TS(Transport Stream)媒体分片文件和key加密串文件。"]],[835,835],[715,715]]],[1520147123683,["gengmei_pxf@localhost",[[-1,716,"\n"]],[715,715],[714,714]]],[1520147124474,["gengmei_pxf@localhost",[[-1,715,"\n"]],[714,714],[713,713]]],[1520147129931,["gengmei_pxf@localhost",[[1,1245,"苹果公司的HLS（Http Live Stream）协议，他这个协议是苹果的动态码率自适应技术,主要用于PC和Apple终端的音视频服务。其包括一个m3u8的索引文件,TS(Transport Stream)媒体分片文件和key加密串文件。"]],[1245,1245],[1365,1365]]],[1520147132093,["gengmei_pxf@localhost",[[1,1365,"\n"]],[1365,1365],[1366,1366]]],[1520147148394,["gengmei_pxf@localhost",[[-1,1366,"HLS 是目前最成熟的支持流媒体加密的能应用在浏览器里的流媒体传输协议，HLS 原生支持加密。"]],[1366,1413],[1366,1366]]],[1520147149223,["gengmei_pxf@localhost",[[-1,1367,"\n"]],[1366,1366],[1365,1365]]],[1520147153161,["gengmei_pxf@localhost",[[1,1314,"HLS 是目前最成熟的支持流媒体加密的能应用在浏览器里的流媒体传输协议，HLS 原生支持加密。"]],[1314,1314],[1361,1361]]],[1520147278828,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520147278828,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520147262418,["gengmei_pxf@localhost",[[-1,2830,"目前大多数云服务都支持 HLS "],[1,2846,"HLS的关键其实是生成m3u8索引文件和TS媒体文件.\n\n![](http://www.qingpingshan.com/uploads/allimg/180110/1I62K1D-1.png) ![](http://www.qingpingshan.com/uploads/allimg/180110/1I62H544-2.png) 这是一个完整的并且加密过的TS文件和m3u8索引文件，这个key是秘钥，可以看到m3u8索引文件里的内容都是按照HLS规范来编写的,ios系统天然支持m3u8，系统播放器都可以播放m3u8视频,android3.0之后支持HLS协议，因此也可以播放m3u8视频，目前android端vitamio，VLC等可以播放m3u8,因为你传给播放器的是一个m3u8索引文件，播放器会根据索引文件里的内容，播放相应的TS文件，如果TS是加密过的文件，则会先使用key解密ts文件并播放，其实很好理解，可以看西安上面的两个图片进行理解，最好可以自己尝试编写下.\n\n两周的时间，研究得出，可以使用这个方式来进行视频的"],[1,2848,"和解密，这个方案还是最好的，但是需要"],[-1,2850,"，如果你想直接搭建 HLS "],[1,2864,"器的支持，服务器需要切片出TS文件并进行AES加密，然后客户端下载到本地丢给播放器播放,因为这种方式是基于HLS协议，m3u8格式固定，播放器可以自行解密，那问题来了，如果这样做，视频给其他播放器不是还是可以播放吗，解决方法是将m3u8索引文件再次加密下，索引文件也就几十kb，"],[1,2866,"后，客户端解密后丢给播放器播放，这样第三方的播放器就播放不了了,我其实很想将这个方案运用到项目中，但是"],[-1,2868,"可以使用 [nginx-rtmp-modu"],[1,2889,"器压力比较大，本次的需求只是将视频下载到本地，然后加密，解密播放即可，最后就暂时放弃了这个方案，也许后续的版本会使用这个方案，敬请期待吧！\n\n[HLS,m3u8,TS相关资料](http://blog.csdn.net/wdxin1322/artic"],[1,2891,"/details/53910034)\n\n## 异或加密\n\n异或加密其实不算是加密，因为它是对文件进行前后的反转，因为我们知道播放器从开头开始播放的，我们把开头的几十或者几百字节进行异或加密，则播放器就播放不了了，而两次异或加密就是解密，这种方法比较简单，适合比较简单的加密，而且容易破解，因此不建议使用，当然大家可以适当的了解下.\n\n[异或加密的介绍"],[-1,2901,"github"],[1,2907,"www.cnblogs"],[-1,2913,"rut/nginx-rtmp-module/wiki/Directives#hls_keys)。"],[1,2961,"lbertblues/p/5670528.html)\n\n这种方式的加密对于大文件来说也是不耗时的，非常快，我们可以使用RandomAccessFile这个类来随机读取文件的内容进行异或,播放器是从头开始播放的，我们就从头开始，异或几十个字节即可完成加密,解密操作就是再进行一次异或即可.\n\n## 前，中，后，对文件加密2M的长度\n\n最后确定使用的方案是对文件进行前中后进行三段加密，加密总长度为2M的大小（即前面读取512kb,中间读取1M，文件末尾读取512kb）.\n\n这三段加密都涉及到文件的读取，尤其对于大文件的读取，我们使用java的RandomAccessFile（随机访问文件）\n\n这个类来进行文件的加密和解密.\n\nRandomAccessFile有两种模式 一种是“读写”模式（rw）,另一种是“只读”模式（r）,它没有“只写”模式，ios使用的fopen有只写模式.\n\n RandomAccessFile sourceRaf = new RandomAccessFile(sourceFile, \"r\");\n  RandomAccessFile tempRaf = new RandomAccessFile(tempFile, \"rw\");\n\n我们使用这个类对文件进行加密和解密的操作.\n\n针对这块基本是文件的读取，我就不做过多的描述，源码如下，CSDN没有分了，过段时间免费开源，见谅!\n\n源码地址:\n\n[文件前中后三段加密](http://download.csdn.net/download/shenshibaoma/10195694)"]],[2830,2961],[4523,4523]]],[1520147273615,["gengmei_pxf@localhost",[[-1,2662,"支持 HLS 的客户端都原生支持加密，所以要开启 HLS 加密你只需要修改你的服务端：\n\n*   修改 HLS 视频服务，对 TS 加密，往 m3u8 中加入 `EXT-X-KEY` 字段。\n*   提供给客户端获取密钥的鉴权服务，即上面的 `https://priv.example.com/key.do?k=1` 所指向的服务。"],[-1,2927," "],[1,2928," "],[-1,2997," "],[1,2998," "]],[2662,2828],[2662,2662]]],[1520147274134,["gengmei_pxf@localhost",[[-1,2663,"\n"]],[2662,2662],[2661,2661]]],[1520147274454,["gengmei_pxf@localhost",[[-1,2662,"\n"]],[2661,2661],[2660,2660]]],[1520147338824,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520147338824,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520147300652,["gengmei_pxf@localhost",[[1,2763,"\n"]],[2763,2763],[2764,2764]]],[1520147303113,["gengmei_pxf@localhost",[[-1,2763,"\n"]],[2764,2764],[2763,2763]]],[1520147306540,["gengmei_pxf@localhost",[[1,2760,"\n"]],[2760,2760],[2761,2761]]],[1520147312220,["gengmei_pxf@localhost",[[1,2830,"\n"]],[2830,2830],[2831,2831]]],[1520147314636,["gengmei_pxf@localhost",[[-1,2831," "]],[2832,2832],[2831,2831]]],[1520147327644,["gengmei_pxf@localhost",[[-1,2896,","]],[2897,2897],[2896,2896]]],[1520147328655,["gengmei_pxf@localhost",[[1,2896,"。"]],[2896,2896],[2897,2897]]],[1520147329227,["gengmei_pxf@localhost",[[1,2897,"\n"]],[2897,2897],[2898,2898]]],[1520147334803,["gengmei_pxf@localhost",[[1,2898,"\n"]],[2898,2898],[2899,2899]]],[1520147398821,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520147398821,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520147371481,["gengmei_pxf@localhost",[[1,2691,"\n"]],[2689,2689],[2690,2690]]],[1520147371839,["gengmei_pxf@localhost",[[1,2692,"\n"]],[2690,2690],[2691,2691]]],[1520147377844,["gengmei_pxf@localhost",[[1,2691,"##### m3u8索引文件和TS媒体文件"]],[2691,2691],[2712,2712]]],[1520147392268,["gengmei_pxf@localhost",[[1,2922,"\n"]],[2921,2921],[2922,2922]]],[1520147392484,["gengmei_pxf@localhost",[[1,2923,"\n"]],[2922,2922],[2923,2923]]],[1520147458825,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520147458825,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520147432928,["gengmei_pxf@localhost",[[-1,3095,"，其实很好理解，可以看西安上面的两个图片进行理解，最好可以自己尝试编写下."]],[3096,3132],[3095,3095]]],[1520147433802,["gengmei_pxf@localhost",[[1,3095,"。"]],[3095,3095],[3096,3096]]],[1520147456526,["gengmei_pxf@localhost",[[-1,3098,"两周的时间，研究得出，可以使用这个方式来进行视频的加密和解密，这个方案还是最好的，但是"]],[3098,3129],[3098,3098]]],[1520147518828,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520147518828,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520147458850,["gengmei_pxf@localhost",[[-1,3098,"需要服务器的支持，"]],[3098,3107],[3098,3098]]],[1520147486445,["gengmei_pxf@localhost",[[-1,3265,",我其实很想将这个方案运用到项目中，但是服务器压力比较大，本次的需求只是将视频下载到本地，然后加密，解密播放即可，最后就暂时放弃了这个方案，也许后续的版本会使用这个方案，敬请期待吧！"]],[3265,3356],[3265,3265]]],[1520147487799,["gengmei_pxf@localhost",[[1,3265,"。"]],[3265,3265],[3266,3266]]],[1520147511960,["gengmei_pxf@localhost",[[1,2922,"##### "]],[2922,2922],[2928,2928]]],[1520147578828,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520147578828,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520147540745,["gengmei_pxf@localhost",[[1,2928,"HLS加密流程"]],[2928,2928],[2935,2935]]],[1520147638827,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520147638827,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520147595361,["gengmei_pxf@localhost",[[-1,3032,","]],[3033,3033],[3032,3032]]],[1520147596099,["gengmei_pxf@localhost",[[1,3032,"。"]],[3032,3032],[3033,3033]]],[1520147601194,["gengmei_pxf@localhost",[[1,3033,"\n"]],[3033,3033],[3034,3034]]],[1520147601818,["gengmei_pxf@localhost",[[1,3034,"\n"]],[3034,3034],[3035,3035]]],[1520147613823,["gengmei_pxf@localhost",[[1,2937,"\n"]],[2936,2936],[2937,2937]]],[1520147624257,["gengmei_pxf@localhost",[[1,2937,"* 2端"]],[2937,2937],[2941,2941]]],[1520147626303,["gengmei_pxf@localhost",[[-1,2939,"2端"]],[2941,2941],[2939,2939]]],[1520147632669,["gengmei_pxf@localhost",[[1,2939,"2"]],[2939,2939],[2940,2940]]],[1520147634187,["gengmei_pxf@localhost",[[-1,2939,"2"]],[2940,2940],[2939,2939]]],[1520147637773,["gengmei_pxf@localhost",[[1,2939,"两"]],[2939,2939],[2940,2940]]],[1520147698827,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520147698827,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520147643823,["gengmei_pxf@localhost",[[1,2940,"端播放器适配"]],[2940,2940],[2946,2946]]],[1520147645290,["gengmei_pxf@localhost",[[1,2947,"\n"]],[2946,2946],[2947,2947]]],[1520147652106,["gengmei_pxf@localhost",[[-1,2936,"\n"]],[2937,2937],[2936,2936]]],[1520147653466,["gengmei_pxf@localhost",[[1,2936,"\n"]],[2936,2936],[2937,2937]]],[1520147663626,["gengmei_pxf@localhost",[[-1,2937,"*"]],[2938,2938],[2937,2937]]],[1520147665508,["gengmei_pxf@localhost",[[1,2937,"######"]],[2937,2937],[2943,2943]]],[1520147672228,["gengmei_pxf@localhost",[[1,2944,"**"]],[2944,2944],[2946,2946]]],[1520147674860,["gengmei_pxf@localhost",[[1,2953,"**"]],[2953,2953],[2955,2955]]],[1520147686163,["gengmei_pxf@localhost",[[1,2957,"* IOS"]],[2957,2957],[2962,2962]]],[1520147686912,["gengmei_pxf@localhost",[[1,2962,"\n"]],[2962,2962],[2963,2963]]],[1520147691449,["gengmei_pxf@localhost",[[-1,2993,","]],[2994,2994],[2993,2993]]],[1520147693371,["gengmei_pxf@localhost",[[1,2993,"。"]],[2993,2993],[2994,2994]]],[1520147694000,["gengmei_pxf@localhost",[[1,2994,"\n"]],[2994,2994],[2995,2995]]],[1520147694681,["gengmei_pxf@localhost",[[1,2995,"\n"]],[2995,2995],[2996,2996]]],[1520147696848,["gengmei_pxf@localhost",[[1,2996,"\n"]],[2995,2995],[2996,2996]]],[1520147697435,["gengmei_pxf@localhost",[[1,2996,"*"]],[2996,2996],[2997,2997]]],[1520147758827,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520147758827,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520147704290,["gengmei_pxf@localhost",[[1,2997,"Android"]],[2997,2997],[3004,3004]]],[1520147707162,["gengmei_pxf@localhost",[[1,2997," "]],[2997,2997],[2998,2998]]],[1520147714813,["gengmei_pxf@localhost",[[1,3073,"\n"]],[3072,3072],[3073,3073]]],[1520147724402,["gengmei_pxf@localhost",[[1,3073,"###### ****"]],[3073,3073],[3084,3084]]],[1520147818831,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520147818831,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520147759038,["gengmei_pxf@localhost",[[1,3082,"客户端"]],[3082,3082],[3085,3085]]],[1520147762013,["gengmei_pxf@localhost",[[1,3166,"\n"]],[3165,3165],[3166,3166]]],[1520147766857,["gengmei_pxf@localhost",[[1,3166,"###### *****"]],[3166,3166],[3178,3178]]],[1520147767534,["gengmei_pxf@localhost",[[-1,3177,"*"]],[3178,3178],[3177,3177]]],[1520147770704,["gengmei_pxf@localhost",[[1,3175,"服务器"]],[3175,3175],[3178,3178]]],[1520147775237,["gengmei_pxf@localhost",[[1,3088,"\n"]],[3087,3087],[3088,3088]]],[1520147777093,["gengmei_pxf@localhost",[[1,3182,"\n"]],[3181,3181],[3182,3182]]],[1520147785829,["gengmei_pxf@localhost",[[-1,3089,"因为你传"]],[3089,3093],[3089,3089]]],[1520147787858,["gengmei_pxf@localhost",[[1,3089,"因为你传"]],[3089,3089],[3089,3093]]],[1520147790853,["gengmei_pxf@localhost",[[-1,3089,"因为你"]],[3089,3092],[3089,3089]]],[1520147793788,["gengmei_pxf@localhost",[[1,3091,"客户端"]],[3091,3091],[3094,3094]]],[1520147799144,["gengmei_pxf@localhost",[[-1,3097,"的是"]],[3099,3099],[3097,3097]]],[1520147878831,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520147878831,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520147849613,["gengmei_pxf@localhost",[[1,3108,"将索引文件解密后，"]],[3108,3108],[3117,3117]]],[1520147878373,["gengmei_pxf@localhost",[[1,3108,"先使用key解密"]],[3108,3108],[3116,3116]]],[1520147938837,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520147938837,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520147880587,["gengmei_pxf@localhost",[[-1,3116,"将"]],[3117,3117],[3116,3116]]],[1520147891490,["gengmei_pxf@localhost",[[-1,3120,"解密"]],[3122,3122],[3120,3120]]],[1520147926115,["gengmei_pxf@localhost",[[1,3089,"客户端下载到本地"]],[3089,3089],[3097,3097]]],[1520147929945,["gengmei_pxf@localhost",[[-1,3099,"客户"]],[3101,3101],[3099,3099]]],[1520147998836,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520147998836,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520147957930,["gengmei_pxf@localhost",[[1,3274,"“”"]],[3274,3274],[3276,3276]]],[1520147958832,["gengmei_pxf@localhost",[[-1,3274,"“”"]],[3276,3276],[3274,3274]]],[1520147959834,["gengmei_pxf@localhost",[[1,3274,"**"]],[3274,3274],[3276,3276]]],[1520147970135,["gengmei_pxf@localhost",[[-1,3273,"，**"]],[3276,3276],[3273,3273]]],[1520147971953,["gengmei_pxf@localhost",[[1,3273,"。"]],[3273,3273],[3274,3274]]],[1520147982034,["gengmei_pxf@localhost",[[1,3274,"\n"]],[3274,3274],[3275,3275]]],[1520147983076,["gengmei_pxf@localhost",[[1,3275,"\n"]],[3275,3275],[3276,3276]]],[1520148058837,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520148058837,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520148005196,["gengmei_pxf@localhost",[[1,3275,"######"]],[3275,3275],[3281,3281]]],[1520148006905,["gengmei_pxf@localhost",[[1,3275,"\n"]],[3274,3274],[3275,3275]]],[1520148009761,["gengmei_pxf@localhost",[[1,3283,"\n"]],[3282,3282],[3283,3283]]],[1520148013324,["gengmei_pxf@localhost",[[1,3282," ****"]],[3282,3282],[3287,3287]]],[1520148038411,["gengmei_pxf@localhost",[[1,3285,"防止第三方播放器播放"]],[3285,3285],[3295,3295]]],[1520148046952,["gengmei_pxf@localhost",[[-1,3299,"那问题来了，如果这样做，视频给其他播放器不是还是可以播放吗，解决方法是"]],[3299,3334],[3299,3299]]],[1520148071561,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520148071561,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520148065650,["gengmei_pxf@localhost",[[1,3085,"工作"]],[3085,3085],[3087,3087]]],[1520148069497,["gengmei_pxf@localhost",[[1,3199,"工作"]],[3199,3199],[3201,3201]]],[1520148191578,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520148191578,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520148178022,["gengmei_pxf@localhost",[[1,3565,"**"]],[3565,3565],[3567,3567]]],[1520148180542,["gengmei_pxf@localhost",[[1,3574,"**"]],[3574,3574],[3576,3576]]],[1520148251571,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520148251571,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520148208259,["gengmei_pxf@localhost",[[1,4308,"\n"]],[4306,4306],[4307,4307]]],[1520148208410,["gengmei_pxf@localhost",[[1,4309,"\n"]],[4307,4307],[4308,4308]]],[1520148209397,["gengmei_pxf@localhost",[[1,4308,"## 遇到的问题\n\n1.分片加密时，要在手机端先走通这个流程，即自己完成TS切片，加密TS，自己编写m3u8索引文件，然后手机端使用vitamio播放器进行播放，这个过程，ios自身系统播放器不支持本地播放m3u8的视频文件，android端使用vitamio传入本地路径可以播放m3u8视频，ios换成vitamio后也可以进行播放;第二个是要播放加密的m3u8文件，首先要对TS进行AES加密，生成key文件，手动编写m3u8文件，然后传入播放器测试,分片加密耗时两周测试完成，说明这个方式是可行的，我也非常想使用这个方式，但是针对目前需求稍许简单，服务器使用TS切片等压力较大，暂时摒弃.\n\n2.异或加密非常的快，对于大文件，但是基于他非常的简单，容易破解，摒弃.\n\n3.文件的前中后加密，这种方式是比较不错的，PC端用于对小文件的加密操作比较多，在使用RandomAccessFile进行追加内容时，需要手动将指针移动到当前文件长度的位置，即raf.seek(xxx),再进行raf.write()追加操作."]],[4308,4308],[4766,4766]]],[1520148214548,["gengmei_pxf@localhost",[[-1,4311,"遇到的问题\n"]],[4311,4317],[4311,4311]]],[1520148224565,["gengmei_pxf@localhost",[[1,4311,"3中加密方式的对比"]],[4311,4311],[4320,4320]]],[1520148237802,["gengmei_pxf@localhost",[[1,4321,"\n"]],[4320,4320],[4321,4321]]],[1520148250948,["gengmei_pxf@localhost",[[1,4322,"* "]],[4322,4322],[4324,4324]]],[1520148311578,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520148311578,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520148252371,["gengmei_pxf@localhost",[[1,4324,"**"]],[4324,4324],[4326,4326]]],[1520148259851,["gengmei_pxf@localhost",[[1,4332,"**"]],[4332,4332],[4334,4334]]],[1520148262025,["gengmei_pxf@localhost",[[-1,4334,"时，"]],[4334,4336],[4334,4334]]],[1520148262496,["gengmei_pxf@localhost",[[1,4334,"\n"]],[4334,4334],[4335,4335]]],[1520148263144,["gengmei_pxf@localhost",[[1,4335,"\n"]],[4335,4335],[4336,4336]]],[1520148267286,["gengmei_pxf@localhost",[[-1,4326,"1."]],[4328,4328],[4326,4326]]],[1520148287323,["gengmei_pxf@localhost",[[-1,4567,"，我也非常想使用这个方式，但是针对目前需求稍许简单，服务器使用TS切片等压力较大，暂时摒弃."]],[4568,4613],[4567,4567]]],[1520148288150,["gengmei_pxf@localhost",[[1,4567,"。"]],[4567,4567],[4568,4568]]],[1520148298613,["gengmei_pxf@localhost",[[1,4567,"，也是最好的加密方式"]],[4567,4567],[4577,4577]]],[1520148304057,["gengmei_pxf@localhost",[[-1,4580,"2."]],[4582,4582],[4580,4580]]],[1520148305165,["gengmei_pxf@localhost",[[1,4580,"*"]],[4580,4580],[4581,4581]]],[1520148306675,["gengmei_pxf@localhost",[[1,4581,"\n"]],[4581,4581],[4582,4582]]],[1520148310814,["gengmei_pxf@localhost",[[1,4581," ****"]],[4581,4581],[4586,4586]]],[1520148371582,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520148371582,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520148349643,["gengmei_pxf@localhost",[[1,4584,"异或加密"]],[4584,4584],[4588,4588]]],[1520148351832,["gengmei_pxf@localhost",[[1,4591,"\n"]],[4590,4590],[4591,4591]]],[1520148354712,["gengmei_pxf@localhost",[[-1,4625,"."]],[4626,4626],[4625,4625]]],[1520148355067,["gengmei_pxf@localhost",[[1,4625,"。"]],[4625,4625],[4626,4626]]],[1520148359224,["gengmei_pxf@localhost",[[1,4628,"\n"]],[4627,4627],[4628,4628]]],[1520148361907,["gengmei_pxf@localhost",[[1,4628,"* ****"]],[4628,4628],[4634,4634]]],[1520148369698,["gengmei_pxf@localhost",[[1,4632,"文件的前中后加密"]],[4632,4632],[4640,4640]]],[1520148431586,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520148431586,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520148372054,["gengmei_pxf@localhost",[[-1,4643,"3."]],[4645,4645],[4643,4643]]],[1520148372709,["gengmei_pxf@localhost",[[1,4643,"\n"]],[4643,4643],[4644,4644]]],[1520148382663,["gengmei_pxf@localhost",[[1,4330," HLS"]],[4330,4330],[4334,4334]]],[1520148386999,["gengmei_pxf@localhost",[[-1,4326,"分片加密 "]],[4326,4331],[4326,4326]]],[1520148390194,["gengmei_pxf@localhost",[[1,4329,"加密"]],[4329,4329],[4331,4331]]],[1520148397335,["gengmei_pxf@localhost",[[-1,4311,"3"]],[4312,4312],[4311,4311]]],[1520148491591,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520148491591,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520148436443,["gengmei_pxf@localhost",[[1,1234,"\n"]],[1233,1233],[1234,1234]]],[1520148436795,["gengmei_pxf@localhost",[[1,1235,"\n"]],[1234,1234],[1235,1235]]],[1520148447675,["gengmei_pxf@localhost",[[1,1234,"## 加密方式介绍"]],[1234,1234],[1243,1243]]],[1520148456930,["gengmei_pxf@localhost",[[1,1237,"几种适用"]],[1237,1237],[1241,1241]]],[1520148463472,["gengmei_pxf@localhost",[[-1,718,"#"]],[719,719],[718,718]]],[1520148466184,["gengmei_pxf@localhost",[[-1,868,"#"]],[869,869],[868,868]]],[1520148468866,["gengmei_pxf@localhost",[[-1,1023,"#"]],[1024,1024],[1023,1023]]],[1520148475114,["gengmei_pxf@localhost",[[1,1248,"#"]],[1248,1248],[1249,1249]]],[1520148551596,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520148551596,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520148519263,["gengmei_pxf@localhost",[[1,3456,"#"]],[3456,3456],[3457,3457]]],[1520148522920,["gengmei_pxf@localhost",[[1,3788,"#"]],[3788,3788],[3789,3789]]],[1520148542502,["gengmei_pxf@localhost",[[-1,4326,"中"],[1,4327,"s"]],[4326,4327],[4326,4327]]],[1520148543110,["gengmei_pxf@localhost",[[1,4327,"a"]],[4326,4327],[4326,4328]]],[1520148543449,["gengmei_pxf@localhost",[[1,4328,"n"]],[4326,4328],[4326,4329]]],[1520148543941,["gengmei_pxf@localhost",[[1,4329,"'z"]],[4326,4329],[4326,4331]]],[1520148544140,["gengmei_pxf@localhost",[[1,4331,"h"]],[4326,4331],[4326,4332]]],[1520148544490,["gengmei_pxf@localhost",[[1,4332,"'n"]],[4326,4332],[4326,4334]]],[1520148544749,["gengmei_pxf@localhost",[[-1,4332,"'"],[1,4334,"g"]],[4326,4334],[4326,4334]]],[1520148545599,["gengmei_pxf@localhost",[[1,4332,"'"],[-1,4333,"g"]],[4326,4334],[4326,4334]]],[1520148546070,["gengmei_pxf@localhost",[[-1,4332,"'n"]],[4326,4334],[4326,4332]]],[1520148546437,["gengmei_pxf@localhost",[[1,4332,"o"]],[4326,4332],[4326,4333]]],[1520148546609,["gengmei_pxf@localhost",[[1,4333,"n"]],[4326,4333],[4326,4334]]],[1520148546781,["gengmei_pxf@localhost",[[1,4334,"g"]],[4326,4334],[4326,4335]]],[1520148547064,["gengmei_pxf@localhost",[[-1,4326,"san'zhong"],[1,4335,"三种"]],[4326,4335],[4328,4328]]],[1520148611602,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520148611602,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520148564367,["gengmei_pxf@localhost",[[-1,4781,"#### 破解 HLS 加密\n\n有加密就有破解，在明白 HLS 加密原理后，你想过如何去破解它吗？先定义下破解成功是指：获取到视频加密前的完整原文件。我想到的方法是：\n\n1.  先付费买一个可正常观看受保护视频的账号。\n2.  用抓包工具抓下所有网络请求(可以筛选下限制到只保存 HLS 和 获取key 的请求，防止保存太多垃圾数据)。\n3.  第2步保存下来了加密后的 TS 分片和加密分片所需要的密钥。\n4.  写一个脚本以 m3u8 为索引一一解密出加密后的 TS 分片的原文件，再把 TS 拼接成完整的视频原文件。\n\n似乎破解的难度也不会很复杂。"]],[4781,5058],[4781,4781]]],[1520148564956,["gengmei_pxf@localhost",[[-1,4782,"\n"]],[4781,4781],[4780,4780]]],[1520148565223,["gengmei_pxf@localhost",[[-1,4781,"\n"]],[4780,4780],[4779,4779]]],[1520148586259,["gengmei_pxf@localhost",[[1,3454,"\n"]],[3452,3452],[3453,3453]]],[1520148586475,["gengmei_pxf@localhost",[[1,3455,"\n"]],[3453,3453],[3454,3454]]],[1520148586894,["gengmei_pxf@localhost",[[1,3454,"#### 破解 HLS 加密\n\n有加密就有破解，在明白 HLS 加密原理后，你想过如何去破解它吗？先定义下破解成功是指：获取到视频加密前的完整原文件。我想到的方法是：\n\n1.  先付费买一个可正常观看受保护视频的账号。\n2.  用抓包工具抓下所有网络请求(可以筛选下限制到只保存 HLS 和 获取key 的请求，防止保存太多垃圾数据)。\n3.  第2步保存下来了加密后的 TS 分片和加密分片所需要的密钥。\n4.  写一个脚本以 m3u8 为索引一一解密出加密后的 TS 分片的原文件，再把 TS 拼接成完整的视频原文件。\n\n似乎破解的难度也不会很复杂。"]],[3454,3454],[3731,3731]]],[1520148598917,["gengmei_pxf@localhost",[[1,3458,"#"]],[3454,3458],[3459,3459]]],[1520148671603,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520148671603,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520148637906,["gengmei_pxf@localhost",[[-1,5162,"但是我还"]],[5162,5166],[5162,5162]]],[1520148639381,["gengmei_pxf@localhost",[[1,5162,"一般"]],[5162,5162],[5164,5164]]],[1520149518797,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520149518797,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520149514239,["gengmei_pxf@localhost",[[-1,1743,"s"],[-1,1747,"user-images.githubusercontent"],[1,1776,"ou21vt4uz.bkt.clouddn"],[-1,1781,"5773264/28862374-6f2bcb24-7797-11e7-9671-4a7a471dfb8a.png)](https://user-images.githubusercontent.com/5773264/28862374-6f2bcb24-7797-11e7-9671-4a7a471dfb8a"],[1,1936,"interview/video_%20encryption/HLS1"]],[1739,1940],[1810,1810]]],[1520149533643,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520149533643,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520149531965,["gengmei_pxf@localhost",[[-1,2608,"www.qingpingshan"],[1,2624,"ou21vt4uz.bkt"],[-1,2626,"om/up"],[-1,2633,"ads/allimg/180110/1I62K1D-1"],[1,2660,"uddn.com/interview/video_%20encryption/HLS2"]],[2601,2664],[2672,2672]]],[1520149546105,[null,[[-1,83,"。"],[1,104,"。"]],[83,83],[105,105]]],[1520149546105,[null,[[1,83,"。"],[-1,103,"。"]],[105,105],[83,83]]],[1520149544725,["gengmei_pxf@localhost",[[-1,2686,"www.qingpingsha"],[1,2701,"ou21vt4uz.bkt.cloudd"],[-1,2707,"uploads/allimg/180110/1I62H544-2"],[1,2739,"interview/video_%20encryption/HSL3"]],[2679,2743],[2750,2750]]]]]]}
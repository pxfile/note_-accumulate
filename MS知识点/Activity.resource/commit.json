{"compress":true,"commitItems":[["e1580943-68d5-43e0-83e5-085b5fdec46b",1520578923841,"",[[1520578884787,["gengmei_pxf@gengmei123.local",[[1,0,"Activity\n===\n\n\nActivity是什么？   　　我们都知道android中有四大组件（Activity 活动，Service 服务，Content Provider 内容提供者，BroadcastReceiver 广播接收器），Activity是我们用的最多也是最基本的组件，因为应用的所有操作都与用户相关，Activity 提供窗口来和用户进行交互。\n　　官方文档这么说：\n\n> An activity is a single, focused thing that the user can do. Almost all activities interact with the user, so the Activity class takes care of creating a window for you in which you can place your UI with setContentView(View). \n> \n> \n> 大概的意思（原谅我）：\n\n>　　activity是独立平等的，用来处理用户操作。几乎所有的activity都是用来和用户交互的，所以activity类会创建了一个窗口，开发者可以通过setContentView(View)的接口把UI放到给窗口上。\n\n　　Android中的activity全都归属于task管理 。task 是多个 activity 的集合，这些 activity 按照启动顺序排队存入一个栈（即“back stack”）。android默认会为每个App维持一个task来存放该app的所有activity，task的默认name为该app的packagename。\n\n　　当然我们也可以在AndroidMainfest.xml中申明activity的taskAffinity属性来自定义task，但不建议使用，如果其他app也申明相同的task，它就有可能启动到你的activity，带来各种安全问题（比如拿到你的Intent）。\n\n# Activity的内部调用过程   　　上面已经说了，系统通过堆栈来管理activity，当一个新的activity开始时，它被放置在堆栈的顶部和成为运行活动，以前的activity始终保持低于它在堆栈，而不会再次到达前台，直到新的活动退出。\n\n　　还是上这张官网的activity_lifecycle图：\n　　![这里写图片描述](http://img.blog.csdn.net/20160425171711054)　\n\n - 首先打开一个新的activity实例的时候，系统会依次调用\n\n> onCreate（）  -> onStart() -> onResume() 然后开始running\n\n running的时候被覆盖了（从它打开了新的activity或是被锁屏，但是它**依然在前台**运行， lost focus but is still visible），系统调用onPause();\n\n>　该方法执行activity暂停，通常用于提交未保存的更改到持久化数据，停止动画和其他的东西。但这个activity还是完全活着（它保持所有的状态和成员信息，并保持连接到**窗口管理器**）\n\n接下来它有三条出路\n\n①用户返回到该activity就调用onResume()方法重新running \n\n②用户回到桌面或是打开其他activity，就会调用onStop()进入停止状态（保留所有的状态和成员信息，**对用户不可见**）\n\n③系统内存不足，拥有更高限权的应用需要内存，那么该activity的进程就可能会被系统回收。（回收onRause()和onStop()状态的activity进程）要想重新打开就必须重新创建一遍。\n\n如果用户返回到onStop()状态的activity（又显示在前台了），系统会调用\n\n> onRestart() ->  onStart() -> onResume() 然后重新running\n\n在activity结束（调用finish ()）或是被系统杀死之前会调用onDestroy()方法释放所有占用的资源。\n\n> activity生命周期中三个嵌套的循环\n\n - activity的完整生存期会在 onCreate() 调用和 onDestroy() 调用之间发生。　\n\n - activity的可见生存期会在 onStart() 调用和 onStop() 调用之间发生。系统会在activity的整个生存期内多次调用 onStart() 和onStop()， 因为activity可能会在显示和隐藏之间不断地来回切换。　\n\n - activity的前后台切换会在 onResume() 调用和 onPause() 之间发生。\n 因为这个状态可能会经常发生转换，为了避免切换迟缓引起的用户等待，这两个方法中的代码应该相当地轻量化。\n\n## activity被回收的状态和信息保存和恢复过程   ``` public class MainActivity extends Activity {   @Override protected void onCreate(Bundle savedInstanceState) { if(savedInstanceState!=null){ //判断是否有以前的保存状态信息 savedInstanceState.get(\"Key\");          }\n super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); } @Override protected void onSaveInstanceState(Bundle outState) {\n // TODO Auto-generated method stub //可能被回收内存前保存状态和信息， Bundle data = new Bundle();      data.putString(\"key\", \"last words before be kill\");\n outState.putAll(data); super.onSaveInstanceState(outState); }\n @Override protected void onRestoreInstanceState(Bundle savedInstanceState) {\n // TODO Auto-generated method stub if(savedInstanceState!=null){ //判断是否有以前的保存状态信息 savedInstanceState.get(\"Key\");          }\n super.onRestoreInstanceState(savedInstanceState); } } ```   > onSaveInstanceState方法\n\n　　在activity　可能被回收之前　调用,用来保存自己的状态和信息，以便回收后重建时恢复数据（在onCreate()或onRestoreInstanceState()中恢复）。旋转屏幕重建activity会调用该方法，但其他情况在onRause()和onStop()状态的activity不一定会调用 ，下面是该方法的文档说明。\n\n```\n One example of when onPause and onStop is called and not this method is when a user navigates back from activity B to activity A: there is no need to call onSaveInstanceState on B because that particular instance will never be restored, so the system avoids calling it. An example when onPause is called and not onSaveInstanceState is when activity B is launched in front of activity A: the system may avoid calling onSaveInstanceState on activity A if it isn't killed during the lifetime of B since the state of the user interface of A will stay intact. ```   也就是说，系统灵活的来决定调不调用该方法，**但是如果要调用就一定发生在onStop方法之前，但并不保证发生在onPause的前面还是后面。**   > onRestoreInstanceState方法\n\n　　这个方法在onStart 和 onPostCreate之间调用，在onCreate中也可以状态恢复，但有时候需要所有布局初始化完成后再恢复状态。\n\n　　onPostCreate：一般不实现这个方法，当程序的代码开始运行时，它调用系统做最后的初始化工作。\n\n# 启动模式   ## 启动模式什么？ 　　\n　　简单的说就是定义activity 实例与task 的关联方式。\n\n## 为什么要定义启动模式？  　　 为了实现一些默认启动（standard）模式之外的需求：\n\n - 让某个 activity 启动一个新的 task （而不是被放入当前 task ）\n\n - 让 activity 启动时只是调出已有的某个实例（而不是在 back stack 顶创建一个新的实例）　\n\n - 或者，你想在用户离开 task 时只保留根 activity，而 back stack 中的其它 activity 都要清空\n\n## 怎样定义启动模式？   　　定义启动模式的方法有两种：\n\n### 使用 manifest 文件   　　在 manifest 文件中activity声明时，利用 activity 元素的 launchMode 属性来设定 activity 与 task 的关系。\n\n```\n <activity ．．．．．． android:launchMode=\"standard\" > ．．．．．．． </activity> ```   > 注意： 你用 launchMode 属性为 activity 设置的模式可以被启动 activity 的 intent 标志所覆盖。\n\n#### 有哪些启动模式？     - \"standard\" （默认模式）　\n\n　　当通过这种模式来启动Activity时,　Android总会为目标 Activity创建一个新的实例,并将该Activity添加到当前Task栈中。这种方式不会启动新的Task,只是将新的 Activity添加到原有的Task中。　\n\n - \"singleTop\"　\n\n 　　该模式和standard模式基本一致,但有一点不同:当将要被启动的Activity已经位于Task栈顶时,系统不会重新创建目标Activity实例,而是直接复用Task栈顶的Activity。\n\n - \"singleTask\"\n\n　　Activity在同一个Task内只有一个实例。\n\n　　如果将要启动的Activity不存在,那么系统将会创建该实例,并将其加入Task栈顶；　\n\n　　如果将要启动的Activity已存在,且存在栈顶,直接复用Task栈顶的Activity。　\n\n　　如果Activity存在但是没有位于栈顶,那么此时系统会把位于该Activity上面的所有其他Activity全部移出Task,从而使得该目标Activity位于栈顶。\n\n - \"singleInstance\"　\n\n　　无论从哪个Task中启动目标Activity,只会创建一个目标Activity实例且会用一个全新的Task栈来装载该Activity实例（全局单例）.\n\n　　如果将要启动的Activity不存在,那么系统将会先创建一个全新的Task,再创建目标Activity实例并将该Activity实例放入此全新的Task中。\n\n　　如果将要启动的Activity已存在,那么无论它位于哪个应用程序,哪个Task中;系统都会把该Activity所在的Task转到前台,从而使该Activity显示出来。\n\n### 使用 Intent 标志   　　在要启动 activity 时，你可以在传给 startActivity() 的 intent 中包含相应标志，以修改 activity 与 task 的默认关系。\n\n``` 　　　　　Intent i = new Intent(this,ＮewActivity.class);\n i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); startActivity(i); ```   #### 可以通过标志修改的默认模式有哪些？   　　　\n\n - FLAG_ACTIVITY_NEW_TASK\n\n　　与\"singleTask\"模式相同，在新的 task 中启动 activity。如果要启动的 activity 已经运行于某 task 中，则那个 task 将调入前台。\n\n - FLAG_ACTIVITY_SINGLE_TOP\n\n　　与 \"singleTop\"模式相同，如果要启动的 activity位于back stack 顶，系统不会重新创建目标Activity实例,而是直接复用Task栈顶的Activity。\n\n - FLAG_ACTIVITY_CLEAR_TOP\n\n　　**此种模式在launchMode中没有对应的属性值。**如果要启动的 activity 已经在当前 task 中运行，则不再启动一个新的实例，且所有在其上面的 activity 将被销毁。\n\n####　关于启动模式的一些建议\n\n　　 一般不要改变 activity 和 task 默认的工作方式。 如果你确定有必要修改默认方式，请保持谨慎，并确保 activity 在启动和从其它 activity 返回时的可用性，多做测试和安全方面的工作。\n\n# Intent Filter   　　android的3个核心组件——Activity、services、广播接收器——是通过intent传递消息的。intent消息用于在运行时绑定不同的组件。\n　　在 Android 的 AndroidManifest.xml 配置文件中可以通过 intent-filter 节点为一个 Activity 指定其 Intent Filter，以便告诉系统该 Activity 可以响应什么类型的 Intent。\n\n## intent-filter 的三大属性   ### Action  　　一个 Intent Filter 可以包含多个 Action，Action 列表用于标示 Activity 所能接受的“动作”，它是一个用户自定义的字符串。\n\n``` <intent-filter > \n <action android:name=\"android.intent.action.MAIN\" /> \n<action android:name=\"com.scu.amazing7Action\" /> ……\n </intent-filter> ```   在代码中使用以下语句便可以启动该Intent 对象：\n\n``` Intent i=new Intent(); i.setAction(\"com.scu.amazing7Action\"); ``` Action 列表中包含了“com.scu.amazing7Action”的 Activity 都将会匹配成功\n\n### URL   　　在 intent-filter 节点中，通过 data节点匹配外部数据，也就是通过 URI 携带外部数据给目标组件。\n\n``` <data android:mimeType=\"mimeType\" \n   android:scheme=\"scheme\" \n    android:host=\"host\"\n android:port=\"port\"android:path=\"path\"/> ``` 注意：只有data的所有的属性都匹配成功时 URI 数据匹配才会成功\n\n### Category  　　为组件定义一个 类别列表，当 Intent 中包含这个类别列表的所有项目时才会匹配成功。\n\n``` <intent-filter . . . >\n <action android:name=\"code android.intent.action.MAIN\" /> <category android:name=\"code　android.intent.category.LAUNCHER\" /> </intent-filter> ```   ## Activity 种 Intent Filter 的匹配过程   　　①加载所有的Intent Filter列表\n　　②去掉action匹配失败的Intent Filter\n　　③去掉url匹配失败的Intent Filter\n　　④去掉Category匹配失败的Intent Filter\n　　⑤判断剩下的Intent Filter数目是否为0。如果为0查找失败返回异常；如果大于0，就按优先级排序，返回最高优先级的Intent Filter\n\n# 开发中Activity的一些问题   - \n  一般设置Activity为非公开的\n\n``` <activity ．．．．．． android:exported=\"false\" /> ```   注意：非公开的Activity不能设置intent-filter，以免被其他activity唤醒（如果拥有相同的intent-filter）。\n\n - 不要指定activity的taskAffinity属性\n\n - 不要设置activity的LaunchMode（保持默认）\n\n　　注意Activity的intent最好也不要设定为FLAG_ACTIVITY_NEW_TASK\n\n - 在匿名内部类中使用this时加上activity类名（类名.this,不一定是当前activity）\n\n - 设置activity全屏\n\n  　　在其 onCreate()方法中加入：\n\n``` // 设置全屏模式\n getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); // 去除标题栏\n requestWindowFeature(Window.FEATURE_NO_TITLE); ```"]],[0,0],[7922,7922]]],[1520578902222,["gengmei_pxf@gengmei123.local",[[1,5252,"\n"]],[5252,5252],[5253,5253]]],[1520578904366,["gengmei_pxf@gengmei123.local",[[1,5349,"\n"]],[5349,5349],[5350,5350]]],[1520578906734,["gengmei_pxf@gengmei123.local",[[1,5460,"\n"]],[5460,5460],[5461,5461]]],[1520578909667,["gengmei_pxf@gengmei123.local",[[-1,5464,"   "],[1,5467,"\n"]],[5464,5467],[5465,5465]]],[1520578915116,["gengmei_pxf@gengmei123.local",[[-1,5861,"\n"]],[5862,5862],[5861,5861]]],[1520578916445,["gengmei_pxf@gengmei123.local",[[1,5861,"\n"]],[5861,5861],[5862,5862]]],[1520578919203,["gengmei_pxf@gengmei123.local",[[-1,5860,"\n\n"]],[5860,5862],[5860,5860]]],[1520578919837,["gengmei_pxf@gengmei123.local",[[1,5860,"\n"]],[5860,5860],[5861,5861]]],[1520578920717,["gengmei_pxf@gengmei123.local",[[1,5861,"\n"]],[5861,5861],[5862,5862]]],[1520578923357,["gengmei_pxf@gengmei123.local",[[1,6004,"\n"]],[6004,6004],[6005,6005]]],[1520578926821,["gengmei_pxf@gengmei123.local",[[1,6238,"\n"]],[6238,6238],[6239,6239]]],[1520578928757,["gengmei_pxf@gengmei123.local",[[-1,6239,"   "]],[6239,6242],[6239,6239]]],[1520578929381,["gengmei_pxf@gengmei123.local",[[1,6239,"\n"]],[6239,6239],[6240,6240]]],[1520578932868,["gengmei_pxf@gengmei123.local",[[1,6250,"\n"]],[6250,6250],[6251,6251]]],[1520578934372,["gengmei_pxf@gengmei123.local",[[1,6251,"\n"]],[6251,6251],[6252,6252]]],[1520578936661,["gengmei_pxf@gengmei123.local",[[-1,6252,"  　　"]],[6252,6256],[6252,6252]]],[1520578938957,["gengmei_pxf@gengmei123.local",[[1,6335,"\n"]],[6335,6335],[6336,6336]]],[1520578940812,["gengmei_pxf@gengmei123.local",[[1,6479,"\n"]],[6479,6479],[6480,6480]]],[1520578942332,["gengmei_pxf@gengmei123.local",[[1,6484,"\n"]],[6484,6484],[6485,6485]]],[1520578945188,["gengmei_pxf@gengmei123.local",[[1,6520,"\n"]],[6520,6520],[6521,6521]]],[1520578948260,["gengmei_pxf@gengmei123.local",[[1,6582,"\n"]],[6582,6582],[6583,6583]]],[1520578949620,["gengmei_pxf@gengmei123.local",[[1,6587,"\n"]],[6587,6587],[6588,6588]]],[1520578953615,["gengmei_pxf@gengmei123.local",[[1,6722,"\n"]],[6722,6722],[6723,6723]]],[1520578955812,["gengmei_pxf@gengmei123.local",[[1,6852,"\n"]],[6852,6852],[6853,6853]]],[1520578956956,["gengmei_pxf@gengmei123.local",[[1,6856,"\n"]],[6856,6856],[6857,6857]]],[1520578960219,["gengmei_pxf@gengmei123.local",[[1,6960,"\n"]],[6960,6960],[6961,6961]]],[1520578962284,["gengmei_pxf@gengmei123.local",[[1,7129,"\n"]],[7129,7129],[7130,7130]]],[1520578964596,["gengmei_pxf@gengmei123.local",[[-1,7130,"   "]],[7130,7133],[7130,7130]]],[1520578967732,["gengmei_pxf@gengmei123.local",[[1,7168,"\n"]],[7168,7168],[7169,7169]]],[1520578971556,["gengmei_pxf@gengmei123.local",[[1,7169,"\t"]],[7169,7169],[7170,7170]]],[1520578973228,["gengmei_pxf@gengmei123.local",[[-1,7169,"\t"]],[7170,7170],[7169,7169]]],[1520578974606,["gengmei_pxf@gengmei123.local",[[1,7169,"   "]],[7169,7169],[7172,7172]]],[1520578978539,["gengmei_pxf@gengmei123.local",[[1,7409,"\n"]],[7409,7409],[7410,7410]]],[1520578981851,["gengmei_pxf@gengmei123.local",[[1,7459,"\n"]],[7459,7459],[7460,7460]]],[1520578989811,["gengmei_pxf@gengmei123.local",[[1,7455,"\n"]],[7455,7455],[7456,7456]]],[1520579001162,["gengmei_pxf@gengmei123.local",[[1,7126,"\n"]],[7126,7126],[7127,7127]]],[1520579005954,["gengmei_pxf@gengmei123.local",[[1,7108,"\n"]],[7108,7108],[7109,7109]]],[1520579009921,["gengmei_pxf@gengmei123.local",[[1,7042,"\n"]],[7042,7042],[7043,7043]]],[1520579015651,["gengmei_pxf@gengmei123.local",[[1,6984,"\t"],[1,7043,"\t"],[1,7110,"\t"]],[6985,7128],[6986,7131]]],[1520579017739,["gengmei_pxf@gengmei123.local",[[-1,6984,"\t"],[-1,7044,"\t"],[-1,7112,"\t"]],[6986,7131],[6985,7128]]],[1520579021082,["gengmei_pxf@gengmei123.local",[[1,6984,"\t"],[1,7043,"\t"]],[6985,7109],[6986,7111]]],[1520579029730,["gengmei_pxf@gengmei123.local",[[1,7759,"\n"]],[7759,7759],[7760,7760]]],[1520579034104,["gengmei_pxf@gengmei123.local",[[1,7882,"\n"]],[7882,7882],[7883,7883]]],[1520579039249,["gengmei_pxf@gengmei123.local",[[1,7940,"\n"]],[7940,7940],[7941,7941]]],[1520579046420,["gengmei_pxf@gengmei123.local",[[-1,197,">"],[1,198,"*"]],[197,198],[198,198]]],[1520579052399,["gengmei_pxf@gengmei123.local",[[-1,427,"> \n> \n>"],[1,434,"*"]],[427,434],[428,428]]],[1520579054641,["gengmei_pxf@gengmei123.local",[[1,427,"\n"]],[427,427],[428,428]]],[1520579060433,["gengmei_pxf@gengmei123.local",[[-1,443,">　"]],[443,444],[443,443]]],[1520579060808,["gengmei_pxf@gengmei123.local",[[-1,442,"\n"]],[443,443],[442,442]]],[1520579064873,["gengmei_pxf@gengmei123.local",[[-1,442,"　"]],[442,443],[442,442]]],[1520579069953,["gengmei_pxf@gengmei123.local",[[-1,185,"　　"]],[187,187],[185,185]]],[1520579070585,["gengmei_pxf@gengmei123.local",[[-1,184,"\n"]],[185,185],[184,184]]],[1520579071488,["gengmei_pxf@gengmei123.local",[[1,184,"\n"]],[184,184],[185,185]]],[1520579072464,["gengmei_pxf@gengmei123.local",[[1,185,"\n"]],[185,185],[186,186]]],[1520579198260,["gengmei_pxf@gengmei123.local",[[1,3641,"\n"]],[3641,3641],[3642,3642]]],[1520579203140,["gengmei_pxf@gengmei123.local",[[-1,3646,"   "],[1,3649,"\n"]],[3646,3649],[3647,3647]]],[1520579209071,["gengmei_pxf@gengmei123.local",[[-1,3722,">"],[1,3723,"*"]],[3722,3723],[3723,3723]]],[1520579211060,["gengmei_pxf@gengmei123.local",[[1,3722,"\n"]],[3722,3722],[3723,3723]]],[1520579213140,["gengmei_pxf@gengmei123.local",[[1,3723,"\n"]],[3723,3723],[3724,3724]]],[1520579216204,["gengmei_pxf@gengmei123.local",[[1,3888,"\n"]],[3888,3888],[3889,3889]]],[1520579218867,["gengmei_pxf@gengmei123.local",[[-1,3889,"   "],[1,3892,"\n"]],[3889,3892],[3890,3890]]],[1520579221387,["gengmei_pxf@gengmei123.local",[[1,3906,"\n"]],[3906,3906],[3907,3907]]],[1520579223987,["gengmei_pxf@gengmei123.local",[[1,3953,"\n"]],[3953,3953],[3954,3954]]],[1520579225420,["gengmei_pxf@gengmei123.local",[[-1,3953,"\n"]],[3954,3954],[3953,3953]]],[1520579228355,["gengmei_pxf@gengmei123.local",[[-1,3954,"  　　 "],[1,3959,"\n"]],[3954,3959],[3955,3955]]],[1520579229235,["gengmei_pxf@gengmei123.local",[[1,3955,"\n"]],[3955,3955],[3956,3956]]],[1520579236115,["gengmei_pxf@gengmei123.local",[[1,4169,"\n"]],[4169,4169],[4170,4170]]],[1520579238491,["gengmei_pxf@gengmei123.local",[[-1,4170,"   　　"],[1,4175,"\n"]],[4170,4175],[4171,4171]]],[1520579240843,["gengmei_pxf@gengmei123.local",[[1,4204,"\n"]],[4204,4204],[4205,4205]]],[1520579242827,["gengmei_pxf@gengmei123.local",[[-1,4205,"   　　"]],[4205,4210],[4205,4205]]],[1520579243490,["gengmei_pxf@gengmei123.local",[[1,4205,"\n"]],[4205,4205],[4206,4206]]],[1520579260250,["gengmei_pxf@gengmei123.local",[[1,4360,"\n"]],[4360,4360],[4361,4361]]],[1520579262480,["gengmei_pxf@gengmei123.local",[[1,4365,"\n"]],[4365,4365],[4366,4366]]],[1520579266581,["gengmei_pxf@gengmei123.local",[[-1,4369,">"],[1,4370,"*"]],[4369,4370],[4370,4370]]],[1520579269674,["gengmei_pxf@gengmei123.local",[[1,4452,"\n"]],[4452,4452],[4453,4453]]],[1520579272026,["gengmei_pxf@gengmei123.local",[[-1,4452,"\n"]],[4453,4453],[4452,4452]]],[1520579274883,["gengmei_pxf@gengmei123.local",[[-1,4452,"     "],[1,4457,"\n"]],[4452,4457],[4453,4453]]],[1520579276746,["gengmei_pxf@gengmei123.local",[[-1,4452,"\n"]],[4453,4453],[4452,4452]]],[1520579278010,["gengmei_pxf@gengmei123.local",[[1,4452,"\n"]],[4452,4452],[4453,4453]]],[1520579280009,["gengmei_pxf@gengmei123.local",[[1,4453,"\n"]],[4453,4453],[4454,4454]]],[1520579294145,["gengmei_pxf@gengmei123.local",[[1,4349,"\n"]],[4349,4349],[4350,4350]]],[1520579296281,["gengmei_pxf@gengmei123.local",[[1,4308,"\n"]],[4308,4308],[4309,4309]]],[1520579301257,["gengmei_pxf@gengmei123.local",[[-1,4291," "]],[4292,4292],[4291,4291]]],[1520579302817,["gengmei_pxf@gengmei123.local",[[1,4309,"\t"]],[4309,4309],[4310,4310]]],[1520579339266,["gengmei_pxf@gengmei123.local",[[-1,1618,">"],[1,1619,"*"]],[1618,1619],[1619,1619]]],[1520579341826,["gengmei_pxf@gengmei123.local",[[-1,1734,">"],[1,1735,"*"]],[1734,1735],[1735,1735]]],[1520579352183,["gengmei_pxf@gengmei123.local",[[1,2076,"\n"]],[2076,2076],[2077,2077]]],[1520579354350,["gengmei_pxf@gengmei123.local",[[-1,2076,"\n"]],[2077,2077],[2076,2076]]],[1520579357093,["gengmei_pxf@gengmei123.local",[[1,2079,"\n"]],[2079,2079],[2080,2080]]],[1520579360351,["gengmei_pxf@gengmei123.local",[[1,2076,"\n"]],[2076,2076],[2077,2077]]],[1520579361513,["gengmei_pxf@gengmei123.local",[[-1,2076,"\n"]],[2077,2077],[2076,2076]]],[1520579369019,["gengmei_pxf@gengmei123.local",[[-1,2081,"public class MainActivity extends Activity {   @Override protected void onCreate(Bundle savedInstanceState) { if(savedInstanceState!=null){ //判断是否有以前的保存状态信息 savedInstanceState.get(\"Key\");          }\n super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); } @Override protected void onSaveInstanceState(Bundle outState) {\n // TODO Auto-generated method stub //可能被回收内存前保存状态和信息， Bundle data = new Bundle();      data.putString(\"key\", \"last words before be kill\");\n outState.putAll(data); super.onSaveInstanceState(outState); }\n @Override protected void onRestoreInstanceState(Bundle savedInstanceState) {\n // TODO Auto-generated method stub if(savedInstanceState!=null){ //判断是否有以前的保存状态信息 savedInstanceState.get(\"Key\");          }\n super.onRestoreInstanceState(savedInstanceState); } } "]],[2081,2884],[2081,2081]]],[1520579371543,["gengmei_pxf@gengmei123.local",[[-1,2076,"```\n ```"]],[2076,2084],[2076,2076]]],[1520579372983,["gengmei_pxf@gengmei123.local",[[1,2076,"\n"]],[2076,2076],[2077,2077]]],[1520579373647,["gengmei_pxf@gengmei123.local",[[1,2077,"\n"]],[2077,2077],[2078,2078]]],[1520579377177,["gengmei_pxf@gengmei123.local",[[-1,2081,">"],[1,2082,"*"]],[2081,2082],[2082,2082]]],[1520579379862,["gengmei_pxf@gengmei123.local",[[1,2081,"\n"]],[2081,2081],[2082,2082]]],[1520579381862,["gengmei_pxf@gengmei123.local",[[1,2078,"\n"]],[2077,2077],[2078,2078]]],[1520579385180,["gengmei_pxf@gengmei123.local",[[1,2079,"```\npublic class MainActivity extends Activity {   @Override protected void onCreate(Bundle savedInstanceState) { if(savedInstanceState!=null){ //判断是否有以前的保存状态信息 savedInstanceState.get(\"Key\");          }\n super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); } @Override protected void onSaveInstanceState(Bundle outState) {\n // TODO Auto-generated method stub //可能被回收内存前保存状态和信息， Bundle data = new Bundle();      data.putString(\"key\", \"last words before be kill\");\n outState.putAll(data); super.onSaveInstanceState(outState); }\n @Override protected void onRestoreInstanceState(Bundle savedInstanceState) {\n // TODO Auto-generated method stub if(savedInstanceState!=null){ //判断是否有以前的保存状态信息 savedInstanceState.get(\"Key\");          }\n super.onRestoreInstanceState(savedInstanceState); } } \n```\n\n"]],[2078,2078],[2891,2891]]],[1520579391542,["gengmei_pxf@gengmei123.local",[[-1,2891,"\n"]],[2892,2892],[2891,2891]]],[1520579391855,["gengmei_pxf@gengmei123.local",[[-1,2890,"\n"]],[2891,2891],[2890,2890]]],[1520579392870,["gengmei_pxf@gengmei123.local",[[1,2890,"\n"]],[2890,2890],[2891,2891]]],[1520579404846,["gengmei_pxf@gengmei123.local",[[-1,1258,">"],[1,1259,"*"]],[1258,1259],[1259,1259]]],[1520579408312,["gengmei_pxf@gengmei123.local",[[-1,1102,">"],[1,1103,"*"]],[1102,1103],[1103,1103]]],[1520579416759,["gengmei_pxf@gengmei123.local",[[-1,1259,"　"]],[1260,1260],[1259,1259]]],[1520579417847,["gengmei_pxf@gengmei123.local",[[1,1259," "]],[1259,1259],[1260,1260]]]]]]}
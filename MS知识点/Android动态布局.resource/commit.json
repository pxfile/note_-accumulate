{"compress":true,"commitItems":[["fb9059c6-0f41-4a4a-86b0-a2f5c5d860ec",1520239234402,"",[[1520239175823,["gengmei_pxf@gengmei123.local",[[1,0,"动态布局\n===\n\n\n"]],[0,0],[11,11]]],[1520239186830,["gengmei_pxf@gengmei123.local",[[1,0,"Android"]],[0,0],[7,7]]],[1520239192102,["gengmei_pxf@gengmei123.local",[[1,16,"## "]],[16,16],[19,19]]],[1520239218987,["gengmei_pxf@gengmei123.local",[[1,21,"\n"]],[20,20],[21,21]]],[1520239219414,["gengmei_pxf@gengmei123.local",[[1,21,"android将布局与具体操作分为xml文件和java文件，xml文件主要负责布局，但是xml文件完成的所有任务java文件都是可以完成的，并且解析xml文件也是需要资源的，只不过google推荐这样使用，一是为了界面和逻辑分离，二是xml的逻辑控制很方便。所以牺牲一点资源来解析xml文件是可取的。\n我将其分为静态布局和动态布局（也可以称为交互），静态布局直接加载，方便查看和修改。动态布局需要代码控制，用户体验好。\n开始一个项目之前，要想好静态布局和动态布局的分布，一句话，**能在xml文件中做的事，一定不要放在java里做。**\n\n作者：breakingsword\n链接：https://www.jianshu.com/p/8874fd8b240b\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[21,21],[390,390]]],[1520239223364,["gengmei_pxf@gengmei123.local",[[-1,291,"作者：breakingsword\n链接：https://www.jianshu.com/p/8874fd8b240b\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n"]],[290,390],[290,290]]],[1520239233494,["gengmei_pxf@gengmei123.local",[[1,19,"# Android静态和动态布局"]],[19,19],[35,35]]],[1520239235755,["gengmei_pxf@gengmei123.local",[[-1,19,"# "]],[21,21],[19,19]]],[1520239253452,["gengmei_pxf@gengmei123.local",[[-1,209,"，"]],[210,210],[209,209]]],[1520239253820,["gengmei_pxf@gengmei123.local",[[1,209,"。"]],[209,209],[210,210]]],[1520239254355,["gengmei_pxf@gengmei123.local",[[1,210,"\n"]],[210,210],[211,211]]],[1520239257050,["gengmei_pxf@gengmei123.local",[[1,228,"\n"]],[228,228],[229,229]]],[1520239262021,["gengmei_pxf@gengmei123.local",[[1,211,"* "]],[211,211],[213,213]]],[1520239263932,["gengmei_pxf@gengmei123.local",[[1,231,"* "]],[231,231],[233,233]]],[1520239269378,["gengmei_pxf@gengmei123.local",[[1,231,"\n"]],[230,230],[231,231]]],[1520239273914,["gengmei_pxf@gengmei123.local",[[1,211,"\n"]],[210,210],[211,211]]],[1520239276219,["gengmei_pxf@gengmei123.local",[[1,186,"\n"]],[186,186],[187,187]]],[1520239280681,["gengmei_pxf@gengmei123.local",[[1,254,"\n"]],[254,254],[255,255]]],[1520239285761,["gengmei_pxf@gengmei123.local",[[1,315,"\n"]],[314,314],[315,315]]],[1520239312957,["gengmei_pxf@gengmei123.local",[[-1,284,"**能在xml文件中做的事，一定不要放在java里做。**"]],[284,313],[284,284]]],[1520239315252,["gengmei_pxf@gengmei123.local",[[1,253,"（）"]],[253,253],[255,255]]],[1520239316284,["gengmei_pxf@gengmei123.local",[[1,254,"**能在xml文件中做的事，一定不要放在java里做。**"]],[254,254],[283,283]]],[1520239323334,["gengmei_pxf@gengmei123.local",[[-1,254,"**能在xml文件中做的事，一定不要放在java里做。**"]],[283,283],[254,254]]],[1520239323846,["gengmei_pxf@gengmei123.local",[[-1,253,"（）"]],[255,255],[253,253]]],[1520239324414,["gengmei_pxf@gengmei123.local",[[1,284,"**能在xml文件中做的事，一定不要放在java里做。**"]],[284,284],[284,313]]],[1520239332324,["gengmei_pxf@gengmei123.local",[[1,232,"（）"]],[232,232],[234,234]]],[1520239336868,["gengmei_pxf@gengmei123.local",[[1,233,"xml布局"]],[233,233],[238,238]]],[1520239338636,["gengmei_pxf@gengmei123.local",[[1,260,"（）"]],[260,260],[262,262]]],[1520239342115,["gengmei_pxf@gengmei123.local",[[1,261,"Java"]],[261,261],[265,265]]],[1520239348736,["gengmei_pxf@gengmei123.local",[[1,265,"文件"]],[265,265],[267,267]]],[1520239353557,["gengmei_pxf@gengmei123.local",[[-1,261,"J"]],[262,262],[261,261]]],[1520239354438,["gengmei_pxf@gengmei123.local",[[1,261,"j"]],[261,261],[262,262]]],[1520239360414,["gengmei_pxf@gengmei123.local",[[-1,330,"\n"],[1,331,"### "]],[330,330],[334,334]]],[1520239361069,["gengmei_pxf@gengmei123.local",[[-1,332,"# "]],[334,334],[332,332]]],[1520239405873,["gengmei_pxf@gengmei123.local",[[1,332," # 静态布局"]],[332,332],[339,339]]],[1520239410302,["gengmei_pxf@gengmei123.local",[[-1,332," "]],[333,333],[332,332]]],[1520239411781,["gengmei_pxf@gengmei123.local",[[1,338,"\n\n"]],[338,338],[339,339]]],[1520239412939,["gengmei_pxf@gengmei123.local",[[1,340,"\n"]],[339,339],[340,340]]],[1520239460269,["gengmei_pxf@gengmei123.local",[[-1,340,"\n"],[1,341,"xml布局"]],[340,340],[345,345]]],[1520239472933,["gengmei_pxf@gengmei123.local",[[-1,332,"# 静态布局\n\nxml布局"]],[334,345],[332,332]]],[1520239477767,["gengmei_pxf@gengmei123.local",[[1,332," 动态布局"]],[332,332],[337,337]]],[1520239478093,["gengmei_pxf@gengmei123.local",[[1,337,"\n\n"]],[337,337],[338,338]]],[1520239478668,["gengmei_pxf@gengmei123.local",[[1,339,"\n"]],[338,338],[339,339]]],[1520239517916,["gengmei_pxf@gengmei123.local",[[1,330,"\n"]],[328,328],[329,329]]],[1520239518387,["gengmei_pxf@gengmei123.local",[[1,331,"\n"]],[329,329],[330,330]]],[1520239523622,["gengmei_pxf@gengmei123.local",[[1,330,"### 静态布局"]],[330,330],[338,338]]],[1520239526378,["gengmei_pxf@gengmei123.local",[[1,340,"\n"]],[338,338],[339,339]]],[1520239529309,["gengmei_pxf@gengmei123.local",[[1,339," "]],[339,339],[340,340]]],[1520239530875,["gengmei_pxf@gengmei123.local",[[1,342,"\n"]],[340,340],[341,341]]],[1520239534309,["gengmei_pxf@gengmei123.local",[[1,341,"#### 有点"]],[341,341],[348,348]]],[1520239534923,["gengmei_pxf@gengmei123.local",[[-1,346,"有点"]],[348,348],[346,346]]],[1520239537062,["gengmei_pxf@gengmei123.local",[[1,346,"优点"]],[346,346],[348,348]]],[1520239537290,["gengmei_pxf@gengmei123.local",[[1,350,"\n"]],[348,348],[349,349]]],[1520239546782,["gengmei_pxf@gengmei123.local",[[1,349," 可预览，结构清晰"]],[349,349],[358,358]]],[1520239548411,["gengmei_pxf@gengmei123.local",[[1,360,"\n"]],[358,358],[359,359]]],[1520239549067,["gengmei_pxf@gengmei123.local",[[1,361,"\n"]],[359,359],[360,360]]],[1520239552869,["gengmei_pxf@gengmei123.local",[[1,360,"#### 确定"]],[360,360],[367,367]]],[1520239553523,["gengmei_pxf@gengmei123.local",[[-1,365,"确定"]],[367,367],[365,365]]],[1520239555659,["gengmei_pxf@gengmei123.local",[[1,365,"缺点"]],[365,365],[367,367]]],[1520239556059,["gengmei_pxf@gengmei123.local",[[1,369,"\n"]],[367,367],[368,368]]],[1520239570926,["gengmei_pxf@gengmei123.local",[[1,368,"xml的方式会不太灵活，比如布局要求动态变化"]],[368,368],[390,390]]],[1520239575698,["gengmei_pxf@gengmei123.local",[[-1,368,"xml的方式会"]],[368,375],[368,368]]],[1520239598837,["gengmei_pxf@gengmei123.local",[[1,394,"通过使用java代码来控制，在程序运行时，动态的实现对应布局。\n我们可以从两个方面，简单的了解一下：\n\n*   动态添加view，摆脱layout下的xml；\n*   熟悉Drawable子类，摆脱drawable下的xml；"]],[394,394],[507,507]]],[1520239602393,["gengmei_pxf@gengmei123.local",[[1,508,"\n"]],[507,507],[508,508]]],[1520239602593,["gengmei_pxf@gengmei123.local",[[1,509,"\n"]],[508,508],[509,509]]],[1520239625801,["gengmei_pxf@gengmei123.local",[[1,509,"# 动态添加View\n\n我们日常使用的UI组件大致可以分为两类：\n\n*   控件（View），如Button、ImageView，一般用于呈现内容和交互；\n*   容器（ViewGroup），如RelativeLayout、LinearLayout，一般用来装控件和容器；\n\n所以，我们在用代码动态添加布局的时候，也需要遵循在xml中编写代码的规则，来段代码直观了解。\n\n1.首先，我们因为不使用xml文件来setContentView了，所以，先new一个父布局：\n\n```\n        //添加父布局\n        RelativeLayout root = new RelativeLayout(this);\n        root.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, \n                                                        ViewGroup.LayoutParams.MATCH_PARENT));\n        root.setBackgroundColor(getResources().getColor(R.color.colorPrimary));\n        setContentView(root);\n\n```\n\n2.然后，我们在页面中间添加一个button\n\n```\n        //添加一个在页面中间的btn\n        Button button = new Button(this);\n        button.setId(View.generateViewId());\n        button.setText(\"Hello\");\n        RelativeLayout.LayoutParams btnParams = new RelativeLayout.LayoutParams(\n                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        btnParams.addRule(RelativeLayout.CENTER_IN_PARENT);\n        button.setLayoutParams(btnParams);\n        root.addView(button);\n\n```\n\n到这里，我们可以看见，只需要3步，一个控件(button)就已经添加到容器(root)中了:\n\n*   new Button()，并初始化控件相关属性；\n*   根据root的类型，new button的 LayoutParams；\n*   最后把button添加到容器中， root.addView(button);\n\n3.嗯，我们再拓展一下，在button的右下方添加一个listview,\n\n```\n        //添加一个list 在button右下方\n        ListView listView = new ListView(this);\n        listView.setId(View.generateViewId());\n        listView.setBackgroundColor(getResources().getColor(R.color.colorPrimaryDark));\n        listView.setAdapter(new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, \n                new String[]{\"one\", \"two\", \"three\"}));\n        RelativeLayout.LayoutParams listParams = new RelativeLayout.LayoutParams(\n                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        listParams.addRule(RelativeLayout.BELOW, button.getId());\n        listParams.addRule(RelativeLayout.RIGHT_OF, button.getId());\n        listView.setLayoutParams(listParams);\n        root.addView(listView);\n\n```\n\n需要注意的是，上面代码中的**addRule()**方法，该方法有两种重载方法：\n\n*   **addRule(int verb)**：\n    该方法表示所设置节点的属性不能与其他兄弟节点相关或者属性值为布尔值。比如btnParams.addRule(RelativeLayout.CENTER_IN_PARENT)就表示在RelativeLayout中的相应节点是基于父布局居中。\n*   **addRule(int verb,int anchor)**：\n    该方法表示所设置节点的属性必须关联其他兄弟节点或者属性值为布尔值。比如listParams.addRule(RelativeLayout.BELOW, button.getId())就表示RelativeLayout中的相应节点放置在一个\n    button这个兄弟节点的下面。\n\nBTW，规则如果定义的是一个view相对于另一个view的，一定要初始化另一个view（button）的id不为0，否则规则会失效。通常，为了防止id重复，建议使用系统方法来生成id，也就是第二段代码中的button.setId(View.generateViewId())。\n\n**最终，我们出来的效果是这个样子的：**\n\n![](//upload-images.jianshu.io/upload_images/1972107-e667aaddc06ccef1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/369)\n\n# Drawable子类\n\nOK，第二节，我们来看看drawable下的xml文件。drawable目录下的文件，通常是定义了一些selector、shape等，那么，考虑到一个场景，如果我们需要使用后台下发的图片，而不是使用res下面现有的资源呢？根据上一节的经验，xml定义能实现的，java代码中肯定也能实现。下面，就介绍几个常用的Drawable子类：\n**1\\. StateListDrawable**：对应selector，主要用来描述按钮等的点击态。\n下面这段代码大家都熟悉：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item android:drawable=\"@drawable/numpad_button_bg_selected\" android:state_selected=\"true\"></item>\n    <item android:drawable=\"@drawable/numpad_button_bg_pressed\" android:state_pressed=\"true\"></item>\n    <item android:drawable=\"@drawable/numpad_button_bg_normal\"></item>\n</selector>\n\n```\n\n这是一个给button使用的背景选择，这种不同状态显示不同背景的xml文件我们称为selector。其实selector的本质是一个drawable对象。如果要用java代码实现上述的selector该如何实现呢？直接上代码：\n\n```\nbutton.setBackground(DrawableUtil.addStateListBgDrawable(this, R.mipmap.ic_background_normal,\n                R.mipmap.ic_background_selected));\n\n    /**\n     * selector\n     *\n     * @param context\n     * @param idNormal\n     * @param idPressed\n     * @return\n     */\n    public static StateListDrawable addStateListBgDrawable(Context context, int idNormal, int idPressed) {\n        StateListDrawable drawable = new StateListDrawable();\n        drawable.addState(new int[]{android.R.attr.state_selected}, context.getResources().getDrawable(idPressed));\n        drawable.addState(new int[]{android.R.attr.state_pressed}, context.getResources().getDrawable(idPressed));\n        drawable.addState(new int[]{android.R.attr.state_enabled}, context.getResources().getDrawable(idNormal));\n        drawable.addState(new int[]{}, context.getResources().getDrawable(idNormal));\n\n        return drawable;\n    }\n\n```\n\n简单来说，2步：\n\n*   new 一个StateListDrawable对象；\n*   给drawable对象挨个添上状态，并添加图片资源，和xml中逻辑一样；\n\n* * *\n\n**2.GradientDrawable：**对应渐变色。\n直接上代码：\n\n```\nbutton2.setBackground(DrawableUtil.addGradientBgDrawable(GradientDrawable.Orientation.LEFT_RIGHT,\n                new int[]{getResources().getColor(R.color.colorPrimary), getResources().getColor(R.color.colorAccent)}));\n\n/**\n     * 渐变色\n     * @param orientation\n     * @param colors\n     * @return\n     */\n    public static GradientDrawable addGradientBgDrawable(GradientDrawable.Orientation orientation, int[] colors) {\n        GradientDrawable drawable = new GradientDrawable();\n        drawable.setOrientation(orientation); //定义渐变的方向\n        drawable.setColors(colors); //colors为int[]，支持2个以上的颜色\n\n        return drawable;\n    }\n\n```\n\n简单来说，也是2步：\n\n*   new一个GradientDrawable 对象；\n*   给对象设置orientation和colors；\n\n作者：椰子zZ\n链接：https://www.jianshu.com/p/0b397af211ea\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[509,509],[5837,5837]]],[1520239630745,["gengmei_pxf@gengmei123.local",[[1,510,"##"]],[510,510],[512,512]]],[1520239676952,["gengmei_pxf@gengmei123.local",[[-1,3104,"![](//upload-images.jianshu.io/upload_images/1972107-e667aaddc06ccef1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/369)"]],[3104,3228],[3104,3104]]],[1520239677560,["gengmei_pxf@gengmei123.local",[[-1,3105,"\n"]],[3104,3104],[3103,3103]]],[1520239678776,["gengmei_pxf@gengmei123.local",[[1,3105,"\n"]],[3103,3103],[3104,3104]]],[1520239705395,["gengmei_pxf@gengmei123.local",[[1,3104,"列表在button的右下方"]],[3104,3104],[3117,3117]]],[1520239721736,["gengmei_pxf@gengmei123.local",[[-1,4909,"**"]],[4911,4911],[4909,4909]]],[1520239724266,["gengmei_pxf@gengmei123.local",[[1,4908,"**"]],[4908,4908],[4910,4910]]],[1520239730280,["gengmei_pxf@gengmei123.local",[[-1,5638,"作者：椰子zZ\n链接：https://www.jianshu.com/p/0b397af211ea\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n"]],[5637,5728],[5637,5637]]],[1520239730655,["gengmei_pxf@gengmei123.local",[[-1,5637,"\n"]],[5637,5637],[5636,5636]]],[1520239805944,["gengmei_pxf@gengmei123.local",[[1,385,"\n"]],[383,383],[384,384]]],[1520239806496,["gengmei_pxf@gengmei123.local",[[1,386,"\n"]],[384,384],[385,385]]],[1520239807059,["gengmei_pxf@gengmei123.local",[[1,385,"* * *\n"]],[385,385],[391,391]]],[1520239808640,["gengmei_pxf@gengmei123.local",[[-1,392,"\n"]],[391,391],[390,390]]],[1520239835599,["gengmei_pxf@gengmei123.local",[[1,3127,"##"]],[3127,3127],[3129,3129]]],[1520239859247,["gengmei_pxf@gengmei123.local",[[-1,3312,"\\"]],[3313,3313],[3312,3312]]],[1520239863239,["gengmei_pxf@gengmei123.local",[[-1,5573,"\n"]],[5573,5573],[5572,5572]]]]]]}
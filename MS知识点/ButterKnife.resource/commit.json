{"compress":true,"commitItems":[["e89c9729-ee6a-4655-a979-730aaf18f08f",1520939317859,"",[[1520939269034,["gengmei_pxf@gengmei123.local",[[1,0,"Buffer\n===\n\n\n有个大神叫 Jake Wharton，开源了一个神奇的框架叫做 [ButterKnife](http://link.zhihu.com/?target=https%3A//github.com/JakeWharton/butterknife)，这个框架虽然也采用了注解进行注入，不过人家可是编译期生成代码的方式，对运行时没有任何副作用，果真见效快，疗效好，只是编译期有一点点时间成本而已。"]],[0,0],[207,207]]],[1520939369533,["gengmei_pxf@gengmei123.local",[[-1,44," "],[1,45," "],[1,207,"\n\n"]],[207,207],[208,208]]],[1520939369764,["gengmei_pxf@gengmei123.local",[[1,209,"\n"]],[208,208],[209,209]]],[1520940766486,["gengmei_pxf@gengmei123.local",[[1,209,"它用了Java Annotation Processing技术，就是在Java代码编译成Java字节码的时候就已经处理了@Bind、@OnClick（ButterKnife还支持很多其他的注解）这些注解。\n\n## Java Annotation Processing\n\nAnnotation processing 是javac中用于编译时扫描和解析Java注解的工具。Annotation processing是在编译阶段执行的，它的原理就是读入Java源代码，解析注解，然后生成新的Java代码。新生成的Java代码最后被编译成Java字节码，注解解析器（Annotation Processor）不能改变读入的Java 类，比如不能加入或删除Java方法 \n下图是Java 编译代码的整个过程，可以帮助我们很好理解注解解析的过程： \n![这里写图片描述](http://img.blog.csdn.net/20160515135054791)\n\n## ButterKnife 工作流程\n\n当你编译你的Android工程时，ButterKnife工程中ButterKnifeProcessor类的process()方法会执行以下操作： \n开始它会扫描Java代码中所有的ButterKnife注解@Bind、@OnClick、@OnItemClicked等 \n当它发现一个类中含有任何一个注解时，ButterKnifeProcessor会帮你生成一个Java类，名字类似$$ViewBinder，这个新生成的类实现了ViewBinder接口。这个ViewBinder类中包含了所有对应的代码，比如@Bind注解对应findViewById(), @OnClick对应了view.setOnClickListener()等等。最后当Activity启动ButterKnife.bind(this)执行时，ButterKnife会去加载对应的ViewBinder类调用它们的bind()方法。\n\n比如：\n\n```\nclass ExampleActivity extends Activity {\n     @Bind(R.id.user) EditText username;\n     @Bind(R.id.pass) EditText password;\n\n    @Override public void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n         setContentView(R.layout.simple_activity);\n         ButterKnife.bind(this);\n         // TODO Use fields…\n     }\n\n     @OnClick(R.id.submit) void submit() {\n     // TODO call server…\n     }\n}\n```\n\n编译成功后，下面的代码生成了：\n\n```\npublic class ExampleActivity$$ViewBinder<T extends \n        io.bxbxbai.samples.ui.ExampleActivity> implements ViewBinder<T> {\n\n     @Override public void bind(final Finder finder, final T target, Object source) {\n          View view;\n          view = finder.findRequiredView(source, 21313618, “field ‘user’”);\n          target.username = finder.castView(view, 21313618, “field ‘user’”);\n          view = finder.findRequiredView(source, 21313618, “field ‘pass’”);\n          target.password = finder.castView(view, 21313618, “field ‘pass’”);\n          view = finder.findRequiredView(source, 21313618, “field ‘submit’ and method ‘submit’”);\n          view.setOnClickListener(\n            new butterknife.internal.DebouncingOnClickListener() {\n               @Override public void doClick(android.view.View p0) {\n      target.submit();\n           }\n        });\n      }\n\n     @Override public void reset(T target) {\n           target.username = null;\n           target.password = null;\n     }\n}\n```\n\n用一张图来说明一下： \n![这里写图片描述](http://img.blog.csdn.net/20160515140100065)\n\n## ButterKnife.bind 执行阶段\n\n最后，执行bind方法时，我们会调用ButterKnife.bind(this)： \nButterKnife会调用findViewBinderForClass(targetClass)加载ExampleActivity$$ViewBinder.java类。然后调用ViewBinder的bind方法，动态注入ExampleActivity类中所有的View属性。 \n如果Activity中有@OnClick注解的方法，ButterKnife会在ViewBinder类中给View设置onClickListener，并且将@OnClick注解的方法传入其中。\n\n在上面的过程中可以看到，为什么你用@Bind、@OnClick等注解标注的属性或方法必须是public或protected的，因为ButterKnife是通过ExampleActivity.this.editText来注入View的。因为如果你把View设置成private，那么框架必须通过反射来注入View，不管现在手机的CPU处理器变得多快，如果有些操作会影响性能，那么是肯定要避免的，这就是ButterKnife与其他注入框架的不同。\n\n## ButterKnife的特点\n\n方便的处理View的绑定和点击事件 \n方便的处理ListView/RecycleView中ViewHolder的绑定事件 \n增强代码可读性\n\neg： \npublic class FancyFragment extends Fragment { \n@Bind(R.id.button1) Button button1; \n@Bind(R.id.button2) Button button2;\n\n```\n    @Override \n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState){\n      View view = inflater.inflate(R.layout.fancy_fragment, container, false);\n      ButterKnife.bind(this, view);\n      // TODO Use fields...\n      return view;\n    }\n\n```\n\n}"]],[209,209],[3628,3628]]],[1520940774802,["gengmei_pxf@gengmei123.local",[[-1,2,"f"],[1,3,"tterKni"],[-1,5,"r"],[-1,538," "],[1,539," "],[-1,576," "],[1,577," "],[-1,727," "],[1,728," "],[-1,788," "],[1,789," "],[-1,2528," "],[1,2529," "],[-1,2653," "],[1,2654," "],[-1,2793," "],[1,2794," "],[-1,3151," "],[1,3152," "],[-1,3194," "],[1,3195," "],[-1,3208," "],[1,3209," "],[-1,3255," "],[1,3256," "],[-1,3292," "],[1,3293," "]],[0,6],[11,11]]],[1520942566754,["gengmei_pxf@gengmei123.local",[[-1,3631,"\n"]],[3631,3631],[3630,3630]]],[1520942569440,["gengmei_pxf@gengmei123.local",[[1,3633,"\n"]],[3632,3632],[3633,3633]]],[1520942569792,["gengmei_pxf@gengmei123.local",[[1,3634,"\n"]],[3633,3633],[3634,3634]]],[1520942570420,["gengmei_pxf@gengmei123.local",[[1,3634,"## 有一点需要注意\n\n通过ButterKnife来注入View时，ButterKnife有`bind(Object, View)` 和 `bind(View)`两个方法，有什么区别呢？\n\n如果你自定义了一个View，比如`public class BadgeLayout extends Fragment`，那么你可以可以通过`ButterKnife.bind(BadgeLayout)`来注入View的\n\n如果你在一个ViewHolder中inflate了一个xml布局文件，得到一个`View`对象，并且这个View是`LinearLayout`或`FrameLayout`等系统自带View，那么不是不能用`ButterKnife.bind(View)`来注入View的，因为ButterKnife认为这些类的包名以`com.android`开头的类是没有注解功能的（-。- 这不是废话吗？），所以这种情况你需要使用`ButterKnife.bind(ViewHolder，View)`来注入View。\n\n这表示**你是把`@Bind`、`@OnClick`等注解写到了这个ViewHolder类中，ViewHolder中的View呢需要从后面那个`View`中去找**， 大概就是这么个意思"]],[3634,3634],[4184,4184]]],[1520942597739,["gengmei_pxf@gengmei123.local",[[1,16,"# ButterKnife框架原理"],[-1,3700," 和 "],[1,3703," 和 "]],[16,16],[33,33]]],[1520942600801,["gengmei_pxf@gengmei123.local",[[1,17,"#"]],[16,16],[17,17]]],[1520942602888,["gengmei_pxf@gengmei123.local",[[1,19,"【"]],[19,19],[20,20]]],[1520942603847,["gengmei_pxf@gengmei123.local",[[-1,19,"【"]],[20,20],[19,19]]],[1520942604249,["gengmei_pxf@gengmei123.local",[[1,19,"["]],[19,19],[20,20]]],[1520942607145,["gengmei_pxf@gengmei123.local",[[1,35,"]()"]],[35,35],[38,38]]],[1520942617169,["gengmei_pxf@gengmei123.local",[[1,37,"http://bxbxbai.github.io/2016/03/12/how-butterknife-works/"]],[37,37],[95,95]]]]]]}
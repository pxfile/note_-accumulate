{"compress":true,"commitItems":[["4895e9a9-0c03-48c8-a44a-732123402dde",1518079230935,"",[[1518079181038,["gengmei_pxf@gengmei123.local",[[1,0,"内存泄漏\n===\n\n\n"]],[0,0],[11,11]]],[1518079393574,["gengmei_pxf@gengmei123.local",[[1,9,"传统的内存泄漏是由忘记释放分配的内存导致的，而逻辑上的内存泄漏则是由于忘记在对象不再被使用的时候释放对其的引用导致的。"]],[9,9],[68,68]]],[1518079401768,["gengmei_pxf@gengmei123.local",[[1,70,"\n"]],[68,68],[69,69]]],[1518079402160,["gengmei_pxf@gengmei123.local",[[1,71,"\n"]],[69,69],[70,70]]]]],["ef57d920-9ee3-49bf-bc67-c984454c683d",1518145504250,"内存泄漏\n===\n传统的内存泄漏是由忘记释放分配的内存导致的，而逻辑上的内存泄漏则是由于忘记在对象不再被使用的时候释放对其的引用导致的。\n\n\n\n",[[1518145500740,["gengmei_pxf@gengmei123.local",[[1,70,"## 静态的Activity"]],[70,70],[84,84]]],[1518145501483,["gengmei_pxf@gengmei123.local",[[1,86,"\n"]],[84,84],[85,85]]],[1518145515427,["gengmei_pxf@gengmei123.local",[[1,85," activity 类中定义一个 static 变量，并且将其指向一个[运行中的 activity 实例](https://github.com/NimbleDroid/Memory-Leaks/blob/master/app/src/main/java/com/nimbledroid/memoryleaks/MainActivity.java#L110)。如果在 activity 的生命周期结束之前，没有清除这个引用，那它就会泄漏了。这是因为 activity（例如 MainActivity） 的类对象是静态的，一旦加载，就会在 APP 运行时一直常驻内存，因此如果类对象不卸载，其静态成员就不会被垃圾回收。"]],[85,85],[393,393]]],[1518145541034,["gengmei_pxf@gengmei123.local",[[-1,85," "],[1,86," "],[1,393,"\n"]],[394,394],[395,395]]],[1518145551435,["gengmei_pxf@gengmei123.local",[[-1,395,"\n"],[1,396,"## 静态View"]],[395,395],[404,404]]],[1518145552552,["gengmei_pxf@gengmei123.local",[[1,404,"\n\n"]],[404,404],[405,405]]],[1518145699831,["gengmei_pxf@gengmei123.local",[[1,405,"一旦 view 被加入到界面中，它就会持有 context 的强引用，也就是我们的 activity。由于我们通过一个静态成员引用了这个 view，所以我们也就引用了 activity，因此 activity 就发生了泄漏。所以一定不要把加载的 view 赋值给静态变量，如果你真的需要，那一定要确保在 activity 销毁之前[将其从 view 层级中移除](http://developer.android.com/reference/android/view/ViewGroup.html#removeView(android.view.View))。"]],[405,405],[685,685]]],[1518145724307,["gengmei_pxf@gengmei123.local",[[1,686,"\n"]],[685,685],[686,686]]],[1518145725026,["gengmei_pxf@gengmei123.local",[[1,687,"\n"]],[686,686],[687,687]]],[1518145730165,["gengmei_pxf@gengmei123.local",[[-1,687,"\n"],[1,688,"## 内部类"]],[687,687],[693,693]]],[1518145730690,["gengmei_pxf@gengmei123.local",[[1,693,"\n\n"]],[693,693],[694,694]]],[1518145897689,["gengmei_pxf@gengmei123.local",[[1,694,"非静态内部类（包括匿名内部类）默认就会持有外部类的引用，当非静态内部类对象的生命周期比外部类对象的生命周期长时，就会导致内存泄露。"]],[694,694],[759,759]]],[1518145975416,["gengmei_pxf@gengmei123.local",[[1,760,"\n"]],[759,759],[760,760]]],[1518145975807,["gengmei_pxf@gengmei123.local",[[1,761,"\n"]],[760,760],[761,761]]],[1518145983297,["gengmei_pxf@gengmei123.local",[[-1,761,"\n"],[1,762,"## Handlers"]],[761,761],[772,772]]],[1518145984837,["gengmei_pxf@gengmei123.local",[[1,774,"\n"]],[773,773],[774,774]]],[1518145985638,["gengmei_pxf@gengmei123.local",[[-1,774,"\n"]],[774,774],[773,773]]],[1518145994496,["gengmei_pxf@gengmei123.local",[[1,773,"[定义一个匿名的 Runnable 对象并将其提交到 Handler 上](https://github.com/NimbleDroid/Memory-Leaks/blob/master/app/src/main/java/com/nimbledroid/memoryleaks/MainActivity.java#L114)也可能导致 activity 泄漏。Runnable 对象间接地引用了定义它的 activity 对象，而它会被提交到 Handler 的 MessageQueue 中，如果它在 activity 销毁时还没有被处理，那就会导致 activity 泄漏了。"]],[773,773],[1064,1064]]],[1518146056070,[null,[[1,1064,"\n"]],[1064,1064],[1065,1065]]],[1518146056070,[null,[[-1,1064,"\n"]],[1065,1065],[1064,1064]]],[1518146000894,["gengmei_pxf@gengmei123.local",[[1,1065,"\n"]],[1064,1064],[1065,1065]]],[1518146001191,["gengmei_pxf@gengmei123.local",[[1,1066,"\n"]],[1065,1065],[1066,1066]]],[1518146005433,["gengmei_pxf@gengmei123.local",[[-1,1066,"\n"],[1,1067,"## Threads"]],[1066,1066],[1076,1076]]],[1518146020177,["gengmei_pxf@gengmei123.local",[[1,1076,"\n\n只要它们是通过匿名类创建的，尽管它们在单独的线程被执行，它们也会持有对 activity 的强引用，进而导致内存泄漏。"]],[1076,1076],[1136,1136]]],[1518146027296,["gengmei_pxf@gengmei123.local",[[1,1076," "]],[1076,1076],[1077,1077]]],[1518146029246,["gengmei_pxf@gengmei123.local",[[-1,1076," "]],[1077,1077],[1076,1076]]],[1518146031759,["gengmei_pxf@gengmei123.local",[[1,1076,"he"]],[1076,1076],[1078,1078]]],[1518146032478,["gengmei_pxf@gengmei123.local",[[-1,1076,"he"]],[1078,1078],[1076,1076]]],[1518146042272,["gengmei_pxf@gengmei123.local",[[1,1076,"和Timer Tasks"]],[1076,1076],[1088,1088]]],[1518146044942,["gengmei_pxf@gengmei123.local",[[1,1149,"\n"]],[1148,1148],[1149,1149]]],[1518146045365,["gengmei_pxf@gengmei123.local",[[1,1150,"\n"]],[1149,1149],[1150,1150]]],[1518146054705,["gengmei_pxf@gengmei123.local",[[-1,1150,"\n"],[1,1151,"## ### Sensor Manager"]],[1150,1150],[1171,1171]]],[1518146116069,[null,[[-1,1089,"\n"],[1,1149,"\n"]],[1089,1089],[1150,1150]]],[1518146116069,[null,[[1,1089,"\n"],[-1,1148,"\n"]],[1150,1150],[1089,1089]]],[1518146057830,["gengmei_pxf@gengmei123.local",[[-1,1152," ###"]],[1155,1156],[1152,1152]]],[1518146114598,["gengmei_pxf@gengmei123.local",[[1,1167,"\n\n系统服务可以通过 [context.getSystemService](http://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)) 获取，它们负责执行某些后台任务，或者为硬件访问提供接口。如果 context 对象想要在服务内部的事件发生时被通知，那就需要把自己注册到服务的[监听器](https://github.com/NimbleDroid/Memory-Leaks/blob/master/app/src/main/java/com/nimbledroid/memoryleaks/MainActivity.java#L136)中。然而，这会让服务持有 activity 的引用，如果程序员忘记在 activity 销毁时取消注册，那就会导致 activity 泄漏了。"]],[1167,1167],[1581,1581]]],[1518146219590,[null,[[-1,1089,"\n"],[1,1150,"\n"],[-1,1167,"\n"],[1,1582,"\n"]],[1089,1089],[1583,1583]]],[1518146219590,[null,[[1,1089,"\n"],[-1,1149,"\n"],[1,1167,"\n"],[-1,1581,"\n"]],[1583,1583],[1089,1089]]],[1518146215077,["gengmei_pxf@gengmei123.local",[[1,0,"Android"],[-1,1176," "],[1,1177," "],[-1,1307," "],[1,1308," "]],[0,0],[7,7]]]]]]}
{"compress":true,"commitItems":[["31b2851f-f6a8-4c05-9701-cb993fc39a32",1520437649184,"",[[1520437599266,["gengmei_pxf@gengmei123.local",[[1,0,"App启动流程\n===\n\n\n"]],[0,0],[14,14]]],[1520437603572,["gengmei_pxf@gengmei123.local",[[-1,13,"\n"],[1,14,"【"]],[14,14],[14,14]]],[1520437604122,["gengmei_pxf@gengmei123.local",[[-1,13,"【"]],[14,14],[13,13]]],[1520437607867,["gengmei_pxf@gengmei123.local",[[-1,12,"\n"],[1,13,"![]()"]],[13,13],[17,17]]],[1520437609828,["gengmei_pxf@gengmei123.local",[[1,16,"http://solart.cc/images/launch_app_sim.png"]],[16,16],[58,58]]],[1520437621363,["gengmei_pxf@gengmei123.local",[[1,14,"App启动流程"]],[14,14],[21,21]]],[1520437624953,["gengmei_pxf@gengmei123.local",[[1,66,"\n\n"]],[66,66],[67,67]]],[1520437625257,["gengmei_pxf@gengmei123.local",[[1,68,"\n"]],[67,67],[68,68]]],[1520437651018,["gengmei_pxf@gengmei123.local",[[-1,68,"\n"],[1,69,"!"]],[68,68],[69,69]]],[1520437652305,["gengmei_pxf@gengmei123.local",[[-1,68,"!"]],[69,69],[68,68]]],[1520437654651,["gengmei_pxf@gengmei123.local",[[-1,67,"\n"],[1,68,"！【"]],[68,68],[69,69]]],[1520437655186,["gengmei_pxf@gengmei123.local",[[-1,68,"【"]],[69,69],[68,68]]],[1520437655377,["gengmei_pxf@gengmei123.local",[[-1,67,"！"],[1,68,"\n"]],[68,68],[67,67]]],[1520437659442,["gengmei_pxf@gengmei123.local",[[-1,67,"\n"],[1,68,"![]()"]],[67,67],[72,72]]],[1520437661218,["gengmei_pxf@gengmei123.local",[[1,71,"https://upload-images.jianshu.io/upload_images/851999-a9c2c456c9f91596.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/683"]],[71,71],[195,195]]],[1520437664664,["gengmei_pxf@gengmei123.local",[[1,67,"\n"]],[66,66],[67,67]]],[1520437684077,["gengmei_pxf@gengmei123.local",[[1,70,"app launch"]],[70,70],[80,80]]],[1520437687256,["gengmei_pxf@gengmei123.local",[[1,207,"\n\n"]],[207,207],[208,208]]],[1520437687679,["gengmei_pxf@gengmei123.local",[[1,209,"\n"]],[208,208],[209,209]]],[1520437695345,["gengmei_pxf@gengmei123.local",[[-1,209,"\n"],[1,210,"## []()"]],[209,209],[216,216]]],[1520437707611,["gengmei_pxf@gengmei123.local",[[1,215,"# Android Application启动流程分析"]],[215,215],[242,242]]],[1520437709451,["gengmei_pxf@gengmei123.local",[[-1,215,"# Android Application启动流程分析"]],[242,242],[215,215]]],[1520437710793,["gengmei_pxf@gengmei123.local",[[1,213,"# Android Application启动流程分析"]],[213,213],[240,240]]],[1520437713391,["gengmei_pxf@gengmei123.local",[[-1,213,"# "]],[215,215],[213,213]]],[1520437723830,["gengmei_pxf@gengmei123.local",[[1,240,"https://www.jianshu.com/p/a5532ecc8377\n\n"]],[240,240],[280,280]]],[1520437724398,["gengmei_pxf@gengmei123.local",[[1,281,"\n"]],[280,280],[281,281]]],[1520437729264,["gengmei_pxf@gengmei123.local",[[-1,281,"\n"],[1,282,"## []()"]],[281,281],[288,288]]],[1520437745026,["gengmei_pxf@gengmei123.local",[[1,285,"# Android应用启动流程分析"]],[285,285],[302,302]]],[1520437748118,["gengmei_pxf@gengmei123.local",[[-1,285,"# "]],[287,287],[285,285]]],[1520437756824,["gengmei_pxf@gengmei123.local",[[1,302,"http://solart.cc/2016/08/20/launch_app/"]],[302,302],[341,341]]]]],["25cc4db3-02cf-4ef9-9ed3-487e26472994",1520479617244,"App启动流程\n===\n![App启动流程](http://solart.cc/images/launch_app_sim.png)\n\n![app launch](https://upload-images.jianshu.io/upload_images/851999-a9c2c456c9f91596.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/683)\n\n## [Android Application启动流程分析](https://www.jianshu.com/p/a5532ecc8377)\n\n## [Android应用启动流程分析](http://solart.cc/2016/08/20/launch_app/)",[[1520479566155,["gengmei_pxf@gengmei123.local",[[-1,12,"!["],[1,14,"用户点击Home上的一个"],[1,17,"图标, "],[-1,19,"流程](http://so"],[1,32,"一个应用时:\n\n![](//upload-images.jianshu.io/upload_images/851999-a9c2c456c9f91596.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/683)\n\napp "],[1,34,"unch\n\nClick事件会调用sta"],[-1,36,".cc/images/launch_app_s"],[1,59,"Activity(Intent), 会通过Binder IPC机制, 最终调用到ActivityManagerService. 该Service会执行如下操作:\n\n*   第一步通过PackageManager的resolveIntent()收集这个intent对象的指向信息.\n*   指向信息被存储在一个intent对象中.\n*   下面重要的一步是通过grantUriPermissionLocked()方法来验证用户是否有足够的权限去调用该intent对象指向的Activity.\n*   如果有权限, ActivityManagerService会检查并在新的task中启动目标activity.\n*   现在, 是时候检查这个进程的ProcessRecord是否存在了.\n\n如果ProcessRecord是null, ActivityManagerService会创建新的进程来实例化目标activity.\n\n### 2.1 创建进程\n\nActivityManagerService调用startProcessLocked()方法来创建新的进程, 该方法会通过前面讲到的socket通道传递参数给Zygote进程. Zygote孵化自身, 并调用ZygoteInit.main()方法来实例化ActivityThread对象并最终返回新进程的pid.\n\nActivityThread随后依次调用Looper.prepareLoop()和Looper.loop()来开启消息循环.\n\n流程图如下:\n\n![](//upload-images.jianshu.io/upload_"],[1,61,"ages/851999-b6b5dacf9d1488f9"],[1,62,"j"],[1,63,"g?imageMogr2/auto-orie"],[1,64,"t/strip%7Cima"],[1,65,"eView2/2/w/700"],[-1,68,"![app launch](https:"],[1,88,"process creation\n\n### 2.2 绑定Application\n\n接下来要做的就是将进程和指定的Application绑定起来. 这个是通过上节的ActivityThread对象中调用bindApplication()方法完成的. 该方法发送一个BIND_APPLICATION的消息到消息队列中, 最终通过handleBindApplication()方法处理该消息. 然后调用makeApplication()方法来加载App的classes到内存中.\n\n流程如下:\n\n![]("],[-1,136,"a9c2c456c9f91596"],[1,152,"32893aaf343caeac"],[-1,203,"683)"],[1,207,"700)\n\nbind application\n\n### 2.3 启动Activity\n\n经过前两个步骤之后, 系统已经拥有了该application的进程. 后面的调用顺序就是普通的从一个已经存在的进程中启动一个新进程的activity了.\n\n实际调用方法是realStartActivity(), 它会调用application线程对象中的sheduleLaunchActivity()发送一个LAUNCH_ACTIVITY消息到消息队列中, 通过 handleLaunchActivity()来处理该消息.\n\n假设点击的是一个视频浏览的App, 其流程如下:\n\n作者：anly_jun\n链接：https://www.jianshu.com/p/a5532ecc8377\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[12,207],[1714,1714]]],[1520479571263,["gengmei_pxf@gengmei123.local",[[1,12,"!["],[-1,12,"用户点击Home上的一个"],[-1,27,"图标, "],[1,33,"流程](http://so"],[-1,33,"一个应用时:\n\n![](//upload-images.jianshu.io/upload_images/851999-a9c2c456c9f91596.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/683)\n\napp "],[-1,172,"unch\n\nClick事件会调用sta"],[1,193,".cc/images/launch_app_s"],[-1,193,"Activity(Intent), 会通过Binder IPC机制, 最终调用到ActivityManagerService. 该Service会执行如下操作:\n\n*   第一步通过PackageManager的resolveIntent()收集这个intent对象的指向信息.\n*   指向信息被存储在一个intent对象中.\n*   下面重要的一步是通过grantUriPermissionLocked()方法来验证用户是否有足够的权限去调用该intent对象指向的Activity.\n*   如果有权限, ActivityManagerService会检查并在新的task中启动目标activity.\n*   现在, 是时候检查这个进程的ProcessRecord是否存在了.\n\n如果ProcessRecord是null, ActivityManagerService会创建新的进程来实例化目标activity.\n\n### 2.1 创建进程\n\nActivityManagerService调用startProcessLocked()方法来创建新的进程, 该方法会通过前面讲到的socket通道传递参数给Zygote进程. Zygote孵化自身, 并调用ZygoteInit.main()方法来实例化ActivityThread对象并最终返回新进程的pid.\n\nActivityThread随后依次调用Looper.prepareLoop()和Looper.loop()来开启消息循环.\n\n流程图如下:\n\n![](//upload-images.jianshu.io/upload_"],[-1,888,"ages/851999-b6b5dacf9d1488f9"],[-1,917,"j"],[-1,919,"g?imageMogr2/auto-orie"],[-1,942,"t/strip%7Cima"],[-1,956,"eView2/2/w/700"],[1,973,"![app launch](https:"],[-1,973,"process creation\n\n### 2.2 绑定Application\n\n接下来要做的就是将进程和指定的Application绑定起来. 这个是通过上节的ActivityThread对象中调用bindApplication()方法完成的. 该方法发送一个BIND_APPLICATION的消息到消息队列中, 最终通过handleBindApplication()方法处理该消息. 然后调用makeApplication()方法来加载App的classes到内存中.\n\n流程如下:\n\n![]("],[1,1270,"a9c2c456c9f91596"],[-1,1270,"32893aaf343caeac"],[1,1337,"683)"],[-1,1337,"700)\n\nbind application\n\n### 2.3 启动Activity\n\n经过前两个步骤之后, 系统已经拥有了该application的进程. 后面的调用顺序就是普通的从一个已经存在的进程中启动一个新进程的activity了.\n\n实际调用方法是realStartActivity(), 它会调用application线程对象中的sheduleLaunchActivity()发送一个LAUNCH_ACTIVITY消息到消息队列中, 通过 handleLaunchActivity()来处理该消息.\n\n假设点击的是一个视频浏览的App, 其流程如下:\n\n作者：anly_jun\n链接：https://www.jianshu.com/p/a5532ecc8377\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[1714,1714],[12,207]]],[1520479575413,["gengmei_pxf@gengmei123.local",[[1,209,"\n"]],[207,207],[208,208]]],[1520479575549,["gengmei_pxf@gengmei123.local",[[1,210,"\n"]],[208,208],[209,209]]],[1520479576066,["gengmei_pxf@gengmei123.local",[[1,209,"用户点击Home上的一个App图标, 启动一个应用时:\n\n![](//upload-images.jianshu.io/upload_images/851999-a9c2c456c9f91596.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/683)\n\napp launch\n\nClick事件会调用startActivity(Intent), 会通过Binder IPC机制, 最终调用到ActivityManagerService. 该Service会执行如下操作:\n\n*   第一步通过PackageManager的resolveIntent()收集这个intent对象的指向信息.\n*   指向信息被存储在一个intent对象中.\n*   下面重要的一步是通过grantUriPermissionLocked()方法来验证用户是否有足够的权限去调用该intent对象指向的Activity.\n*   如果有权限, ActivityManagerService会检查并在新的task中启动目标activity.\n*   现在, 是时候检查这个进程的ProcessRecord是否存在了.\n\n如果ProcessRecord是null, ActivityManagerService会创建新的进程来实例化目标activity.\n\n### 2.1 创建进程\n\nActivityManagerService调用startProcessLocked()方法来创建新的进程, 该方法会通过前面讲到的socket通道传递参数给Zygote进程. Zygote孵化自身, 并调用ZygoteInit.main()方法来实例化ActivityThread对象并最终返回新进程的pid.\n\nActivityThread随后依次调用Looper.prepareLoop()和Looper.loop()来开启消息循环.\n\n流程图如下:\n\n![](//upload-images.jianshu.io/upload_images/851999-b6b5dacf9d1488f9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\nprocess creation\n\n### 2.2 绑定Application\n\n接下来要做的就是将进程和指定的Application绑定起来. 这个是通过上节的ActivityThread对象中调用bindApplication()方法完成的. 该方法发送一个BIND_APPLICATION的消息到消息队列中, 最终通过handleBindApplication()方法处理该消息. 然后调用makeApplication()方法来加载App的classes到内存中.\n\n流程如下:\n\n![](//upload-images.jianshu.io/upload_images/851999-32893aaf343caeac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\nbind application\n\n### 2.3 启动Activity\n\n经过前两个步骤之后, 系统已经拥有了该application的进程. 后面的调用顺序就是普通的从一个已经存在的进程中启动一个新进程的activity了.\n\n实际调用方法是realStartActivity(), 它会调用application线程对象中的sheduleLaunchActivity()发送一个LAUNCH_ACTIVITY消息到消息队列中, 通过 handleLaunchActivity()来处理该消息.\n\n假设点击的是一个视频浏览的App, 其流程如下:\n\n作者：anly_jun\n链接：https://www.jianshu.com/p/a5532ecc8377\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[209,209],[1911,1911]]],[1520479584720,["gengmei_pxf@gengmei123.local",[[1,240,"app launch"],[1,242,"https:"]],[238,361],[377,377]]],[1520479588365,["gengmei_pxf@gengmei123.local",[[-1,12,"![App启动流程](http://solart.cc/images/launch_app_sim.png)\n\n![app launch](https://upload-images.jianshu.io/upload_images/851999-a9c2c456c9f91596.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/683)"]],[12,207],[12,12]]],[1520479588733,["gengmei_pxf@gengmei123.local",[[-1,13,"\n"]],[12,12],[11,11]]],[1520479621554,["gengmei_pxf@gengmei123.local",[[1,183,"## "]],[183,183],[186,186]]],[1520479628897,["gengmei_pxf@gengmei123.local",[[-1,626,"#"],[-1,626," 2.1"]],[626,631],[626,626]]],[1520479638243,["gengmei_pxf@gengmei123.local",[[-1,1008,"# 2.2"]],[1008,1014],[1009,1009]]],[1520479649488,["gengmei_pxf@gengmei123.local",[[-1,1221,"流程如下:\n\n![](//upload-images.jianshu.io/upload_images/851999-32893aaf343caeac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)"]],[1221,1351],[1221,1221]]],[1520479649897,["gengmei_pxf@gengmei123.local",[[-1,1222,"\n"]],[1221,1221],[1220,1220]]],[1520479650472,["gengmei_pxf@gengmei123.local",[[-1,1221,"\n"]],[1220,1220],[1219,1219]]],[1520479661463,["gengmei_pxf@gengmei123.local",[[-1,1221,"bind application\n"]],[1220,1237],[1220,1220]]],[1520479663800,["gengmei_pxf@gengmei123.local",[[-1,1221,"\n"]],[1220,1220],[1219,1219]]],[1520479668289,["gengmei_pxf@gengmei123.local",[[-1,1223,"# 2.3"]],[1223,1229],[1224,1224]]],[1520479674958,["gengmei_pxf@gengmei123.local",[[-1,1475,"作者：anly_jun\n链接：https://www.jianshu.com/p/a5532ecc8377\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[1475,1569],[1475,1475]]],[1520479676183,["gengmei_pxf@gengmei123.local",[[-1,1476,"\n"]],[1475,1475],[1474,1474]]],[1520479737244,[null,[[-1,626,"1"],[1,633,""],[-1,1008,"2"],[1,1009,"#"],[-1,1223,"3"],[1,1224,"#"],[-1,1475,"。"],[1,1476,"\n"]],[626,626],[1477,1477]]],[1520479737244,[null,[[1,626,"1"],[-1,632,""],[1,1007,"2"],[-1,1007,"#"],[1,1222,"3"],[-1,1222,"#"],[1,1474,"。"],[-1,1474,"\n"]],[1477,1477],[626,626]]],[1520479682375,["gengmei_pxf@gengmei123.local",[[-1,855,"流程图如下:\n\n![](//upload-images.jianshu.io/upload_images/851999-b6b5dacf9d1488f9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\nprocess creation"]],[855,1004],[855,855]]],[1520479682832,["gengmei_pxf@gengmei123.local",[[-1,856,"\n"]],[855,855],[854,854]]],[1520479683191,["gengmei_pxf@gengmei123.local",[[-1,855,"\n"]],[854,854],[853,853]]],[1520479699886,["gengmei_pxf@gengmei123.local",[[-1,1298,"假设点击的是一个视频浏览的App, 其流程如下:"]],[1298,1322],[1298,1298]]],[1520479714429,["gengmei_pxf@gengmei123.local",[[-1,1300,"\n"]],[1299,1299],[1298,1298]]],[1520479715835,["gengmei_pxf@gengmei123.local",[[-1,1299,"\n"]],[1298,1298],[1297,1297]]],[1520479733613,["gengmei_pxf@gengmei123.local",[[1,1297,"![]()"]],[1297,1297],[1302,1302]]],[1520479734783,["gengmei_pxf@gengmei123.local",[[1,1301,"https://upload-images.jianshu.io/upload_images/851999-9f76d2f18051881c.jpg?imageMogr2/auto-orient/"]],[1301,1301],[1399,1399]]],[1520479797247,[null,[[-1,626,"1"],[1,633,""],[-1,857,"2"],[1,858,"#"],[-1,1072,"3"],[1,1073,"#"],[1,1297,"\n"],[-1,1401,":"]],[626,626],[1401,1401]]],[1520479797247,[null,[[1,626,"1"],[-1,632,""],[1,856,"2"],[-1,856,"#"],[1,1071,"3"],[-1,1071,"#"],[-1,1296,"\n"],[1,1401,":"]],[1401,1401],[626,626]]],[1520479757229,["gengmei_pxf@gengmei123.local",[[1,1070,"\n"]],[1068,1068],[1069,1069]]],[1520479760020,["gengmei_pxf@gengmei123.local",[[1,1069,"![]()"]],[1069,1069],[1074,1074]]],[1520479761069,["gengmei_pxf@gengmei123.local",[[1,1073,"https://upload-images.jianshu.io/upload_images/851999-32893aaf343caeac.jpg?imageMogr2/auto-orient/"]],[1073,1073],[1171,1171]]],[1520479770347,["gengmei_pxf@gengmei123.local",[[1,1069,"\n"]],[1068,1068],[1069,1069]]],[1520479779285,["gengmei_pxf@gengmei123.local",[[1,1072,"绑定Application\n"]],[1072,1072],[1086,1086]]],[1520479785404,["gengmei_pxf@gengmei123.local",[[1,1418,"启动Activity"]],[1418,1418],[1428,1428]]],[1520479786978,["gengmei_pxf@gengmei123.local",[[1,1416,"\n"]],[1415,1415],[1416,1416]]],[1520479790986,["gengmei_pxf@gengmei123.local",[[1,855,"\n"]],[853,853],[854,854]]],[1520479791506,["gengmei_pxf@gengmei123.local",[[1,856,"\n"]],[854,854],[855,855]]],[1520479794171,["gengmei_pxf@gengmei123.local",[[1,855,"![]()"]],[855,855],[860,860]]],[1520479812323,[null,[[-1,626,"1"],[1,627,""],[1,855,"\n"],[-1,862,"\n#2"],[1,865,"##"],[1,1077,"\n"],[-1,1196,"\n#3"],[1,1199,"##"],[1,1424,"\n"],[-1,1538,":"]],[626,626],[1538,1538]]],[1520479812323,[null,[[1,626,"1"],[-1,626,""],[-1,854,"\n"],[1,862,"\n#2"],[-1,862,"##"],[-1,1076,"\n"],[1,1196,"\n#3"],[-1,1196,"##"],[-1,1423,"\n"],[1,1538,":"]],[1538,1538],[626,626]]],[1520479798812,["gengmei_pxf@gengmei123.local",[[1,857,"创建进程"]],[857,857],[861,861]]],[1520479811117,["gengmei_pxf@gengmei123.local",[[1,863,"https://upload-images.jianshu.io/upload_images/851999-b6b5dacf9d1488f9.jpg?imageMogr2/auto-orient/"]],[863,863],[961,961]]]]],["bfd42832-db0a-4a37-bc97-a19e71417e3d",1521168480603,"App启动流程\n===\n\n用户点击Home上的一个App图标, 启动一个应用时:\n\n![app launch](https://upload-images.jianshu.io/upload_images/851999-a9c2c456c9f91596.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/683)\n\n## app launch\n\nClick事件会调用startActivity(Intent), 会通过Binder IPC机制, 最终调用到ActivityManagerService. 该Service会执行如下操作:\n\n*   第一步通过PackageManager的resolveIntent()收集这个intent对象的指向信息.\n*   指向信息被存储在一个intent对象中.\n*   下面重要的一步是通过grantUriPermissionLocked()方法来验证用户是否有足够的权限去调用该intent对象指向的Activity.\n*   如果有权限, ActivityManagerService会检查并在新的task中启动目标activity.\n*   现在, 是时候检查这个进程的ProcessRecord是否存在了.\n\n如果ProcessRecord是null, ActivityManagerService会创建新的进程来实例化目标activity.\n\n## 创建进程\n\nActivityManagerService调用startProcessLocked()方法来创建新的进程, 该方法会通过前面讲到的socket通道传递参数给Zygote进程. Zygote孵化自身, 并调用ZygoteInit.main()方法来实例化ActivityThread对象并最终返回新进程的pid.\n\nActivityThread随后依次调用Looper.prepareLoop()和Looper.loop()来开启消息循环.\n\n![创建进程](https://upload-images.jianshu.io/upload_images/851999-b6b5dacf9d1488f9.jpg?imageMogr2/auto-orient/)\n\n## 绑定Application\n\n接下来要做的就是将进程和指定的Application绑定起来. 这个是通过上节的ActivityThread对象中调用bindApplication()方法完成的. 该方法发送一个BIND_APPLICATION的消息到消息队列中, 最终通过handleBindApplication()方法处理该消息. 然后调用makeApplication()方法来加载App的classes到内存中.\n\n![绑定Application\n](https://upload-images.jianshu.io/upload_images/851999-32893aaf343caeac.jpg?imageMogr2/auto-orient/)\n\n## 启动Activity\n\n经过前两个步骤之后, 系统已经拥有了该application的进程. 后面的调用顺序就是普通的从一个已经存在的进程中启动一个新进程的activity了.\n\n实际调用方法是realStartActivity(), 它会调用application线程对象中的sheduleLaunchActivity()发送一个LAUNCH_ACTIVITY消息到消息队列中, 通过 handleLaunchActivity()来处理该消息.\n\n![启动Activity](https://upload-images.jianshu.io/upload_images/851999-9f76d2f18051881c.jpg?imageMogr2/auto-orient/)\n\n## [Android Application启动流程分析](https://www.jianshu.com/p/a5532ecc8377)\n\n## [Android应用启动流程分析](http://solart.cc/2016/08/20/launch_app/)",[[1521168455888,["gengmei_pxf@gengmei123.local",[[1,1641,"\n"]],[1639,1639],[1640,1640]]],[1521168456376,["gengmei_pxf@gengmei123.local",[[1,1642,"\n"]],[1640,1640],[1641,1641]]],[1521168457515,["gengmei_pxf@gengmei123.local",[[1,1641,"一. Step1 - Step 11：Launcher通过Binder进程间通信机制通知ActivityManagerService，它要启动一个Activity；\n\n       二. Step 12 - Step 16：ActivityManagerService通过Binder进程间通信机制通知Launcher进入Paused状态；\n\n       三. Step 17 - Step 24：Launcher通过Binder进程间通信机制通知ActivityManagerService，它已经准备就绪进入Paused状态，于是ActivityManagerService就创建一个新的进程，用来启动一个ActivityThread实例，即将要启动的Activity就是在这个ActivityThread实例中运行；\n\n       四. Step 25 - Step 27：ActivityThread通过Binder进程间通信机制将一个ApplicationThread类型的Binder对象传递给ActivityManagerService，以便以后ActivityManagerService能够通过这个Binder对象和它进行通信；\n\n       五. Step 28 - Step 35：ActivityManagerService通过Binder进程间通信机制通知ActivityThread，现在一切准备就绪，它可以真正执行Activity的启动操作了。"]],[1641,1641],[2281,2281]]],[1521168464860,["gengmei_pxf@gengmei123.local",[[-1,1725,"      "],[1,1731,"     "],[-1,1813,"      "],[1,1819,"      "],[-1,2005,"      "],[1,2011,"      "],[-1,2168,"      "],[1,2174,"      "]],[1732,1732],[1731,1731]]],[1521168467254,["gengmei_pxf@gengmei123.local",[[-1,1725,"      "]],[1731,1731],[1725,1725]]],[1521168471183,["gengmei_pxf@gengmei123.local",[[-1,1806,"       "]],[1806,1813],[1806,1806]]],[1521168474423,["gengmei_pxf@gengmei123.local",[[-1,1991,"       "]],[1991,1998],[1991,1991]]],[1521168478022,["gengmei_pxf@gengmei123.local",[[-1,2147,"       "]],[2147,2154],[2147,2147]]],[1521168488814,["gengmei_pxf@gengmei123.local",[[-1,1643," Step1 - Step 11："]],[1643,1660],[1643,1643]]],[1521168493214,["gengmei_pxf@gengmei123.local",[[-1,1710," Step 12 - Step 16："]],[1710,1729],[1710,1710]]],[1521168500260,["gengmei_pxf@gengmei123.local",[[-1,1772," Step 17 - Step 24："]],[1772,1791],[1772,1772]]],[1521168503981,["gengmei_pxf@gengmei123.local",[[-1,1938," Step 25 - Step 27："]],[1938,1957],[1938,1938]]],[1521168508125,["gengmei_pxf@gengmei123.local",[[-1,2075," Step 28 - Step 35："]],[2075,2094],[2075,2075]]],[1521168516198,["gengmei_pxf@gengmei123.local",[[1,1641,"* "]],[1641,1641],[1643,1643]]],[1521168525532,["gengmei_pxf@gengmei123.local",[[1,1710,"* "]],[1710,1710],[1712,1712]]],[1521168569657,["gengmei_pxf@gengmei123.local",[[1,1774,"*"]],[1774,1774],[1775,1775]]],[1521168570671,["gengmei_pxf@gengmei123.local",[[1,1775," "]],[1775,1775],[1776,1776]]],[1521168629026,["gengmei_pxf@gengmei123.local",[[1,1942,"* "]],[1942,1942],[1944,1944]]],[1521168631857,["gengmei_pxf@gengmei123.local",[[1,2081,"* "]],[2081,2081],[2083,2083]]],[1521168639000,["gengmei_pxf@gengmei123.local",[[-1,1643,"一."]],[1643,1645],[1643,1643]]],[1521168645809,["gengmei_pxf@gengmei123.local",[[-1,1710,"二."]],[1710,1712],[1710,1710]]],[1521168649119,["gengmei_pxf@gengmei123.local",[[-1,1772,"三."]],[1772,1774],[1772,1772]]],[1521168653192,["gengmei_pxf@gengmei123.local",[[-1,1938,"四."]],[1938,1940],[1938,1938]]],[1521168656080,["gengmei_pxf@gengmei123.local",[[-1,2075,"五."]],[2075,2077],[2075,2075]]]]]]}
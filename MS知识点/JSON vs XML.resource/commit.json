{"compress":true,"commitItems":[["e8001059-b64e-4e20-bcbe-81f3c7dc1fab",1521867523319,"",[[1521867486726,["gengmei_pxf@gengmei123.local",[[1,0,"JSON vs XML\n===\n\n\n1）JSON定义\n\nJSON是一种轻量级的数据交互格式，具有良好的可读性和快速编写的特性。业内主流技术为其提供了完整的解决方案（有点类似于正则表达式，获得了当今大部分语言的支持），从而可以在不同平台间进行数据交互。JSON采用兼容性很高的文本格式，同时也具备类似于C语言体系的行为。\n\n2）XML定义\n\nXML表示扩展标记语言 (Extensible Markup Language,XML) ，用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML是标准通用标记语言 (SGML) 的子集，非常适合 Web 传输。\n\n3）XML和JSON的优缺点对比\n\n可读性方面\n\nJSON和XML的数据可读性基本相同，JSON和XML的可读性可谓不相上下，一边是建议的语法，一边是规范的标签形式，XML可读性较好些。\n\n可扩展性方面\n\nXML天生有很好的扩展性，JSON当然也有，没有什么是XML能扩展，JSON不能的。\n\n编码难度方面\n\nXML有丰富的编码工具，比如Dom4j、JDom等，JSON也有json.org提供的工具，但是JSON的编码明显比XML容易许多，即使不借助工具也能写出JSON的代码，可是要写好XML就不太容易了。\n\n流行度方面\n\nXML已经被业界广泛的使用，而JSON才刚刚开始，但是在Ajax这个特定的领域，未来的发展一定是XML让位于JSON。\n\n数据体积方面\n\nJSON相对于XML来讲，数据的体积小，传递的速度更快些。\n\n数据交互方面\n\nJSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互。\n\n传输速度方面\n\nJSON的传输速度要远远快于XML。"]],[0,0],[754,754]]],[1521867499617,["gengmei_pxf@gengmei123.local",[[1,18,"# JSON数据与XML数据各有哪些优缺点"],[-1,181," "],[1,182," "],[-1,214," "],[1,215," "],[-1,289," "],[1,290," "],[-1,296," "],[1,297," "],[-1,305," Web "],[1,310," Web "]],[18,18],[39,39]]],[1521867500322,["gengmei_pxf@gengmei123.local",[[-1,18,"# JSON数据与XML数据各有哪些优缺点"],[1,202," "],[-1,202," "],[1,235," "],[-1,235," "],[1,310," "],[-1,310," "],[1,317," "],[-1,317," "],[1,326," Web "],[-1,326," Web "]],[39,39],[18,18]]],[1521867501880,["gengmei_pxf@gengmei123.local",[[1,16,"# JSON数据与XML数据各有哪些优缺点"],[-1,181," "],[1,182," "],[-1,214," "],[1,215," "],[-1,289," "],[1,290," "],[-1,296," "],[1,297," "],[-1,305," Web "],[1,310," Web "]],[16,16],[37,37]]],[1521867503892,["gengmei_pxf@gengmei123.local",[[1,16,"\n"]],[16,16],[17,17]]],[1521867508222,["gengmei_pxf@gengmei123.local",[[-1,23,"数据与"],[1,26,"  "]],[23,26],[25,25]]],[1521867514454,["gengmei_pxf@gengmei123.local",[[1,24,"vs"]],[24,24],[26,26]]],[1521867518014,["gengmei_pxf@gengmei123.local",[[1,30," "]],[30,30],[31,31]]],[1521867521700,["gengmei_pxf@gengmei123.local",[[-1,31,"数据各有哪些"]],[31,37],[31,31]]],[1521867528454,["gengmei_pxf@gengmei123.local",[[1,36,"## "]],[36,36],[39,39]]],[1521867530982,["gengmei_pxf@gengmei123.local",[[1,182,"## "]],[182,182],[185,185]]],[1521867532654,["gengmei_pxf@gengmei123.local",[[1,339,"￥"]],[339,339],[340,340]]],[1521867533788,["gengmei_pxf@gengmei123.local",[[-1,339,"￥"]],[340,340],[339,339]]],[1521867534740,["gengmei_pxf@gengmei123.local",[[1,339,"## "]],[339,339],[342,342]]],[1521867548493,["gengmei_pxf@gengmei123.local",[[1,360,"### "]],[360,360],[364,364]]],[1521867553125,["gengmei_pxf@gengmei123.local",[[1,441,"### "]],[441,441],[445,445]]],[1521867557061,["gengmei_pxf@gengmei123.local",[[1,497,"### "]],[497,497],[501,501]]],[1521867568898,["gengmei_pxf@gengmei123.local",[[-1,611,"流行度方面\n\nXML已经被业界广泛的使用，而JSON才刚刚开始，但是在Ajax这个特定的领域，未来的发展一定是XML让位于JSON。"]],[611,677],[611,611]]],[1521867569210,["gengmei_pxf@gengmei123.local",[[-1,612,"\n"]],[611,611],[610,610]]],[1521867569650,["gengmei_pxf@gengmei123.local",[[-1,611,"\n"]],[610,610],[609,609]]],[1521867571620,["gengmei_pxf@gengmei123.local",[[1,611,"### "]],[611,611],[615,615]]],[1521867573915,["gengmei_pxf@gengmei123.local",[[1,654,"### "]],[654,654],[658,658]]],[1521867576420,["gengmei_pxf@gengmei123.local",[[1,707,"### "]],[707,707],[711,711]]],[1521867621232,["gengmei_pxf@gengmei123.local",[[1,737,"\n\n"]],[737,737],[738,738]]],[1521867621391,["gengmei_pxf@gengmei123.local",[[1,739,"\n"]],[738,738],[739,739]]],[1521867622099,["gengmei_pxf@gengmei123.local",[[1,739,"### <1>. JSON相比XML的不同之处\n\n*   没有结束标签\n*   更短\n*   读写的速度更快\n*   能够使用内建的 JavaScript eval() 方法进行解析\n*   使用数组\n*   不使用保留字\n\n总之： JSON 比 XML 更小、更快，更易解析。\n\n### <2>. XML和JSON的区别：\n\nXML的主要组成成分：\n\n1.  XML是element、attribute和element content。\n\nJSON的主要组成成分：\n\n1.  JSON是object、array、string、number、boolean(true/false)和null。\n\nXML要表示一个object(指name-value pair的集合)，最初可能会使用element作为object，每个key-value pair 用 attribute 表示：\n\n1.  <student  name=\"soゝso\"  age=\"27\"/>\n\n但如个某个 value 也是 object，那么就不可以当作attribute:\n\n1.  <student  name=\"soゝso\"  age=\"27\">\n2.  <address>\n3.  <country>中国</country>\n4.  <province>北京市</province>\n5.  <city>朝阳区</city>\n6.  <district>北京市朝阳区东四环远洋国际中心A座1906 </district>\n7.  </address>\n8.  </student>\n\n那么，什么时候用element，什么时候用attribute，就已经是一个问题了。\n\n而JSON因为有object这种类型，可以自然地映射，不需考虑上述的问题，自然地得到以下的格式。\n\n1.  {\n2.  \"name\":  \"John\",\n3.  \"age\"  :  10,\n4.  \"address\"  :  {\n5.  \"country\"  :  \"中国\",\n6.  \"province\"  :  \"北京市\",\n7.  \"city\"  :  \"朝阳区\",\n8.  \"district\"  :  \"北京市朝阳区东四环远洋国际中心A座1906\",\n9.  }\n10.  }\n\n`One More Thing…`\n\nXML需要选择怎么处理element content的换行，而JSON string则不须作这个选择。\n\nXML只有文字，没有预设的数字格式，而JSON则有明确的number格式，这样在locale上也安全。\n\nXML映射数组没大问题，就是数组元素tag比较重复冗余。JSON 比较易读。\n\nJSON的true/false/null也能容易统一至一般编程语言的对应语义。\n\nXML文档可以附上DTD、Schema，还有一堆的诸如XPath之类规范，使用自定义XML元素或属性，能很方便地给数据附加各种约束条件和关联额外信息，从数据表达能力上看，XML强于Json，但是很多场景并不需要这么复杂的重量级的东西，轻便灵活的Json就显得很受欢迎了。\n\n打个比方，如果完成某件事有两种方式：一种简单的，一个复杂的。你选哪个？\n\nJSON与XML相比就是这样的。"]],[739,739],[2103,2103]]],[1521867632479,["gengmei_pxf@gengmei123.local",[[1,739,"\n"]],[737,737],[738,738]]],[1521867632702,["gengmei_pxf@gengmei123.local",[[1,740,"\n"]],[738,738],[739,739]]],[1521867634129,["gengmei_pxf@gengmei123.local",[[1,739,"# "]],[739,739],[741,741]]],[1521867642577,["gengmei_pxf@gengmei123.local",[[1,741,"对比"]],[741,741],[743,743]]],[1521867645471,["gengmei_pxf@gengmei123.local",[[-1,747,"#"]],[748,748],[747,747]]],[1521867651039,["gengmei_pxf@gengmei123.local",[[-1,748,"<1>. "]],[748,753],[748,748]]],[1521867654038,["gengmei_pxf@gengmei123.local",[[-1,882,"#"]],[883,883],[882,882]]],[1521867656830,["gengmei_pxf@gengmei123.local",[[-1,883,"<2>. "]],[883,888],[883,883]]],[1521867672671,["gengmei_pxf@gengmei123.local",[[1,897,"### "]],[897,897],[901,901]]],[1521867680101,["gengmei_pxf@gengmei123.local",[[1,900,"\n"]],[900,900],[901,901]]],[1521867680997,["gengmei_pxf@gengmei123.local",[[1,901,"\n"]],[901,901],[902,902]]],[1521867682478,["gengmei_pxf@gengmei123.local",[[-1,902," "]],[903,903],[902,902]]],[1521867689030,["gengmei_pxf@gengmei123.local",[[1,900," 组成部分"]],[900,900],[905,905]]],[1521867691863,["gengmei_pxf@gengmei123.local",[[1,907,"* "]],[907,907],[909,909]]],[1521867695316,["gengmei_pxf@gengmei123.local",[[-1,922,"1.  "]],[926,926],[922,922]]],[1521867698263,["gengmei_pxf@gengmei123.local",[[1,962,"* "]],[962,962],[964,964]]],[1521867700581,["gengmei_pxf@gengmei123.local",[[-1,978,"1.  "]],[978,982],[978,978]]],[1521867712179,["gengmei_pxf@gengmei123.local",[[1,1037,"\n"]],[1037,1037],[1038,1038]]],[1521867727061,["gengmei_pxf@gengmei123.local",[[-1,1213,"1.  <student  name=\"soゝso\"  age=\"27\">\n2.  <address>\n3.  <country>中国</country>\n4.  <province>北京市</province>\n5.  <city>朝阳区</city>\n6.  <district>北京市朝阳区东四环远洋国际中心A座1906 </district>\n7.  </address>\n8.  </student>"],[1,1418,"·"]],[1213,1418],[1214,1214]]],[1521867728139,["gengmei_pxf@gengmei123.local",[[-1,1213,"·"]],[1214,1214],[1213,1213]]],[1521867729285,["gengmei_pxf@gengmei123.local",[[1,1213,"```"]],[1213,1213],[1216,1216]]],[1521867729546,["gengmei_pxf@gengmei123.local",[[1,1218,"\n"]],[1216,1216],[1217,1217]]],[1521867729970,["gengmei_pxf@gengmei123.local",[[1,1219,"\n"]],[1217,1217],[1218,1218]]],[1521867730716,["gengmei_pxf@gengmei123.local",[[1,1218,"```"]],[1218,1218],[1221,1221]]],[1521867732224,["gengmei_pxf@gengmei123.local",[[1,1217,"1.  <student  name=\"soゝso\"  age=\"27\">\n2.  <address>\n3.  <country>中国</country>\n4.  <province>北京市</province>\n5.  <city>朝阳区</city>\n6.  <district>北京市朝阳区东四环远洋国际中心A座1906 </district>\n7.  </address>\n8.  </student>"]],[1217,1217],[1422,1422]]],[1521867734736,["gengmei_pxf@gengmei123.local",[[-1,1217,"1.  <student  name=\"soゝso\"  age=\"27\">\n2.  <address>\n3.  <country>中国</country>\n4.  <province>北京市</province>\n5.  <city>朝阳区</city>\n6.  <district>北京市朝阳区东四环远洋国际中心A座1906 </district>\n7.  </address>\n8.  </student>"]],[1422,1422],[1217,1217]]],[1521867743197,["gengmei_pxf@gengmei123.local",[[1,1217,"<student name=\"soゝso\" age=\"27\">\n    <address>\n        <country>中国</country>\n        <province>北京市</province>\n        <city>朝阳区</city>\n        <district>北京市朝阳区东四环远洋国际中心A座1906 </district>\n    </address>\n</student>"]],[1217,1217],[1428,1428]]],[1521867748764,["gengmei_pxf@gengmei123.local",[[-1,1527,"1.  {\n2.  \"name\":  \"John\",\n3.  \"age\"  :  10,\n4.  \"address\"  :  {\n5.  \"country\"  :  \"中国\",\n6.  \"province\"  :  \"北京市\",\n7.  \"city\"  :  \"朝阳区\",\n8.  \"district\"  :  \"北京市朝阳区东四环远洋国际中心A座1906\",\n9.  }\n10.  }\n"],[1,1721,"```"]],[1527,1721],[1530,1530]]],[1521867749217,["gengmei_pxf@gengmei123.local",[[1,1531,"\n"]],[1530,1530],[1531,1531]]],[1521867749937,["gengmei_pxf@gengmei123.local",[[1,1532,"\n"]],[1531,1531],[1532,1532]]],[1521867751163,["gengmei_pxf@gengmei123.local",[[1,1532,"```"]],[1532,1532],[1535,1535]]],[1521867763420,["gengmei_pxf@gengmei123.local",[[1,1531,"{\n    \"name\": \"John\",\n    \"age\" : 10,\n    \"address\" : {\n        \"country\" : \"中国\",\n        \"province\" : \"北京市\",\n        \"city\" : \"朝阳区\",\n        \"district\" : \"北京市朝阳区东四环远洋国际中心A座1906\",\n    }\n}"]],[1531,1531],[1718,1718]]],[1521867774307,["gengmei_pxf@gengmei123.local",[[1,1723,"## "]],[1723,1723],[1726,1726]]],[1521870420798,["gengmei_pxf@gengmei123.local",[[1,1745,"\n"]],[1744,1744],[1745,1745]]],[1521870422522,["gengmei_pxf@gengmei123.local",[[-1,1745,"\n"]],[1745,1745],[1744,1744]]],[1521870424477,["gengmei_pxf@gengmei123.local",[[1,2123,"\n"]],[2122,2122],[2123,2123]]],[1521870424789,["gengmei_pxf@gengmei123.local",[[1,2124,"\n"]],[2123,2123],[2124,2124]]],[1521870426913,["gengmei_pxf@gengmei123.local",[[-1,2124,"\n"],[1,2125,"# # [Android中解析XML格式数据的方法](http://www.cnblogs.com/neillee/p/7281687.html)"]],[2124,2124],[2197,2197]]],[1521870428974,["gengmei_pxf@gengmei123.local",[[-1,2126,"# "]],[2128,2128],[2126,2126]]],[1521870433453,["gengmei_pxf@gengmei123.local",[[1,2195,"\n\n"]],[2195,2195],[2196,2196]]],[1521870433701,["gengmei_pxf@gengmei123.local",[[1,2197,"\n"]],[2196,2196],[2197,2197]]],[1521870439069,["gengmei_pxf@gengmei123.local",[[1,2126,"\n"]],[2126,2126],[2127,2127]]],[1521870442094,["gengmei_pxf@gengmei123.local",[[1,2126," Android中解析XML格式数据的方法"]],[2125,2125],[2146,2146]]],[1521870454879,["gengmei_pxf@gengmei123.local",[[1,2219,"## Android XML数据解析"]],[2219,2219],[2237,2237]]],[1521870480610,[null,[[-1,2126," "],[1,2147," "]],[2126,2126],[2148,2148]]],[1521870480610,[null,[[1,2126," "],[-1,2146," "]],[2148,2148],[2126,2126]]],[1521870458064,["gengmei_pxf@gengmei123.local",[[-1,2219,"## Android XML数据解析"]],[2237,2237],[2219,2219]]],[1521870459624,["gengmei_pxf@gengmei123.local",[[-1,2219,"\n"],[1,2220,"【】"]],[2219,2219],[2221,2221]]],[1521870460444,["gengmei_pxf@gengmei123.local",[[-1,2219,"【】"]],[2221,2221],[2219,2219]]],[1521870461953,["gengmei_pxf@gengmei123.local",[[1,2219,"\n\n"]],[2219,2219],[2220,2220]]],[1521870463328,["gengmei_pxf@gengmei123.local",[[-1,2220,"\n"],[1,2221,"[]## Android XML数据解析"]],[2220,2220],[2240,2240]]],[1521870464013,["gengmei_pxf@gengmei123.local",[[1,2220,"\n"],[-1,2220,"[]## Android XML数据解析"]],[2240,2240],[2220,2220]]],[1521870465581,["gengmei_pxf@gengmei123.local",[[-1,2220,"\n"],[1,2221,"[]"]],[2220,2220],[2222,2222]]],[1521870466783,["gengmei_pxf@gengmei123.local",[[1,2221,"## Android XML数据解析"]],[2221,2221],[2239,2239]]],[1521870470036,["gengmei_pxf@gengmei123.local",[[-1,2221,"## "]],[2224,2224],[2221,2221]]],[1521870473334,["gengmei_pxf@gengmei123.local",[[1,2237,"()"]],[2237,2237],[2239,2239]]],[1521870479574,["gengmei_pxf@gengmei123.local",[[1,2238,"http://www.runoob.com/w3cnote/android-tutorial-xml.html"]],[2238,2238],[2293,2293]]],[1521870516551,[null,[[-1,2126," "],[1,2147," "]],[2126,2126],[2148,2148]]],[1521870516551,[null,[[1,2126," "],[-1,2146," "]],[2148,2148],[2126,2126]]],[1521870496619,["gengmei_pxf@gengmei123.local",[[1,2294,"\n\n"]],[2294,2294],[2295,2295]]],[1521870496845,["gengmei_pxf@gengmei123.local",[[1,2296,"\n"]],[2295,2295],[2296,2296]]],[1521870497327,["gengmei_pxf@gengmei123.local",[[1,2296,"# 详解\n\n## 2.1 SAX\n\n`SAX(Simple API for XML)` 使用流式处理的方式，它并不记录所读内容的相关信息。\n\n它是一种以事件为驱动的XML API，解析速度快，占用内存少。使用回调函数来实现。\n\n缺点是不能倒退。\n\n## 2.2 DOM\n\n`DOM(Document Object Model)` 是一种用于XML文档的对象模型，可用于直接访问 XML 文档的各个部分。\n\n它是一次性全部将内容加载在内存中，生成一个树状结构,它没有涉及回调和复杂的状态管理。\n\n缺点是加载大文档时效率低下。\n\n## 2.3 PULL\n\n`Pull` 内置于 Android 系统中。也是官方解析布局文件所使用的方式。\n\nPull 与 SAX 有点类似，都提供了类似的事件，如开始元素和结束元素。\n\n不同的是，SAX 的事件驱动是回调相应方法，需要提供回调的方法，而后在 SAX 内部自动调用相应的方法。\n\n而Pull解析器并没有强制要求提供触发的方法。因为他触发的事件不是一个方法，而是一个数字。它使用方便，效率高。\n\n## 三、比较\n\nSAX、DOM、Pull 的比较:\n\n内存占用：SAX、Pull比DOM要好；\n\n编程方式：SAX 采用事件驱动，在相应事件触发的时候，会调用用户编好的方法，也即每解析一类 XML，就要编写一个新的适合该类XML的处理类。DOM 是 W3C 的规范，Pull 简洁。\n\n访问与修改：SAX 采用流式解析，DOM 随机访问。\n\n访问方式：SAX，Pull 解析的方式是同步的，DOM 逐字逐句。"]],[2296,2296],[2969,2969]]],[1521870500214,["gengmei_pxf@gengmei123.local",[[1,2297,"#"],[-1,2301,""],[-1,2339," "],[1,2340," "],[-1,2460," "],[1,2461," "],[-1,2578," "],[1,2579," "]],[2297,2297],[2298,2298]]],[1521870502523,["gengmei_pxf@gengmei123.local",[[1,2305,"#"]],[2305,2305],[2306,2306]]],[1521870505579,["gengmei_pxf@gengmei123.local",[[-1,2307,"2.1 "]],[2307,2311],[2307,2307]]],[1521870508092,["gengmei_pxf@gengmei123.local",[[1,2420,"#"]],[2420,2420],[2421,2421]]],[1521870510683,["gengmei_pxf@gengmei123.local",[[-1,2422,"2.2 "]],[2422,2426],[2422,2422]]],[1521870513044,["gengmei_pxf@gengmei123.local",[[1,2556,"#"]],[2555,2555],[2556,2556]]],[1521870515834,["gengmei_pxf@gengmei123.local",[[-1,2558,"2.3 "]],[2558,2562],[2558,2558]]]]]]}
{"compress":true,"commitItems":[["c773bf31-1efc-454a-94d1-f5ad8fb5b702",1520423134167,"",[[1520423109158,["gengmei_pxf@gengmei123.local",[[1,0,"线程间操作List\n===\n\n\n\n```\npackage com.hlss; \n\nimport java.util.ArrayList; \nimport java.util.Collections; \nimport java.util.List; \n\n/** \n* 类描述：多线程处理List \n* @author Calvin Wu \n*/ \npublic class MultiThread { \n\n// 用Collections.synchronizedList让list线程安全 \npublic final static List<Long> list = Collections.synchronizedList(new ArrayList<Long>()); \n\npublic static void main(String[] args) { \n// 为List添加100个数据 \nfor (int i = 1; i <= 100; i++) { \nlist.add(Long.valueOf(i)); \n} \n\nMyThread myThread = new MyThread(); \n// 开启四个线程处理list数据 \nThread t1 = new Thread(myThread); \nt1.setName(\"线程1\"); \nt1.start(); \n\nThread t2 = new Thread(myThread); \nt2.setName(\"线程2\"); \nt2.start(); \n\nThread t3 = new Thread(myThread); \nt3.setName(\"线程3\"); \nt3.start(); \n\nThread t4 = new Thread(myThread); \nt4.setName(\"线程4\"); \nt4.start(); \n} \n\n} \n\n\n\n******************************************************************** \n\n\n\npackage com.hlss; \n\nimport java.util.List; \n\npublic class MyThread implements Runnable { \n\nprivate final List<Long> list = MultiThread.list; \n\n@Override \npublic void run() { \nfor (int i = 0; i < list.size();) { \n// 同步list，打印数据并删除该数据 \nsynchronized (list) { \ntry { \n//当前线程睡眠，让其它线程获得执行机会 \nThread.sleep(100); \n} catch (InterruptedException e) { \ne.printStackTrace(); \n} \nSystem.out.println(Thread.currentThread().getName() + \":\" + list.get(i)); \nlist.remove(i); \n} \n} \n} \n} \n\n\n\n******************************************************************** \n\n运行结果： \n\n线程1:1 \n线程1:2 \n线程1:3 \n线程4:4 \n线程4:5 \n线程4:6 \n线程4:7 \n线程3:8 \n线程2:9 \n线程2:10 \n线程4:11 \n线程4:12 \n线程1:13 \n线程2:14 \n线程3:15 \n线程3:16 \n线程3:17 \n线程3:18 \n线程3:19 \n线程3:20 \n线程3:21 \n线程3:22 \n线程3:23 \n线程3:24 \n线程3:25 \n线程3:26 \n线程3:27 \n线程1:28 \n线程4:29 \n线程4:30 \n线程3:31 \n线程2:32 \n线程2:33 \n线程2:34 \n线程2:35 \n线程4:36 \n线程4:37 \n线程1:38 \n线程2:39 \n线程3:40 \n线程3:41 \n线程1:42 \n线程1:43 \n线程1:44 \n线程1:45 \n线程4:46 \n线程3:47 \n线程3:48 \n线程2:49 \n线程2:50 \n线程4:51 \n线程1:52 \n线程2:53 \n线程3:54 \n线程1:55 \n线程1:56 \n线程4:57 \n线程4:58 \n线程3:59 \n线程2:60 \n线程2:61 \n线程2:62 \n线程2:63 \n线程4:64 \n线程4:65 \n线程4:66 \n线程1:67 \n线程2:68 \n线程2:69 \n线程3:70 \n线程3:71 \n线程3:72 \n线程1:73 \n线程1:74 \n线程4:75 \n线程3:76 \n线程3:77 \n线程2:78 \n线程2:79 \n线程2:80 \n线程2:81 \n线程2:82 \n线程4:83 \n线程4:84 \n线程4:85 \n线程4:86 \n线程4:87 \n线程4:88 \n线程4:89 \n线程4:90 \n线程4:91 \n线程4:92 \n线程4:93 \n线程4:94 \n线程4:95 \n线程4:96 \n线程1:97 \n线程1:98 \n线程2:99 \n线程3:100 \n\n```\n"]],[0,0],[2228,2228]]],[1520423130407,["gengmei_pxf@gengmei123.local",[[1,202,"\t"],[1,245,"\t"],[1,337,"\t"],[1,338,"\t"],[1,380,"\t"],[1,398,"\t"],[1,432,"\t"],[1,460,"\t"],[1,463,"\t"],[1,464,"\t"],[1,501,"\t"],[1,520,"\t"],[1,555,"\t"],[1,575,"\t"],[1,588,"\t"],[1,589,"\t"],[1,624,"\t"],[1,644,"\t"],[1,657,"\t"],[1,658,"\t"],[1,693,"\t"],[1,713,"\t"],[1,726,"\t"],[1,727,"\t"],[1,762,"\t"],[1,782,"\t"],[1,795,"\t"]],[202,797],[202,824]]],[1520423141820,["gengmei_pxf@gengmei123.local",[[1,385,"\t"],[1,403,"\t"],[1,438,"\t"],[1,468,"\t"],[1,472,"\t"],[1,473,"\t"],[1,512,"\t"],[1,531,"\t"],[1,567,"\t"],[1,589,"\t"],[1,602,"\t"],[1,605,"\t"],[1,641,"\t"],[1,661,"\t"],[1,676,"\t"],[1,677,"\t"],[1,713,"\t"],[1,735,"\t"],[1,749,"\t"],[1,750,"\t"],[1,787,"\t"],[1,807,"\t"]],[385,819],[386,841]]],[1520423148460,["gengmei_pxf@gengmei123.local",[[1,1018,"\t"],[1,1069,"\t"],[1,1070,"\t"],[1,1081,"\t"],[1,1102,"\t"],[1,1139,"\t"],[1,1161,"\t"],[1,1184,"\t"],[1,1191,"\t"],[1,1213,"\t"],[1,1233,"\t"],[1,1269,"\t"],[1,1291,"\t"],[1,1294,"\t"],[1,1369,"\t"],[1,1386,"\t"],[1,1389,"\t"],[1,1392,"\t"]],[1018,1394],[1018,1412]]],[1520423152162,["gengmei_pxf@gengmei123.local",[[1,1085,"\t"],[1,1106,"\t"],[1,1145,"\t"],[1,1167,"\t"],[1,1192,"\t"],[1,1199,"\t"],[1,1222,"\t"],[1,1244,"\t"],[1,1281,"\t"],[1,1304,"\t"],[1,1307,"\t"],[1,1384,"\t"],[1,1402,"\t"],[1,1405,"\t"]],[1085,1408],[1086,1422]]],[1520423156610,["gengmei_pxf@gengmei123.local",[[1,1109,"\t"],[1,1148,"\t"],[1,1170,"\t"],[1,1197,"\t"],[1,1204,"\t"],[1,1228,"\t"],[1,1252,"\t"],[1,1290,"\t"],[1,1312,"\t"],[1,1319,"\t"],[1,1396,"\t"],[1,1413,"\t"]],[1109,1417],[1110,1429]]],[1520423162538,["gengmei_pxf@gengmei123.local",[[1,1150,"\t"],[1,1172,"\t"],[1,1198,"\t"],[1,1211,"\t"],[1,1233,"\t"],[1,1259,"\t"],[1,1298,"\t"],[1,1323,"\t"],[1,1326,"\t"],[1,1404,"\t"]],[1150,1423],[1151,1433]]],[1520423165879,["gengmei_pxf@gengmei123.local",[[1,1215,"\t"],[1,1237,"\t"]],[1215,1259],[1216,1261]]],[1520423169233,["gengmei_pxf@gengmei123.local",[[-1,1307,"e.printStackTrace(); "],[1,1328,"\t"]],[1307,1328],[1308,1308]]],[1520423179176,["gengmei_pxf@gengmei123.local",[[-1,1320,"System.out.println(Thread.currentThread().getName() + \":\" + list.get(i)); "],[1,1394,"\t"]],[1320,1394],[1321,1321]]],[1520423180715,["gengmei_pxf@gengmei123.local",[[1,1320,"System.out.println(Thread.currentThread().getName() + \":\" + list.get(i)); "],[-1,1320,"\t"]],[1321,1321],[1320,1394]]],[1520423182057,["gengmei_pxf@gengmei123.local",[[-1,1320,"System.out.println(Thread.currentThread().getName() + \":\" + list.get(i)); "],[1,1394,"\t"]],[1320,1394],[1321,1321]]],[1520423183296,["gengmei_pxf@gengmei123.local",[[1,1320,"System.out.println(Thread.currentThread().getName() + \":\" + list.get(i)); "],[-1,1320,"\t"]],[1321,1321],[1320,1394]]],[1520423187776,["gengmei_pxf@gengmei123.local",[[1,1320,"\t\t\t"]],[1320,1320],[1323,1323]]],[1520423216992,["gengmei_pxf@gengmei123.local",[[1,2316,"\n"]],[2315,2315],[2316,2316]]],[1520423217441,["gengmei_pxf@gengmei123.local",[[1,2316,"*   好奇为什么在有synchroniezed方法的同时会出现Collections.synchronizedList*   Collections.synchronizedList可以得到本身不是线程安全的容易的线程安全的状态*   线程安全仅仅指的是如果直接使用它提供的函数，比如:add(obj);或者poll(obj);，这样我们自己不需要做任何同步*   Collections.synchronizedList返回的线程安全的List内部使用的锁是list*   可以实现线程安全性\n\n作者：_晖\n链接：https://www.jianshu.com/p/7a7985653651\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[2316,2316],[2654,2654]]],[1520423221992,["gengmei_pxf@gengmei123.local",[[-1,2566,"作者：_晖\n链接：https://www.jianshu.com/p/7a7985653651\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n"]],[2565,2654],[2565,2565]]],[1520423222853,["gengmei_pxf@gengmei123.local",[[-1,2565,"\n"]],[2565,2565],[2564,2564]]],[1520423230335,["gengmei_pxf@gengmei123.local",[[1,2431,"\n"]],[2431,2431],[2432,2432]]],[1520423232438,["gengmei_pxf@gengmei123.local",[[1,2497,"\n"]],[2497,2497],[2498,2498]]],[1520423236899,["gengmei_pxf@gengmei123.local",[[1,2431," "]],[2431,2431],[2432,2432]]],[1520423237885,["gengmei_pxf@gengmei123.local",[[-1,2431," "]],[2432,2432],[2431,2431]]],[1520423238780,["gengmei_pxf@gengmei123.local",[[1,2432,"\n"]],[2431,2431],[2432,2432]]],[1520423240302,["gengmei_pxf@gengmei123.local",[[1,2499,"\n"]],[2498,2498],[2499,2499]]],[1520423252982,["gengmei_pxf@gengmei123.local",[[1,2376,"\n"]],[2376,2376],[2377,2377]]],[1520423255294,["gengmei_pxf@gengmei123.local",[[1,2377,"\n"]],[2376,2376],[2377,2377]]],[1520423263110,["gengmei_pxf@gengmei123.local",[[-1,2504,"  "]],[2506,2506],[2504,2504]]],[1520423265725,["gengmei_pxf@gengmei123.local",[[1,2555,"\n"]],[2555,2555],[2556,2556]]],[1520423267557,["gengmei_pxf@gengmei123.local",[[1,2556,"\n"]],[2555,2555],[2556,2556]]],[1520423272704,["gengmei_pxf@gengmei123.local",[[1,2504,"  "]],[2504,2504],[2506,2506]]]]]]}
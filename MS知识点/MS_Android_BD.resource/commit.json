{"compress":true,"commitItems":[["63e603df-84d6-4786-8d46-ea53b9b14cd2",1512095656498,"",[[1512095609815,["gengmei_pxf@gengmei123.local",[[1,0,"### JAVA\n\n#### 一. 类的加载过程，Person person = new Person();为例进行说明。\n\n1).因为new用到了Person.class，所以会先找到Person.class文件，并加载到内存中;\n\n2).执行该类中的static代码块，如果有的话，给Person.class类进行初始化;\n\n3).在堆内存中开辟空间分配内存地址;\n\n4).在堆内存中建立对象的特有属性，并进行默认初始化;\n\n5).对属性进行显示初始化;\n\n6).对对象进行构造代码块初始化;\n\n7).对对象进行与之对应的构造函数进行初始化;\n\n8).将内存地址付给栈内存中的p变量\n\n#### 二. JVM相关知识，GC机制。\n\n**JVM基本构成**\n\n![](//upload-images.jianshu.io/upload_images/4642697-bbcb5924cdaf30f8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/473)\n\n从上图可知，JVM主要包括四个部分：\n\n    1.类加载器（ClassLoader）:在JVM启动时或者在类运行时将需要的class加载到JVM中。（下图表示了从java源文件到JVM的整个过程，可配合理解。 \n\n![](//upload-images.jianshu.io/upload_images/4642697-1cf5f815751beeab.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400)\n\n    2.执行引擎：负责执行class文件中包含的字节码指令；\n\n    3.内存区（也叫运行时数据区）：是在JVM运行的时候操作所分配的内存区。运行时内存区主要可以划分为5个区域，如图：\n\n![](//upload-images.jianshu.io/upload_images/4642697-160b9ba3bfeaf8f5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/376)\n\n*   方法区(Method Area)：用于存储类结构信息的地方，包括常量池、静态变量、构造函数等。虽然JVM规范把方法区描述为堆的一个逻辑部分， 但它却有个别名non-heap（非堆），所以大家不要搞混淆了。方法区还包含一个运行时常量池。\n\n*   java堆(Heap)：存储java实例或者对象的地方。这块是GC的主要区域。从存储的内容我们可以很容易知道，方法区和堆是被所有java线程共享的。\n\n*   java栈(Stack)：java栈总是和线程关联在一起，每当创建一个线程时，JVM就会为这个线程创建一个对应的java栈。在这个java栈中又会包含多个栈帧，每运行一个方法就创建一个栈帧，用于存储局部变量表、操作栈、方法返回值等。每一个方法从调用直至执行完成的过程，就对应一个栈帧在java栈中入栈到出栈的过程。所以java栈是现成私有的。\n\n*   程序计数器(PC Register)：用于保存当前线程执行的内存地址。由于JVM程序是多线程执行的（线程轮流切换），所以为了保证线程切换回来后，还能恢复到原先状态，就需要一个独立的计数器，记录之前中断的地方，可见程序计数器也是线程私有的。\n\n*   本地方法栈(Native Method Stack)：和java栈的作用差不多，只不过是为JVM使用到的native方法服务的。\n\n        4.本地方法接口：主要是调用C或C++实现的本地方法及返回结果。\n\n**GC机制**\n\n    垃圾收集器一般必须完成两件事：检测出垃圾；回收垃圾。怎么检测出垃圾？一般有以下几种方法：\n\n**_引用计数法：_**\n\n    给一个对象添加引用计数器，每当有个地方引用它，计数器就加1；引用失效就减1。好了，问题来了，如果我有两个对象A和B，互相引用，除此之外，没有其他任何对象引用它们，实际上这两个对象已经无法访问，即是我们说的垃圾对象。但是互相引用，计数不为0，导致无法回收，所以还有另一种方法：\n\n**_可达性分析算法：_**\n\n    以根集对象为起始点进行搜索，如果有对象不可达的话，即是垃圾对象。这里的根集一般包括java栈中引用的对象、方法区常良池中引用的对象、本地方法中引用的对象等。\n\n    总之，JVM在做垃圾回收的时候，会检查堆中的所有对象是否会被这些根集对象引用，不能够被引用的对象就会被垃圾收集器回收。一般回收算法也有如下几种：\n\n1).标记-清除（Mark-sweep）\n\n2).复制（Copying\n\n3).标记-整理（Mark-Compact）\n\n4).分代收集算法\n\n具体的解释可以参考本篇文章[还不点我?](https://link.jianshu.com?t=http://blog.csdn.net/tonytfjing/article/details/44278233)\n\n#### 三. 类的加载器，双亲机制，Android的类加载器。\n\n**类的加载器**\n\n    大家都知道，当我们写好一个Java程序之后，不是管是CS还是BS应用，都是由若干个.class文件组织而成的一个完整的Java应用程序，当程序在运行时，即会调用该程序的一个入口函数来调用系统的相关功能，而这些功能都被封装在不同的class文件当中，所以经常要从这个class文件中要调用另外一个class文件中的方法，如果另外一个文件不存在的，则会引发系统异常。而程序在启动的时候，并不会一次性加载程序所要用的所有class文件，而是根据程序的需要，通过Java的类加载机制（ClassLoader）来动态加载某个class文件到内存当中的，从而只有class文件被载入到了内存之后，才能被其它class所引用。所以ClassLoader就是用来动态加载class文件到内存当中用的。\n\n**双亲机制**\n\n**_1、原理介绍_**\n\n    ClassLoader使用的是双亲委托模型来搜索类的，每个ClassLoader实例都有一个父类加载器的引用（不是继承的关系，是一个包含的关系），虚拟机内置的类加载器（Bootstrap ClassLoader）本身没有父类加载器，但可以用作其它ClassLoader实例的的父类加载器。当一个ClassLoader实例需要加载某个类时，它会试图亲自搜索某个类之前，先把这个任务委托给它的父类加载器，这个过程是由上至下依次检查的，首先由最顶层的类加载器Bootstrap ClassLoader试图加载，如果没加载到，则把任务转交给Extension ClassLoader试图加载，如果也没加载到，则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常。否则将这个找到的类生成一个类的定义，并将它加载到内存当中，最后返回这个类在内存中的Class实例对象。\n\n**_2、为什么要使用双亲委托这种模型呢？_**\n\n    因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。\n\n**_3、但是JVM在搜索类的时候，又是如何判定两个class是相同的呢？_**\n\n    JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。比如网络上的一个Java类org.classloader.simple.NetClassLoaderSimple，javac编译之后生成字节码文件NetClassLoaderSimple.class，ClassLoaderA和ClassLoaderB这两个类加载器并读取了NetClassLoaderSimple.class文件，并分别定义出了java.lang.Class实例来表示这个类，对于JVM来说，它们是两个不同的实例对象，但它们确实是同一份字节码文件，如果试图将这个Class实例生成具体的对象进行转换时，就会抛运行时异常java.lang.ClassCaseException，提示这是两个不同的类型。\n\n**Android类加载器**\n\n    对于Android而言，最终的apk文件包含的是dex类型的文件，dex文件是将class文件重新打包，打包的规则又不是简单地压缩，而是完全对class文件内部的各种函数表，变量表进行优化，产生一个新的文件，即dex文件。因此加载这种特殊的Class文件就需要特殊的类加载器DexClassLoader。\n\n#### 四. 集合框架，list，map，set都有哪些具体的实现类，区别都是什么?\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n#### 五. concurrentHashmap原理，原子类。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大.\n\n#### 六. volatile原理\n\n    在《Java并发编程：核心理论》一文中，我们已经提到过可见性、有序性及原子性问题，通常情况下我们可以通过Synchronized关键字来解决这些个问题，不过如果对Synchronized原理有了解的话，应该知道Synchronized是一个比较重量级的操作，对系统的性能有比较大的影响，所以，如果有其他解决方案，我们通常都避免使用Synchronized来解决问题。而volatile关键字就是Java中提供的另一种解决可见性和有序性问题的方案。对于原子性，需要强调一点，也是大家容易误解的一点：对volatile变量的单次读/写操作可以保证原子性的，如long和double类型变量，但是并不能保证i++这种操作的原子性，因为本质上i++是读、写两次操作。\n\n参考文章[插好眼了等传送](https://link.jianshu.com?t=https://www.cnblogs.com/paddix/p/5428507.html)\n\n#### 七. 多线程的使用场景\n\n使用多线程就一定效率高吗？ 有时候使用多线程并不是为了提高效率，而是使得CPU能够同时处理多个事件。\n\n1).为了不阻塞主线程,启动其他线程来做好事的事情,比如APP中耗时操作都不在UI中做.\n\n2).实现更快的应用程序,即主线程专门监听用户请求,子线程用来处理用户请求,以获得大的吞吐量.感觉这种情况下，多线程的效率未必高。 这种情况下的多线程是为了不必等待， 可以并行处理多条数据。\n\n比如JavaWeb的就是主线程专门监听用户的HTTP请求，然后启动子线程去处理用户的HTTP请求。\n\n3).某种虽然优先级很低的服务，但是却要不定时去做。\n\n比如Jvm的垃圾回收。\n\n4.)某种任务，虽然耗时，但是不耗CPU的操作时，开启多个线程，效率会有显著提高。\n\n比如读取文件，然后处理。 磁盘IO是个很耗费时间，但是不耗CPU计算的工作。 所以可以一个线程读取数据，一个线程处理数据。肯定比一个线程读取数据，然后处理效率高。 因为两个线程的时候充分利用了CPU等待磁盘IO的空闲时间。\n\n#### 八. JAVA常量池\n\n**_Interger中的128(-128~127)_**\n\na.当数值范围为-128~127时：如果两个new出来Integer对象，即使值相同，通过“==”比较结果为false，但两个对象直接赋值，则通过“==”比较结果为“true，这一点与String非常相似。\n\nb.当数值不在-128~127时，无论通过哪种方式，即使两个对象的值相等，通过“==”比较，其结果为false；\n\nc.当一个Integer对象直接与一个int基本数据类型通过“==”比较，其结果与第一点相同；\n\nd.Integer对象的hash值为数值本身；\n\n**_为什么是-128-127?_**\n\n    在Integer类中有一个静态内部类IntegerCache，在IntegerCache类中有一个Integer数组，用以缓存当数值范围为-128~127时的Integer对象。\n\n#### 九. 简单介绍一下java中的泛型，泛型擦除以及相关的概念。\n\n    泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。 Java语言引入泛型的好处是安全简单。\n\n    在Java SE 1.5之前，没有泛型的情况的下，通过对类型Object的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是一个安全隐患。\n\n    泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，提高代码的重用率。\n\n1、泛型的类型参数只能是类类型（包括自定义类），不能是简单类型。\n\n2、同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的。\n\n3、泛型的类型参数可以有多个。\n\n4、泛型的参数类型可以使用extends语句，例如<T extends superclass>。习惯上称为“有界类型”。\n\n5、泛型的参数类型还可以是通配符类型。例如Class<?> classType = Class.forName(\"java.lang.String\");\n\n**泛型擦除以及相关的概念**\n\n    Java中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会在编译器在编译的时候去掉。这个过程就称为类型擦除。\n\n**类型擦除引起的问题及解决方法**\n\n1、先检查，在编译，以及检查编译的对象和引用传递的问题\n\n2、自动类型转换\n\n3、类型擦除与多态的冲突和解决方法\n\n4、泛型类型变量不能是基本数据类型\n\n5、运行时类型查询\n\n6、异常中使用泛型的问题\n\n7、数组（这个不属于类型擦除引起的问题）\n\n9、类型擦除后的冲突\n\n10、泛型在静态方法和静态类中的问题\n\n### Android\n\n#### 一. Handler机制\n\n    Android 的消息机制也就是 handler 机制,创建 handler 的时候会创建一个 looper ( 通过 looper.prepare() 来创建 ),looper 一般为主线程 looper.\n\n    handler 通过 send 发送消息 (sendMessage) ,当然 post 一系列方法最终也是通过 send 来实现的,在 send 方法中handler 会通过 enqueueMessage() 方法中的 enqueueMessage(msg,millis )向消息队列 MessageQueue 插入一条消息,同时会把本身的 handler 通过 msg.target = this 传入.\n\n    Looper 是一个死循环,不断的读取MessageQueue中的消息,loop 方法会调用 MessageQueue 的 next 方法来获取新的消息,next 操作是一个阻塞操作,当没有消息的时候 next 方法会一直阻塞,进而导致 loop 一直阻塞,当有消息的时候,Looper 就会处理消息 Looper 收到消息之后就开始处理消息: msg.target.dispatchMessage(msg),当然这里的 msg.target 就是上面传过来的发送这条消息的 handler 对象,这样 handler 发送的消息最终又交给他的dispatchMessage方法来处理了,这里不同的是,handler 的 dispatchMessage 方法是在创建 Handler时所使用的 Looper 中执行的,这样就成功的将代码逻辑切换到了主线程了.\n\n    Handler 处理消息的过程是:首先,检查Message 的 callback 是否为 null,不为 null 就通过 handleCallBack 来处理消息,Message 的 callback 是一个 Runnable 对象,实际上是 handler 的 post 方法所传递的 Runnable 参数.其次是检查 mCallback 是 否为 null,不为 null 就调用 mCallback 的handleMessage 方法来处理消息.\n\n#### 二. View的绘制流程\n\n    View的绘制流程：OnMeasure()——>OnLayout()——>OnDraw()\n\n各步骤的主要工作：\n\n**_OnMeasure()：_**\n\n    测量视图大小。从顶层父View到子View递归调用measure方法，measure方法又回调OnMeasure。\n\n**_OnLayout()：_**\n\n    确定View位置，进行页面布局。从顶层父View向子View的递归调用view.layout方法的过程，即父View根据上一步measure子View所得到的布局大小和布局参数，将子View放在合适的位置上。\n\n**_OnDraw()：_**\n\n    绘制视图:ViewRoot创建一个Canvas对象，然后调用OnDraw()。六个步骤：①、绘制视图的背景；②、保存画布的图层（Layer）；③、绘制View的内容；④、绘制View子视图，如果没有就不用；⑤、还原图层（Layer）；⑥、绘制滚动条。\n\n#### 三. 事件传递机制\n\n1).Android事件分发机制的本质是要解决：点击事件由哪个对象发出，经过哪些对象，最终达到哪个对象并最终得到处理。这里的对象是指Activity、ViewGroup、View.\n\n2).Android中事件分发顺序：Activity（Window） -> ViewGroup -> View.\n\n3).事件分发过程由dispatchTouchEvent() 、onInterceptTouchEvent()和onTouchEvent()三个方法协助完成\n\n**设置Button按钮来响应点击事件事件传递情况：（如下图）**\n\n布局如下:\n\n![](//upload-images.jianshu.io/upload_images/4642697-01f23a099103eb82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/210)\n\n最外层：Activiy A，包含两个子View：ViewGroup B、View C\n\n中间层：ViewGroup B，包含一个子View：View C\n\n最内层：View C\n\n假设用户首先触摸到屏幕上View C上的某个点（如图中黄色区域），那么Action_DOWN事件就在该点产生，然后用户移动手指并最后离开屏幕。\n\n**按钮点击事件:**\n\nDOWN事件被传递给C的onTouchEvent方法，该方法返回true，表示处理这个事件;\n\n因为C正在处理这个事件，那么DOWN事件将不再往上传递给B和A的onTouchEvent()；\n\n该事件列的其他事件（Move、Up）也将传递给C的onTouchEvent();\n\n![](//upload-images.jianshu.io/upload_images/4642697-ca12c00c79780b57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n(记住这个图的传递顺序,面试的时候能够画出来,就很详细了)\n\n#### 四. Binder机制\n\n**1.了解Binder**\n\n    在Android系统中，每一个应用程序都运行在独立的进程中，这也保证了当其中一个程序出现异常而不会影响另一个应用程序的正常运转。在许多情况下，我们activity都会与各种系统的service打交道，很显然，我们写的程序中activity与系统service肯定不是同一个进程，但是它们之间是怎样实现通信的呢？所以Binder是android中一种实现进程间通信（IPC）的方式之一。\n\n    1).首先，Binder分为Client和Server两个进程。\n\n    注意，Client和Server是相对的。谁发消息，谁就是Client，谁接收消息，谁就是Server。\n\n    举个例子，两个进程A和B之间使用Binder通信，进程A发消息给进程B，那么这时候A是Binder Client，B是Binder Server；进程B发消息给进程A，那么这时候B是Binder Client，A是Binder Server——其实这么说虽然简单了，但还是不太严谨，我们先这么理解着。\n\n    2).其次，我们看下面这个图（摘自田维术的博客），基本说明白了Binder的组成解构：\n\n![](//upload-images.jianshu.io/upload_images/4642697-9fed6a1413057558.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/673)\n\n    图中的IPC就是进程间通信的意思。\n\n    图中的ServiceManager，负责把Binder Server注册到一个容器中。\n\n    有人把ServiceManager比喻成电话局，存储着每个住宅的座机电话，还是很恰当的。张三给李四打电话，拨打电话号码，会先转接到电话局，电话局的接线员查到这个电话号码的地址，因为李四的电话号码之前在电话局注册过，所以就能拨通；没注册，就会提示该号码不存在。\n\n    对照着Android Binder机制，对着上面这图，张三就是Binder Client，李四就是Binder Server，电话局就是ServiceManager，电话局的接线员在这个过程中做了很多事情，对应着图中的Binder驱动.\n\n    3).接下来我们看Binder通信的过程，还是摘自田维术博客的一张图：\n\n![](//upload-images.jianshu.io/upload_images/4642697-6a03bbb4f16108b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/675)\n\n注：图中的SM也就是ServiceManager。\n\n    我们看到，Client想要直接调用Server的add方法，是不可以的，因为它们在不同的进程中，这时候就需要Binder来帮忙了。\n\n    首先是Server在SM这个容器中注册。\n\n    其次，Client想要调用Server的add方法，就需要先获取Server对象， 但是SM不会把真正的Server对象返回给Client，而是把Server的一个代理对象返回给Client，也就是Proxy。\n\n    然后，Client调用Proxy的add方法，SM会帮他去调用Server的add方法，并把结果返回给Client。\n\n    以上这3步，Binder驱动出了很多力，但我们不需要知道Binder驱动的底层实现，涉及到C++的代码了——把有限的时间去做更有意义的事情。\n\n(ps:以上节选自包建强老师的文章[点我点我](https://link.jianshu.com?t=http://www.cnblogs.com/Jax/p/6864103.html)).\n\n**2.为什么android选用Binder来实现进程间通信？**\n\n1).可靠性。在移动设备上，通常采用基于Client-Server的通信方式来实现互联网与设备间的内部通信。目前linux支持IPC包括传统的管道，System V IPC，即消息队列/共享内存/信号量，以及socket中只有socket支持Client-Server的通信方式。Android系统为开发者提供了丰富进程间通信的功能接口，媒体播放，传感器，无线传输。这些功能都由不同的server来管理。开发都只关心将自己应用程序的client与server的通信建立起来便可以使用这个服务。毫无疑问，如若在底层架设一套协议来实现Client-Server通信，增加了系统的复杂性。在资源有限的手机 上来实现这种复杂的环境，可靠性难以保证。\n\n2).传输性能。socket主要用于跨网络的进程间通信和本机上进程间的通信，但传输效率低，开销大。消息队列和管道采用存储-转发方式，即数据先从发送方缓存区拷贝到内核开辟的一块缓存区中，然后从内核缓存区拷贝到接收方缓存区，其过程至少有两次拷贝。虽然共享内存无需拷贝，但控制复杂。比较各种IPC方式的数据拷贝次数。共享内存：0次。Binder：1次。Socket/管道/消息队列：2次。\n\n3).安全性。Android是一个开放式的平台，所以确保应用程序安全是很重要的。Android对每一个安装应用都分配了UID/PID,其中进程的UID是可用来鉴别进程身份。传统的只能由用户在数据包里填写UID/PID，这样不可靠，容易被恶意程序利用。而我们要求由内核来添加可靠的UID。\n\n所以，出于可靠性、传输性、安全性。android建立了一套新的进程间通信方式。\n\n#### 五. Android中进程的级别，以及各自的区别。\n\n**1、前台进程**\n\n    用户当前正在做的事情需要这个进程。如果满足下面的条件之一，一个进程就被认为是前台进程：\n\n1).这个进程拥有一个正在与用户交互的Activity(这个Activity的onResume()方法被调用)。\n\n2).这个进程拥有一个绑定到正在与用户交互的activity上的Service。\n\n3).这个进程拥有一个前台运行的Service（service调用了方法startForeground()）.\n\n4).这个进程拥有一个正在执行其任何一个生命周期回调方法（onCreate(),onStart(),或onDestroy()）的Service。\n\n5).这个进程拥有正在执行其onReceive()方法的BroadcastReceiver。\n\n    通常，在任何时间点，只有很少的前台进程存在。它们只有在达到无法调合的矛盾时才会被杀－－如内存太小而不能继续运行时。通常，到了这时，设备就达到了一个内存分页调度状态，所以需要杀一些前台进程来保证用户界面的反应.\n\n**2、可见进程**\n\n    一个进程不拥有运行于前台的组件，但是依然能影响用户所见。满足下列条件时，进程即为可见：\n\n    这个进程拥有一个不在前台但仍可见的Activity(它的onPause()方法被调用)。当一个前台activity启动一个对话框时，就出了这种情况。\n\n**3、服务进程**\n\n    一个可见进程被认为是极其重要的。并且，除非只有杀掉它才可以保证所有前台进程的运行，否则是不能动它的。\n\n    这个进程拥有一个绑定到可见activity的Service。\n\n    一个进程不在上述两种之内，但它运行着一个被startService()所启动的service。\n\n尽管一个服务进程不直接影响用户所见，但是它们通常做一些用户关心的事情（比如播放音乐或下载数据），所以系统不到前台进程和可见进程活不下去时不会杀它。\n\n**4、后台进程**\n\n    一个进程拥有一个当前不可见的activity(activity的onStop()方法被调用)。\n\n    这样的进程们不会直接影响到用户体验，所以系统可以在任意时刻杀了它们从而为前台、可见、以及服务进程们提供存储空间。通常有很多后台进程在运行。它们被保存在一个LRU(最近最少使用)列表中来确保拥有最近刚被看到的activity的进程最后被杀。如果一个activity正确的实现了它的生命周期方法，并保存了它的当前状态，那么杀死它的进程将不会对用户的可视化体验造成影响。因为当用户返回到这个activity时，这个activity会恢复它所有的可见状态。\n\n**5、空进程**\n\n    一个进程不拥有入何active组件。\n\n    保留这类进程的唯一理由是高速缓存，这样可以提高下一次一个组件要运行它时的启动速度。系统经常为了平衡在进程高速缓存和底层的内核高速缓存之间的整体系统资源而杀死它们。\n\n#### 六. 线程池的相关知识。\n\n    Android中的线程池都是之间或间接通过配置ThreadPoolExecutor来实现不同特性的线程池.Android中最常见的四类具有不同特性的线程池分别为FixThreadPool、CachedThreadPool、SingleThreadPool、ScheduleThreadExecutor.\n\n**1).FixThreadPool**\n\n    只有核心线程,并且数量固定的,也不会被回收,所有线程都活动时,因为队列没有限制大小,新任务会等待执行.\n\n    优点:更快的响应外界请求.\n\n**2).SingleThreadPool**\n\n    只有一个核心线程,确保所有的任务都在同一线程中按顺序完成.因此不需要处理线程同步的问题.\n\n**3).CachedThreadPool**\n\n    只有非核心线程,最大线程数非常大,所有线程都活动时,会为新任务创建新线程,否则会利用空闲线程(60s空闲时间,过了就会被回收,所以线程池中有0个线程的可能)处理任务.\n\n    优点:任何任务都会被立即执行(任务队列SynchronousQueue相当于一个空集合);比较适合执行大量的耗时较少的任务.\n\n**4).ScheduledThreadPool**\n\n    核心线程数固定,非核心线程(闲着没活干会被立即回收)数没有限制.\n\n    优点:执行定时任务以及有固定周期的重复任务\n\n    参考[Android开发——Android中常见的4种线程池（保证你能看懂并理解）](https://link.jianshu.com?t=http://blog.csdn.net/seu_calvin/article/details/52415337)\n\n#### 七. 内存泄露，怎样查找，怎么产生的内存泄露。\n\n**产生的内存泄露**\n\n1).资源对象没关闭造成的内存泄漏\n\n2).构造Adapter时，没有使用缓存的convertView\n\n3).Bitmap对象不在使用时调用recycle()释放内存\n\n4).试着使用关于application的context来替代和activity相关的context\n\n5).注册没取消造成的内存泄漏\n\n6).集合中对象没清理造成的内存泄漏\n\n**查找内存泄漏**\n\n    查找内存泄漏可以使用Android Stdio 自带的Android Profiler工具,也可以使用Square产品的LeadCanary.\n\n#### 八. Android优化\n\n**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n#### 九. 插件化相关技术，热修补技术是怎样实现的，和插件化有什么区别\n\n**相同点:**\n\n    都使用ClassLoader来实现的加载的新的功能类，都可以使用PathClassLoader与DexClassLoader\n\n**不同点：**\n\n    热修复因为是为了修复Bug的，所以要将新的同名类替代同名的Bug类，要抢先加载新的类而不是Bug类，所以多做两件事：在原先的app打包的时候，阻止相关类去打上CLASS_ISPREVERIFIED标志，还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements，这样才能抢先代替Bug类，完成系统不加载旧的Bug类.\n\n    而插件化只是增肌新的功能类或者是资源文件，所以不涉及抢先加载旧的类这样的使命，就避过了阻止相关类去打上CLASS_ISPREVERIFIED标志和还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements.\n\n    所以插件化比热修复简单，热修复是在插件化的基础上在进行替旧的Bug类\n\n#### 十. 怎样计算一张图片的大小，加载bitmap过程（怎样保证不产生内存溢出），二级缓存，LRUCache算法。\n\n**计算一张图片的大小**\n\n    图片占用内存的计算公式：图片高度 * 图片宽度 * 一个像素占用的内存大小.所以，计算图片占用内存大小的时候，要考虑图片所在的目录跟设备密度，这两个因素其实影响的是图片的高宽，android会对图片进行拉升跟压缩。\n\n**加载bitmap过程（怎样保证不产生内存溢出）**\n\n    由于Android对图片使用内存有限制，若是加载几兆的大图片便内存溢出。Bitmap会将图片的所有像素（即长x宽）加载到内存中，如果图片分辨率过大，会直接导致内存OOM，只有在BitmapFactory加载图片时使用BitmapFactory.Options对相关参数进行配置来减少加载的像素。\n\n**BitmapFactory.Options相关参数详解**\n\n(1).Options.inPreferredConfig值来降低内存消耗。\n\n比如：默认值ARGB_8888改为RGB_565,节约一半内存。\n\n(2).设置Options.inSampleSize 缩放比例，对大图片进行压缩 。\n\n(3).设置Options.inPurgeable和inInputShareable：让系统能及时回 收内存。\n\nA：inPurgeable：设置为True时，表示系统内存不足时可以被回 收，设置为False时，表示不能被回收。\n\nB：inInputShareable：设置是否深拷贝，与inPurgeable结合使用，inPurgeable为false时，该参数无意义。\n\n(4).使用decodeStream代替其他方法。\n\ndecodeResource,setImageResource,setImageBitmap等方法\n\n#### 十一. LRUCache算法是怎样实现的。\n\n    内部存在一个LinkedHashMap和maxSize，把最近使用的对象用强引用存储在 LinkedHashMap中，给出来put和get方法，每次put图片时计算缓存中所有图片总大小，跟maxSize进行比较，大于maxSize，就将最久添加的图片移除；反之小于maxSize就添加进来。\n\n    之前，我们会使用内存缓存技术实现，也就是软引用或弱引用，在Android 2.3（APILevel 9）开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，这让软引用和弱引用变得不再可靠。\n\n### 算法\n\n#### 一. 算法题\n\nm * n的矩阵，能形成几个正方形（2 * 2能形成1个正方形，2 * 3 2个，3 * 3 6个）\n\n计数的关键是要观察到任意一个倾斜的正方形必然唯一内接于一个非倾斜的正方形，而一个非倾斜的边长为k的非倾斜正方形，一条边上有k-1个内点，每个内点恰好确定一个内接于其中的倾斜正方形，加上非倾斜正方形本身，可知，将边长为k的非倾斜正方形数目乘以k，再按k求和即可得到所有正方形的数目。\n\n设2≤n≤m，k≤n-1，则边长为k的非倾斜有\n\n(n-k)(m-k)个，故所有正方形有\n\n∑(m-k)(n-k)k个\n\n例如m=n=4\n\n正方形有3_3_1+2_2_2+1_1_3=20个\n\n### 下面是面试过程中遇到的题目\n\n大多数题目都可以在上面找到答案.\n\n#### 电话面试题\n\n1.ArrayList 和 Hashmap 简单说一些,区别,底层的数据结构.\n\n2.Handler 消息机制\n\n3.引起内存泄漏的场景\n\n4.多线程的使用场景?\n\n5.常用的线程池有哪几种?\n\n6.在公司做了什么?团队规模?为什么离职?\n\n#### 面试中实际涉及到的问题\n\n**第一轮**\n\n1.知道哪些单例模式,写一个线程安全的单例,并分析为什么是线程安全的?\n\n2.Java中的集合有哪些?解释一下HashMap?底部的数据结构?散列表冲突的处理方法,散列表是一个什么样的数据结构?HashMap是采用什么方法处理冲突的?\n\n3.解释一下什么是MVP架构,画出图解,一句话解释MVP和MVC的区别?\n\n4.Handle消息机制?在使用Handler的时候要注意哪些东西,是否会引起内存泄漏?画一下Handler机制的图解?\n\n5.是否做过性能优化?已经采取了哪些措施进行优化?\n\n6.引起内存泄漏的原因是什么?以及你是怎么解决的?\n\n这些问题应该都是比较基础的问题,每个开发者都应该是非常熟悉并能详细叙述的.这一轮的面试官问的技术都是平时用到的.\n\n**第二轮**\n\n1.关于并发理解多少?说几个并发的集合?\n\n2.Handler 消息机制图解?\n\n3.在项目中做了哪些东西?\n\n4.画图说明View 事件传递机制?并举一个例子阐述\n\n5.类加载机制,如何换肤,换肤插件中存在的问题?hotfix是否用过,原理是否了解?\n\n6.说说项目中用到了哪些设计模式,说了一下策略模式和观察者模式?\n\n7.会JS么?有Hybid开发经验么?\n\n8.说一下快排的思想?手写代码\n\n9.堆有哪些数据结构?\n\n对于这轮米那是明显感觉到压力,知识的纵向了解也比较深,应该是个leader.\n\n**第三轮**\n\n1.介绍一下在项目中的角色?\n\n2.遇到困难是怎么解决的?\n\n3.如何与人相处,与别人意见相左的时候是怎么解决的,并举生活中的一个例子.\n\n4.有没有压力特别大的时候?\n\n这个应该是项目经理了,问的问题偏向于生活性格方面.\n\n以上面试中问到的题目基本上都可以在上面找到答案,所以做准备是很重要的,但技术是一点点积累的,就算你全会背了,面试过了,真正等到工作的时候还是会捉襟见肘的,所以踏实点吧骚年.\n\n作者：gexinzhao\n链接：http://www.jianshu.com/p/251b1bf72cd8\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[0,0],[23607,23607]]],[1512095628570,["gengmei_pxf@gengmei123.local",[[-1,23513,"作者：gexinzhao\n链接：http://www.jianshu.com/p/251b1bf72cd8\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[23513,23607],[23513,23513]]],[1512095671516,["gengmei_pxf@gengmei123.local",[[1,335,"http:"]],[335,455],[460,460]]],[1512095684116,["gengmei_pxf@gengmei123.local",[[1,799,"http:"],[-1,849,"60b9ba3bfeaf8f5"],[1,864,"cf5f815751beeab"],[-1,916,"376"],[1,919,"400"]],[799,919],[924,924]]],[1512095698069,["gengmei_pxf@gengmei123.local",[[-1,799,"http:"],[1,854,"60b9ba3bfeaf8f5"],[-1,854,"cf5f815751beeab"],[1,921,"376"],[-1,921,"400"]],[924,924],[799,919]]],[1512095720368,["gengmei_pxf@gengmei123.local",[[1,575,"http:"]],[575,695],[700,700]]],[1512095731208,["gengmei_pxf@gengmei123.local",[[1,804,"http:"]],[804,924],[929,929]]],[1512095770422,["gengmei_pxf@gengmei123.local",[[1,10949,"http:"]],[10949,11068],[11073,11073]]],[1512095790589,["gengmei_pxf@gengmei123.local",[[1,11395,"http:"]],[11395,11514],[11519,11519]]],[1512095807373,["gengmei_pxf@gengmei123.local",[[1,12090,"http:"]],[12090,12209],[12214,12214]]],[1512095820260,["gengmei_pxf@gengmei123.local",[[1,12593,"http:"]],[12593,12712],[12717,12717]]],[1512096500104,["gengmei_pxf@gengmei123.local",[[1,4040,"\n"]],[4038,4038],[4039,4039]]],[1512096500461,["gengmei_pxf@gengmei123.local",[[1,4041,"\n"]],[4039,4039],[4040,4040]]],[1512096501330,["gengmei_pxf@gengmei123.local",[[1,4040,"![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：了对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**===****》****TreeSet****两种排序方式：**两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素"]],[4040,4040],[7091,7091]]],[1512098579185,["gengmei_pxf@gengmei123.local",[[1,25834,"```java\npublic class Singleton {\n\t// Private constructor prevents instantiation from other classes\n\tprivate Singleton() { }\n\n\t/**\n\t* SingletonHolder is loaded on the first execution of Singleton.getInstance() \n\t* or the first access to SingletonHolder.INSTANCE, not before.\n\t*/\n\tprivate static class SingletonHolder { \n\t\t\tpublic static final Singleton INSTANCE = new Singleton();\n\t}\n\n\tpublic static Singleton getInstance() {\n\t\t\treturn SingletonHolder.INSTANCE;\n\t}\n}\n```"]],[25834,25834],[26303,26303]]],[1512108469376,["gengmei_pxf@gengmei123.local",[[1,26386,"\n"]],[26384,26384],[26385,26385]]],[1512108470344,["gengmei_pxf@gengmei123.local",[[1,26387,"\n"]],[26385,26385],[26386,26386]]],[1512108470755,["gengmei_pxf@gengmei123.local",[[1,26386,"![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：了对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**===****》****TreeSet****两种排序方式：**两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n#### 五. concurrentHashmap原理，原子类。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大."]],[26386,26386],[32444,32444]]],[1512108571905,["gengmei_pxf@gengmei123.local",[[-1,26991,"了"]],[26992,26992],[26991,26991]]],[1512108727062,["gengmei_pxf@gengmei123.local",[[-1,27331,"===****》****"]],[27329,27341],[27329,27329]]],[1512108743902,["gengmei_pxf@gengmei123.local",[[-1,27338,"****"]],[27342,27342],[27338,27338]]],[1512108756001,["gengmei_pxf@gengmei123.local",[[-1,27345,"**"]],[27345,27347],[27345,27345]]],[1512108757695,["gengmei_pxf@gengmei123.local",[[1,27344,"**"]],[27344,27344],[27346,27346]]],[1512109284143,["gengmei_pxf@gengmei123.local",[[1,26521,"···"]],[26521,26521],[26524,26524]]],[1512109285129,["gengmei_pxf@gengmei123.local",[[-1,26521,"···"]],[26524,26524],[26521,26521]]],[1512109286367,["gengmei_pxf@gengmei123.local",[[1,26521,"```"]],[26521,26521],[26524,26524]]],[1512109293231,["gengmei_pxf@gengmei123.local",[[1,26952,"\n"]],[26950,26950],[26951,26951]]],[1512109293855,["gengmei_pxf@gengmei123.local",[[1,26953,"\n"]],[26951,26951],[26952,26952]]],[1512109294699,["gengmei_pxf@gengmei123.local",[[1,26952,"```"]],[26952,26952],[26955,26955]]],[1512109312872,["gengmei_pxf@gengmei123.local",[[1,27761,"\n"]],[27760,27760],[27761,27761]]],[1512109313699,["gengmei_pxf@gengmei123.local",[[1,27761,"```"]],[27761,27761],[27764,27764]]],[1512109316695,["gengmei_pxf@gengmei123.local",[[1,28263,"\n"]],[28262,28262],[28263,28263]]],[1512109318112,["gengmei_pxf@gengmei123.local",[[1,28262,"```"]],[28262,28262],[28265,28265]]],[1512109320847,["gengmei_pxf@gengmei123.local",[[1,28355,"\n"]],[28354,28354],[28355,28355]]],[1512109321590,["gengmei_pxf@gengmei123.local",[[1,28355,"```"]],[28355,28355],[28358,28358]]],[1512109325451,["gengmei_pxf@gengmei123.local",[[1,28619,"\n"]],[28618,28618],[28619,28619]]],[1512109327160,["gengmei_pxf@gengmei123.local",[[1,28618,"```"]],[28618,28618],[28621,28621]]],[1512109339143,["gengmei_pxf@gengmei123.local",[[1,28020,"\n"]],[28018,28018],[28019,28019]]],[1512109339831,["gengmei_pxf@gengmei123.local",[[1,28021,"\n"]],[28019,28019],[28020,28020]]],[1512109340696,["gengmei_pxf@gengmei123.local",[[1,28020,"```"]],[28020,28020],[28023,28023]]],[1512109349005,["gengmei_pxf@gengmei123.local",[[1,28103,"\n"]],[28102,28102],[28103,28103]]],[1512109349861,["gengmei_pxf@gengmei123.local",[[1,28103,"```"]],[28103,28103],[28106,28106]]],[1512111577107,["gengmei_pxf@gengmei123.local",[[1,26304,"**"]],[26304,26304],[26306,26306]]],[1512111581773,["gengmei_pxf@gengmei123.local",[[1,26385,"**"]],[26385,26385],[26387,26387]]],[1512111613820,["gengmei_pxf@gengmei123.local",[[1,32466,"**"]],[32466,32466],[32468,32468]]],[1512111616436,["gengmei_pxf@gengmei123.local",[[1,32503,"**"]],[32503,32503],[32505,32505]]],[1512120208115,["gengmei_pxf@gengmei123.local",[[1,25798,"**"]],[25798,25798],[25800,25800]]],[1512120210891,["gengmei_pxf@gengmei123.local",[[1,25834,"**"]],[25834,25834],[25836,25836]]],[1512120231532,["gengmei_pxf@gengmei123.local",[[1,32511,"为了解决逻辑处理和UI视图的松散耦合，MVC和MVP的架构模式在很多App中使用比较广泛。\n\n那什么是MVP呢？它又和我们常常听到的MVC有什么关系了以及区别呢？\n\n![MVP和MVC架构图](http://frodoking.github.io/img/android/mvp_mvc_img.png)\n\nMVP 是从经典的模式MVC演变而来，它们的基本思想有相通的地方：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。作为一种新的模式，MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会从直接Model中读取数据而不是通过 Controller。\n\n在MVC里，View是可以直接访问Model的！从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。 在MVC模型里，更关注的Model的不变，而同时有多个对Model的不同显示，及View。所以，在MVC模型里，Model不依赖于View，但是View是依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。\n\n### [](https://frodoking.github.io/2015/02/01/android-mvc-mvp-analysis/#MVP如何解决MVC的问题？ \"MVP如何解决MVC的问题？\")MVP如何解决MVC的问题？\n\n在MVP里，Presenter完全把Model和View进行了分离，主要的程序逻辑在Presenter里实现。而且，Presenter与具体的View是没有直接关联的，而是通过定义好的接口进行交互，从而使得在变更View时候可以保持Presenter的不变，即重用！ 不仅如此，我们还可以编写测试用的View，模拟用户的各种操作，从而实现对Presenter的测试–而不需要使用自动化的测试工具。 我们甚至可以在Model和View都没有完成时候，就可以通过编写Mock Object（即实现了Model和View的接口，但没有具体的内容的）来测试Presenter的逻辑。 在MVP里，应用程序的逻辑主要在Presenter来实现，其中的View是很薄的一层。因此就有人提出了Presenter First的设计模式，就是根据User Story来首先设计和开发Presenter。在这个过程中，View是很简单的，能够把信息显示清楚就可以了。在后面，根据需要再随便更改View，而对Presenter没有任何的影响了。 如果要实现的UI比较复杂，而且相关的显示逻辑还跟Model有关系，就可以在View和Presenter之间放置一个Adapter。由这个 Adapter来访问Model和View，避免两者之间的关联。而同时，因为Adapter实现了View的接口，从而可以保证与Presenter之间接口的不变。这样就可以保证View和Presenter之间接口的简洁，又不失去UI的灵活性。 在MVP模式里，View只应该有简单的Set/Get的方法，用户输入和设置界面显示的内容，除此就不应该有更多的内容，绝不容许直接访问Model–这就是与MVC很大的不同之处。\n\nMVP的优点：\n\n> 1、模型与视图完全分离，我们可以修改视图而不影响模型；\n> 2、可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部；\n> 3、我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁；\n> 4、如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）。\n\n### [](https://frodoking.github.io/2015/02/01/android-mvc-mvp-analysis/#使用方法 \"使用方法\")使用方法\n\n1、建立bean\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n | \n\npublic class UserBean {\n private String mFirstName;\n private String mLastName;\n\n public UserBean(String firstName, String lastName) {\n this. mFirstName = firstName;\n this. mLastName = lastName;\n }\n\n public String getFirstName() {\n return mFirstName;\n }\n\n public String getLastName() {\n return mLastName;\n }\n}\n\n |\n\n2、建立model接口（处理业务逻辑，这里指数据读写）\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n | \n\npublic interface IUserModel {\n void setID(int id);\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n\n int getID();\n\n UserBean load(int id);// 通过id读取user信息,返回一个UserBean\n}\n\n |\n\n3、建立view接口（更新ui中的view状态），这里列出需要操作当前view的方法\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n | \n\npublic interface IUserView {\n int getID();\n\n String getFristName();\n\n String getLastName();\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n}\n\n |\n\n4、建立presenter（主导器，通过iView和iModel接口操作model和view），activity可以把所有逻辑给presenter处理，这样java逻辑就从手机的activity中分离出来\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n | \n\npublic class UserPresenter {\n private IUserView mUserView;\n private IUserModel mUserModel;\n\n public UserPresenter(IUserView view) {\n mUserView = view;\n mUserModel = new UserModel();\n }\n\n public void saveUser( int id, String firstName, String lastName) {\n mUserModel.setID(id);\n mUserModel.setFirstName(firstName);\n mUserModel.setLastName(lastName);\n }\n\n public void loadUser( int id) {\n UserBean user = mUserModel.load(id);\n mUserView.setFirstName(user.getFirstName()); // 通过调用IUserView的方法来更新显示\n mUserView.setLastName(user.getLastName());\n }\n}\n\n |\n\n### [](https://frodoking.github.io/2015/02/01/android-mvc-mvp-analysis/#结束语 \"结束语\")结束语\n\nMVP主要解决就是把逻辑层抽出来成P层，要是遇到需求逻辑上的更改就可以只需要修改P层了或者遇到逻辑上的大概我们可以直接从写一个P也可以，很多开发人员把所有的东西都写在了Activity/Fragment里面这样一来遇到频繁改需求或者逻辑越来越复杂的时候，Activity/Fragment里面就会出现过多的混杂逻辑导致出错，所以MVP模式对于APP来对控制逻辑和UI的解耦来说是一个不错的选择！\n\n在这里多说一下，其实MVP只是一个总体的解决方案。在V和P之间其实我们还可以采用事件总线的方案来解决这种高耦合的情况。本人在另外一篇文章中将会讲到[事件总线（otto的bus和eventbus的一个对比分析）](https://frodoking.github.io/2015/03/30/android-eventbus-otto-analysis/)"]],[32511,32511],[36339,36339]]],[1512120238599,["gengmei_pxf@gengmei123.local",[[1,32511,"\n"]],[32510,32510],[32511,32511]]],[1512120275714,["gengmei_pxf@gengmei123.local",[[-1,34276,"| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n | "],[1,34326,"·"]],[34276,34326],[34277,34277]]],[1512120276647,["gengmei_pxf@gengmei123.local",[[-1,34276,"·"]],[34277,34277],[34276,34276]]],[1512120310028,["gengmei_pxf@gengmei123.local",[[1,34276,"·"]],[34276,34276],[34277,34277]]],[1512120310885,["gengmei_pxf@gengmei123.local",[[-1,34276,"·"]],[34277,34277],[34276,34276]]],[1512120312708,["gengmei_pxf@gengmei123.local",[[1,34276,"```"]],[34276,34276],[34279,34279]]],[1512120316292,["gengmei_pxf@gengmei123.local",[[1,34590,"```"]],[34590,34590],[34593,34593]]],[1512120319845,["gengmei_pxf@gengmei123.local",[[-1,34595,"|\n"]],[34595,34597],[34595,34595]]],[1512120326019,["gengmei_pxf@gengmei123.local",[[-1,34624,"\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n | "],[1,34657,"```"]],[34624,34657],[34627,34627]]],[1512120327532,["gengmei_pxf@gengmei123.local",[[1,34624,"\n"]],[34623,34623],[34624,34624]]],[1512120333035,["gengmei_pxf@gengmei123.local",[[-1,34827,"\n |"],[1,34830,"```"]],[34827,34830],[34830,34830]]],[1512120340055,["gengmei_pxf@gengmei123.local",[[-1,34876,"| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n |"],[1,34907,"```"]],[34876,34907],[34879,34879]]],[1512120344331,["gengmei_pxf@gengmei123.local",[[-1,35054,"|\n"],[1,35056,"```"]],[35054,35056],[35057,35057]]],[1512120349572,["gengmei_pxf@gengmei123.local",[[-1,35162,"| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n | \n"],[1,35225,"```"]],[35162,35225],[35165,35165]]],[1512120354009,["gengmei_pxf@gengmei123.local",[[-1,35712,"|\n"],[1,35714,"```"]],[35712,35714],[35715,35715]]],[1512120366818,["gengmei_pxf@gengmei123.local",[[1,35721,"sd"]],[35721,35721],[35723,35723]]],[1512120369170,["gengmei_pxf@gengmei123.local",[[-1,35721,"sd"]],[35723,35723],[35721,35721]]],[1512120376637,["gengmei_pxf@gengmei123.local",[[1,35798,"'"]],[35798,35798],[35799,35799]]],[1512120377964,["gengmei_pxf@gengmei123.local",[[-1,35798,"'"]],[35799,35799],[35798,35798]]],[1512120378394,["gengmei_pxf@gengmei123.local",[[1,35798,"\n"]],[35798,35798],[35799,35799]]],[1512120489767,["gengmei_pxf@gengmei123.local",[[-1,33108,"[](https://frodoking.github.io/2015/02/01/android-mvc-mvp-analysis/#MVP如何解决MVC的问题？ \"MVP如何解决MVC的问题？\")"]],[33108,33208],[33108,33108]]],[1512120551780,["gengmei_pxf@gengmei123.local",[[-1,34080,"[](https://frodoking.github.io/2015/02/01/android-mvc-mvp-analysis/#使用方法 \"使用方法\")"]],[34080,34160],[34080,34080]]],[1512120558828,["gengmei_pxf@gengmei123.local",[[-1,35540,"[](https://frodoking.github.io/2015/02/01/android-mvc-mvp-analysis/#结束语 \"结束语\")\n"]],[35540,35619],[35540,35540]]],[1512120607597,["gengmei_pxf@gengmei123.local",[[1,25650,"##### "]],[25650,25650],[25656,25656]]],[1512120611780,["gengmei_pxf@gengmei123.local",[[1,25697,"##### "]],[25697,25697],[25703,25703]]],[1512120613092,["gengmei_pxf@gengmei123.local",[[1,25719,"##### "]],[25719,25719],[25725,25725]]],[1512120614300,["gengmei_pxf@gengmei123.local",[[1,25738,"##### "]],[25738,25738],[25744,25744]]],[1512120615492,["gengmei_pxf@gengmei123.local",[[1,25757,"##### "]],[25757,25757],[25763,25763]]],[1512120617196,["gengmei_pxf@gengmei123.local",[[1,25778,"##### "]],[25778,25778],[25784,25784]]],[1512120621132,["gengmei_pxf@gengmei123.local",[[1,25834,"##### "]],[25834,25834],[25840,25840]]],[1512120641577,["gengmei_pxf@gengmei123.local",[[-1,32393,"####"]],[32397,32397],[32393,32393]]],[1512120661408,["gengmei_pxf@gengmei123.local",[[1,32394,"**"]],[32394,32394],[32396,32396]]],[1512120663602,["gengmei_pxf@gengmei123.local",[[1,32422,"**"]],[32422,32422],[32424,32424]]],[1512120696074,["gengmei_pxf@gengmei123.local",[[1,32512,"##### "]],[32512,32512],[32518,32518]]],[1512120725752,["gengmei_pxf@gengmei123.local",[[1,26350,"##### "]],[26350,26350],[26356,26356]]],[1512120742509,["gengmei_pxf@gengmei123.local",[[1,32566,"\n"]],[32565,32565],[32566,32566]]],[1512120749686,["gengmei_pxf@gengmei123.local",[[-1,32566,"\n"]],[32566,32566],[32565,32565]]],[1512120768768,["gengmei_pxf@gengmei123.local",[[-1,33158,"### "],[1,33162,"**"]],[33158,33162],[33160,33160]]],[1512120770812,["gengmei_pxf@gengmei123.local",[[1,33173,"**"]],[33173,33173],[33175,33175]]],[1512120775695,["gengmei_pxf@gengmei123.local",[[-1,34130,"### "],[1,34134,"**"]],[34130,34134],[34132,34132]]],[1512120778547,["gengmei_pxf@gengmei123.local",[[1,34136,"**"]],[34136,34136],[34138,34138]]],[1512120785740,["gengmei_pxf@gengmei123.local",[[-1,35590,"### "]],[35594,35594],[35590,35590]]],[1512120786840,["gengmei_pxf@gengmei123.local",[[1,35590,"**"]],[35590,35590],[35592,35592]]],[1512120788610,["gengmei_pxf@gengmei123.local",[[1,35595,"**"]],[35595,35595],[35597,35597]]],[1512120797732,["gengmei_pxf@gengmei123.local",[[-1,32518,"##### "]],[32518,32524],[32518,32518]]],[1512120801095,["gengmei_pxf@gengmei123.local",[[1,32518,"##### "]],[32518,32518],[32518,32524]]],[1512120824018,["gengmei_pxf@gengmei123.local",[[1,35976,"\n"]],[35975,35975],[35976,35976]]],[1512120824186,["gengmei_pxf@gengmei123.local",[[1,35977,"\n"]],[35976,35976],[35977,35977]]],[1512120826674,["gengmei_pxf@gengmei123.local",[[1,36040,"\n"]],[36038,36038],[36039,36039]]],[1512120832402,["gengmei_pxf@gengmei123.local",[[1,35978,"##### **"]],[35978,35978],[35986,35986]]],[1512120834580,["gengmei_pxf@gengmei123.local",[[1,36045,"**"]],[36045,36045],[36047,36047]]],[1512120839122,["gengmei_pxf@gengmei123.local",[[1,36047,"\n"]],[36047,36047],[36048,36048]]],[1512120844057,["gengmei_pxf@gengmei123.local",[[1,36047,"?"]],[36047,36047],[36048,36048]]],[1512120846866,["gengmei_pxf@gengmei123.local",[[-1,36049,"?"]],[36050,36050],[36049,36049]]],[1512120847290,["gengmei_pxf@gengmei123.local",[[-1,36051,"\n"]],[36049,36049],[36048,36048]]],[1512120849685,["gengmei_pxf@gengmei123.local",[[1,36051,"\n"]],[36048,36048],[36049,36049]]],[1512120852081,["gengmei_pxf@gengmei123.local",[[-1,36051,"\n"]],[36051,36051],[36050,36050]]],[1512120854289,["gengmei_pxf@gengmei123.local",[[-1,36050,"\n"]],[36050,36050],[36049,36049]]],[1512120855564,["gengmei_pxf@gengmei123.local",[[1,36050,"\n"]],[36049,36049],[36050,36050]]],[1512120856110,["gengmei_pxf@gengmei123.local",[[1,36051,"\n"]],[36050,36050],[36051,36051]]],[1512120856778,["gengmei_pxf@gengmei123.local",[[1,36049,"?"]],[36049,36049],[36050,36050]]],[1512120865848,["gengmei_pxf@gengmei123.local",[[-1,36049,"?"],[1,36050," "]],[36049,36050],[36050,36050]]],[1512120880500,["gengmei_pxf@gengmei123.local",[[1,36050,"                                                          "]],[36049,36049],[36107,36107]]],[1512120881704,["gengmei_pxf@gengmei123.local",[[1,36107,"\n"]],[36107,36107],[36108,36108]]],[1512120885640,["gengmei_pxf@gengmei123.local",[[-1,36107,"\n"]],[36108,36108],[36107,36107]]],[1512120886218,["gengmei_pxf@gengmei123.local",[[-1,36050,"                                                          "]],[36107,36107],[36049,36049]]],[1512120888095,["gengmei_pxf@gengmei123.local",[[1,36049,"?"],[-1,36049," ?"]],[36050,36050],[36049,36049]]],[1512120891584,["gengmei_pxf@gengmei123.local",[[-1,36051,"\n"]],[36051,36051],[36050,36050]]],[1512120895374,["gengmei_pxf@gengmei123.local",[[1,36051,"\n"]],[36050,36050],[36051,36051]]],[1512121079002,[null,[[-1,36049,"?"],[1,36050,"\n"]],[36049,36049],[36051,36051]]],[1512121079002,[null,[[1,36049,"?"],[-1,36049,"\n"]],[36051,36051],[36049,36049]]],[1512121061057,["gengmei_pxf@gengmei123.local",[[-1,1,"##"]],[3,3],[1,1]]],[1512121065020,["gengmei_pxf@gengmei123.local",[[-1,9,"###"]],[12,12],[9,9]]],[1512121066931,["gengmei_pxf@gengmei123.local",[[1,9,"###"]],[9,9],[12,12]]],[1512121067977,["gengmei_pxf@gengmei123.local",[[-1,10,"##"]],[12,12],[10,10]]],[1512121077241,["gengmei_pxf@gengmei123.local",[[-1,293,"##"]],[295,295],[293,293]]],[1512121139006,[null,[[-1,36043,"?"],[1,36044,"\n"]],[36043,36043],[36045,36045]]],[1512121139006,[null,[[1,36043,"?"],[-1,36043,"\n"]],[36045,36045],[36043,36043]]],[1512121083809,["gengmei_pxf@gengmei123.local",[[-1,2119,"##"]],[2121,2121],[2119,2119]]],[1512121088400,["gengmei_pxf@gengmei123.local",[[-1,3989,"##"]],[3991,3991],[3989,3989]]],[1512121092055,["gengmei_pxf@gengmei123.local",[[-1,9973,"##"]],[9975,9975],[9973,9973]]],[1512121096857,["gengmei_pxf@gengmei123.local",[[-1,10090,"##"]],[10092,10092],[10090,10090]]],[1512121101800,["gengmei_pxf@gengmei123.local",[[-1,10532,"##"]],[10532,10534],[10532,10532]]],[1512121105760,["gengmei_pxf@gengmei123.local",[[-1,10991,"##"]],[10991,10993],[10991,10991]]],[1512121109257,["gengmei_pxf@gengmei123.local",[[-1,11390,"##"]],[11392,11392],[11390,11390]]],[1512121113360,["gengmei_pxf@gengmei123.local",[[-1,12280,"##"]],[12282,12282],[12280,12280]]],[1512121117856,["gengmei_pxf@gengmei123.local",[[-1,12291,"###"]],[12294,12294],[12291,12291]]],[1512121119568,["gengmei_pxf@gengmei123.local",[[1,12291,"###"]],[12291,12291],[12294,12294]]],[1512121120432,["gengmei_pxf@gengmei123.local",[[-1,12292,"##"]],[12294,12294],[12292,12292]]],[1512121123520,["gengmei_pxf@gengmei123.local",[[-1,13247,"##"]],[13249,13249],[13247,13247]]],[1512121126712,["gengmei_pxf@gengmei123.local",[[-1,13686,"##"]],[13688,13688],[13686,13686]]],[1512121129655,["gengmei_pxf@gengmei123.local",[[-1,14580,"##"]],[14582,14582],[14580,14580]]],[1512121133255,["gengmei_pxf@gengmei123.local",[[-1,16953,"##"]],[16955,16955],[16953,16953]]],[1512121136271,["gengmei_pxf@gengmei123.local",[[-1,18223,"##"]],[18225,18225],[18223,18223]]],[1512121199005,[null,[[-1,36015,"?"],[1,36016,"\n"]],[36015,36015],[36017,36017]]],[1512121199005,[null,[[1,36015,"?"],[-1,36015,"\n"]],[36017,36017],[36015,36015]]],[1512121139848,["gengmei_pxf@gengmei123.local",[[-1,18978,"##"]],[18980,18980],[18978,18978]]],[1512121143415,["gengmei_pxf@gengmei123.local",[[-1,19282,"###"]],[19285,19285],[19282,19282]]],[1512121145474,["gengmei_pxf@gengmei123.local",[[1,19282,"#"]],[19282,19282],[19283,19283]]],[1512121148990,["gengmei_pxf@gengmei123.local",[[-1,23707,"##"]],[23709,23709],[23707,23707]]],[1512121152144,["gengmei_pxf@gengmei123.local",[[-1,24181,"##"]],[24183,24183],[24181,24181]]],[1512121155581,["gengmei_pxf@gengmei123.local",[[-1,24968,"##"]],[24970,24970],[24968,24968]]],[1512121164238,["gengmei_pxf@gengmei123.local",[[-1,25246,"##"]],[25248,25248],[25246,25246]]],[1512121167174,["gengmei_pxf@gengmei123.local",[[-1,25253,"##"]],[25255,25255],[25253,25253]]],[1512121172630,["gengmei_pxf@gengmei123.local",[[-1,25554,"##"]],[25556,25556],[25554,25554]]],[1512121186222,["gengmei_pxf@gengmei123.local",[[-1,25590,"##"]],[25592,25592],[25590,25590]]],[1512121188525,["gengmei_pxf@gengmei123.local",[[-1,25601,"##"]],[25603,25603],[25601,25601]]],[1512121191317,["gengmei_pxf@gengmei123.local",[[-1,25646,"##"]],[25648,25648],[25646,25646]]],[1512121195165,["gengmei_pxf@gengmei123.local",[[-1,25665,"###"]],[25668,25668],[25665,25665]]],[1512121196784,["gengmei_pxf@gengmei123.local",[[1,25665,"#"]],[25665,25665],[25666,25666]]],[1512121198717,["gengmei_pxf@gengmei123.local",[[-1,25683,"##"]],[25685,25685],[25683,25683]]],[1512121242851,[null,[[-1,35989,"?"],[1,35990,"\n"]],[35989,35989],[35991,35991]]],[1512121242851,[null,[[1,35989,"?"],[-1,35989,"\n"]],[35991,35991],[35989,35989]]],[1512121200699,["gengmei_pxf@gengmei123.local",[[-1,25700,"##"]],[25702,25702],[25700,25700]]],[1512121203453,["gengmei_pxf@gengmei123.local",[[-1,25719,"##"]],[25721,25721],[25719,25719]]],[1512121212356,["gengmei_pxf@gengmei123.local",[[-1,25745,"##"]],[25747,25747],[25745,25745]]],[1512121217569,["gengmei_pxf@gengmei123.local",[[-1,25771,"##"]],[25773,25773],[25771,25771]]],[1512121222665,["gengmei_pxf@gengmei123.local",[[-1,26285,"##"]],[26287,26287],[26285,26285]]],[1512121227908,["gengmei_pxf@gengmei123.local",[[-1,32451,"##"]],[32453,32453],[32451,32451]]],[1512121232230,["gengmei_pxf@gengmei123.local",[[-1,35909,"##"]],[35911,35911],[35909,35909]]],[1512122622849,[null,[[-1,35975,"?"],[1,35976,"\n"]],[35975,35975],[35977,35977]]],[1512122622850,[null,[[1,35975,"?"],[-1,35975,"\n"]],[35977,35977],[35975,35975]]],[1512122586271,["gengmei_pxf@gengmei123.local",[[1,32737,"**"]],[32737,32737],[32739,32739]]],[1512122589351,["gengmei_pxf@gengmei123.local",[[1,32755,"**"]],[32755,32755],[32757,32757]]],[1512122598739,["gengmei_pxf@gengmei123.local",[[-1,32755,"**"]],[32757,32757],[32755,32755]]],[1512122603570,["gengmei_pxf@gengmei123.local",[[1,32880,"**"]],[32880,32880],[32882,32882]]],[1512128323340,[null,[[-1,35979,"?"],[1,35980,"\n"]],[35979,35979],[35981,35981]]],[1512128323340,[null,[[1,35979,"?"],[-1,35979,"\n"]],[35981,35981],[35979,35979]]],[1512128301274,["gengmei_pxf@gengmei123.local",[[1,35980,"http://upload-images.jianshu.io/upload_images/1824194-a947dcc5b22f69fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"]],[35980,35980],[36105,36105]]],[1512128302825,["gengmei_pxf@gengmei123.local",[[-1,35980,"http://upload-images.jianshu.io/upload_images/1824194-a947dcc5b22f69fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"]],[36105,36105],[35980,35980]]],[1512128303808,["gengmei_pxf@gengmei123.local",[[1,35980,"！"]],[35980,35980],[35981,35981]]],[1512128304584,["gengmei_pxf@gengmei123.local",[[-1,35980,"！"]],[35981,35981],[35980,35980]]],[1512128307836,["gengmei_pxf@gengmei123.local",[[1,35980,"![]()"]],[35980,35980],[35985,35985]]],[1512128308745,["gengmei_pxf@gengmei123.local",[[1,35984,"http://upload-images.jianshu.io/upload_images/1824194-a947dcc5b22f69fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"]],[35985,35985],[36109,36109]]],[1512128310783,["gengmei_pxf@gengmei123.local",[[1,36112,"\n"]],[36110,36110],[36111,36111]]],[1512128311527,["gengmei_pxf@gengmei123.local",[[1,36113,"\n"]],[36111,36111],[36112,36112]]],[1512128322691,["gengmei_pxf@gengmei123.local",[[1,36112,"上面一共出现了几种类，ActivityThread，Handler，MessageQueue，Looper，msg（Message）,对这些类作简要介绍：\n\nActivityThread：程序的启动入口，为什么要介绍这个类，是因为该类就是我们说的主线程，它对Looper进行操作的。\n\nHandler：字面意思是操控者，该类有比较重要的地方，就是通过handler来发送消息（sendMessage）到MessageQueue和 操作控件的更新（handleMessage）。handler下面持有这MessageQueue和Looper的对象。\n\nMessageQueue：字面意思是消息队列，就是封装Message类。对Message进行插入和取出操作。\n\nMessage：这个类是封装消息体并被发送到MessageQueue中的，给类是通过链表实现的，其好处方便MessageQueue的插入和取出操作。还有一些字段是（int what，Object obj，int arg1，int arg2）。what是用户定义的消息和代码，以便接收者（handler）知道这个是关于什么的。obj是用来传输任意对象的，arg1和arg2是用来传递一些简单的整数类型的。\n\n下面，我们按照启动顺序来进行源码分析：\n\n作者：sun_month\n链接：http://www.jianshu.com/p/b03d46809c4d\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[36112,36112],[36761,36761]]],[1512128383351,[null,[[-1,35979,"?"],[1,35980,"\n"]],[35979,35979],[35981,35981]]],[1512128383351,[null,[[1,35979,"?"],[-1,35979,"\n"]],[35981,35981],[35979,35979]]],[1512128327863,["gengmei_pxf@gengmei123.local",[[-1,36667,"作者：sun_month\n链接：http://www.jianshu.com/p/b03d46809c4d\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[36667,36761],[36667,36667]]],[1512128339615,["gengmei_pxf@gengmei123.local",[[1,36667,"![]()"]],[36667,36667],[36672,36672]]],[1512128340440,["gengmei_pxf@gengmei123.local",[[1,36671,"http://upload-images.jianshu.io/upload_images/1824194-298ebb16ce4a3b70.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"]],[36672,36672],[36796,36796]]],[1512128341613,["gengmei_pxf@gengmei123.local",[[1,36799,"\n"]],[36797,36797],[36798,36798]]],[1512128342109,["gengmei_pxf@gengmei123.local",[[1,36800,"\n"]],[36798,36798],[36799,36799]]],[1512128354988,["gengmei_pxf@gengmei123.local",[[1,36799,"![]()"]],[36799,36799],[36804,36804]]],[1512128355832,["gengmei_pxf@gengmei123.local",[[1,36803,"https://github.com/bihe0832/Android-System-Related-Charts/blob/master/framework/handler-sequence.jpg"]],[36804,36804],[36903,36903]]],[1512128404076,[null,[[-1,35979,"?"],[1,35980,"\n"]],[35979,35979],[35981,35981]]],[1512128404076,[null,[[1,35979,"?"],[-1,35979,"\n"]],[35981,35981],[35979,35979]]],[1512128399775,["gengmei_pxf@gengmei123.local",[[1,36811,"raw."],[1,36817,"usercontent"],[-1,36860,"/blob"]],[36803,36903],[36913,36913]]],[1512129288492,[null,[[-1,35979,"?"],[1,35980,"\n"]],[35979,35979],[35981,35981]]],[1512129288492,[null,[[1,35979,"?"],[-1,35979,"\n"]],[35981,35981],[35979,35979]]],[1512129245599,["gengmei_pxf@gengmei123.local",[[1,36916,"### **"]],[36916,36916],[36922,36922]]],[1512129249178,["gengmei_pxf@gengmei123.local",[[1,36946,"**"]],[36946,36946],[36948,36948]]],[1512129250829,["gengmei_pxf@gengmei123.local",[[1,36951,"\n"]],[36949,36949],[36950,36950]]],[1512129252308,["gengmei_pxf@gengmei123.local",[[1,36952,"\n"]],[36950,36950],[36951,36951]]],[1512129278961,["gengmei_pxf@gengmei123.local",[[1,36951,"**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n作者：gexinzhao\n链接：http://www.jianshu.com/p/251b1bf72cd8\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[36951,36951],[41452,41452]]],[1512129348488,[null,[[-1,35979,"?"],[1,35980,"\n"]],[35979,35979],[35981,35981]]],[1512129348488,[null,[[1,35979,"?"],[-1,35979,"\n"]],[35981,35981],[35979,35979]]],[1512129315146,["gengmei_pxf@gengmei123.local",[[-1,41358,"作者：gexinzhao\n链接：http://www.jianshu.com/p/251b1bf72cd8\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n"]],[41358,41453],[41358,41358]]],[1512129315482,["gengmei_pxf@gengmei123.local",[[-1,41358,"\n"]],[41358,41358],[41357,41357]]],[1512129324694,["gengmei_pxf@gengmei123.local",[[1,41358,"### "]],[41358,41358],[41362,41362]]],[1512129326259,["gengmei_pxf@gengmei123.local",[[-1,41361," "]],[41362,41362],[41361,41361]]],[1512129328879,["gengmei_pxf@gengmei123.local",[[1,41361,"# **"]],[41361,41361],[41365,41365]]],[1512129331884,["gengmei_pxf@gengmei123.local",[[1,41389,"**"]],[41389,41389],[41391,41391]]]]],["cf8648cb-684d-435f-97bd-66b725a7fa66",1512196022569,"# JAVA\n\n## 一. 类的加载过程，Person person = new Person();为例进行说明。\n\n1).因为new用到了Person.class，所以会先找到Person.class文件，并加载到内存中;\n\n2).执行该类中的static代码块，如果有的话，给Person.class类进行初始化;\n\n3).在堆内存中开辟空间分配内存地址;\n\n4).在堆内存中建立对象的特有属性，并进行默认初始化;\n\n5).对属性进行显示初始化;\n\n6).对对象进行构造代码块初始化;\n\n7).对对象进行与之对应的构造函数进行初始化;\n\n8).将内存地址付给栈内存中的p变量\n\n## 二. JVM相关知识，GC机制。\n\n**JVM基本构成**\n\n![](http://upload-images.jianshu.io/upload_images/4642697-bbcb5924cdaf30f8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/473)\n\n从上图可知，JVM主要包括四个部分：\n\n    1.类加载器（ClassLoader）:在JVM启动时或者在类运行时将需要的class加载到JVM中。（下图表示了从java源文件到JVM的整个过程，可配合理解。 \n\n![](http://upload-images.jianshu.io/upload_images/4642697-1cf5f815751beeab.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400)\n\n    2.执行引擎：负责执行class文件中包含的字节码指令；\n\n    3.内存区（也叫运行时数据区）：是在JVM运行的时候操作所分配的内存区。运行时内存区主要可以划分为5个区域，如图：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-160b9ba3bfeaf8f5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/376)\n\n*   方法区(Method Area)：用于存储类结构信息的地方，包括常量池、静态变量、构造函数等。虽然JVM规范把方法区描述为堆的一个逻辑部分， 但它却有个别名non-heap（非堆），所以大家不要搞混淆了。方法区还包含一个运行时常量池。\n\n*   java堆(Heap)：存储java实例或者对象的地方。这块是GC的主要区域。从存储的内容我们可以很容易知道，方法区和堆是被所有java线程共享的。\n\n*   java栈(Stack)：java栈总是和线程关联在一起，每当创建一个线程时，JVM就会为这个线程创建一个对应的java栈。在这个java栈中又会包含多个栈帧，每运行一个方法就创建一个栈帧，用于存储局部变量表、操作栈、方法返回值等。每一个方法从调用直至执行完成的过程，就对应一个栈帧在java栈中入栈到出栈的过程。所以java栈是现成私有的。\n\n*   程序计数器(PC Register)：用于保存当前线程执行的内存地址。由于JVM程序是多线程执行的（线程轮流切换），所以为了保证线程切换回来后，还能恢复到原先状态，就需要一个独立的计数器，记录之前中断的地方，可见程序计数器也是线程私有的。\n\n*   本地方法栈(Native Method Stack)：和java栈的作用差不多，只不过是为JVM使用到的native方法服务的。\n\n        4.本地方法接口：主要是调用C或C++实现的本地方法及返回结果。\n\n**GC机制**\n\n    垃圾收集器一般必须完成两件事：检测出垃圾；回收垃圾。怎么检测出垃圾？一般有以下几种方法：\n\n**_引用计数法：_**\n\n    给一个对象添加引用计数器，每当有个地方引用它，计数器就加1；引用失效就减1。好了，问题来了，如果我有两个对象A和B，互相引用，除此之外，没有其他任何对象引用它们，实际上这两个对象已经无法访问，即是我们说的垃圾对象。但是互相引用，计数不为0，导致无法回收，所以还有另一种方法：\n\n**_可达性分析算法：_**\n\n    以根集对象为起始点进行搜索，如果有对象不可达的话，即是垃圾对象。这里的根集一般包括java栈中引用的对象、方法区常良池中引用的对象、本地方法中引用的对象等。\n\n    总之，JVM在做垃圾回收的时候，会检查堆中的所有对象是否会被这些根集对象引用，不能够被引用的对象就会被垃圾收集器回收。一般回收算法也有如下几种：\n\n1).标记-清除（Mark-sweep）\n\n2).复制（Copying\n\n3).标记-整理（Mark-Compact）\n\n4).分代收集算法\n\n具体的解释可以参考本篇文章[还不点我?](https://link.jianshu.com?t=http://blog.csdn.net/tonytfjing/article/details/44278233)\n\n## 三. 类的加载器，双亲机制，Android的类加载器。\n\n**类的加载器**\n\n    大家都知道，当我们写好一个Java程序之后，不是管是CS还是BS应用，都是由若干个.class文件组织而成的一个完整的Java应用程序，当程序在运行时，即会调用该程序的一个入口函数来调用系统的相关功能，而这些功能都被封装在不同的class文件当中，所以经常要从这个class文件中要调用另外一个class文件中的方法，如果另外一个文件不存在的，则会引发系统异常。而程序在启动的时候，并不会一次性加载程序所要用的所有class文件，而是根据程序的需要，通过Java的类加载机制（ClassLoader）来动态加载某个class文件到内存当中的，从而只有class文件被载入到了内存之后，才能被其它class所引用。所以ClassLoader就是用来动态加载class文件到内存当中用的。\n\n**双亲机制**\n\n**_1、原理介绍_**\n\n    ClassLoader使用的是双亲委托模型来搜索类的，每个ClassLoader实例都有一个父类加载器的引用（不是继承的关系，是一个包含的关系），虚拟机内置的类加载器（Bootstrap ClassLoader）本身没有父类加载器，但可以用作其它ClassLoader实例的的父类加载器。当一个ClassLoader实例需要加载某个类时，它会试图亲自搜索某个类之前，先把这个任务委托给它的父类加载器，这个过程是由上至下依次检查的，首先由最顶层的类加载器Bootstrap ClassLoader试图加载，如果没加载到，则把任务转交给Extension ClassLoader试图加载，如果也没加载到，则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常。否则将这个找到的类生成一个类的定义，并将它加载到内存当中，最后返回这个类在内存中的Class实例对象。\n\n**_2、为什么要使用双亲委托这种模型呢？_**\n\n    因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。\n\n**_3、但是JVM在搜索类的时候，又是如何判定两个class是相同的呢？_**\n\n    JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。比如网络上的一个Java类org.classloader.simple.NetClassLoaderSimple，javac编译之后生成字节码文件NetClassLoaderSimple.class，ClassLoaderA和ClassLoaderB这两个类加载器并读取了NetClassLoaderSimple.class文件，并分别定义出了java.lang.Class实例来表示这个类，对于JVM来说，它们是两个不同的实例对象，但它们确实是同一份字节码文件，如果试图将这个Class实例生成具体的对象进行转换时，就会抛运行时异常java.lang.ClassCaseException，提示这是两个不同的类型。\n\n**Android类加载器**\n\n    对于Android而言，最终的apk文件包含的是dex类型的文件，dex文件是将class文件重新打包，打包的规则又不是简单地压缩，而是完全对class文件内部的各种函数表，变量表进行优化，产生一个新的文件，即dex文件。因此加载这种特殊的Class文件就需要特殊的类加载器DexClassLoader。\n\n## 四. 集合框架，list，map，set都有哪些具体的实现类，区别都是什么?\n\n![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：了对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**===****》****TreeSet****两种排序方式：**两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n## 五. concurrentHashmap原理，原子类。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大.\n\n## 六. volatile原理\n\n    在《Java并发编程：核心理论》一文中，我们已经提到过可见性、有序性及原子性问题，通常情况下我们可以通过Synchronized关键字来解决这些个问题，不过如果对Synchronized原理有了解的话，应该知道Synchronized是一个比较重量级的操作，对系统的性能有比较大的影响，所以，如果有其他解决方案，我们通常都避免使用Synchronized来解决问题。而volatile关键字就是Java中提供的另一种解决可见性和有序性问题的方案。对于原子性，需要强调一点，也是大家容易误解的一点：对volatile变量的单次读/写操作可以保证原子性的，如long和double类型变量，但是并不能保证i++这种操作的原子性，因为本质上i++是读、写两次操作。\n\n参考文章[插好眼了等传送](https://link.jianshu.com?t=https://www.cnblogs.com/paddix/p/5428507.html)\n\n## 七. 多线程的使用场景\n\n使用多线程就一定效率高吗？ 有时候使用多线程并不是为了提高效率，而是使得CPU能够同时处理多个事件。\n\n1).为了不阻塞主线程,启动其他线程来做好事的事情,比如APP中耗时操作都不在UI中做.\n\n2).实现更快的应用程序,即主线程专门监听用户请求,子线程用来处理用户请求,以获得大的吞吐量.感觉这种情况下，多线程的效率未必高。 这种情况下的多线程是为了不必等待， 可以并行处理多条数据。\n\n比如JavaWeb的就是主线程专门监听用户的HTTP请求，然后启动子线程去处理用户的HTTP请求。\n\n3).某种虽然优先级很低的服务，但是却要不定时去做。\n\n比如Jvm的垃圾回收。\n\n4.)某种任务，虽然耗时，但是不耗CPU的操作时，开启多个线程，效率会有显著提高。\n\n比如读取文件，然后处理。 磁盘IO是个很耗费时间，但是不耗CPU计算的工作。 所以可以一个线程读取数据，一个线程处理数据。肯定比一个线程读取数据，然后处理效率高。 因为两个线程的时候充分利用了CPU等待磁盘IO的空闲时间。\n\n## 八. JAVA常量池\n\n**_Interger中的128(-128~127)_**\n\na.当数值范围为-128~127时：如果两个new出来Integer对象，即使值相同，通过“==”比较结果为false，但两个对象直接赋值，则通过“==”比较结果为“true，这一点与String非常相似。\n\nb.当数值不在-128~127时，无论通过哪种方式，即使两个对象的值相等，通过“==”比较，其结果为false；\n\nc.当一个Integer对象直接与一个int基本数据类型通过“==”比较，其结果与第一点相同；\n\nd.Integer对象的hash值为数值本身；\n\n**_为什么是-128-127?_**\n\n    在Integer类中有一个静态内部类IntegerCache，在IntegerCache类中有一个Integer数组，用以缓存当数值范围为-128~127时的Integer对象。\n\n## 九. 简单介绍一下java中的泛型，泛型擦除以及相关的概念。\n\n    泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。 Java语言引入泛型的好处是安全简单。\n\n    在Java SE 1.5之前，没有泛型的情况的下，通过对类型Object的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是一个安全隐患。\n\n    泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，提高代码的重用率。\n\n1、泛型的类型参数只能是类类型（包括自定义类），不能是简单类型。\n\n2、同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的。\n\n3、泛型的类型参数可以有多个。\n\n4、泛型的参数类型可以使用extends语句，例如<T extends superclass>。习惯上称为“有界类型”。\n\n5、泛型的参数类型还可以是通配符类型。例如Class<?> classType = Class.forName(\"java.lang.String\");\n\n**泛型擦除以及相关的概念**\n\n    Java中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会在编译器在编译的时候去掉。这个过程就称为类型擦除。\n\n**类型擦除引起的问题及解决方法**\n\n1、先检查，在编译，以及检查编译的对象和引用传递的问题\n\n2、自动类型转换\n\n3、类型擦除与多态的冲突和解决方法\n\n4、泛型类型变量不能是基本数据类型\n\n5、运行时类型查询\n\n6、异常中使用泛型的问题\n\n7、数组（这个不属于类型擦除引起的问题）\n\n9、类型擦除后的冲突\n\n10、泛型在静态方法和静态类中的问题\n\n# Android\n\n## 一. Handler机制\n\n    Android 的消息机制也就是 handler 机制,创建 handler 的时候会创建一个 looper ( 通过 looper.prepare() 来创建 ),looper 一般为主线程 looper.\n\n    handler 通过 send 发送消息 (sendMessage) ,当然 post 一系列方法最终也是通过 send 来实现的,在 send 方法中handler 会通过 enqueueMessage() 方法中的 enqueueMessage(msg,millis )向消息队列 MessageQueue 插入一条消息,同时会把本身的 handler 通过 msg.target = this 传入.\n\n    Looper 是一个死循环,不断的读取MessageQueue中的消息,loop 方法会调用 MessageQueue 的 next 方法来获取新的消息,next 操作是一个阻塞操作,当没有消息的时候 next 方法会一直阻塞,进而导致 loop 一直阻塞,当有消息的时候,Looper 就会处理消息 Looper 收到消息之后就开始处理消息: msg.target.dispatchMessage(msg),当然这里的 msg.target 就是上面传过来的发送这条消息的 handler 对象,这样 handler 发送的消息最终又交给他的dispatchMessage方法来处理了,这里不同的是,handler 的 dispatchMessage 方法是在创建 Handler时所使用的 Looper 中执行的,这样就成功的将代码逻辑切换到了主线程了.\n\n    Handler 处理消息的过程是:首先,检查Message 的 callback 是否为 null,不为 null 就通过 handleCallBack 来处理消息,Message 的 callback 是一个 Runnable 对象,实际上是 handler 的 post 方法所传递的 Runnable 参数.其次是检查 mCallback 是 否为 null,不为 null 就调用 mCallback 的handleMessage 方法来处理消息.\n\n## 二. View的绘制流程\n\n    View的绘制流程：OnMeasure()——>OnLayout()——>OnDraw()\n\n各步骤的主要工作：\n\n**_OnMeasure()：_**\n\n    测量视图大小。从顶层父View到子View递归调用measure方法，measure方法又回调OnMeasure。\n\n**_OnLayout()：_**\n\n    确定View位置，进行页面布局。从顶层父View向子View的递归调用view.layout方法的过程，即父View根据上一步measure子View所得到的布局大小和布局参数，将子View放在合适的位置上。\n\n**_OnDraw()：_**\n\n    绘制视图:ViewRoot创建一个Canvas对象，然后调用OnDraw()。六个步骤：①、绘制视图的背景；②、保存画布的图层（Layer）；③、绘制View的内容；④、绘制View子视图，如果没有就不用；⑤、还原图层（Layer）；⑥、绘制滚动条。\n\n## 三. 事件传递机制\n\n1).Android事件分发机制的本质是要解决：点击事件由哪个对象发出，经过哪些对象，最终达到哪个对象并最终得到处理。这里的对象是指Activity、ViewGroup、View.\n\n2).Android中事件分发顺序：Activity（Window） -> ViewGroup -> View.\n\n3).事件分发过程由dispatchTouchEvent() 、onInterceptTouchEvent()和onTouchEvent()三个方法协助完成\n\n**设置Button按钮来响应点击事件事件传递情况：（如下图）**\n\n布局如下:\n\n![](http://upload-images.jianshu.io/upload_images/4642697-01f23a099103eb82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/210)\n\n最外层：Activiy A，包含两个子View：ViewGroup B、View C\n\n中间层：ViewGroup B，包含一个子View：View C\n\n最内层：View C\n\n假设用户首先触摸到屏幕上View C上的某个点（如图中黄色区域），那么Action_DOWN事件就在该点产生，然后用户移动手指并最后离开屏幕。\n\n**按钮点击事件:**\n\nDOWN事件被传递给C的onTouchEvent方法，该方法返回true，表示处理这个事件;\n\n因为C正在处理这个事件，那么DOWN事件将不再往上传递给B和A的onTouchEvent()；\n\n该事件列的其他事件（Move、Up）也将传递给C的onTouchEvent();\n\n![](http://upload-images.jianshu.io/upload_images/4642697-ca12c00c79780b57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n(记住这个图的传递顺序,面试的时候能够画出来,就很详细了)\n\n## 四. Binder机制\n\n**1.了解Binder**\n\n    在Android系统中，每一个应用程序都运行在独立的进程中，这也保证了当其中一个程序出现异常而不会影响另一个应用程序的正常运转。在许多情况下，我们activity都会与各种系统的service打交道，很显然，我们写的程序中activity与系统service肯定不是同一个进程，但是它们之间是怎样实现通信的呢？所以Binder是android中一种实现进程间通信（IPC）的方式之一。\n\n    1).首先，Binder分为Client和Server两个进程。\n\n    注意，Client和Server是相对的。谁发消息，谁就是Client，谁接收消息，谁就是Server。\n\n    举个例子，两个进程A和B之间使用Binder通信，进程A发消息给进程B，那么这时候A是Binder Client，B是Binder Server；进程B发消息给进程A，那么这时候B是Binder Client，A是Binder Server——其实这么说虽然简单了，但还是不太严谨，我们先这么理解着。\n\n    2).其次，我们看下面这个图（摘自田维术的博客），基本说明白了Binder的组成解构：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-9fed6a1413057558.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/673)\n\n    图中的IPC就是进程间通信的意思。\n\n    图中的ServiceManager，负责把Binder Server注册到一个容器中。\n\n    有人把ServiceManager比喻成电话局，存储着每个住宅的座机电话，还是很恰当的。张三给李四打电话，拨打电话号码，会先转接到电话局，电话局的接线员查到这个电话号码的地址，因为李四的电话号码之前在电话局注册过，所以就能拨通；没注册，就会提示该号码不存在。\n\n    对照着Android Binder机制，对着上面这图，张三就是Binder Client，李四就是Binder Server，电话局就是ServiceManager，电话局的接线员在这个过程中做了很多事情，对应着图中的Binder驱动.\n\n    3).接下来我们看Binder通信的过程，还是摘自田维术博客的一张图：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-6a03bbb4f16108b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/675)\n\n注：图中的SM也就是ServiceManager。\n\n    我们看到，Client想要直接调用Server的add方法，是不可以的，因为它们在不同的进程中，这时候就需要Binder来帮忙了。\n\n    首先是Server在SM这个容器中注册。\n\n    其次，Client想要调用Server的add方法，就需要先获取Server对象， 但是SM不会把真正的Server对象返回给Client，而是把Server的一个代理对象返回给Client，也就是Proxy。\n\n    然后，Client调用Proxy的add方法，SM会帮他去调用Server的add方法，并把结果返回给Client。\n\n    以上这3步，Binder驱动出了很多力，但我们不需要知道Binder驱动的底层实现，涉及到C++的代码了——把有限的时间去做更有意义的事情。\n\n(ps:以上节选自包建强老师的文章[点我点我](https://link.jianshu.com?t=http://www.cnblogs.com/Jax/p/6864103.html)).\n\n**2.为什么android选用Binder来实现进程间通信？**\n\n1).可靠性。在移动设备上，通常采用基于Client-Server的通信方式来实现互联网与设备间的内部通信。目前linux支持IPC包括传统的管道，System V IPC，即消息队列/共享内存/信号量，以及socket中只有socket支持Client-Server的通信方式。Android系统为开发者提供了丰富进程间通信的功能接口，媒体播放，传感器，无线传输。这些功能都由不同的server来管理。开发都只关心将自己应用程序的client与server的通信建立起来便可以使用这个服务。毫无疑问，如若在底层架设一套协议来实现Client-Server通信，增加了系统的复杂性。在资源有限的手机 上来实现这种复杂的环境，可靠性难以保证。\n\n2).传输性能。socket主要用于跨网络的进程间通信和本机上进程间的通信，但传输效率低，开销大。消息队列和管道采用存储-转发方式，即数据先从发送方缓存区拷贝到内核开辟的一块缓存区中，然后从内核缓存区拷贝到接收方缓存区，其过程至少有两次拷贝。虽然共享内存无需拷贝，但控制复杂。比较各种IPC方式的数据拷贝次数。共享内存：0次。Binder：1次。Socket/管道/消息队列：2次。\n\n3).安全性。Android是一个开放式的平台，所以确保应用程序安全是很重要的。Android对每一个安装应用都分配了UID/PID,其中进程的UID是可用来鉴别进程身份。传统的只能由用户在数据包里填写UID/PID，这样不可靠，容易被恶意程序利用。而我们要求由内核来添加可靠的UID。\n\n所以，出于可靠性、传输性、安全性。android建立了一套新的进程间通信方式。\n\n## 五. Android中进程的级别，以及各自的区别。\n\n**1、前台进程**\n\n    用户当前正在做的事情需要这个进程。如果满足下面的条件之一，一个进程就被认为是前台进程：\n\n1).这个进程拥有一个正在与用户交互的Activity(这个Activity的onResume()方法被调用)。\n\n2).这个进程拥有一个绑定到正在与用户交互的activity上的Service。\n\n3).这个进程拥有一个前台运行的Service（service调用了方法startForeground()）.\n\n4).这个进程拥有一个正在执行其任何一个生命周期回调方法（onCreate(),onStart(),或onDestroy()）的Service。\n\n5).这个进程拥有正在执行其onReceive()方法的BroadcastReceiver。\n\n    通常，在任何时间点，只有很少的前台进程存在。它们只有在达到无法调合的矛盾时才会被杀－－如内存太小而不能继续运行时。通常，到了这时，设备就达到了一个内存分页调度状态，所以需要杀一些前台进程来保证用户界面的反应.\n\n**2、可见进程**\n\n    一个进程不拥有运行于前台的组件，但是依然能影响用户所见。满足下列条件时，进程即为可见：\n\n    这个进程拥有一个不在前台但仍可见的Activity(它的onPause()方法被调用)。当一个前台activity启动一个对话框时，就出了这种情况。\n\n**3、服务进程**\n\n    一个可见进程被认为是极其重要的。并且，除非只有杀掉它才可以保证所有前台进程的运行，否则是不能动它的。\n\n    这个进程拥有一个绑定到可见activity的Service。\n\n    一个进程不在上述两种之内，但它运行着一个被startService()所启动的service。\n\n尽管一个服务进程不直接影响用户所见，但是它们通常做一些用户关心的事情（比如播放音乐或下载数据），所以系统不到前台进程和可见进程活不下去时不会杀它。\n\n**4、后台进程**\n\n    一个进程拥有一个当前不可见的activity(activity的onStop()方法被调用)。\n\n    这样的进程们不会直接影响到用户体验，所以系统可以在任意时刻杀了它们从而为前台、可见、以及服务进程们提供存储空间。通常有很多后台进程在运行。它们被保存在一个LRU(最近最少使用)列表中来确保拥有最近刚被看到的activity的进程最后被杀。如果一个activity正确的实现了它的生命周期方法，并保存了它的当前状态，那么杀死它的进程将不会对用户的可视化体验造成影响。因为当用户返回到这个activity时，这个activity会恢复它所有的可见状态。\n\n**5、空进程**\n\n    一个进程不拥有入何active组件。\n\n    保留这类进程的唯一理由是高速缓存，这样可以提高下一次一个组件要运行它时的启动速度。系统经常为了平衡在进程高速缓存和底层的内核高速缓存之间的整体系统资源而杀死它们。\n\n## 六. 线程池的相关知识。\n\n    Android中的线程池都是之间或间接通过配置ThreadPoolExecutor来实现不同特性的线程池.Android中最常见的四类具有不同特性的线程池分别为FixThreadPool、CachedThreadPool、SingleThreadPool、ScheduleThreadExecutor.\n\n**1).FixThreadPool**\n\n    只有核心线程,并且数量固定的,也不会被回收,所有线程都活动时,因为队列没有限制大小,新任务会等待执行.\n\n    优点:更快的响应外界请求.\n\n**2).SingleThreadPool**\n\n    只有一个核心线程,确保所有的任务都在同一线程中按顺序完成.因此不需要处理线程同步的问题.\n\n**3).CachedThreadPool**\n\n    只有非核心线程,最大线程数非常大,所有线程都活动时,会为新任务创建新线程,否则会利用空闲线程(60s空闲时间,过了就会被回收,所以线程池中有0个线程的可能)处理任务.\n\n    优点:任何任务都会被立即执行(任务队列SynchronousQueue相当于一个空集合);比较适合执行大量的耗时较少的任务.\n\n**4).ScheduledThreadPool**\n\n    核心线程数固定,非核心线程(闲着没活干会被立即回收)数没有限制.\n\n    优点:执行定时任务以及有固定周期的重复任务\n\n    参考[Android开发——Android中常见的4种线程池（保证你能看懂并理解）](https://link.jianshu.com?t=http://blog.csdn.net/seu_calvin/article/details/52415337)\n\n## 七. 内存泄露，怎样查找，怎么产生的内存泄露。\n\n**产生的内存泄露**\n\n1).资源对象没关闭造成的内存泄漏\n\n2).构造Adapter时，没有使用缓存的convertView\n\n3).Bitmap对象不在使用时调用recycle()释放内存\n\n4).试着使用关于application的context来替代和activity相关的context\n\n5).注册没取消造成的内存泄漏\n\n6).集合中对象没清理造成的内存泄漏\n\n**查找内存泄漏**\n\n    查找内存泄漏可以使用Android Stdio 自带的Android Profiler工具,也可以使用Square产品的LeadCanary.\n\n## 八. Android优化\n\n**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n## 九. 插件化相关技术，热修补技术是怎样实现的，和插件化有什么区别\n\n**相同点:**\n\n    都使用ClassLoader来实现的加载的新的功能类，都可以使用PathClassLoader与DexClassLoader\n\n**不同点：**\n\n    热修复因为是为了修复Bug的，所以要将新的同名类替代同名的Bug类，要抢先加载新的类而不是Bug类，所以多做两件事：在原先的app打包的时候，阻止相关类去打上CLASS_ISPREVERIFIED标志，还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements，这样才能抢先代替Bug类，完成系统不加载旧的Bug类.\n\n    而插件化只是增肌新的功能类或者是资源文件，所以不涉及抢先加载旧的类这样的使命，就避过了阻止相关类去打上CLASS_ISPREVERIFIED标志和还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements.\n\n    所以插件化比热修复简单，热修复是在插件化的基础上在进行替旧的Bug类\n\n## 十. 怎样计算一张图片的大小，加载bitmap过程（怎样保证不产生内存溢出），二级缓存，LRUCache算法。\n\n**计算一张图片的大小**\n\n    图片占用内存的计算公式：图片高度 * 图片宽度 * 一个像素占用的内存大小.所以，计算图片占用内存大小的时候，要考虑图片所在的目录跟设备密度，这两个因素其实影响的是图片的高宽，android会对图片进行拉升跟压缩。\n\n**加载bitmap过程（怎样保证不产生内存溢出）**\n\n    由于Android对图片使用内存有限制，若是加载几兆的大图片便内存溢出。Bitmap会将图片的所有像素（即长x宽）加载到内存中，如果图片分辨率过大，会直接导致内存OOM，只有在BitmapFactory加载图片时使用BitmapFactory.Options对相关参数进行配置来减少加载的像素。\n\n**BitmapFactory.Options相关参数详解**\n\n(1).Options.inPreferredConfig值来降低内存消耗。\n\n比如：默认值ARGB_8888改为RGB_565,节约一半内存。\n\n(2).设置Options.inSampleSize 缩放比例，对大图片进行压缩 。\n\n(3).设置Options.inPurgeable和inInputShareable：让系统能及时回 收内存。\n\nA：inPurgeable：设置为True时，表示系统内存不足时可以被回 收，设置为False时，表示不能被回收。\n\nB：inInputShareable：设置是否深拷贝，与inPurgeable结合使用，inPurgeable为false时，该参数无意义。\n\n(4).使用decodeStream代替其他方法。\n\ndecodeResource,setImageResource,setImageBitmap等方法\n\n## 十一. LRUCache算法是怎样实现的。\n\n    内部存在一个LinkedHashMap和maxSize，把最近使用的对象用强引用存储在 LinkedHashMap中，给出来put和get方法，每次put图片时计算缓存中所有图片总大小，跟maxSize进行比较，大于maxSize，就将最久添加的图片移除；反之小于maxSize就添加进来。\n\n    之前，我们会使用内存缓存技术实现，也就是软引用或弱引用，在Android 2.3（APILevel 9）开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，这让软引用和弱引用变得不再可靠。\n\n# 算法\n\n## 一. 算法题\n\nm * n的矩阵，能形成几个正方形（2 * 2能形成1个正方形，2 * 3 2个，3 * 3 6个）\n\n计数的关键是要观察到任意一个倾斜的正方形必然唯一内接于一个非倾斜的正方形，而一个非倾斜的边长为k的非倾斜正方形，一条边上有k-1个内点，每个内点恰好确定一个内接于其中的倾斜正方形，加上非倾斜正方形本身，可知，将边长为k的非倾斜正方形数目乘以k，再按k求和即可得到所有正方形的数目。\n\n设2≤n≤m，k≤n-1，则边长为k的非倾斜有\n\n(n-k)(m-k)个，故所有正方形有\n\n∑(m-k)(n-k)k个\n\n例如m=n=4\n\n正方形有3_3_1+2_2_2+1_1_3=20个\n\n# 下面是面试过程中遇到的题目\n\n大多数题目都可以在上面找到答案.\n\n## 电话面试题\n\n### 1.ArrayList 和 Hashmap 简单说一些,区别,底层的数据结构.\n\n### 2.Handler 消息机制\n\n### 3.引起内存泄漏的场景\n\n### 4.多线程的使用场景?\n\n### 5.常用的线程池有哪几种?\n\n### 6.在公司做了什么?团队规模?为什么离职?\n\n## 面试中实际涉及到的问题\n\n**第一轮**\n\n### **1.知道哪些单例模式,写一个线程安全的单例,并分析为什么是线程安全的**?\n```java\npublic class Singleton {\n\t// Private constructor prevents instantiation from other classes\n\tprivate Singleton() { }\n\n\t/**\n\t* SingletonHolder is loaded on the first execution of Singleton.getInstance() \n\t* or the first access to SingletonHolder.INSTANCE, not before.\n\t*/\n\tprivate static class SingletonHolder { \n\t\t\tpublic static final Singleton INSTANCE = new Singleton();\n\t}\n\n\tpublic static Singleton getInstance() {\n\t\t\treturn SingletonHolder.INSTANCE;\n\t}\n}\n```\n### **2.Java中的集合有哪些?解释一下HashMap?底部的数据结构?散列表冲突的处理方法,散列表是一个什么样的数据结构?HashMap是采用什么方法处理冲突的**?\n\n![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n```\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n```\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**TreeSet两种排序方式**：两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\n```\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n```\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\n```\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n```\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\n```\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n```\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n **五. concurrentHashmap原理，原子类**。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大.\n\n### **3.解释一下什么是MVP架构,画出图解,一句话解释MVP和MVC的区别**?\n\n为了解决逻辑处理和UI视图的松散耦合，MVC和MVP的架构模式在很多App中使用比较广泛。\n\n那什么是MVP呢？它又和我们常常听到的MVC有什么关系了以及区别呢？\n\n![MVP和MVC架构图](http://frodoking.github.io/img/android/mvp_mvc_img.png)\n\nMVP 是从经典的模式MVC演变而来，它们的基本思想有相通的地方：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。作为一种新的模式，**MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会从直接Model中读取数据而不是通过 Controller**。\n\n在MVC里，View是可以直接访问Model的！从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。 在MVC模型里，更关注的Model的不变，而同时有多个对Model的不同显示，及View。所以，在MVC模型里，Model不依赖于View，但是View是依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。\n\n**MVP如何解决MVC的问题**？\n\n在MVP里，Presenter完全把Model和View进行了分离，主要的程序逻辑在Presenter里实现。而且，Presenter与具体的View是没有直接关联的，而是通过定义好的接口进行交互，从而使得在变更View时候可以保持Presenter的不变，即重用！ 不仅如此，我们还可以编写测试用的View，模拟用户的各种操作，从而实现对Presenter的测试–而不需要使用自动化的测试工具。 我们甚至可以在Model和View都没有完成时候，就可以通过编写Mock Object（即实现了Model和View的接口，但没有具体的内容的）来测试Presenter的逻辑。 在MVP里，应用程序的逻辑主要在Presenter来实现，其中的View是很薄的一层。因此就有人提出了Presenter First的设计模式，就是根据User Story来首先设计和开发Presenter。在这个过程中，View是很简单的，能够把信息显示清楚就可以了。在后面，根据需要再随便更改View，而对Presenter没有任何的影响了。 如果要实现的UI比较复杂，而且相关的显示逻辑还跟Model有关系，就可以在View和Presenter之间放置一个Adapter。由这个 Adapter来访问Model和View，避免两者之间的关联。而同时，因为Adapter实现了View的接口，从而可以保证与Presenter之间接口的不变。这样就可以保证View和Presenter之间接口的简洁，又不失去UI的灵活性。 在MVP模式里，View只应该有简单的Set/Get的方法，用户输入和设置界面显示的内容，除此就不应该有更多的内容，绝不容许直接访问Model–这就是与MVC很大的不同之处。\n\nMVP的优点：\n\n> 1、模型与视图完全分离，我们可以修改视图而不影响模型；\n> 2、可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部；\n> 3、我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁；\n> 4、如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）。\n\n**使用方法**\n\n1、建立bean\n\n```\n\npublic class UserBean {\n private String mFirstName;\n private String mLastName;\n\n public UserBean(String firstName, String lastName) {\n this. mFirstName = firstName;\n this. mLastName = lastName;\n }\n\n public String getFirstName() {\n return mFirstName;\n }\n\n public String getLastName() {\n return mLastName;\n }\n}\n```\n \n2、建立model接口（处理业务逻辑，这里指数据读写）\n\n```\n\npublic interface IUserModel {\n void setID(int id);\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n\n int getID();\n\n UserBean load(int id);// 通过id读取user信息,返回一个UserBean\n}\n```\n\n3、建立view接口（更新ui中的view状态），这里列出需要操作当前view的方法\n\n``` \n\npublic interface IUserView {\n int getID();\n\n String getFristName();\n\n String getLastName();\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n}\n\n ```\n4、建立presenter（主导器，通过iView和iModel接口操作model和view），activity可以把所有逻辑给presenter处理，这样java逻辑就从手机的activity中分离出来\n\n```\npublic class UserPresenter {\n private IUserView mUserView;\n private IUserModel mUserModel;\n\n public UserPresenter(IUserView view) {\n mUserView = view;\n mUserModel = new UserModel();\n }\n\n public void saveUser( int id, String firstName, String lastName) {\n mUserModel.setID(id);\n mUserModel.setFirstName(firstName);\n mUserModel.setLastName(lastName);\n }\n\n public void loadUser( int id) {\n UserBean user = mUserModel.load(id);\n mUserView.setFirstName(user.getFirstName()); // 通过调用IUserView的方法来更新显示\n mUserView.setLastName(user.getLastName());\n }\n}\n\n ```\n**结束语**\n\nMVP主要解决就是把逻辑层抽出来成P层，要是遇到需求逻辑上的更改就可以只需要修改P层了或者遇到逻辑上的大概我们可以直接从写一个P也可以，很多开发人员把所有的东西都写在了Activity/Fragment里面这样一来遇到频繁改需求或者逻辑越来越复杂的时候，Activity/Fragment里面就会出现过多的混杂逻辑导致出错，所以MVP模式对于APP来对控制逻辑和UI的解耦来说是一个不错的选择！\n\n在这里多说一下，其实MVP只是一个总体的解决方案。在V和P之间其实我们还可以采用事件总线的方案来解决这种高耦合的情况。本人在另外一篇文章中将会讲到[事件总线（otto的bus和eventbus的一个对比分析）](https://frodoking.github.io/2015/03/30/android-eventbus-otto-analysis/)\n\n\n### **4.Handle消息机制?在使用Handler的时候要注意哪些东西,是否会引起内存泄漏?画一下Handler机制的图解**?\n\n![](http://upload-images.jianshu.io/upload_images/1824194-a947dcc5b22f69fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面一共出现了几种类，ActivityThread，Handler，MessageQueue，Looper，msg（Message）,对这些类作简要介绍：\n\nActivityThread：程序的启动入口，为什么要介绍这个类，是因为该类就是我们说的主线程，它对Looper进行操作的。\n\nHandler：字面意思是操控者，该类有比较重要的地方，就是通过handler来发送消息（sendMessage）到MessageQueue和 操作控件的更新（handleMessage）。handler下面持有这MessageQueue和Looper的对象。\n\nMessageQueue：字面意思是消息队列，就是封装Message类。对Message进行插入和取出操作。\n\nMessage：这个类是封装消息体并被发送到MessageQueue中的，给类是通过链表实现的，其好处方便MessageQueue的插入和取出操作。还有一些字段是（int what，Object obj，int arg1，int arg2）。what是用户定义的消息和代码，以便接收者（handler）知道这个是关于什么的。obj是用来传输任意对象的，arg1和arg2是用来传递一些简单的整数类型的。\n\n下面，我们按照启动顺序来进行源码分析：\n\n![](http://upload-images.jianshu.io/upload_images/1824194-298ebb16ce4a3b70.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://raw.githubusercontent.com/bihe0832/Android-System-Related-Charts/master/framework/handler-sequence.jpg)\n\n### **5.是否做过性能优化?已经采取了哪些措施进行优化**?\n\n**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n#### **6.引起内存泄漏的原因是什么?以及你是怎么解决的**?\n\n这些问题应该都是比较基础的问题,每个开发者都应该是非常熟悉并能详细叙述的.这一轮的面试官问的技术都是平时用到的.\n\n**第二轮**\n\n1.关于并发理解多少?说几个并发的集合?\n\n2.Handler 消息机制图解?\n\n3.在项目中做了哪些东西?\n\n4.画图说明View 事件传递机制?并举一个例子阐述\n\n5.类加载机制,如何换肤,换肤插件中存在的问题?hotfix是否用过,原理是否了解?\n\n6.说说项目中用到了哪些设计模式,说了一下策略模式和观察者模式?\n\n7.会JS么?有Hybid开发经验么?\n\n8.说一下快排的思想?手写代码\n\n9.堆有哪些数据结构?\n\n对于这轮米那是明显感觉到压力,知识的纵向了解也比较深,应该是个leader.\n\n**第三轮**\n\n1.介绍一下在项目中的角色?\n\n2.遇到困难是怎么解决的?\n\n3.如何与人相处,与别人意见相左的时候是怎么解决的,并举生活中的一个例子.\n\n4.有没有压力特别大的时候?\n\n这个应该是项目经理了,问的问题偏向于生活性格方面.\n\n以上面试中问到的题目基本上都可以在上面找到答案,所以做准备是很重要的,但技术是一点点积累的,就算你全会背了,面试过了,真正等到工作的时候还是会捉襟见肘的,所以踏实点吧骚年.\n\n",[[1512195973468,["gengmei_pxf@gengmei123.lan",[[1,36916,"\n"]],[36914,36914],[36915,36915]]],[1512195973659,["gengmei_pxf@gengmei123.lan",[[1,36917,"\n"]],[36915,36915],[36916,36916]]],[1512195975436,["gengmei_pxf@gengmei123.lan",[[1,36916,"Message:消息;其中包含了消息ID，消息对象以及处理的数据等，由MessageQueue统一列队，终由Handler处理 Handler:处理者;负责Message发送消息及处理。Handler通过与Looper进行沟通，从而使用Handler时，需要实现 handlerMessage(Message msg)方法来对特定的Message进行处理，例如更新UI等(主线程中才行) MessageQueue:消息队列;用来存放Handler发送过来的消息，并按照FIFO(先入先出队列)规则执行。当然，存放 Message并非实际意义的保存，而是将Message以链表的方式串联起来的，等Looper的抽取。 Looper:消息泵，不断从MessageQueue中抽取Message执行。因此，一个线程中的MessageQueue需要一个Looper进行 管理。Looper是当前线程创建的时候产生的(UI Thread即主线程是系统帮忙创建的Looper，而如果在子线程中，需要\n\n圣制作\n\n手动在创建线程后立即创建Looper[调用Looper.prepare()方法])。也就是说，会在当前线程上绑定一个Looper对象。 Thread:线程;负责调度消息循环，即消息循环的执行场所。 知识要点 一、说明\n\n1、handler应该由处理消息的线程创建。 2、handler与创建它的线程相关联，而且也只与创建它的线程相关联。handler运行在创建它的线程中，所以，如果在 handler中进行耗时的操作，会阻塞创建它的线程。\n二、一些知识点 1、Android的线程分为有消息循环的线程和没有消息循环的线程，有消息循环的线程一般都会有一个Looper。主线程 (UI线程)就是一个消息循环的线程。 2、获取looper: Looper.myLooper(); //获得当前的Looper\nLooper.getMainLooper () //获得UI线程的Lopper 3、Handler的初始化函数(构造函数)，如果没有参数，那么他就默认使用的是当前的Looper，如果有Looper参数， 就是用对应的线程的Looper。 4、如果一个线程中调用Looper.prepare()，那么系统就会自动的为该线程建立一个消息队列，然后调用 Looper.loop(); 之后就进入了消息循环，这个之后就可以发消息、取消息、和处理消息。\n\n消息处理机制原理:\n\nHandler\n\nLooper\n\n6: loop\n\n1: sendMessage()\n2: message.target=this\n\n5: message.when\n\n3: run\n\nwhen=0\n\nHandlerThread\n\nwhile  true\n\n4: looper\n\n7: Queue  Message\n\n9:\n\n10: handlerMessage(message)\n\n8: Message.target.dispatchMessage(Message msg)\n\n11: msg.recycle();\n\nMessageQueue\n\n圣制作\n\n一、大致流程:\n\n在创建Activity之前，当系统启动的时候，先加载ActivityThread这个类，在这个类中的main函数，调用了 Looper.prepareMainLooper();方法进行初始化Looper对象;然后创建了主线程的handler对象(Tips:加载ActivityThread 的时候，其内部的Handler对象[静态的]还未创建);随后才创建了ActivityThread对象;最后调用了Looper.loop();方 法，不断的进行轮询消息队列的消息。也就是说，在ActivityThread和Activity创建之前(同样也是Handler创建之前， 当然handler由于这两者初始化)，就已经开启了Looper的loop()方法，不断的进行轮询消息。需要注意的是，这个轮 询的方法是阻塞式的，没有消息就一直等待(实际是等着MessageQueue的next()方法返回消息)。在应用一执行的时 候，就已经开启了Looper，并初始化了Handler对象。此时，系统的某些组件或者其他的一些活动等发送了系统级别的 消息，这个时候主线程中的Looper就可以进行轮询消息，并调用msg.target.dispatchMessage(msg)(msg.target即为 handler)进行分发消息，并通过handler的handleMessage方法进行处理;所以会优于我们自己创建的handler中的消息而 处理系统消息。\n\n0、准备数据和对象: 1、如果在主线程中处理message(即创建handler对象)，那么如上所述，系统的Looper已经准备好了(当然， MessageQueue也初始化了)，且其轮询方法loop已经开启。【系统的Handler准备好了，是用于处理系统的消息】。 【Tips:如果是子线程中创建handler，就需要显式的调用Looper的方法prepare()和loop()，初始化Looper和开启轮询 器】\n2、通过Message.obtain()准备消息数据(实际是从消息池中取出的消息) 3、创建Handler对象，在其构造函数中，获取到Looper对象、MessageQueue对象(从Looper中获取的)，并将handler 作为message的标签设置到msg.target上 1、发送消息:sendMessage():通过Handler将消息发送给消息队列 2、给Message贴上handler的标签:在发送消息的时候，为handler发送的message贴上当前handler的标签 3、开启HandlerThread线程，执行run方法。 4、在HandlerThread类的run方法中开启轮询器进行轮询:调用Looper.loop()方法进行轮询消息队列的消息 【Tips:这两步需要再斟酌，个人认为这个类是自己手动创建的一个线程类，Looper的开启在上面已经详细说明了， 这里是说自己手动创建线程(HandlerThread)的时候，才会在这个线程中进行Looper的轮询的】 5、在消息队列MessageQueue中enqueueMessage(Message msg, long when)方法里，对消息进行入列，即依据传入的时间 进行消息入列(排队) 6、轮询消息:与此同时，Looper在不断的轮询消息队列 7、在Looper.loop()方法中，获取到MessageQueue对象后，从中取出消息(Message msg = queue.next()) 8、分发消息:从消息队列中取出消息后，调用msg.target.dispatchMessage(msg);进行分发消息 9、将处理好的消息分发给指定的handler处理，即调用了handler的dispatchMessage(msg)方法进行分发消息。\n\n圣制作\n\n10、在创建handler时，复写的handleMessage方法中进行消息的处理 11、回收消息:在消息使用完毕后，在Looper.loop()方法中调用msg.recycle()，将消息进行回收，即将消息的所有字段 恢复为初始状态\n\n测试代码:\n\n/**\n* Handler 构造函数测试 * @author zhaoyu 2013-10-5 上午9:56:38\n\n*/\npublic class HandlerConstructorTest extends Activity {\n\nprivate Handler handler1 = new Handler(new Callback() { @Override\n\npublic boolean handleMessage(Message msg) {\nSystem.out.println(\"使用了Handler1中的接又Callback\");\nreturn false; // 此处，如果返回 false，下面的 handlerMessage方法会执行，true ，下面的不执行\n\n} });\n\nprivate Handler handler2 = new Handler() { public void handleMessage(Message msg) {\n\nSystem.out.println(\"Handler2\"); }\n\n};\n\nprotected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState);\n\n//消息1\nMessage obtain1 = Message.obtain(); obtain1.obj = \"sendMessage\"; obtain1.what = 1; handler1.sendMessage(obtain1);\n\n//消息2\nMessage obtain2 = handler2.obtainMessage();\n\nhandler2.sendMessage(obtain2); //1 handler2.dispatchMessage(obtain2); //2\n\n二、详细解释: 1、准备Looper对象 两种情况初始化Looper对象: 1)在主线程中不需要显式的创建Looper对象，直接创建Handler对象即可;因为在主线程ActivityThread的main函数中 已经自动调用了创建Looper的方法:Looper.prepareMainLooper();，并在最后调用了Looper.loop()方法进行轮询。 2)如果在子线程中创建Handler对象，需要创建Looper对象，即调用显式的调用Looper.prepare() 初始化Looper的工作: 1)初始化Looper对象:通过调用Looper.prepare()初始化Looper对象，在这个方法中，新创建了Looper对象 2)将Looper绑定到当前线程:在初始化中，调用sThreadLocal.set(new Looper(quitAllowed))方法，将其和ThreadLocal 进行绑定\n\n在ThreadLocal对象中的set方法，是将当前线程和Looper绑定到一起:首先获取到当前的线程，并获取线程内部类 Values，通过Thread.Values的put方法，将当前线程和Looper对象进行绑定到一起。即将传入的Looper对象挂载到当前 线程上。 Tips:在Looper对象中，可以通过getThread()方法，获取到当前线程，即此Looper绑定的线程对象。\n\n源代码: Looper中:\n\n// }\n\n}\n\npublic static void prepare() {\n\nprepare(true); }\n\n圣制作\n\nprivate static void prepare(boolean quitAllowed) { if (sThreadLocal.get() != null) {\n\nthrow new RuntimeException(\"Only one Looper may be created per thread\"); }\n\nsThreadLocal.set(new Looper(quitAllowed)); }\n\nThreadLocal中:\n\n2、创建消息Message: 消息的创建可以通过两种方式: 1)new Message()\n2)Message.obtain():【当存在多个handler的时候，可以通过Message.obtain(Handler handler)创建消息，指定处理的 handler对象】 Tips:建议使用第二种方式更好一些。原因:\n\n因为通过第一种方式，每有一个新消息，都要进行new一个Message对象，这会创建出多个Message，很占内存。\n\n而如果通过obtain的方法，是从消息池sPool中取出消息。每次调用obtain()方法的时候，先判断消息池是否有消息 (if (sPool != null))，没有则创建新消息对象，有则从消息池中取出消息，并将取出的消息从池中移除【具体看 obtain()方法】\n\npublic void set(T value) {\nThread currentThread = Thread.currentThread(); Values values = values(currentThread);\nif (values == null) {\n\nvalues = initializeValues(currentThread); }\n\nvalues.put(this, value); }\n\npublic static Message obtain() { synchronized (sPoolSync) {\n\nif (sPool != null) { Message m = sPool; sPool = m.next; m.next = null; sPoolSize--;\n\nreturn m; }\n\n}\n\nreturn new Message(); }\n\npublic Message() { }\n\n3、创建Handler对象 两种形式创建Handler对象: 1)创建无参构造函数的Handler对象: 2)创建指定Looper对象的Handler对象\n最终都会调用相应的含有Callback和boolean类型的参数的构造函数 【这里的Callback是控制是否分发消息的，其中含有一个返回值为boolean的handleMessage(Message msg)方法进行判断 的;\n\nboolean类型的是参数是判断是否进行异步处理，这个参数默认是系统处理的，我们无需关心】 在这个构造函数中，进行了一系列的初始化工作:\n1、获取到当前线程中的Looper对象\n2、通过Looper对象，获取到消息队列MessageQueue对象\n\n3、获取Callback回调对象 4、获取异步处理的标记 源代码: 1、创建无参构造函数的Handler对象:\n\npublic Handler() {\n\nthis(null, false); }\n\n圣制作\n\npublic Handler(Callback callback, boolean async) { if (FIND_POTENTIAL_LEAKS) {\n\nfinal Class<? extends Handler> klass = getClass();\nif ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) && (klass.getModifiers() &\n\nModifier.STATIC) == 0) {\n\nLog.w(TAG, \"The following Handler class should be static or leaks might occur: \" +klass.getCanonicalName()); }\n\n}\nmLooper = Looper.myLooper(); if (mLooper == null) {\n\nthrow new RuntimeException(\"Can't create handler inside thread that has not called Looper.prepare()\"); }\n\nmQueue = mLooper.mQueue; mCallback = callback; mAsynchronous = async;\n\n}\n\n2、创建指定Looper对象的Handler对象\n\n4、Handler对象发送消息:\n\n1)Handler发送消息给消息队列:\n\nHandler对象通过调用sendMessage(Message msg)方法，最终将消息发送给消息队列进行处理\n\n这个方法(所有重载的sendMessage)最终调用的是enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis)\n\n(1)先拿到消息队列:在调用到sendMessageAtTime(Message msg, long uptimeMillis)方法的时候，获取到消息队列\n\n(在创建Handler对象时获取到的)\n\n(2)当消息队列不为null的时候(为空直接返回false，告知调用者处理消息失败)，再调用处理消息入列的方法: enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis)\n\n这个方法，做了三件事:\n\n1、为消息打上标签:msg.target = this;:将当前的handler对象这个标签贴到传入的message对象上，为Message指 定处理者\n\n2、异步处理消息:msg.setAsynchronous(true);，在asyn为true的时候设置 3、将消息传递给消息队列MessageQueue进行处理:queue.enqueueMessage(msg, uptimeMillis);\n\npublic Handler(Looper looper) {\n\nthis(looper, null, false); }\n\npublic Handler(Looper looper, Callback callback, boolean async) { mLooper = looper;\nmQueue = looper.mQueue;\nmCallback = callback;\n\nmAsynchronous = async; }\n\npublic final boolean sendMessage(Message msg){\n\nreturn sendMessageDelayed(msg, 0); }\n\npublic final boolean sendMessageDelayed(Message msg, long delayMillis){ if (delayMillis < 0) {\n\ndelayMillis = 0; }\n\nreturn sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);\n\n}\npublic boolean sendMessageAtTime(Message msg, long uptimeMillis) { MessageQueue queue = mQueue;\nif (queue == null) {\n\nRuntimeException e = new RuntimeException(\nthis + \" sendMessageAtTime() called with no mQueue\");\n\nLog.w(\"Looper\", e.getMessage(), e);\n\nreturn false; }\n\nreturn enqueueMessage(queue, msg, uptimeMillis); }\n\nprivate boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) { msg.target = this;\n\n圣制作\n\nif (mAsynchronous) {\n\nmsg.setAsynchronous(true); }\n\nreturn queue.enqueueMessage(msg, uptimeMillis); }\n\n2)MessageQueue消息队列处理消息:\n在其中的enqueueMessage(Message msg, long when)方法中，工作如下: 在消息未被处理且handler对象不为null的时候，进行如下操作(同步代码块中执行) 1、将传入的处理消息的时间when(即为上面的uptimeMillis)赋值为当前消息的when属性。 2、将next()方法中处理好的消息赋值给新的消息引用:Message p = mMessages;\n\n在next()方法中:不断的从消息池中取出消息，赋值给mMessage，当没有消息发来的时候，Looper的loop()方法由 于是阻塞式的，就一直等消息传进来 3、当传入的时间为0，且next()方法中取出的消息为null的时候，将传入的消息msg入列，排列在消息队列上，此时为 消息是先进先出的\n\n否则，进入到死循环中，不断的将消息入列，根据消息的时刻(when)来排列发送过来的消息，此时消息是按时 间的先后进行排列在消息队列上的\n\nfinal boolean enqueueMessage(Message msg, long when) { if (msg.isInUse()) {\n\nthrow new AndroidRuntimeException(msg + \" This message is already in use.\"); }\n\nif (msg.target == null) {\n\nthrow new AndroidRuntimeException(\"Message must have a target.\"); }\n\nboolean needWake; synchronized (this) {\n\nif (mQuiting) {\nRuntimeException e = new RuntimeException(msg.target + \" sending message to a Handler on a dead thread\"); Log.w(\"MessageQueue\", e.getMessage(), e);\nreturn false;\n\n}\n\nmsg.when = when;\nMessage p = mMessages;\nif (p == null || when == 0 || when < p.when) {\n\n// New head, wake up the event queue if blocked. msg.next = p;\nmMessages = msg;\nneedWake = mBlocked;\n\n} else {\nneedWake = mBlocked && p.target == null && msg.isAsynchronous(); Message prev;\nfor (;;) {\n\nprev = p;\np = p.next;\nif (p == null || when < p.when) {\n\nbreak; }\n\nif (needWake && p.isAsynchronous()) {\n\nneedWake = false; }\n\n}\nmsg.next = p; // invariant: p == prev.next prev.next = msg;\n\n} }\n\nif (needWake) {\n\nnativeWake(mPtr); }\n\nreturn true; }\n\n5、轮询Message 1)开启loop轮询消息\n\n圣制作\n\n当开启线程的时候，执行run方法，在HandlerThread类中，调用的run方法中将开启loop进行轮询消息队列: 在loop方法中，先拿到MessageQueue对象，然后死循环不断从队列中取出消息，当消息不为null的时候，通过handler 分发消息:msg.target.dispatchMessage(msg)。消息分发完之后，调用msg.recycle()回收消息， 2)回收消息: 在Message的回收消息recycle()这个方法中:首先调用clearForRecycle()方法，将消息的所有字段都恢复到原始状态 【如flags=0，what=0，obj=null，when=0等等】 然后在同步代码块中将消息放回到消息池sPool中，重新利用Message对象\n\n源代码:\n\nLooper.loop()\n\npublic static void loop() {\nfinal Looper me = myLooper(); if (me == null) {\n\nthrow new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\"); }\n\nfinal MessageQueue queue = me.mQueue; Binder.clearCallingIdentity();\nfinal long ident = Binder.clearCallingIdentity(); for (;;) {\n\nMessage msg = queue.next(); // might block if (msg == null) {\n\nreturn; }\n\n// This must be in a local variable, in case a UI event sets the logger Printer logging = me.mLogging;\nif (logging != null) {\n\nlogging.println(\">>>>> Dispatching to \" + msg.target + \" \" + msg.callback + \": \" + msg.what);\n\n}\n\nmsg.target.dispatchMessage(msg);\n\nif (logging != null) {\n\nlogging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback); }\n\nfinal long newIdent = Binder.clearCallingIdentity(); if (ident != newIdent) {\n\nLog.wtf(TAG, “......”); }\n\nmsg.recycle();\n\n} }\n\nmsg.recycle();:\n\n/*package*/ void clearForRecycle() { flags = 0;\n\nwhat = 0;\narg1 = 0;\narg2 = 0;\nobj = null; replyTo = null; when = 0; target = null; callback = null; data = null;\n\n}\n\npublic void recycle() { clearForRecycle(); synchronized (sPoolSync) {\n\nif (sPoolSize < MAX_POOL_SIZE) { next = sPool;\nsPool = this;\nsPoolSize++;\n\n} }\n\n}\n\n圣制作\n\n6、处理Message 在Looper.loop()方法中调用了msg.target.dispatchMessage(msg);的方法，就是调用了Handler中的 dispatchMessage(Message msg)方法: 1)依据Callback中的handleMessage(msg)的真假判断是否要处理消息，如果是真则不进行消息分发，则不处理消息， 否则进行处理消息 2)当Callback为null或其handleMessage(msg)的返回值为false的时候，进行分发消息，即调用handleMessage(msg)处理 消息【这个方法需要自己复写】\n\n/**\n* Subclasses must implement this to receive messages. */\n\npublic void handleMessage(Message msg) { }\n\n/**\n* Handle system messages here. */\n\npublic void dispatchMessage(Message msg) { if (msg.callback != null) {\n\nhandleCallback(msg); } else {\n\nif (mCallback != null) {\nif (mCallback.handleMessage(msg)) {\n\nreturn; }\n\n}\n\nhandleMessage(msg); }\n\n}\n\n==========\n\n场景一:\n\n在主线程中创建Handler，其中复写了handleMessage方法(处理message，更新界面) 然后创建子线程，其中创建Message对象，并设置消息，通过handler发送消息 示例代码:\n\npublic class MainActivity2 extends Activity implements OnClickListener{ private Button bt_send;\n\nprivate TextView tv_recieve;\nprivate Handler handler = new Handler(){\n\n@Override public void handleMessage(Message msg) {\n\nsuper.handleMessage(msg);\n\ntv_recieve.setText((String) msg.obj); }\n\n};\n\n@Override protected void onCreate(Bundle savedInstanceState) {\n\nsuper.onCreate(savedInstanceState); setContentView(R.layout.activity_main);\nbt_send = (Button) findViewById(R.id.bt_send); tv_recieve = (TextView) findViewById(R.id.tv_recieve); bt_send.setOnClickListener(this); tv_recieve.setOnClickListener(this);\n}\n@Override public void onClick(View v) {\n\nswitch (v.getId()) { case R.id.bt_send:\n\nnew Thread(){\npublic void run() {\n\nMessage msg = new Message();\n\nmsg.obj = \"消息来了\"+ System.currentTimeMillis(); handler.sendMessage(msg);\n\n圣制作\n\n} }.start();\n\nbreak; }\n\n} }\n\n执行过程:\n\n1、Looper.prepare() 在当前线程(主线程)中准备一个Looper对象，即轮询消息队列MessageQueue的对象;此方法会创建一个Looper，\n\n在Looper的构造函数中，初始化的创建了一个MessageQueue对象(用于存放消息)，并准备好了一个线程供调用 2、new Handler():\n\n在当前线程中创建出Handler，需要复写其中的handleMessage(Message msg)，对消息进行处理(更新UI)。在创 建Handler中，会将Looper设置给handler，并随带着MessageQueue对象;其中Looper是通过调用其静态方法 myLooper()，返回的是ThreadLocal中的currentThread，并准备好了MessageQueue【mQueue】 3、Looper.loop():\n\n无限循环，对消息队列进行不断的轮询，如果没有获取到消息，就会阻塞线程;如果有消息，直接从消息队列中 取出消息，并通过调用msg.target.dispatchMessage(msg)进行分发消息给各个控件进行处理。\n\n[其中的msg.target实际就是handler]。 4、创建子线程，handler.sendMessage(msg)\n\n在handler.sendMessage(msg)方法中，实际上最终调用sendMessageAtTime(Message msg，long uptimeMillis)方法 [sendMessageXXX方法都是最终调用的sendMessageAtTime方法];此方法返回的enqueueMessage(queue，msg， uptimeMillis)，实际上返回的是MessageQueue中的enqueueMessage(msg，uptimeMillis)，其中进行的操作时对存入的消 息进行列队，即根据接收到的消息的时间先后进行排列[使用的单链形式];然后将消息就都存入到了消息队列中，等 待着handler进行处理。\n\n圣制作\n\n场景二:\n\n创建两个子线程，一个线程中创建Handler并进行处理消息，另一个线程使用handler发送消息。 示例代码:\n\npublic class MainActivity extends Activity implements OnClickListener{\n\nprivate Button bt_send;\nprivate TextView tv_recieve; private Handler handler;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n\nsuper.onCreate(savedInstanceState); setContentView(R.layout.activity_main);\nbt_send = (Button) findViewById(R.id.bt_send); tv_recieve = (TextView) findViewById(R.id.tv_recieve); bt_send.setOnClickListener(this); tv_recieve.setOnClickListener(this);\nnew Thread(){\n\npublic void run() { //Looper.prepare();\n\nhandler = new Handler(Looper.getMainLooper()){ @Override\n\npublic void handleMessage(Message msg) { super.handleMessage(msg); tv_recieve.setText((String) msg.obj);\n\n} };\n\n//Looper.loop(); }\n\n}.start(); }\n\n@Override\npublic void onClick(View v) {\n\n圣制作\n\nswitch (v.getId()) { case R.id.bt_send:\n\nnew Thread(){\npublic void run() {\n\nMessage msg = new Message();\n\nmsg.obj = \"消息来了\"+ System.currentTimeMillis();\n\nhandler.sendMessage(msg); }\n\n}.start();\n\nbreak; }\n\n} }\n\n简单说明执行过程: 说明:在子线程中是不能更新界面的操作的，只能放在主线程中进行更新。所以必须将处理的消息放到主线程中，才 能进行更新界面，否则会报错 1、子线程中创建Handler，并处理消息\n\n1)创建Handler: 源码如下:\n\n这个构造函数做了一下几步工作:\n1、创建轮询器: 由于新创建的子线程中没有轮询器，就需要创建一个轮询器，才能进行消息的轮询处理。传入的是主线程的轮询\n\n器，就已经将这个looper绑定到主线程上了【传入哪个线程的Looper，就绑定在哪个线程上】 2、将消息队列加入到轮询器上。 消息队列MessageQueue是存放handler发来的消息的，等着Looper进行轮询获取;在一个线程中的MessageQueue需\n\n要一个Looper进行管理，所以两者需要同在一个线程中。 3、回调和异步加载。(此处不做分析[其实我还没分析好])\n需要注意的是界面更新: 上面说到了，在子线程中是不可以进行更新界面的操作的，这就需要使用带有轮询器参数的handler构造函数进行\n\n创建，传入主线程的轮询器:Looper.getMainLooper()，从而将消息加入到主线程的消息队列之中。因此就可进行在 handleMessage方法中进行处理消息更新界面了。 2)、消息处理:\n\n复写其中的handleMessage(Message msg)，对消息进行处理(更新UI)。在创建Handler中，会将Looper设置给 handler，并随带着MessageQueue对象;其中Looper是通过调用其静态方法myLooper()，返回的是ThreadLocal中的 currentThread，并准备好了MessageQueue【mQueue】\n\n虽然是在子线程中编写的代码，但是由于传入的是主线程的looper，所以，Looper从MessageQueue队列中轮询获 取消息、再进行更新界面的操作都是在主线程中执行的。 3)、Looper.loop():\n\n说明:由于传入的是主线程的Looper，而在主线程中已经有这一步操作了，所以这里就不需要进行显示的调用 了。但是主线程在这个时候是做了这个轮询的操作的。\n\n无限循环，对消息队列进行不断的轮询，如果没有获取到消息，就会结束循环;如果有消息，直接从消息队列中 取出消息，并通过调用msg.target.dispatchMessage(msg)进行分发消息给各个控件进行处理。\n\n[其中的msg.target实际就是handler]。 2、创建子线程，发送消息handler.sendMessage(msg)\n\n 新开一个子线程，发送消息给另一个子线程 \n\n在handler.sendMessage(msg)方法中，实际上最终调用sendMessageAtTime(Message msg，long uptimeMillis)方法 [sendMessageXXX方法都是最终调用的sendMessageAtTime方法]\n\npublic Handler(Looper looper, Callback callback, boolean async) { mLooper = looper; mQueue = looper.mQueue; mCallback = callback;\n\nmAsynchronous = async; }\n\n此方法返回的enqueueMessage(queue，msg，uptimeMillis)，实际上返回的是MessageQueue中的\n\n圣制作\n\nenqueueMessage(msg，uptimeMillis)，其中进行的操作时对存入的消息进行列队，即根据接收到的消息的时间先后进 行排列[使用的单链形式];然后将消息就都存入到了消息队列中，等待着handler进行处理。\n\n★ 对各种引用的简单了解 1.1 临界状态的处理\n\n➢ 临界状态: 当缓存内容过多，同时系统，内存又相对较低时的状态;\n\n➢ 临界状态处理: 1\\. 低内存预警:\n\n每当进行数据缓存时需要判断当前系统的内存值是否低于应用预设的最低内存; 如果是，提示用户应用将在低内存环境下运行; Tips:\n\nIntent.ACTION_DEVICE_STORAGE_LOW;\n\n设备内存不足时发出的广播,此广播只能由系统使用，其它APP不可用; Intent.ACTION_DEVICE_STORAGE_OK; 设备内存从不足到充足时发出的广播,此广播只能由系统使用，其它APP不可用;\n\n2\\. 构建高速缓存(扩展)"]],[36916,36916],[53695,53695]]],[1512195996063,["gengmei_pxf@gengmei123.lan",[[-1,36916,"Message:消息;其中包含了消息ID，消息对象以及处理的数据等，由MessageQueue统一列队，终由Handler处理 Handler:处理者;负责Message发送消息及处理。Handler通过与Looper进行沟通，从而使用Handler时，需要实现 handlerMessage(Message msg)方法来对特定的Message进行处理，例如更新UI等(主线程中才行) MessageQueue:消息队列;用来存放Handler发送过来的消息，并按照FIFO(先入先出队列)规则执行。当然，存放 Message并非实际意义的保存，而是将Message以链表的方式串联起来的，等Looper的抽取。 Looper:消息泵，不断从MessageQueue中抽取Message执行。因此，一个线程中的MessageQueue需要一个Looper进行 管理。Looper是当前线程创建的时候产生的(UI Thread即主线程是系统帮忙创建的Looper，而如果在子线程中，需要\n\n圣制作\n\n手动在创建线程后立即创建Looper[调用Looper.prepare()方法])。也就是说，会在当前线程上绑定一个Looper对象。 Thread:线程;负责调度消息循环，即消息循环的执行场所。 知识要点 一、说明\n\n1、handler应该由处理消息的线程创建。 2、handler与创建它的线程相关联，而且也只与创建它的线程相关联。handler运行在创建它的线程中，所以，如果在 handler中进行耗时的操作，会阻塞创建它的线程。\n二、一些知识点 1、Android的线程分为有消息循环的线程和没有消息循环的线程，有消息循环的线程一般都会有一个Looper。主线程 (UI线程)就是一个消息循环的线程。 2、获取looper: Looper.myLooper(); //获得当前的Looper\nLooper.getMainLooper () //获得UI线程的Lopper 3、Handler的初始化函数(构造函数)，如果没有参数，那么他就默认使用的是当前的Looper，如果有Looper参数， 就是用对应的线程的Looper。 4、如果一个线程中调用Looper.prepare()，那么系统就会自动的为该线程建立一个消息队列，然后调用 Looper.loop(); 之后就进入了消息循环，这个之后就可以发消息、取消息、和处理消息。\n\n消息处理机制原理:\n\nHandler\n\nLooper\n\n6: loop\n\n1: sendMessage()\n2: message.target=this\n\n5: message.when\n\n3: run\n\nwhen=0\n\nHandlerThread\n\nwhile  true\n\n4: looper\n\n7: Queue  Message\n\n9:\n\n10: handlerMessage(message)\n\n8: Message.target.dispatchMessage(Message msg)\n\n11: msg.recycle();\n\nMessageQueue\n\n圣制作\n\n一、大致流程:\n\n在创建Activity之前，当系统启动的时候，先加载ActivityThread这个类，在这个类中的main函数，调用了 Looper.prepareMainLooper();方法进行初始化Looper对象;然后创建了主线程的handler对象(Tips:加载ActivityThread 的时候，其内部的Handler对象[静态的]还未创建);随后才创建了ActivityThread对象;最后调用了Looper.loop();方 法，不断的进行轮询消息队列的消息。也就是说，在ActivityThread和Activity创建之前(同样也是Handler创建之前， 当然handler由于这两者初始化)，就已经开启了Looper的loop()方法，不断的进行轮询消息。需要注意的是，这个轮 询的方法是阻塞式的，没有消息就一直等待(实际是等着MessageQueue的next()方法返回消息)。在应用一执行的时 候，就已经开启了Looper，并初始化了Handler对象。此时，系统的某些组件或者其他的一些活动等发送了系统级别的 消息，这个时候主线程中的Looper就可以进行轮询消息，并调用msg.target.dispatchMessage(msg)(msg.target即为 handler)进行分发消息，并通过handler的handleMessage方法进行处理;所以会优于我们自己创建的handler中的消息而 处理系统消息。\n\n0、准备数据和对象: 1、如果在主线程中处理message(即创建handler对象)，那么如上所述，系统的Looper已经准备好了(当然， MessageQueue也初始化了)，且其轮询方法loop已经开启。【系统的Handler准备好了，是用于处理系统的消息】。 【Tips:如果是子线程中创建handler，就需要显式的调用Looper的方法prepare()和loop()，初始化Looper和开启轮询 器】\n2、通过Message.obtain()准备消息数据(实际是从消息池中取出的消息) 3、创建Handler对象，在其构造函数中，获取到Looper对象、MessageQueue对象(从Looper中获取的)，并将handler 作为message的标签设置到msg.target上 1、发送消息:sendMessage():通过Handler将消息发送给消息队列 2、给Message贴上handler的标签:在发送消息的时候，为handler发送的message贴上当前handler的标签 3、开启HandlerThread线程，执行run方法。 4、在HandlerThread类的run方法中开启轮询器进行轮询:调用Looper.loop()方法进行轮询消息队列的消息 【Tips:这两步需要再斟酌，个人认为这个类是自己手动创建的一个线程类，Looper的开启在上面已经详细说明了， 这里是说自己手动创建线程(HandlerThread)的时候，才会在这个线程中进行Looper的轮询的】 5、在消息队列MessageQueue中enqueueMessage(Message msg, long when)方法里，对消息进行入列，即依据传入的时间 进行消息入列(排队) 6、轮询消息:与此同时，Looper在不断的轮询消息队列 7、在Looper.loop()方法中，获取到MessageQueue对象后，从中取出消息(Message msg = queue.next()) 8、分发消息:从消息队列中取出消息后，调用msg.target.dispatchMessage(msg);进行分发消息 9、将处理好的消息分发给指定的handler处理，即调用了handler的dispatchMessage(msg)方法进行分发消息。\n\n圣制作\n\n10、在创建handler时，复写的handleMessage方法中进行消息的处理 11、回收消息:在消息使用完毕后，在Looper.loop()方法中调用msg.recycle()，将消息进行回收，即将消息的所有字段 恢复为初始状态\n\n测试代码:\n\n/**\n* Handler 构造函数测试 * @author zhaoyu 2013-10-5 上午9:56:38\n\n*/\npublic class HandlerConstructorTest extends Activity {\n\nprivate Handler handler1 = new Handler(new Callback() { @Override\n\npublic boolean handleMessage(Message msg) {\nSystem.out.println(\"使用了Handler1中的接又Callback\");\nreturn false; // 此处，如果返回 false，下面的 handlerMessage方法会执行，true ，下面的不执行\n\n} });\n\nprivate Handler handler2 = new Handler() { public void handleMessage(Message msg) {\n\nSystem.out.println(\"Handler2\"); }\n\n};\n\nprotected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState);\n\n//消息1\nMessage obtain1 = Message.obtain(); obtain1.obj = \"sendMessage\"; obtain1.what = 1; handler1.sendMessage(obtain1);\n\n//消息2\nMessage obtain2 = handler2.obtainMessage();\n\nhandler2.sendMessage(obtain2); //1 handler2.dispatchMessage(obtain2); //2\n\n二、详细解释: 1、准备Looper对象 两种情况初始化Looper对象: 1)在主线程中不需要显式的创建Looper对象，直接创建Handler对象即可;因为在主线程ActivityThread的main函数中 已经自动调用了创建Looper的方法:Looper.prepareMainLooper();，并在最后调用了Looper.loop()方法进行轮询。 2)如果在子线程中创建Handler对象，需要创建Looper对象，即调用显式的调用Looper.prepare() 初始化Looper的工作: 1)初始化Looper对象:通过调用Looper.prepare()初始化Looper对象，在这个方法中，新创建了Looper对象 2)将Looper绑定到当前线程:在初始化中，调用sThreadLocal.set(new Looper(quitAllowed))方法，将其和ThreadLocal 进行绑定\n\n在ThreadLocal对象中的set方法，是将当前线程和Looper绑定到一起:首先获取到当前的线程，并获取线程内部类 Values，通过Thread.Values的put方法，将当前线程和Looper对象进行绑定到一起。即将传入的Looper对象挂载到当前 线程上。 Tips:在Looper对象中，可以通过getThread()方法，获取到当前线程，即此Looper绑定的线程对象。\n\n源代码: Looper中:\n\n// }\n\n}\n\npublic static void prepare() {\n\nprepare(true); }\n\n圣制作\n\nprivate static void prepare(boolean quitAllowed) { if (sThreadLocal.get() != null) {\n\nthrow new RuntimeException(\"Only one Looper may be created per thread\"); }\n\nsThreadLocal.set(new Looper(quitAllowed)); }\n\nThreadLocal中:\n\n2、创建消息Message: 消息的创建可以通过两种方式: 1)new Message()\n2)Message.obtain():【当存在多个handler的时候，可以通过Message.obtain(Handler handler)创建消息，指定处理的 handler对象】 Tips:建议使用第二种方式更好一些。原因:\n\n因为通过第一种方式，每有一个新消息，都要进行new一个Message对象，这会创建出多个Message，很占内存。\n\n而如果通过obtain的方法，是从消息池sPool中取出消息。每次调用obtain()方法的时候，先判断消息池是否有消息 (if (sPool != null))，没有则创建新消息对象，有则从消息池中取出消息，并将取出的消息从池中移除【具体看 obtain()方法】\n\npublic void set(T value) {\nThread currentThread = Thread.currentThread(); Values values = values(currentThread);\nif (values == null) {\n\nvalues = initializeValues(currentThread); }\n\nvalues.put(this, value); }\n\npublic static Message obtain() { synchronized (sPoolSync) {\n\nif (sPool != null) { Message m = sPool; sPool = m.next; m.next = null; sPoolSize--;\n\nreturn m; }\n\n}\n\nreturn new Message(); }\n\npublic Message() { }\n\n3、创建Handler对象 两种形式创建Handler对象: 1)创建无参构造函数的Handler对象: 2)创建指定Looper对象的Handler对象\n最终都会调用相应的含有Callback和boolean类型的参数的构造函数 【这里的Callback是控制是否分发消息的，其中含有一个返回值为boolean的handleMessage(Message msg)方法进行判断 的;\n\nboolean类型的是参数是判断是否进行异步处理，这个参数默认是系统处理的，我们无需关心】 在这个构造函数中，进行了一系列的初始化工作:\n1、获取到当前线程中的Looper对象\n2、通过Looper对象，获取到消息队列MessageQueue对象\n\n3、获取Callback回调对象 4、获取异步处理的标记 源代码: 1、创建无参构造函数的Handler对象:\n\npublic Handler() {\n\nthis(null, false); }\n\n圣制作\n\npublic Handler(Callback callback, boolean async) { if (FIND_POTENTIAL_LEAKS) {\n\nfinal Class<? extends Handler> klass = getClass();\nif ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) && (klass.getModifiers() &\n\nModifier.STATIC) == 0) {\n\nLog.w(TAG, \"The following Handler class should be static or leaks might occur: \" +klass.getCanonicalName()); }\n\n}\nmLooper = Looper.myLooper(); if (mLooper == null) {\n\nthrow new RuntimeException(\"Can't create handler inside thread that has not called Looper.prepare()\"); }\n\nmQueue = mLooper.mQueue; mCallback = callback; mAsynchronous = async;\n\n}\n\n2、创建指定Looper对象的Handler对象\n\n4、Handler对象发送消息:\n\n1)Handler发送消息给消息队列:\n\nHandler对象通过调用sendMessage(Message msg)方法，最终将消息发送给消息队列进行处理\n\n这个方法(所有重载的sendMessage)最终调用的是enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis)\n\n(1)先拿到消息队列:在调用到sendMessageAtTime(Message msg, long uptimeMillis)方法的时候，获取到消息队列\n\n(在创建Handler对象时获取到的)\n\n(2)当消息队列不为null的时候(为空直接返回false，告知调用者处理消息失败)，再调用处理消息入列的方法: enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis)\n\n这个方法，做了三件事:\n\n1、为消息打上标签:msg.target = this;:将当前的handler对象这个标签贴到传入的message对象上，为Message指 定处理者\n\n2、异步处理消息:msg.setAsynchronous(true);，在asyn为true的时候设置 3、将消息传递给消息队列MessageQueue进行处理:queue.enqueueMessage(msg, uptimeMillis);\n\npublic Handler(Looper looper) {\n\nthis(looper, null, false); }\n\npublic Handler(Looper looper, Callback callback, boolean async) { mLooper = looper;\nmQueue = looper.mQueue;\nmCallback = callback;\n\nmAsynchronous = async; }\n\npublic final boolean sendMessage(Message msg){\n\nreturn sendMessageDelayed(msg, 0); }\n\npublic final boolean sendMessageDelayed(Message msg, long delayMillis){ if (delayMillis < 0) {\n\ndelayMillis = 0; }\n\nreturn sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);\n\n}\npublic boolean sendMessageAtTime(Message msg, long uptimeMillis) { MessageQueue queue = mQueue;\nif (queue == null) {\n\nRuntimeException e = new RuntimeException(\nthis + \" sendMessageAtTime() called with no mQueue\");\n\nLog.w(\"Looper\", e.getMessage(), e);\n\nreturn false; }\n\nreturn enqueueMessage(queue, msg, uptimeMillis); }\n\nprivate boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) { msg.target = this;\n\n圣制作\n\nif (mAsynchronous) {\n\nmsg.setAsynchronous(true); }\n\nreturn queue.enqueueMessage(msg, uptimeMillis); }\n\n2)MessageQueue消息队列处理消息:\n在其中的enqueueMessage(Message msg, long when)方法中，工作如下: 在消息未被处理且handler对象不为null的时候，进行如下操作(同步代码块中执行) 1、将传入的处理消息的时间when(即为上面的uptimeMillis)赋值为当前消息的when属性。 2、将next()方法中处理好的消息赋值给新的消息引用:Message p = mMessages;\n\n在next()方法中:不断的从消息池中取出消息，赋值给mMessage，当没有消息发来的时候，Looper的loop()方法由 于是阻塞式的，就一直等消息传进来 3、当传入的时间为0，且next()方法中取出的消息为null的时候，将传入的消息msg入列，排列在消息队列上，此时为 消息是先进先出的\n\n否则，进入到死循环中，不断的将消息入列，根据消息的时刻(when)来排列发送过来的消息，此时消息是按时 间的先后进行排列在消息队列上的\n\nfinal boolean enqueueMessage(Message msg, long when) { if (msg.isInUse()) {\n\nthrow new AndroidRuntimeException(msg + \" This message is already in use.\"); }\n\nif (msg.target == null) {\n\nthrow new AndroidRuntimeException(\"Message must have a target.\"); }\n\nboolean needWake; synchronized (this) {\n\nif (mQuiting) {\nRuntimeException e = new RuntimeException(msg.target + \" sending message to a Handler on a dead thread\"); Log.w(\"MessageQueue\", e.getMessage(), e);\nreturn false;\n\n}\n\nmsg.when = when;\nMessage p = mMessages;\nif (p == null || when == 0 || when < p.when) {\n\n// New head, wake up the event queue if blocked. msg.next = p;\nmMessages = msg;\nneedWake = mBlocked;\n\n} else {\nneedWake = mBlocked && p.target == null && msg.isAsynchronous(); Message prev;\nfor (;;) {\n\nprev = p;\np = p.next;\nif (p == null || when < p.when) {\n\nbreak; }\n\nif (needWake && p.isAsynchronous()) {\n\nneedWake = false; }\n\n}\nmsg.next = p; // invariant: p == prev.next prev.next = msg;\n\n} }\n\nif (needWake) {\n\nnativeWake(mPtr); }\n\nreturn true; }\n\n5、轮询Message 1)开启loop轮询消息\n\n圣制作\n\n当开启线程的时候，执行run方法，在HandlerThread类中，调用的run方法中将开启loop进行轮询消息队列: 在loop方法中，先拿到MessageQueue对象，然后死循环不断从队列中取出消息，当消息不为null的时候，通过handler 分发消息:msg.target.dispatchMessage(msg)。消息分发完之后，调用msg.recycle()回收消息， 2)回收消息: 在Message的回收消息recycle()这个方法中:首先调用clearForRecycle()方法，将消息的所有字段都恢复到原始状态 【如flags=0，what=0，obj=null，when=0等等】 然后在同步代码块中将消息放回到消息池sPool中，重新利用Message对象\n\n源代码:\n\nLooper.loop()\n\npublic static void loop() {\nfinal Looper me = myLooper(); if (me == null) {\n\nthrow new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\"); }\n\nfinal MessageQueue queue = me.mQueue; Binder.clearCallingIdentity();\nfinal long ident = Binder.clearCallingIdentity(); for (;;) {\n\nMessage msg = queue.next(); // might block if (msg == null) {\n\nreturn; }\n\n// This must be in a local variable, in case a UI event sets the logger Printer logging = me.mLogging;\nif (logging != null) {\n\nlogging.println(\">>>>> Dispatching to \" + msg.target + \" \" + msg.callback + \": \" + msg.what);\n\n}\n\nmsg.target.dispatchMessage(msg);\n\nif (logging != null) {\n\nlogging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback); }\n\nfinal long newIdent = Binder.clearCallingIdentity(); if (ident != newIdent) {\n\nLog.wtf(TAG, “......”); }\n\nmsg.recycle();\n\n} }\n\nmsg.recycle();:\n\n/*package*/ void clearForRecycle() { flags = 0;\n\nwhat = 0;\narg1 = 0;\narg2 = 0;\nobj = null; replyTo = null; when = 0; target = null; callback = null; data = null;\n\n}\n\npublic void recycle() { clearForRecycle(); synchronized (sPoolSync) {\n\nif (sPoolSize < MAX_POOL_SIZE) { next = sPool;\nsPool = this;\nsPoolSize++;\n\n} }\n\n}\n\n圣制作\n\n6、处理Message 在Looper.loop()方法中调用了msg.target.dispatchMessage(msg);的方法，就是调用了Handler中的 dispatchMessage(Message msg)方法: 1)依据Callback中的handleMessage(msg)的真假判断是否要处理消息，如果是真则不进行消息分发，则不处理消息， 否则进行处理消息 2)当Callback为null或其handleMessage(msg)的返回值为false的时候，进行分发消息，即调用handleMessage(msg)处理 消息【这个方法需要自己复写】\n\n/**\n* Subclasses must implement this to receive messages. */\n\npublic void handleMessage(Message msg) { }\n\n/**\n* Handle system messages here. */\n\npublic void dispatchMessage(Message msg) { if (msg.callback != null) {\n\nhandleCallback(msg); } else {\n\nif (mCallback != null) {\nif (mCallback.handleMessage(msg)) {\n\nreturn; }\n\n}\n\nhandleMessage(msg); }\n\n}\n\n==========\n\n场景一:\n\n在主线程中创建Handler，其中复写了handleMessage方法(处理message，更新界面) 然后创建子线程，其中创建Message对象，并设置消息，通过handler发送消息 示例代码:\n\npublic class MainActivity2 extends Activity implements OnClickListener{ private Button bt_send;\n\nprivate TextView tv_recieve;\nprivate Handler handler = new Handler(){\n\n@Override public void handleMessage(Message msg) {\n\nsuper.handleMessage(msg);\n\ntv_recieve.setText((String) msg.obj); }\n\n};\n\n@Override protected void onCreate(Bundle savedInstanceState) {\n\nsuper.onCreate(savedInstanceState); setContentView(R.layout.activity_main);\nbt_send = (Button) findViewById(R.id.bt_send); tv_recieve = (TextView) findViewById(R.id.tv_recieve); bt_send.setOnClickListener(this); tv_recieve.setOnClickListener(this);\n}\n@Override public void onClick(View v) {\n\nswitch (v.getId()) { case R.id.bt_send:\n\nnew Thread(){\npublic void run() {\n\nMessage msg = new Message();\n\nmsg.obj = \"消息来了\"+ System.currentTimeMillis(); handler.sendMessage(msg);\n\n圣制作\n\n} }.start();\n\nbreak; }\n\n} }\n\n执行过程:\n\n1、Looper.prepare() 在当前线程(主线程)中准备一个Looper对象，即轮询消息队列MessageQueue的对象;此方法会创建一个Looper，\n\n在Looper的构造函数中，初始化的创建了一个MessageQueue对象(用于存放消息)，并准备好了一个线程供调用 2、new Handler():\n\n在当前线程中创建出Handler，需要复写其中的handleMessage(Message msg)，对消息进行处理(更新UI)。在创 建Handler中，会将Looper设置给handler，并随带着MessageQueue对象;其中Looper是通过调用其静态方法 myLooper()，返回的是ThreadLocal中的currentThread，并准备好了MessageQueue【mQueue】 3、Looper.loop():\n\n无限循环，对消息队列进行不断的轮询，如果没有获取到消息，就会阻塞线程;如果有消息，直接从消息队列中 取出消息，并通过调用msg.target.dispatchMessage(msg)进行分发消息给各个控件进行处理。\n\n[其中的msg.target实际就是handler]。 4、创建子线程，handler.sendMessage(msg)\n\n在handler.sendMessage(msg)方法中，实际上最终调用sendMessageAtTime(Message msg，long uptimeMillis)方法 [sendMessageXXX方法都是最终调用的sendMessageAtTime方法];此方法返回的enqueueMessage(queue，msg， uptimeMillis)，实际上返回的是MessageQueue中的enqueueMessage(msg，uptimeMillis)，其中进行的操作时对存入的消 息进行列队，即根据接收到的消息的时间先后进行排列[使用的单链形式];然后将消息就都存入到了消息队列中，等 待着handler进行处理。\n\n圣制作\n\n场景二:\n\n创建两个子线程，一个线程中创建Handler并进行处理消息，另一个线程使用handler发送消息。 示例代码:\n\npublic class MainActivity extends Activity implements OnClickListener{\n\nprivate Button bt_send;\nprivate TextView tv_recieve; private Handler handler;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n\nsuper.onCreate(savedInstanceState); setContentView(R.layout.activity_main);\nbt_send = (Button) findViewById(R.id.bt_send); tv_recieve = (TextView) findViewById(R.id.tv_recieve); bt_send.setOnClickListener(this); tv_recieve.setOnClickListener(this);\nnew Thread(){\n\npublic void run() { //Looper.prepare();\n\nhandler = new Handler(Looper.getMainLooper()){ @Override\n\npublic void handleMessage(Message msg) { super.handleMessage(msg); tv_recieve.setText((String) msg.obj);\n\n} };\n\n//Looper.loop(); }\n\n}.start(); }\n\n@Override\npublic void onClick(View v) {\n\n圣制作\n\nswitch (v.getId()) { case R.id.bt_send:\n\nnew Thread(){\npublic void run() {\n\nMessage msg = new Message();\n\nmsg.obj = \"消息来了\"+ System.currentTimeMillis();\n\nhandler.sendMessage(msg); }\n\n}.start();\n\nbreak; }\n\n} }\n\n简单说明执行过程: 说明:在子线程中是不能更新界面的操作的，只能放在主线程中进行更新。所以必须将处理的消息放到主线程中，才 能进行更新界面，否则会报错 1、子线程中创建Handler，并处理消息\n\n1)创建Handler: 源码如下:\n\n这个构造函数做了一下几步工作:\n1、创建轮询器: 由于新创建的子线程中没有轮询器，就需要创建一个轮询器，才能进行消息的轮询处理。传入的是主线程的轮询\n\n器，就已经将这个looper绑定到主线程上了【传入哪个线程的Looper，就绑定在哪个线程上】 2、将消息队列加入到轮询器上。 消息队列MessageQueue是存放handler发来的消息的，等着Looper进行轮询获取;在一个线程中的MessageQueue需\n\n要一个Looper进行管理，所以两者需要同在一个线程中。 3、回调和异步加载。(此处不做分析[其实我还没分析好])\n需要注意的是界面更新: 上面说到了，在子线程中是不可以进行更新界面的操作的，这就需要使用带有轮询器参数的handler构造函数进行\n\n创建，传入主线程的轮询器:Looper.getMainLooper()，从而将消息加入到主线程的消息队列之中。因此就可进行在 handleMessage方法中进行处理消息更新界面了。 2)、消息处理:\n\n复写其中的handleMessage(Message msg)，对消息进行处理(更新UI)。在创建Handler中，会将Looper设置给 handler，并随带着MessageQueue对象;其中Looper是通过调用其静态方法myLooper()，返回的是ThreadLocal中的 currentThread，并准备好了MessageQueue【mQueue】\n\n虽然是在子线程中编写的代码，但是由于传入的是主线程的looper，所以，Looper从MessageQueue队列中轮询获 取消息、再进行更新界面的操作都是在主线程中执行的。 3)、Looper.loop():\n\n说明:由于传入的是主线程的Looper，而在主线程中已经有这一步操作了，所以这里就不需要进行显示的调用 了。但是主线程在这个时候是做了这个轮询的操作的。\n\n无限循环，对消息队列进行不断的轮询，如果没有获取到消息，就会结束循环;如果有消息，直接从消息队列中 取出消息，并通过调用msg.target.dispatchMessage(msg)进行分发消息给各个控件进行处理。\n\n[其中的msg.target实际就是handler]。 2、创建子线程，发送消息handler.sendMessage(msg)\n\n 新开一个子线程，发送消息给另一个子线程 \n\n在handler.sendMessage(msg)方法中，实际上最终调用sendMessageAtTime(Message msg，long uptimeMillis)方法 [sendMessageXXX方法都是最终调用的sendMessageAtTime方法]\n\npublic Handler(Looper looper, Callback callback, boolean async) { mLooper = looper; mQueue = looper.mQueue; mCallback = callback;\n\nmAsynchronous = async; }\n\n此方法返回的enqueueMessage(queue，msg，uptimeMillis)，实际上返回的是MessageQueue中的\n\n圣制作\n\nenqueueMessage(msg，uptimeMillis)，其中进行的操作时对存入的消息进行列队，即根据接收到的消息的时间先后进 行排列[使用的单链形式];然后将消息就都存入到了消息队列中，等待着handler进行处理。\n\n★ 对各种引用的简单了解 1.1 临界状态的处理\n\n➢ 临界状态: 当缓存内容过多，同时系统，内存又相对较低时的状态;\n\n➢ 临界状态处理: 1\\. 低内存预警:\n\n每当进行数据缓存时需要判断当前系统的内存值是否低于应用预设的最低内存; 如果是，提示用户应用将在低内存环境下运行; Tips:\n\nIntent.ACTION_DEVICE_STORAGE_LOW;\n\n设备内存不足时发出的广播,此广播只能由系统使用，其它APP不可用; Intent.ACTION_DEVICE_STORAGE_OK; 设备内存从不足到充足时发出的广播,此广播只能由系统使用，其它APP不可用;\n\n2\\. 构建高速缓存(扩展)"]],[53695,53695],[36916,36916]]],[1512196071399,["gengmei_pxf@gengmei123.lan",[[1,41454,"\n"]],[41452,41452],[41453,41453]]],[1512196071591,["gengmei_pxf@gengmei123.lan",[[1,41455,"\n"]],[41453,41453],[41454,41454]]],[1512196072088,["gengmei_pxf@gengmei123.lan",[[1,41454,"Android的虚拟机是基于寄存器的Dalvik，它的最大堆大小一般是16M，有的机器为24M。因此我们所能利用 的内存空间是有限的。如果我们的内存占用超过了一定的水平就会出现OutOfMemory的错误。\n\n内存溢出的几点原因总结: 1、资源释放问题: 程序代码的问题，长期保持某些资源(如Context)的引用，造成内存泄露，资源得不到释放 2、对象内存过大问题:\n保存了多个耗用内存过大的对象(如Bitmap)，造成内存超出限制 3、static:\n\nstatic是Java中的一个关键字，当用它来修饰成员变量时，那么该变量就属于该类，而不是该类的实例。所以 用static修饰的变量，它的生命周期是很长的，如果用它来引用一些资源耗费过多的实例(Context的情况最\n\n圣制作\n\n多)，这时就要谨慎对待了。 \n\npublic class ClassName { private static Context mContext;\n\n//省略 }\n\n以上的代码是很危险的，如果将Activity赋值到mContext的话。那么即使该Activity已经onDestroy，但是由于 仍有对象保存它的引用，因此该Activity依然不会被释放。\n我们举Android文档中的一个例子。\n\nprivate static Drawable sBackground; @Override\nprotected void onCreate(Bundle state) {\n\nsuper.onCreate(state);\nTextView label = new TextView(this); label.setText(\"Leaks are bad\");\nif (sBackground == null) {\n\nsBackground = getDrawable(R.drawable.large_bitmap); }\n\nlabel.setBackgroundDrawable(sBackground);\n\nsetContentView(label); }\n\nsBackground, 是 一个静态的变量，但是我们发现，我们并没有显式的保存Contex的引用，但是，当Drawable与\n\nView连接之后，Drawable就将View设 置为一个回调，由于View中是包含Context的引用的，所以，实际上我们依\n\n然保存了Context的引用。这个引用链如下: Drawable->TextView->Context\n\n所以，最终该Context也没有得到释放，发生了内存泄露。 针对static的解决方案:\n\n第一、应该尽量避免static成员变量引用资源耗费过多的实例，比如Context。 第二、Context尽量使用Application Context，因为Application的Context的生命周期比较长，引用它不会出现内存\n\n泄露的问题。\n第三、使用WeakReference代替强引用。比如可以使用WeakReference<Context> mContextRef; 该部分的详细内容也可以参考Android文档中Article部分。\n\n4、线程导致内存溢出: 线程产生内存泄露的主要原因在于线程生命周期的不可控。我们来考虑下面一段代码。\n\npublic class MyActivity extends Activity { @Override\npublic void onCreate(Bundle savedInstanceState) {\n\nsuper.onCreate(savedInstanceState); setContentView(R.layout.main); new MyThread().start();\n\n}\nprivate class MyThread extends Thread{\n\n@Override public void run() {\n\nsuper.run();\n\n//do somthing }\n\n} }\n\n这段代码很平常也很简单，是我们经常使用的形式。我们思考一个问题:假设MyThread的run函数是一个很 费时的操作，当我们开启该线程后，将设备的横屏变为了竖屏，一 般情况下当屏幕转换时会重新创建Activity， 按照我们的想法，老的Activity应该会被销毁才对，然而事实上并非如此。\n\n由于我们的线程是Activity的内部类，所以MyThread中保存了Activity的一个引用，当MyThread的run函数没有 结束时，MyThread是不会被销毁的，因此它所引用的老的Activity也不会被销毁，因此就出现了内存泄露的问 题。\n\n有些人喜欢用Android提供的AsyncTask，但事实上AsyncTask的问题更加严重，Thread只有在run函数不结束 时才出现这种内存泄露问题，然而AsyncTask内部的实现机制是运用了ThreadPoolExcutor,该类产生的Thread对象 的生命周期是不确定的，是应用程序无法控制的，因此如果AsyncTask作为Activity的内部类，就更容易出现内存\n\n圣制作\n\n泄露的问题。\n针对这种线程导致的内存泄露问题的解决方案: \n\n第一、将线程的内部类，改为静态内部类。 第二、在线程内部采用弱引用保存Context引用。\n\n二、避免内存溢出的方案: 1、图片过大导致内存溢出: 模拟器的RAM比较小，由于每张图片先前是压缩的情况，放入到Bitmap的时候，大小会变大，导致超出RAM内 存\n\n★android 中用bitmap 时很容易内存溢出，报如下错误:Java.lang.OutOfMemoryError : bitmap size exceeds VM budget 解决: 方法1: 主要是加上这段:等比例缩小图片\n\n1)通过getResource()方法获取资源:\n\nBitmapFactory.Options options = new BitmapFactory.Options(); options.inSampleSize = 2;\n\n//解决加载图片 内存溢出的问题 //Options 只保存图片尺寸大小，不保存图片到内存\n\nBitmapFactory.Options opts = new BitmapFactory.Options(); //缩放的比例，缩放是很难按准备的比例进行缩放的，其值表明缩放的倍数，SDK中建议其值是2的指数\n\n值,值越大会导致图片不清晰 opts.inSampleSize = 2;\n\nBitmap bmp = null;\nbmp = BitmapFactory.decodeResource(getResources(), mImageIds[position],opts); ...\n\n//回收 bmp.recycle();\n\n2)通过Uri取图片资源\n\n以上代码可以优化内存溢出，但它只是改变图片大小，并不能彻底解决内存溢出。 3)通过路径获取图片资源\n\n方法2:对图片采用软引用，及时地进行recyle()操作\n\n具体见“各种引用的简单了解”中的示例 2、复用listView: 方法:对复杂的listview进行合理设计与编码:\n\nprivate ImageView preview;\nBitmapFactory.Options options = new BitmapFactory.Options();\n\noptions.inSampleSize = 2;//图片宽高都为原来的二分之一，即图片为原来的四分之一\n\nBitmap bitmap = BitmapFactory.decodeStream(cr.openInputStream(uri), null, options); preview.setImageBitmap(bitmap);\n\nprivate ImageView preview;\nprivate String fileName= \"/sdcard/DCIM/Camera/2010-05-14 16.01.44.jpg\"; BitmapFactory.Options options = new BitmapFactory.Options();\n\noptions.inSampleSize = 2;//图片宽高都为原来的二分之一，即图片为原来的四分之一 Bitmap b = BitmapFactory.decodeFile(fileName, options);\n\npreview.setImageBitmap(b); filePath.setText(fileName);\n\nSoftReference<Bitmap> bitmap;\nbitmap = new SoftReference<Bitmap>(pBitmap); if(bitmap != null){\n\nif(bitmap.get() != null && !bitmap.get().isRecycled()){ bitmap.get().recycle();\n\nbitmap = null; }\n\n}\n\nAdapter中:\n\n@Override\npublic View getView(int position, View convertView, ViewGroup parent) {\n\n圣制作\n\nViewHolder holder;\nif(convertView!=null && convertView instanceof LinearLayout){\n\nholder = (ViewHolder) convertView.getTag(); }else{\n\nconvertView = View.inflate(MainActivity.this, R.layout.item, null); holder = new ViewHolder();\nholder.tv = (TextView) convertView.findViewById(R.id.tv); convertView.setTag(holder);\n\n}\nholder.tv.setText(\"XXXX\");\nholder.tv.setTextColor(Color.argb(180, position*4, position*5, 255-position*2)); return convertView;\n\n}\n\nclass ViewHolder{\n\nprivate TextView tv; }\n\n3、界面切换\n方法1:单个页面，横竖屏切换N次后 OOM 1、看看页面布局当中有没有大的图片，比如背景图之类的。\n\n去除xml中相关设置，改在程序中设置背景图(放在onCreate()方法中):\n\n在Activity destory时注意，bg.setCallback(null); 防止Activity得不到及时的释放 2\\. 跟上面方法相似，直接把xml配置文件加载成view 再放到一个容器里 然后直接调用 this.setContentView(View view);方法，避免xml的重复加载\n\n方法2: 在页面切换时尽可能少地重复使用一些代码 比如:重复调用数据库，反复使用某些对象等等......\n\n4、内存分配: 方法1:Android堆内存也可自己定义大小和优化Dalvik虚拟机的堆内存分配\n\n注意若使用这种方法:project build target 只能选择 <= 2.2 版本，否则编译将通不过。 所以不建议用这种方式\n\n常见的内存使用不当的情况 1、查询数据库没有关闭游标 程序中经常会进行查询数据库的操作，但是经常会有使用完毕Cursor后没有关闭的情况。如果我们的查询结果集 比较小，对内存的消耗不容易被发现，只有在常时间大量操作的情况下才会复现内存问题，这样就会给以后的测 试和问题排查带来困难和风险。\n\nDrawable bg = getResources().getDrawable(R.drawable.bg); XXX.setBackgroundDrawable(rlAdDetailone_bg);\n\nprivate final static int CWJ_HEAP_SIZE= 6*1024*1024;\nprivate final static float TARGET_HEAP_UTILIZATION = 0.75f; VMRuntime.getRuntime().setMinimumHeapSize(CWJ_HEAP_SIZE); VMRuntime.getRuntime().setTargetHeapUtilization(TARGET_HEAP_UTILIZATION);\n\nCursor cursor = null; try {\n\ncursor = getContentResolver().query(uri ...); if (cursor != null && cursor.moveToNext()) { ... ...\n}\n\n} finally {\nif (cursor != null) {\n\ntry { cursor.close();\n\n} catch (Exception e) {\n\n//ignore this }\n\n} }\n\n2、构造Adapter时，没有使用缓存的 convertView\n\n圣制作\n\n以构造ListView的BaseAdapter为例，在BaseAdapter中提供了方法: public View getView(int position, View convertView, ViewGroup parent)\n\n来向ListView提供每一个item所需要的view对象。初始时ListView会从BaseAdapter中根据当前的屏幕布局实例 化一定数量的 view对象，同时ListView会将这些view对象缓存起来。当向上滚动ListView时，原先位于最上面的 list item的view对象会被回收，然后被用来构造新出现的最下面的list item。这个构造过程就是由getView()方法完 成的，getView()的第二个形参 View convertView就是被缓存起来的list item的view对象(初始化时缓存中没有view对 象则convertView是null)。\n\n由此可以看出，如果我们不去使用convertView，而是每次都在getView()中重新实例化一个View对象的话，即 浪费资源也浪费时间，也会使得内存占用越来越大。ListView回收list item的view对象的过程可以查看:\n\npublic View getView(int position, View convertView, ViewGroup parent) { View view = null;\nif (convertView != null) {\nview = convertView;\n\npopulate(view, getItem(position)); ...\n} else {\nview = new Xxx(...);\n\n...\n}\nreturn view;\n\n}\n\n3、Bitmap对象不在使用时调用recycle()释放内存 有时我们会手工的操作Bitmap对象，如果一个Bitmap对象比较占内存，当它不在被使用的时候，可以调用\n\nBitmap.recycle()方法回收此对象的像素所占用的内存，但这不是必须的，视情况而定。可以看一下代码中的注 释:\n\n4、释放对象的引用 当一个生命周期较短的对象A，被一个生命周期较长的对象B保有其引用的情况下，在A的生命周期结束时，\n\n要在B中清除掉对A的引用。 示例A:\n\npublic class DemoActivity extends Activity { ... ...\n\nprivate Handler mHandler = ... private Object obj;\npublic void operation() {\nobj = initObj();\n\n...\n[Mark]\nmHandler.post(new Runnable() {\n\npublic void run() { useObj(obj);\n}\n\n});\n\n} }\n\n我们有一个成员变量 obj，在operation()中我们希望能够将处理obj实例的操作post到某个线程的MessageQueue 中。在以上的代码中，即便是 mHandler所在的线程使用完了obj所引用的对象，但这个对象仍然不会被垃圾回收 掉，因为DemoActivity.obj还保有这个对象的引用。 所以如果在DemoActivity中不再使用这个对象了，可以在 [Mark]的位置释放对象的引用，而代码可以修改为:\n\n... ...\npublic void operation() {\n\nobj = initObj();\n...\nfinal Object o = obj;\nobj = null;\nmHandler.post(new Runnable() { public void run() {\n\nuseObj(o); }\n}\n\n圣制作\n\n}\n... ...\n\n示例B: 假设我们希望在锁屏界面(LockScreen)中，监听系统中的电话服务以获取一些信息(如信号强度等)，则可以在\n\nLockScreen中定义一个 PhoneStateListener的对象，同时将它注册到TelephonyManager服务中。对于LockScreen对 象，当需要显示锁屏界 面的时候就会创建一个LockScreen对象，而当锁屏界面消失的时候LockScreen对象就会被 释放掉。\n\n但是如果在释放LockScreen对象的时候忘记取消我们之前注册的PhoneStateListener对象，则会导致LockScreen无 法被垃 圾回收。如果不断的使锁屏界面显示和消失，则最终会由于大量的LockScreen对象没有办法被回收而引起 OutOfMemory,使得 system_process进程挂掉。\n\n5、其他 Android应用程序中最典型的需要注意释放资源的情况是在Activity的生命周期中，在onPause()、onStop()、\n\nonDestroy()方法中需要适当的释放资源的情况。由于此情况很基础，在此不详细说明，具体可以查看官方文档对 Activity生命周期的介绍，以 明确何时应该释放哪些资源。"]],[41454,41454],[49196,49196]]],[1512196108846,["gengmei_pxf@gengmei123.lan",[[1,41454,"\n"]],[41453,41453],[41454,41454]]],[1512196109013,["gengmei_pxf@gengmei123.lan",[[1,41455,"\n"]],[41454,41454],[41455,41455]]],[1512196109949,["gengmei_pxf@gengmei123.lan",[[1,41454,"1).资源对象没关闭造成的内存泄漏\n\n2).构造Adapter时，没有使用缓存的convertView\n\n3).Bitmap对象不在使用时调用recycle()释放内存\n\n4).试着使用关于application的context来替代和activity相关的context\n\n5).注册没取消造成的内存泄漏\n\n6).集合中对象没清理造成的内存泄漏\n\n作者：gexinzhao\n链接：http://www.jianshu.com/p/251b1bf72cd8\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[41454,41454],[41723,41723]]],[1512196120092,["gengmei_pxf@gengmei123.lan",[[1,41453,"**产生的内存泄露**"]],[41453,41453],[41464,41464]]],[1512196131190,["gengmei_pxf@gengmei123.lan",[[-1,41640,"作者：gexinzhao\n链接：http://www.jianshu.com/p/251b1bf72cd8\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[41640,41734],[41640,41640]]],[1512196131621,["gengmei_pxf@gengmei123.lan",[[-1,41641,"\n"]],[41640,41640],[41639,41639]]],[1512196132189,["gengmei_pxf@gengmei123.lan",[[-1,41640,"\n"]],[41639,41639],[41638,41638]]],[1512196143786,["gengmei_pxf@gengmei123.lan",[[1,41757,"\n"]],[41757,41757],[41758,41758]]],[1512196146780,["gengmei_pxf@gengmei123.lan",[[1,41814,"\n"]],[41814,41814],[41815,41815]]],[1512196149724,["gengmei_pxf@gengmei123.lan",[[1,41859,"\n"]],[41859,41859],[41860,41860]]],[1512196153348,["gengmei_pxf@gengmei123.lan",[[-1,41871,"\n"]],[41871,41871],[41870,41870]]],[1512196158788,["gengmei_pxf@gengmei123.lan",[[-1,41860," "]],[41861,41861],[41860,41860]]],[1512196161651,["gengmei_pxf@gengmei123.lan",[[-1,41758," "]],[41759,41759],[41758,41758]]],[1512196168907,["gengmei_pxf@gengmei123.lan",[[-1,41978,"\n圣制作\n\n多)"]],[41978,41986],[41978,41978]]],[1512196170264,["gengmei_pxf@gengmei123.lan",[[1,41978,"\n"]],[41978,41978],[41979,41979]]],[1512196212962,["gengmei_pxf@gengmei123.lan",[[-1,41978,"\n"]],[41978,41978],[41977,41977]]],[1512196217276,["gengmei_pxf@gengmei123.lan",[[1,41977,"多）"]],[41977,41977],[41979,41979]]],[1512196221609,["gengmei_pxf@gengmei123.lan",[[-1,41980,"，"]],[41981,41981],[41980,41980]]],[1512196230950,["gengmei_pxf@gengmei123.lan",[[1,42017,"\n"]],[42017,42017],[42018,42018]]],[1512196233951,["gengmei_pxf@gengmei123.lan",[[-1,42052,"\n"]],[42052,42052],[42051,42051]]],[1512196242689,["gengmei_pxf@gengmei123.lan",[[1,41992,"```"]],[41992,41992],[41995,41995]]],[1512196244688,["gengmei_pxf@gengmei123.lan",[[1,42062,"```"]],[42062,42062],[42065,42065]]],[1512196265512,["gengmei_pxf@gengmei123.lan",[[1,42183,"```"]],[42183,42183],[42186,42186]]],[1512196273200,["gengmei_pxf@gengmei123.lan",[[1,42518,"````"]],[42518,42518],[42522,42522]]],[1512196277103,["gengmei_pxf@gengmei123.lan",[[-1,42520,"``"]],[42522,42522],[42520,42520]]],[1512196278264,["gengmei_pxf@gengmei123.lan",[[1,42520,"`"]],[42520,42520],[42521,42521]]],[1512196289095,["gengmei_pxf@gengmei123.lan",[[-1,42394,"\n"]],[42395,42395],[42394,42394]]],[1512196290670,["gengmei_pxf@gengmei123.lan",[[1,42394,"\t"]],[42394,42394],[42395,42395]]],[1512196294054,["gengmei_pxf@gengmei123.lan",[[-1,42449,"\n"]],[42450,42450],[42449,42449]]],[1512196297715,["gengmei_pxf@gengmei123.lan",[[-1,42491,"\n"]],[42492,42492],[42491,42491]]],[1512196301374,["gengmei_pxf@gengmei123.lan",[[-1,42274,"\n"]],[42274,42274],[42273,42273]]],[1512196304390,["gengmei_pxf@gengmei123.lan",[[1,42274,"\t"]],[42274,42274],[42275,42275]]],[1512196305661,["gengmei_pxf@gengmei123.lan",[[1,42298,"\t"]],[42298,42298],[42299,42299]]],[1512196310032,["gengmei_pxf@gengmei123.lan",[[1,42336,"\t\t\tv"]],[42336,42336],[42340,42340]]],[1512196311070,["gengmei_pxf@gengmei123.lan",[[-1,42339,"v"]],[42340,42340],[42339,42339]]],[1512196312175,["gengmei_pxf@gengmei123.lan",[[1,42339,"   "]],[42339,42339],[42342,42342]]],[1512196314261,["gengmei_pxf@gengmei123.lan",[[1,42374,"\t"]],[42374,42374],[42375,42375]]],[1512196318624,["gengmei_pxf@gengmei123.lan",[[1,42342,"  fgfgfg"]],[42342,42342],[42350,42350]]],[1512196321254,["gengmei_pxf@gengmei123.lan",[[-1,42348,"fg"]],[42350,42350],[42348,42348]]],[1512196324889,["gengmei_pxf@gengmei123.lan",[[-1,42344,"fgfg"],[1,42348,"   "]],[42344,42348],[42347,42347]]],[1512196327797,["gengmei_pxf@gengmei123.lan",[[-1,42342,"     "]],[42347,42347],[42342,42342]]],[1512196331485,["gengmei_pxf@gengmei123.lan",[[1,42457,"\t"]],[42457,42457],[42458,42458]]],[1512196334356,["gengmei_pxf@gengmei123.lan",[[1,42500,"\t"]],[42500,42500],[42501,42501]]],[1512196345676,["gengmei_pxf@gengmei123.lan",[[1,42299,"\t"],[1,42374,"\t"]],[42342,42377],[42343,42379]]],[1512196347944,["gengmei_pxf@gengmei123.lan",[[-1,42299,"\t"],[-1,42375,"\t"]],[42343,42379],[42342,42377]]],[1512196357780,["gengmei_pxf@gengmei123.lan",[[1,42335,"\n"]],[42335,42335],[42336,42336]]],[1512196368044,["gengmei_pxf@gengmei123.lan",[[-1,42336," \t\t\t "]],[42336,42338],[42336,42336]]],[1512196369903,["gengmei_pxf@gengmei123.lan",[[1,42338,"  "]],[42336,42336],[42338,42338]]],[1512196381567,["gengmei_pxf@gengmei123.lan",[[1,42340," "]],[42340,42340],[42341,42341]]],[1512196392487,["gengmei_pxf@gengmei123.lan",[[1,42341,"   "]],[42341,42341],[42344,42344]]],[1512196413512,["gengmei_pxf@gengmei123.lan",[[1,41465,"\n"]],[41464,41464],[41465,41465]]],[1512196415433,["gengmei_pxf@gengmei123.lan",[[1,41453,"\n"]],[41452,41452],[41453,41453]]],[1512196476055,["gengmei_pxf@gengmei123.lan",[[1,42746,"\n"]],[42746,42746],[42747,42747]]],[1512196480001,["gengmei_pxf@gengmei123.lan",[[-1,42747," "],[1,42748,"**"]],[42747,42748],[42749,42749]]],[1512196483361,["gengmei_pxf@gengmei123.lan",[[1,42762,"**"]],[42762,42762],[42764,42764]]],[1512196492173,["gengmei_pxf@gengmei123.lan",[[1,42747,"\n"]],[42746,42746],[42747,42747]]],[1512196516445,["gengmei_pxf@gengmei123.lan",[[-1,42884,"\n"]],[42884,42884],[42883,42883]]],[1512196520948,["gengmei_pxf@gengmei123.lan",[[1,42809,"\n"]],[42809,42809],[42810,42810]]],[1512196523044,["gengmei_pxf@gengmei123.lan",[[-1,42810," "]],[42811,42811],[42810,42810]]],[1512196531789,["gengmei_pxf@gengmei123.lan",[[1,42808,"\n"]],[42808,42808],[42809,42809]]],[1512196533116,["gengmei_pxf@gengmei123.lan",[[-1,42808,"\n"]],[42809,42809],[42808,42808]]],[1512196534019,["gengmei_pxf@gengmei123.lan",[[1,42810,"\n"]],[42809,42809],[42810,42810]]],[1512196535491,["gengmei_pxf@gengmei123.lan",[[1,42892,"\n"]],[42891,42891],[42892,42892]]],[1512197186069,["gengmei_pxf@gengmei123.lan",[[1,41762,"**"]],[41762,41762],[41764,41764]]],[1512197189284,["gengmei_pxf@gengmei123.lan",[[1,41770,"**"]],[41770,41770],[41772,41772]]],[1512197191721,["gengmei_pxf@gengmei123.lan",[[1,41820,"\n"]],[41820,41820],[41821,41821]]],[1512197194308,["gengmei_pxf@gengmei123.lan",[[1,41823,"**"]],[41823,41823],[41825,41825]]],[1512197197317,["gengmei_pxf@gengmei123.lan",[[1,41833,"**"]],[41833,41833],[41835,41835]]],[1512197200001,["gengmei_pxf@gengmei123.lan",[[1,41870,"\n"]],[41870,41870],[41871,41871]]],[1512197204564,["gengmei_pxf@gengmei123.lan",[[1,41873,"**"]],[41873,41873],[41875,41875]]],[1512197207964,["gengmei_pxf@gengmei123.lan",[[1,41881,"**"]],[41881,41881],[41883,41883]]],[1512197227332,["gengmei_pxf@gengmei123.lan",[[1,43010,"**"]],[43010,43010],[43012,43012]]],[1512197230267,["gengmei_pxf@gengmei123.lan",[[1,43020,"**"]],[43020,43020],[43022,43022]]],[1512197237455,["gengmei_pxf@gengmei123.lan",[[1,43023,"\n"]],[43023,43023],[43024,43024]]],[1512197238885,["gengmei_pxf@gengmei123.lan",[[-1,43023,"\n"]],[43024,43024],[43023,43023]]],[1512197239999,["gengmei_pxf@gengmei123.lan",[[1,43023,"\n"]],[43023,43023],[43024,43024]]],[1512197241351,["gengmei_pxf@gengmei123.lan",[[-1,43024," "]],[43025,43025],[43024,43024]]],[1512197258128,["gengmei_pxf@gengmei123.lan",[[1,43063,"··"]],[43063,43063],[43065,43065]]],[1512197259103,["gengmei_pxf@gengmei123.lan",[[-1,43063,"··"]],[43065,43065],[43063,43063]]],[1512197260910,["gengmei_pxf@gengmei123.lan",[[1,43063,"```"]],[43063,43063],[43066,43066]]],[1512197263964,["gengmei_pxf@gengmei123.lan",[[1,43371,"```"]],[43371,43371],[43374,43374]]],[1512197273390,["gengmei_pxf@gengmei123.lan",[[-1,43366,"\n"]],[43366,43366],[43365,43365]]],[1512197275182,["gengmei_pxf@gengmei123.lan",[[-1,43349,"\n"]],[43349,43349],[43348,43348]]],[1512197276990,["gengmei_pxf@gengmei123.lan",[[-1,43335,"\n"]],[43335,43335],[43334,43334]]],[1512197278863,["gengmei_pxf@gengmei123.lan",[[-1,43304,"\n"]],[43304,43304],[43303,43303]]],[1512197282341,["gengmei_pxf@gengmei123.lan",[[-1,43262,"\n"]],[43262,43262],[43261,43261]]],[1512197285093,["gengmei_pxf@gengmei123.lan",[[-1,43170,"\n"]],[43170,43170],[43169,43169]]],[1512197287573,["gengmei_pxf@gengmei123.lan",[[1,43236,"\n"]],[43236,43236],[43237,43237]]],[1512197290005,["gengmei_pxf@gengmei123.lan",[[-1,43237," "]],[43238,43238],[43237,43237]]],[1512197297805,["gengmei_pxf@gengmei123.lan",[[1,43170,"\t"],[1,43237,"\t"]],[43170,43260],[43170,43262]]],[1512197316148,["gengmei_pxf@gengmei123.lan",[[-1,43206," "]],[43206,43207],[43206,43206]]],[1512197317116,["gengmei_pxf@gengmei123.lan",[[1,43206,"\n"]],[43206,43206],[43207,43207]]],[1512197318116,["gengmei_pxf@gengmei123.lan",[[1,43207,"\t"]],[43207,43207],[43208,43208]]],[1512197321340,["gengmei_pxf@gengmei123.lan",[[1,43305,"\t"]],[43305,43305],[43306,43306]]],[1512197322452,["gengmei_pxf@gengmei123.lan",[[1,43336,"\t"]],[43336,43336],[43337,43337]]],[1512197323516,["gengmei_pxf@gengmei123.lan",[[1,43350,"\t"]],[43350,43350],[43351,43351]]],[1512197329521,["gengmei_pxf@gengmei123.lan",[[1,43369,"\n"]],[43369,43369],[43370,43370]]],[1512197331545,["gengmei_pxf@gengmei123.lan",[[1,43367,"\t"]],[43367,43367],[43368,43368]]],[1512197343014,["gengmei_pxf@gengmei123.lan",[[1,43109,"\n"]],[43109,43109],[43110,43110]]],[1512197346344,["gengmei_pxf@gengmei123.lan",[[1,43121,"\t"]],[43121,43121],[43122,43122]]],[1512197348952,["gengmei_pxf@gengmei123.lan",[[1,43111,"\t"]],[43111,43111],[43112,43112]]],[1512197368544,["gengmei_pxf@gengmei123.lan",[[-1,43847,"圣制作\n\n"]],[43846,43851],[43846,43846]]],[1512197368920,["gengmei_pxf@gengmei123.lan",[[-1,43846,"\n"]],[43846,43846],[43845,43845]]],[1512197369879,["gengmei_pxf@gengmei123.lan",[[1,43846,"\n"]],[43845,43845],[43846,43846]]],[1512197375939,["gengmei_pxf@gengmei123.lan",[[1,43847,"**"]],[43847,43847],[43849,43849]]],[1512197378619,["gengmei_pxf@gengmei123.lan",[[1,43854,"**"]],[43854,43854],[43856,43856]]],[1512197380335,["gengmei_pxf@gengmei123.lan",[[1,43858,"\n"]],[43857,43857],[43858,43858]]],[1512197486988,["gengmei_pxf@gengmei123.lan",[[-1,43650," "]],[43651,43651],[43650,43650]]],[1512197494379,["gengmei_pxf@gengmei123.lan",[[-1,43718," "]],[43719,43719],[43718,43718]]],[1512197500747,["gengmei_pxf@gengmei123.lan",[[-1,43784," "]],[43785,43785],[43784,43784]]],[1512197528570,["gengmei_pxf@gengmei123.lan",[[1,43899,"\n"]],[43899,43899],[43900,43900]]],[1512197529201,["gengmei_pxf@gengmei123.lan",[[1,43900,"\n"]],[43900,43900],[43901,43901]]],[1512197531250,["gengmei_pxf@gengmei123.lan",[[-1,43901," "]],[43902,43902],[43901,43901]]],[1512197575069,["gengmei_pxf@gengmei123.lan",[[-1,44008," "]],[44009,44009],[44008,44008]]],[1512197581380,["gengmei_pxf@gengmei123.lan",[[1,44103,"\n"]],[44103,44103],[44104,44104]]],[1512197593938,["gengmei_pxf@gengmei123.lan",[[-1,44191," "]],[44192,44192],[44191,44191]]],[1512197597276,["gengmei_pxf@gengmei123.lan",[[1,44191," "]],[44191,44191],[44192,44192]]],[1512197844737,["gengmei_pxf@gengmei123.lan",[[1,44216,"\n"]],[44216,44216],[44217,44217]]],[1512197846680,["gengmei_pxf@gengmei123.lan",[[-1,44217," "]],[44218,44218],[44217,44217]]],[1512197936336,["gengmei_pxf@gengmei123.lan",[[-1,44244,"//解决加载图片 内存溢出的问题 //Options 只保存图片尺寸大小，不保存图片到内存"]],[44244,44289],[44244,44244]]],[1512197937181,["gengmei_pxf@gengmei123.lan",[[-1,44245,"\n"]],[44244,44244],[44243,44243]]],[1512197937645,["gengmei_pxf@gengmei123.lan",[[-1,44244,"\n"]],[44243,44243],[44242,44242]]],[1512197940276,["gengmei_pxf@gengmei123.lan",[[1,44156,"\n"]],[44155,44155],[44156,44156]]],[1512197940663,["gengmei_pxf@gengmei123.lan",[[1,44156,"//解决加载图片 内存溢出的问题 //Options 只保存图片尺寸大小，不保存图片到内存"]],[44156,44156],[44201,44201]]],[1512197942874,["gengmei_pxf@gengmei123.lan",[[1,44173,"\n"]],[44173,44173],[44174,44174]]],[1512197948719,["gengmei_pxf@gengmei123.lan",[[-1,44349,"//缩放的比例，缩放是很难按准备的比例进行缩放的，其值表明缩放的倍数，SDK中建议其值是2的指数"]],[44349,44397],[44349,44349]]],[1512197950404,["gengmei_pxf@gengmei123.lan",[[1,44291,"\n"]],[44290,44290],[44291,44291]]],[1512197951246,["gengmei_pxf@gengmei123.lan",[[1,44291,"//缩放的比例，缩放是很难按准备的比例进行缩放的，其值表明缩放的倍数，SDK中建议其值是2的指数"]],[44291,44291],[44339,44339]]],[1512197965134,["gengmei_pxf@gengmei123.lan",[[-1,44400,"值,值越大会导致图片不清晰"]],[44400,44413],[44400,44400]]],[1512197966965,["gengmei_pxf@gengmei123.lan",[[1,44339,"值,值越大会导致图片不清晰"]],[44339,44339],[44352,44352]]],[1512197970249,["gengmei_pxf@gengmei123.lan",[[-1,44413," "]],[44414,44414],[44413,44413]]],[1512197970708,["gengmei_pxf@gengmei123.lan",[[-1,44412,"\n"]],[44413,44413],[44412,44412]]],[1512197978875,["gengmei_pxf@gengmei123.lan",[[-1,44435,"\n"]],[44435,44435],[44434,44434]]],[1512197984957,["gengmei_pxf@gengmei123.lan",[[-1,44537,"//回收"]],[44537,44541],[44537,44537]]],[1512197989077,["gengmei_pxf@gengmei123.lan",[[1,44536,"//回收"]],[44536,44536],[44540,44540]]],[1512197990595,["gengmei_pxf@gengmei123.lan",[[-1,44541," "]],[44542,44542],[44541,44541]]],[1512197994050,["gengmei_pxf@gengmei123.lan",[[1,44203,"\n"]],[44202,44202],[44203,44203]]],[1512197994978,["gengmei_pxf@gengmei123.lan",[[1,44204,"\n"]],[44203,44203],[44204,44204]]],[1512197995932,["gengmei_pxf@gengmei123.lan",[[1,44204,"```"]],[44204,44204],[44207,44207]]],[1512197997730,["gengmei_pxf@gengmei123.lan",[[1,44296,"\n"]],[44294,44294],[44295,44295]]],[1512197998395,["gengmei_pxf@gengmei123.lan",[[1,44295,"```"]],[44295,44295],[44298,44298]]],[1512198000865,["gengmei_pxf@gengmei123.lan",[[1,44362,"\n"]],[44361,44361],[44362,44362]]],[1512198001547,["gengmei_pxf@gengmei123.lan",[[1,44362,"```"]],[44362,44362],[44365,44365]]],[1512198003443,["gengmei_pxf@gengmei123.lan",[[1,44569,"```"]],[44569,44569],[44572,44572]]],[1512198019282,["gengmei_pxf@gengmei123.lan",[[-1,44362,"```"]],[44362,44365],[44362,44362]]],[1512198019818,["gengmei_pxf@gengmei123.lan",[[-1,44362,"\n"]],[44362,44362],[44361,44361]]],[1512198022122,["gengmei_pxf@gengmei123.lan",[[-1,44299,"\n"]],[44299,44299],[44298,44298]]],[1512198023103,["gengmei_pxf@gengmei123.lan",[[-1,44295,"```"]],[44298,44298],[44295,44295]]],[1512198023842,["gengmei_pxf@gengmei123.lan",[[-1,44295,"\n"]],[44295,44295],[44294,44294]]],[1512198029933,["gengmei_pxf@gengmei123.lan",[[-1,44204,"```"],[1,44207,"≈"]],[44204,44207],[44205,44205]]],[1512198034371,["gengmei_pxf@gengmei123.lan",[[1,44155,"//回收"]],[44155,44155],[44159,44159]]],[1512198035931,["gengmei_pxf@gengmei123.lan",[[-1,44155,"//回收"]],[44159,44159],[44155,44155]]],[1512198036898,["gengmei_pxf@gengmei123.lan",[[1,44204,"```"],[-1,44204,"≈"]],[44205,44205],[44204,44207]]],[1512198038628,["gengmei_pxf@gengmei123.lan",[[-1,44204,"```"],[1,44207,"//回收"]],[44204,44207],[44208,44208]]],[1512198043891,["gengmei_pxf@gengmei123.lan",[[1,44204,"```"],[-1,44204,"//回收```"]],[44208,44208],[44204,44204]]],[1512198047307,["gengmei_pxf@gengmei123.lan",[[1,44155,"```"]],[44155,44155],[44158,44158]]],[1512198048977,["gengmei_pxf@gengmei123.lan",[[-1,44207,"\n"]],[44207,44207],[44206,44206]]],[1512198049409,["gengmei_pxf@gengmei123.lan",[[-1,44206,"\n"]],[44206,44206],[44205,44205]]],[1512198051688,["gengmei_pxf@gengmei123.lan",[[1,44293,"\n"]],[44292,44292],[44293,44293]]],[1512198122671,[null,[[-1,44206,"``"],[1,44208,"Bi"]],[44206,44206],[44210,44210]]],[1512198122671,[null,[[1,44206,"``"],[-1,44206,"Bi"]],[44210,44210],[44206,44206]]],[1512198065641,["gengmei_pxf@gengmei123.lan",[[-1,44576,"\n"]],[44576,44576],[44575,44575]]],[1512198071568,["gengmei_pxf@gengmei123.lan",[[1,44612,"\n"]],[44612,44612],[44613,44613]]],[1512198074320,["gengmei_pxf@gengmei123.lan",[[-1,44613," "]],[44614,44614],[44613,44613]]],[1512198182676,[null,[[-1,44206,"``"],[1,44208,"Bi"]],[44206,44206],[44210,44210]]],[1512198182676,[null,[[1,44206,"``"],[-1,44206,"Bi"]],[44210,44210],[44206,44206]]],[1512198123486,["gengmei_pxf@gengmei123.lan",[[1,43940,"\n"]],[43940,43940],[43941,43941]]],[1512198126842,["gengmei_pxf@gengmei123.lan",[[1,43941,"**"]],[43941,43941],[43943,43943]]],[1512198131282,["gengmei_pxf@gengmei123.lan",[[1,43956,"**"]],[43956,43956],[43958,43958]]],[1512198142047,["gengmei_pxf@gengmei123.lan",[[1,44680,"\n"]],[44680,44680],[44681,44681]]],[1512198145362,["gengmei_pxf@gengmei123.lan",[[-1,44681," "],[1,44682,"**"]],[44681,44682],[44683,44683]]],[1512198149409,["gengmei_pxf@gengmei123.lan",[[1,44695,"**"]],[44695,44695],[44697,44697]]],[1512198242673,[null,[[-1,44211,"``"],[1,44213,"Bi"]],[44211,44211],[44215,44215]]],[1512198242673,[null,[[1,44211,"``"],[-1,44211,"Bi"]],[44215,44215],[44211,44211]]],[1512198204834,["gengmei_pxf@gengmei123.lan",[[1,44725,"```"]],[44725,44725],[44728,44728]]],[1512198211486,["gengmei_pxf@gengmei123.lan",[[-1,44843,"//图片宽高都为原来的二分之一，即图片为原来的四分之一"]],[44843,44870],[44843,44843]]],[1512198213741,["gengmei_pxf@gengmei123.lan",[[1,44817,"//图片宽高都为原来的二分之一，即图片为原来的四分之一"]],[44817,44817],[44844,44844]]],[1512198215844,["gengmei_pxf@gengmei123.lan",[[-1,44871,"\n"]],[44871,44871],[44870,44870]]],[1512198217796,["gengmei_pxf@gengmei123.lan",[[-1,44987,"\n"]],[44987,44987],[44986,44986]]],[1512198220466,["gengmei_pxf@gengmei123.lan",[[-1,45147,"\n"]],[45147,45147],[45146,45146]]],[1512198226046,["gengmei_pxf@gengmei123.lan",[[-1,45172,"//图片宽高都为原来的二分之一，即图片为原来的四分之一 "]],[45172,45200],[45172,45172]]],[1512198227451,["gengmei_pxf@gengmei123.lan",[[1,45147,"\n"]],[45146,45146],[45147,45147]]],[1512198228299,["gengmei_pxf@gengmei123.lan",[[1,45147,"v"]],[45147,45147],[45148,45148]]],[1512198229643,["gengmei_pxf@gengmei123.lan",[[-1,45147,"v"]],[45148,45148],[45147,45147]]],[1512198230117,["gengmei_pxf@gengmei123.lan",[[1,45147,"//图片宽高都为原来的二分之一，即图片为原来的四分之一 "]],[45147,45147],[45175,45175]]],[1512198234075,["gengmei_pxf@gengmei123.lan",[[1,45201,"\n"]],[45201,45201],[45202,45202]]],[1512198236083,["gengmei_pxf@gengmei123.lan",[[-1,45258,"\n"]],[45258,45258],[45257,45257]]],[1512198237787,["gengmei_pxf@gengmei123.lan",[[-1,45313,"\n"]],[45313,45313],[45312,45312]]],[1512198239379,["gengmei_pxf@gengmei123.lan",[[-1,45408,"\n"]],[45408,45408],[45407,45407]]],[1512198242226,["gengmei_pxf@gengmei123.lan",[[-1,45495," "]],[45496,45496],[45495,45495]]],[1512198302679,[null,[[-1,44211,"``"],[1,44213,"Bi"]],[44211,44211],[44215,44215]]],[1512198302679,[null,[[1,44211,"``"],[-1,44211,"Bi"]],[44215,44215],[44211,44211]]],[1512198245235,["gengmei_pxf@gengmei123.lan",[[-1,45488,"\n"]],[45488,45488],[45487,45487]]],[1512198247051,["gengmei_pxf@gengmei123.lan",[[-1,45504,"\n"]],[45504,45504],[45503,45503]]],[1512198253219,["gengmei_pxf@gengmei123.lan",[[-1,45601,"圣制作\n\n"]],[45600,45605],[45600,45600]]],[1512198253715,["gengmei_pxf@gengmei123.lan",[[-1,45600,"\n"]],[45600,45600],[45599,45599]]],[1512198264049,["gengmei_pxf@gengmei123.lan",[[1,46092,"\t\t\t"]],[46092,46092],[46095,46095]]],[1512198266442,["gengmei_pxf@gengmei123.lan",[[-1,46092,"\t\t\t"]],[46095,46095],[46092,46092]]],[1512198267608,["gengmei_pxf@gengmei123.lan",[[1,46092,"```"]],[46092,46092],[46095,46095]]],[1512198269658,["gengmei_pxf@gengmei123.lan",[[-1,46068,"\n"]],[46068,46068],[46067,46067]]],[1512198271537,["gengmei_pxf@gengmei123.lan",[[1,46088,"\n"]],[46088,46088],[46089,46089]]],[1512198274618,["gengmei_pxf@gengmei123.lan",[[1,46068,"\t"]],[46068,46068],[46069,46069]]],[1512198281882,["gengmei_pxf@gengmei123.lan",[[-1,45915,"\n"]],[45915,45915],[45914,45914]]],[1512198286337,["gengmei_pxf@gengmei123.lan",[[1,45600,"\t\t\t\t\t\t\t\t\t\t\t\t"]],[45600,45600],[45612,45612]]],[1512198287368,["gengmei_pxf@gengmei123.lan",[[-1,45600,"\t\t\t\t\t\t\t\t\t\t\t\t"]],[45612,45612],[45600,45600]]],[1512198292769,["gengmei_pxf@gengmei123.lan",[[-1,45681,"\n"]],[45681,45681],[45680,45680]]],[1512198295072,["gengmei_pxf@gengmei123.lan",[[-1,45732,"\n"]],[45732,45732],[45731,45731]]],[1512198299075,["gengmei_pxf@gengmei123.lan",[[1,45600,"\t"],[1,45619,"\t"],[1,45681,"\t"],[1,45732,"\t"],[1,45827,"\t"]],[45600,45912],[45600,45917]]],[1512198362683,[null,[[-1,44211,"``"],[1,44213,"Bi"]],[44211,44211],[44215,44215]]],[1512198362683,[null,[[1,44211,"``"],[-1,44211,"Bi"]],[44215,44215],[44211,44211]]],[1512198309673,["gengmei_pxf@gengmei123.lan",[[-1,45854," "]],[45854,45855],[45854,45854]]],[1512198310825,["gengmei_pxf@gengmei123.lan",[[1,45854,"\n"]],[45854,45854],[45855,45855]]],[1512198324904,["gengmei_pxf@gengmei123.lan",[[1,45387,"\n"]],[45387,45387],[45388,45388]]],[1512198328928,["gengmei_pxf@gengmei123.lan",[[1,45502,"\n"]],[45502,45502],[45503,45503]]],[1512198332384,["gengmei_pxf@gengmei123.lan",[[1,45409,"\t"],[1,45489,"\t"]],[45409,45492],[45409,45494]]],[1512198335576,["gengmei_pxf@gengmei123.lan",[[-1,45388," "]],[45389,45389],[45388,45388]]],[1512198422688,[null,[[-1,44211,"``"],[1,44213,"Bi"]],[44211,44211],[44215,44215]]],[1512198422688,[null,[[1,44211,"``"],[-1,44211,"Bi"]],[44215,44215],[44211,44211]]],[1512198403484,["gengmei_pxf@gengmei123.lan",[[1,46102,"**"]],[46102,46102],[46104,46104]]],[1512198406016,["gengmei_pxf@gengmei123.lan",[[1,46110,"**"]],[46110,46110],[46112,46112]]],[1512198482692,[null,[[-1,44211,"``"],[1,44213,"Bi"]],[44211,44211],[44215,44215]]],[1512198482692,[null,[[1,44211,"``"],[-1,44211,"Bi"]],[44215,44215],[44211,44211]]],[1512198455347,["gengmei_pxf@gengmei123.lan",[[1,46413,"**"]],[46413,46413],[46415,46415]]],[1512198460042,["gengmei_pxf@gengmei123.lan",[[1,46421,"**"]],[46421,46421],[46423,46423]]],[1512198473270,["gengmei_pxf@gengmei123.lan",[[-1,46783,"\n"]],[46783,46783],[46782,46782]]],[1512198476030,["gengmei_pxf@gengmei123.lan",[[-1,47028,"\n"]],[47028,47028],[47027,47027]]],[1512198479150,["gengmei_pxf@gengmei123.lan",[[-1,47056,"\n"]],[47056,47056],[47055,47055]]],[1512198481174,["gengmei_pxf@gengmei123.lan",[[-1,47157,"\n"]],[47157,47157],[47156,47156]]],[1512198542744,[null,[[-1,44211,"``"],[1,44213,"Bi"]],[44211,44211],[44215,44215]]],[1512198542744,[null,[[1,44211,"``"],[-1,44211,"Bi"]],[44215,44215],[44211,44211]]],[1512198483411,["gengmei_pxf@gengmei123.lan",[[-1,47191,"\n"]],[47191,47191],[47190,47190]]],[1512198485133,["gengmei_pxf@gengmei123.lan",[[-1,47213,"\n"]],[47213,47213],[47212,47212]]],[1512198487917,["gengmei_pxf@gengmei123.lan",[[-1,47237,"\n"]],[47237,47237],[47236,47236]]],[1512198490237,["gengmei_pxf@gengmei123.lan",[[-1,47253,"\n"]],[47253,47253],[47252,47252]]],[1512198519359,["gengmei_pxf@gengmei123.lan",[[-1,46614," "]],[46615,46615],[46614,46614]]],[1512198523054,["gengmei_pxf@gengmei123.lan",[[-1,46663," "]],[46664,46664],[46663,46663]]],[1512198529758,["gengmei_pxf@gengmei123.lan",[[-1,47290,"圣制作\n\n"]],[47289,47294],[47289,47289]]],[1512198530366,["gengmei_pxf@gengmei123.lan",[[-1,47289,"\n"]],[47289,47289],[47288,47288]]],[1512198541093,["gengmei_pxf@gengmei123.lan",[[1,46547,"\n"]],[46547,46547],[46548,46548]]],[1512198542598,["gengmei_pxf@gengmei123.lan",[[-1,46547,"\n"]],[46548,46548],[46547,46547]]],[1512198602754,[null,[[-1,44211,"``"],[1,44213,"Bi"]],[44211,44211],[44215,44215]]],[1512198602754,[null,[[1,44211,"``"],[-1,44211,"Bi"]],[44215,44215],[44211,44211]]],[1512198543501,["gengmei_pxf@gengmei123.lan",[[1,46547,"\n"]],[46547,46547],[46548,46548]]],[1512198546238,["gengmei_pxf@gengmei123.lan",[[-1,46548," "]],[46548,46549],[46548,46548]]],[1512198551177,["gengmei_pxf@gengmei123.lan",[[1,46548,"**"]],[46548,46548],[46550,46550]]],[1512198553273,["gengmei_pxf@gengmei123.lan",[[1,46563,"**"]],[46563,46563],[46565,46565]]],[1512198558244,["gengmei_pxf@gengmei123.lan",[[1,46565,"\n"]],[46565,46565],[46566,46566]]],[1512198560077,["gengmei_pxf@gengmei123.lan",[[-1,46566," "]],[46567,46567],[46566,46566]]],[1512198566273,["gengmei_pxf@gengmei123.lan",[[1,46535,"**"]],[46535,46535],[46537,46537]]],[1512198568518,["gengmei_pxf@gengmei123.lan",[[1,46549,"**"]],[46549,46549],[46551,46551]]],[1512198573388,["gengmei_pxf@gengmei123.lan",[[1,46552,"\n"]],[46551,46551],[46552,46552]]],[1512198578616,["gengmei_pxf@gengmei123.lan",[[1,47265,"**"]],[47265,47265],[47267,47267]]],[1512198582053,["gengmei_pxf@gengmei123.lan",[[1,47299,"**"]],[47299,47299],[47301,47301]]],[1512198583121,["gengmei_pxf@gengmei123.lan",[[1,47302,"\n"]],[47301,47301],[47302,47302]]],[1512198587755,["gengmei_pxf@gengmei123.lan",[[1,46571,"\n"]],[46570,46570],[46571,46571]]],[1512198662751,[null,[[-1,44211,"``"],[1,44213,"Bi"]],[44211,44211],[44215,44215]]],[1512198662751,[null,[[1,44211,"``"],[-1,44211,"Bi"]],[44215,44215],[44211,44211]]],[1512198612747,["gengmei_pxf@gengmei123.lan",[[-1,47618," "]],[47619,47619],[47618,47618]]],[1512198619107,["gengmei_pxf@gengmei123.lan",[[-1,47714,"\n"]],[47714,47714],[47713,47713]]],[1512198628723,["gengmei_pxf@gengmei123.lan",[[-1,47774," "]],[47775,47775],[47774,47774]]],[1512198649395,["gengmei_pxf@gengmei123.lan",[[1,47832,"```"]],[47832,47832],[47835,47835]]],[1512198651267,["gengmei_pxf@gengmei123.lan",[[1,48066,"```"]],[48066,48066],[48069,48069]]],[1512198657822,["gengmei_pxf@gengmei123.lan",[[1,48070,"**"]],[48070,48070],[48072,48072]]],[1512198660126,["gengmei_pxf@gengmei123.lan",[[1,48102,"**"]],[48102,48102],[48104,48104]]],[1512198660666,["gengmei_pxf@gengmei123.lan",[[1,48104,"\n"]],[48104,48104],[48105,48105]]],[1512198722822,[null,[[-1,44211,"``"],[1,44213,"Bi"]],[44211,44211],[44215,44215]]],[1512198722822,[null,[[1,44211,"``"],[-1,44211,"Bi"]],[44215,44215],[44211,44211]]],[1512198662807,["gengmei_pxf@gengmei123.lan",[[-1,48105," "]],[48105,48106],[48105,48105]]],[1512198669250,["gengmei_pxf@gengmei123.lan",[[-1,48158,"\n"]],[48158,48158],[48157,48157]]],[1512198673098,["gengmei_pxf@gengmei123.lan",[[-1,48215," "]],[48216,48216],[48215,48215]]],[1512198689433,["gengmei_pxf@gengmei123.lan",[[-1,48205,"可以看一下代码中的注释:\n"]],[48205,48218],[48205,48205]]],[1512198691071,["gengmei_pxf@gengmei123.lan",[[1,48206,"\n"]],[48205,48205],[48206,48206]]],[1512198694677,["gengmei_pxf@gengmei123.lan",[[1,48207,"**"]],[48207,48207],[48209,48209]]],[1512198697052,["gengmei_pxf@gengmei123.lan",[[1,48218,"**"]],[48218,48218],[48220,48220]]],[1512198697800,["gengmei_pxf@gengmei123.lan",[[1,48220,"\n"]],[48220,48220],[48221,48221]]],[1512198699745,["gengmei_pxf@gengmei123.lan",[[-1,48221," "]],[48221,48222],[48221,48221]]],[1512198710877,["gengmei_pxf@gengmei123.lan",[[1,48290,"```"]],[48290,48290],[48293,48293]]],[1512198713617,["gengmei_pxf@gengmei123.lan",[[1,48531,"```"]],[48531,48531],[48534,48534]]],[1512198782817,[null,[[-1,44211,"``"],[1,44213,"Bi"]],[44211,44211],[44215,44215]]],[1512198782817,[null,[[1,44211,"``"],[-1,44211,"Bi"]],[44215,44215],[44211,44211]]],[1512198735813,["gengmei_pxf@gengmei123.lan",[[-1,48908,"圣制作\n\n"]],[48907,48912],[48907,48907]]],[1512198736389,["gengmei_pxf@gengmei123.lan",[[-1,48907,"\n"]],[48907,48907],[48906,48906]]],[1512198748593,["gengmei_pxf@gengmei123.lan",[[1,48750,"```"]],[48750,48750],[48753,48753]]],[1512198750335,["gengmei_pxf@gengmei123.lan",[[-1,48750,"```"]],[48753,48753],[48750,48750]]],[1512198753685,["gengmei_pxf@gengmei123.lan",[[1,48749,"```"]],[48749,48749],[48752,48752]]],[1512198755733,["gengmei_pxf@gengmei123.lan",[[1,48920,"```"]],[48920,48920],[48923,48923]]],[1512198769968,["gengmei_pxf@gengmei123.lan",[[1,49294,"**"]],[49294,49294],[49296,49296]]],[1512198777552,["gengmei_pxf@gengmei123.lan",[[1,49300,"**"]],[49300,49300],[49302,49302]]],[1512198779044,["gengmei_pxf@gengmei123.lan",[[1,49302,"\n"]],[49302,49302],[49303,49303]]],[1512198780996,["gengmei_pxf@gengmei123.lan",[[-1,49303," "]],[49303,49304],[49303,49303]]],[1512198842755,[null,[[-1,44211,"``"],[1,44213,"Bi"]],[44211,44211],[44215,44215]]],[1512198842755,[null,[[1,44211,"``"],[-1,44211,"Bi"]],[44215,44215],[44211,44211]]],[1512198803747,["gengmei_pxf@gengmei123.lan",[[-1,48347,"\n"]],[48347,48347],[48346,48346]]],[1512198805899,["gengmei_pxf@gengmei123.lan",[[-1,48441,"\n"]],[48441,48441],[48440,48440]]],[1512198807995,["gengmei_pxf@gengmei123.lan",[[-1,48483,"\n"]],[48483,48483],[48482,48482]]],[1512198809931,["gengmei_pxf@gengmei123.lan",[[-1,48518,"\n"]],[48518,48518],[48517,48517]]],[1512198811899,["gengmei_pxf@gengmei123.lan",[[-1,48522,"\n"]],[48522,48522],[48521,48521]]],[1512198819251,["gengmei_pxf@gengmei123.lan",[[-1,48782,"\n"]],[48782,48782],[48781,48781]]],[1512198822490,["gengmei_pxf@gengmei123.lan",[[-1,48888,"\n"]],[48888,48888],[48887,48887]]],[1512198834201,["gengmei_pxf@gengmei123.lan",[[-1,48978,"\n"]],[48978,48978],[48977,48977]]],[1512198836066,["gengmei_pxf@gengmei123.lan",[[-1,49123,"\n"]],[49123,49123],[49122,49122]]],[1512198902761,[null,[[-1,44211,"``"],[1,44213,"Bi"]],[44211,44211],[44215,44215]]],[1512198902761,[null,[[1,44211,"``"],[-1,44211,"Bi"]],[44215,44215],[44211,44211]]],[1512198852282,["gengmei_pxf@gengmei123.lan",[[-1,48445,"[Mark]"]],[48451,48451],[48445,48445]]],[1512198868849,["gengmei_pxf@gengmei123.lan",[[1,48445,"[Mark]"]],[48445,48445],[48451,48451]]],[1512198896448,["gengmei_pxf@gengmei123.lan",[[-1,48652," "]],[48653,48653],[48652,48652]]],[1512198962766,[null,[[-1,44211,"``"],[1,44213,"Bi"]],[44211,44211],[44215,44215]]],[1512198962766,[null,[[1,44211,"``"],[-1,44211,"Bi"]],[44215,44215],[44211,44211]]],[1512198944156,["gengmei_pxf@gengmei123.lan",[[-1,49247," "]],[49248,49248],[49247,49247]]],[1512198950831,["gengmei_pxf@gengmei123.lan",[[-1,49116," "]],[49117,49117],[49116,49116]]],[1512198953527,["gengmei_pxf@gengmei123.lan",[[-1,48992," "]],[48993,48993],[48992,48992]]],[1512198956327,["gengmei_pxf@gengmei123.lan",[[-1,49054," "]],[49055,49055],[49054,49054]]],[1512199022766,[null,[[-1,44211,"``"],[1,44213,"Bi"]],[44211,44211],[44215,44215]]],[1512199022766,[null,[[1,44211,"``"],[-1,44211,"Bi"]],[44215,44215],[44211,44211]]],[1512198963469,["gengmei_pxf@gengmei123.lan",[[-1,49258," "]],[49259,49259],[49258,49258]]],[1512198981963,["gengmei_pxf@gengmei123.lan",[[-1,49353,"\n"]],[49353,49353],[49352,49352]]],[1512198990243,["gengmei_pxf@gengmei123.lan",[[-1,49408," "]],[49409,49409],[49408,49408]]],[1512199082766,[null,[[-1,44211,"``"],[1,44213,"Bi"]],[44211,44211],[44215,44215]]],[1512199082766,[null,[[1,44211,"``"],[-1,44211,"Bi"]],[44215,44215],[44211,44211]]],[1512199041753,["gengmei_pxf@gengmei123.lan",[[-1,49425," "]],[49426,49426],[49425,49425]]],[1512199202785,[null,[[-1,44211,"``"],[1,44213,"Bi"]],[44211,44211],[44215,44215]]],[1512199202785,[null,[[1,44211,"``"],[-1,44211,"Bi"]],[44215,44215],[44211,44211]]],[1512199196267,["gengmei_pxf@gengmei123.lan",[[1,49470,"![]()"]],[49470,49470],[49475,49475]]],[1512199199530,["gengmei_pxf@gengmei123.lan",[[-1,49471,"[]()"]],[49475,49475],[49471,49471]]],[1512199201914,["gengmei_pxf@gengmei123.lan",[[1,49471,"()"]],[49471,49471],[49473,49473]]],[1512199262774,[null,[[-1,44211,"``"],[1,44213,"Bi"]],[44211,44211],[44215,44215]]],[1512199262774,[null,[[1,44211,"``"],[-1,44211,"Bi"]],[44215,44215],[44211,44211]]],[1512199205050,["gengmei_pxf@gengmei123.lan",[[1,49473,"\\"]],[49473,49473],[49474,49474]]],[1512199205906,["gengmei_pxf@gengmei123.lan",[[-1,49470,"!()\\"]],[49474,49474],[49470,49470]]],[1512199206226,["gengmei_pxf@gengmei123.lan",[[-1,49470,"\n"]],[49470,49470],[49469,49469]]],[1512199207385,["gengmei_pxf@gengmei123.lan",[[1,49470,"\n"]],[49469,49469],[49470,49470]]],[1512199209534,["gengmei_pxf@gengmei123.lan",[[1,49470,"[]()"]],[49470,49470],[49474,49474]]],[1512199211798,["gengmei_pxf@gengmei123.lan",[[1,49471,"# [Java 并发编程](http://www.cnblogs.com/paddix/p/5374810.html)"]],[49471,49471],[49530,49530]]],[1512199219500,["gengmei_pxf@gengmei123.lan",[[-1,49471,"# [Java 并发编程](http://www.cnblogs.com/paddix/p/5374810.html)"]],[49530,49530],[49471,49471]]],[1512199220470,["gengmei_pxf@gengmei123.lan",[[-1,49470,"[]()"]],[49474,49474],[49470,49470]]],[1512199221516,["gengmei_pxf@gengmei123.lan",[[1,49470,"# [Java 并发编程](http://www.cnblogs.com/paddix/p/5374810.html)"]],[49470,49470],[49529,49529]]],[1512199238313,["gengmei_pxf@gengmei123.lan",[[-1,41363,"#"]],[41363,41363],[41362,41362]]],[1512199259308,["gengmei_pxf@gengmei123.lan",[[1,49439,"## "]],[49439,49439],[49442,49442]]],[1512199277845,[null,[[-1,44210,"``"],[1,44212,"Bi"]],[44210,44210],[44214,44214]]],[1512199277845,[null,[[1,44210,"``"],[-1,44210,"Bi"]],[44214,44214],[44210,44210]]],[1512199266572,["gengmei_pxf@gengmei123.lan",[[1,49451,"### "]],[49451,49451],[49455,49455]]],[1512199268736,["gengmei_pxf@gengmei123.lan",[[-1,49476,"# "]],[49478,49478],[49476,49476]]],[1512199274287,["gengmei_pxf@gengmei123.lan",[[1,49534,"\n"]],[49533,49533],[49534,49534]]]]],["119c92a4-1c6e-4a00-9ec5-0378a2007a56",1512292620593,"# JAVA\n\n## 一. 类的加载过程，Person person = new Person();为例进行说明。\n\n1).因为new用到了Person.class，所以会先找到Person.class文件，并加载到内存中;\n\n2).执行该类中的static代码块，如果有的话，给Person.class类进行初始化;\n\n3).在堆内存中开辟空间分配内存地址;\n\n4).在堆内存中建立对象的特有属性，并进行默认初始化;\n\n5).对属性进行显示初始化;\n\n6).对对象进行构造代码块初始化;\n\n7).对对象进行与之对应的构造函数进行初始化;\n\n8).将内存地址付给栈内存中的p变量\n\n## 二. JVM相关知识，GC机制。\n\n**JVM基本构成**\n\n![](http://upload-images.jianshu.io/upload_images/4642697-bbcb5924cdaf30f8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/473)\n\n从上图可知，JVM主要包括四个部分：\n\n    1.类加载器（ClassLoader）:在JVM启动时或者在类运行时将需要的class加载到JVM中。（下图表示了从java源文件到JVM的整个过程，可配合理解。 \n\n![](http://upload-images.jianshu.io/upload_images/4642697-1cf5f815751beeab.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400)\n\n    2.执行引擎：负责执行class文件中包含的字节码指令；\n\n    3.内存区（也叫运行时数据区）：是在JVM运行的时候操作所分配的内存区。运行时内存区主要可以划分为5个区域，如图：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-160b9ba3bfeaf8f5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/376)\n\n*   方法区(Method Area)：用于存储类结构信息的地方，包括常量池、静态变量、构造函数等。虽然JVM规范把方法区描述为堆的一个逻辑部分， 但它却有个别名non-heap（非堆），所以大家不要搞混淆了。方法区还包含一个运行时常量池。\n\n*   java堆(Heap)：存储java实例或者对象的地方。这块是GC的主要区域。从存储的内容我们可以很容易知道，方法区和堆是被所有java线程共享的。\n\n*   java栈(Stack)：java栈总是和线程关联在一起，每当创建一个线程时，JVM就会为这个线程创建一个对应的java栈。在这个java栈中又会包含多个栈帧，每运行一个方法就创建一个栈帧，用于存储局部变量表、操作栈、方法返回值等。每一个方法从调用直至执行完成的过程，就对应一个栈帧在java栈中入栈到出栈的过程。所以java栈是现成私有的。\n\n*   程序计数器(PC Register)：用于保存当前线程执行的内存地址。由于JVM程序是多线程执行的（线程轮流切换），所以为了保证线程切换回来后，还能恢复到原先状态，就需要一个独立的计数器，记录之前中断的地方，可见程序计数器也是线程私有的。\n\n*   本地方法栈(Native Method Stack)：和java栈的作用差不多，只不过是为JVM使用到的native方法服务的。\n\n        4.本地方法接口：主要是调用C或C++实现的本地方法及返回结果。\n\n**GC机制**\n\n    垃圾收集器一般必须完成两件事：检测出垃圾；回收垃圾。怎么检测出垃圾？一般有以下几种方法：\n\n**_引用计数法：_**\n\n    给一个对象添加引用计数器，每当有个地方引用它，计数器就加1；引用失效就减1。好了，问题来了，如果我有两个对象A和B，互相引用，除此之外，没有其他任何对象引用它们，实际上这两个对象已经无法访问，即是我们说的垃圾对象。但是互相引用，计数不为0，导致无法回收，所以还有另一种方法：\n\n**_可达性分析算法：_**\n\n    以根集对象为起始点进行搜索，如果有对象不可达的话，即是垃圾对象。这里的根集一般包括java栈中引用的对象、方法区常良池中引用的对象、本地方法中引用的对象等。\n\n    总之，JVM在做垃圾回收的时候，会检查堆中的所有对象是否会被这些根集对象引用，不能够被引用的对象就会被垃圾收集器回收。一般回收算法也有如下几种：\n\n1).标记-清除（Mark-sweep）\n\n2).复制（Copying\n\n3).标记-整理（Mark-Compact）\n\n4).分代收集算法\n\n具体的解释可以参考本篇文章[还不点我?](https://link.jianshu.com?t=http://blog.csdn.net/tonytfjing/article/details/44278233)\n\n## 三. 类的加载器，双亲机制，Android的类加载器。\n\n**类的加载器**\n\n    大家都知道，当我们写好一个Java程序之后，不是管是CS还是BS应用，都是由若干个.class文件组织而成的一个完整的Java应用程序，当程序在运行时，即会调用该程序的一个入口函数来调用系统的相关功能，而这些功能都被封装在不同的class文件当中，所以经常要从这个class文件中要调用另外一个class文件中的方法，如果另外一个文件不存在的，则会引发系统异常。而程序在启动的时候，并不会一次性加载程序所要用的所有class文件，而是根据程序的需要，通过Java的类加载机制（ClassLoader）来动态加载某个class文件到内存当中的，从而只有class文件被载入到了内存之后，才能被其它class所引用。所以ClassLoader就是用来动态加载class文件到内存当中用的。\n\n**双亲机制**\n\n**_1、原理介绍_**\n\n    ClassLoader使用的是双亲委托模型来搜索类的，每个ClassLoader实例都有一个父类加载器的引用（不是继承的关系，是一个包含的关系），虚拟机内置的类加载器（Bootstrap ClassLoader）本身没有父类加载器，但可以用作其它ClassLoader实例的的父类加载器。当一个ClassLoader实例需要加载某个类时，它会试图亲自搜索某个类之前，先把这个任务委托给它的父类加载器，这个过程是由上至下依次检查的，首先由最顶层的类加载器Bootstrap ClassLoader试图加载，如果没加载到，则把任务转交给Extension ClassLoader试图加载，如果也没加载到，则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常。否则将这个找到的类生成一个类的定义，并将它加载到内存当中，最后返回这个类在内存中的Class实例对象。\n\n**_2、为什么要使用双亲委托这种模型呢？_**\n\n    因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。\n\n**_3、但是JVM在搜索类的时候，又是如何判定两个class是相同的呢？_**\n\n    JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。比如网络上的一个Java类org.classloader.simple.NetClassLoaderSimple，javac编译之后生成字节码文件NetClassLoaderSimple.class，ClassLoaderA和ClassLoaderB这两个类加载器并读取了NetClassLoaderSimple.class文件，并分别定义出了java.lang.Class实例来表示这个类，对于JVM来说，它们是两个不同的实例对象，但它们确实是同一份字节码文件，如果试图将这个Class实例生成具体的对象进行转换时，就会抛运行时异常java.lang.ClassCaseException，提示这是两个不同的类型。\n\n**Android类加载器**\n\n    对于Android而言，最终的apk文件包含的是dex类型的文件，dex文件是将class文件重新打包，打包的规则又不是简单地压缩，而是完全对class文件内部的各种函数表，变量表进行优化，产生一个新的文件，即dex文件。因此加载这种特殊的Class文件就需要特殊的类加载器DexClassLoader。\n\n## 四. 集合框架，list，map，set都有哪些具体的实现类，区别都是什么?\n\n![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：了对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**===****》****TreeSet****两种排序方式：**两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n## 五. concurrentHashmap原理，原子类。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大.\n\n## 六. volatile原理\n\n    在《Java并发编程：核心理论》一文中，我们已经提到过可见性、有序性及原子性问题，通常情况下我们可以通过Synchronized关键字来解决这些个问题，不过如果对Synchronized原理有了解的话，应该知道Synchronized是一个比较重量级的操作，对系统的性能有比较大的影响，所以，如果有其他解决方案，我们通常都避免使用Synchronized来解决问题。而volatile关键字就是Java中提供的另一种解决可见性和有序性问题的方案。对于原子性，需要强调一点，也是大家容易误解的一点：对volatile变量的单次读/写操作可以保证原子性的，如long和double类型变量，但是并不能保证i++这种操作的原子性，因为本质上i++是读、写两次操作。\n\n参考文章[插好眼了等传送](https://link.jianshu.com?t=https://www.cnblogs.com/paddix/p/5428507.html)\n\n## 七. 多线程的使用场景\n\n使用多线程就一定效率高吗？ 有时候使用多线程并不是为了提高效率，而是使得CPU能够同时处理多个事件。\n\n1).为了不阻塞主线程,启动其他线程来做好事的事情,比如APP中耗时操作都不在UI中做.\n\n2).实现更快的应用程序,即主线程专门监听用户请求,子线程用来处理用户请求,以获得大的吞吐量.感觉这种情况下，多线程的效率未必高。 这种情况下的多线程是为了不必等待， 可以并行处理多条数据。\n\n比如JavaWeb的就是主线程专门监听用户的HTTP请求，然后启动子线程去处理用户的HTTP请求。\n\n3).某种虽然优先级很低的服务，但是却要不定时去做。\n\n比如Jvm的垃圾回收。\n\n4.)某种任务，虽然耗时，但是不耗CPU的操作时，开启多个线程，效率会有显著提高。\n\n比如读取文件，然后处理。 磁盘IO是个很耗费时间，但是不耗CPU计算的工作。 所以可以一个线程读取数据，一个线程处理数据。肯定比一个线程读取数据，然后处理效率高。 因为两个线程的时候充分利用了CPU等待磁盘IO的空闲时间。\n\n## 八. JAVA常量池\n\n**_Interger中的128(-128~127)_**\n\na.当数值范围为-128~127时：如果两个new出来Integer对象，即使值相同，通过“==”比较结果为false，但两个对象直接赋值，则通过“==”比较结果为“true，这一点与String非常相似。\n\nb.当数值不在-128~127时，无论通过哪种方式，即使两个对象的值相等，通过“==”比较，其结果为false；\n\nc.当一个Integer对象直接与一个int基本数据类型通过“==”比较，其结果与第一点相同；\n\nd.Integer对象的hash值为数值本身；\n\n**_为什么是-128-127?_**\n\n    在Integer类中有一个静态内部类IntegerCache，在IntegerCache类中有一个Integer数组，用以缓存当数值范围为-128~127时的Integer对象。\n\n## 九. 简单介绍一下java中的泛型，泛型擦除以及相关的概念。\n\n    泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。 Java语言引入泛型的好处是安全简单。\n\n    在Java SE 1.5之前，没有泛型的情况的下，通过对类型Object的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是一个安全隐患。\n\n    泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，提高代码的重用率。\n\n1、泛型的类型参数只能是类类型（包括自定义类），不能是简单类型。\n\n2、同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的。\n\n3、泛型的类型参数可以有多个。\n\n4、泛型的参数类型可以使用extends语句，例如<T extends superclass>。习惯上称为“有界类型”。\n\n5、泛型的参数类型还可以是通配符类型。例如Class<?> classType = Class.forName(\"java.lang.String\");\n\n**泛型擦除以及相关的概念**\n\n    Java中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会在编译器在编译的时候去掉。这个过程就称为类型擦除。\n\n**类型擦除引起的问题及解决方法**\n\n1、先检查，在编译，以及检查编译的对象和引用传递的问题\n\n2、自动类型转换\n\n3、类型擦除与多态的冲突和解决方法\n\n4、泛型类型变量不能是基本数据类型\n\n5、运行时类型查询\n\n6、异常中使用泛型的问题\n\n7、数组（这个不属于类型擦除引起的问题）\n\n9、类型擦除后的冲突\n\n10、泛型在静态方法和静态类中的问题\n\n# Android\n\n## 一. Handler机制\n\n    Android 的消息机制也就是 handler 机制,创建 handler 的时候会创建一个 looper ( 通过 looper.prepare() 来创建 ),looper 一般为主线程 looper.\n\n    handler 通过 send 发送消息 (sendMessage) ,当然 post 一系列方法最终也是通过 send 来实现的,在 send 方法中handler 会通过 enqueueMessage() 方法中的 enqueueMessage(msg,millis )向消息队列 MessageQueue 插入一条消息,同时会把本身的 handler 通过 msg.target = this 传入.\n\n    Looper 是一个死循环,不断的读取MessageQueue中的消息,loop 方法会调用 MessageQueue 的 next 方法来获取新的消息,next 操作是一个阻塞操作,当没有消息的时候 next 方法会一直阻塞,进而导致 loop 一直阻塞,当有消息的时候,Looper 就会处理消息 Looper 收到消息之后就开始处理消息: msg.target.dispatchMessage(msg),当然这里的 msg.target 就是上面传过来的发送这条消息的 handler 对象,这样 handler 发送的消息最终又交给他的dispatchMessage方法来处理了,这里不同的是,handler 的 dispatchMessage 方法是在创建 Handler时所使用的 Looper 中执行的,这样就成功的将代码逻辑切换到了主线程了.\n\n    Handler 处理消息的过程是:首先,检查Message 的 callback 是否为 null,不为 null 就通过 handleCallBack 来处理消息,Message 的 callback 是一个 Runnable 对象,实际上是 handler 的 post 方法所传递的 Runnable 参数.其次是检查 mCallback 是 否为 null,不为 null 就调用 mCallback 的handleMessage 方法来处理消息.\n\n## 二. View的绘制流程\n\n    View的绘制流程：OnMeasure()——>OnLayout()——>OnDraw()\n\n各步骤的主要工作：\n\n**_OnMeasure()：_**\n\n    测量视图大小。从顶层父View到子View递归调用measure方法，measure方法又回调OnMeasure。\n\n**_OnLayout()：_**\n\n    确定View位置，进行页面布局。从顶层父View向子View的递归调用view.layout方法的过程，即父View根据上一步measure子View所得到的布局大小和布局参数，将子View放在合适的位置上。\n\n**_OnDraw()：_**\n\n    绘制视图:ViewRoot创建一个Canvas对象，然后调用OnDraw()。六个步骤：①、绘制视图的背景；②、保存画布的图层（Layer）；③、绘制View的内容；④、绘制View子视图，如果没有就不用；⑤、还原图层（Layer）；⑥、绘制滚动条。\n\n## 三. 事件传递机制\n\n1).Android事件分发机制的本质是要解决：点击事件由哪个对象发出，经过哪些对象，最终达到哪个对象并最终得到处理。这里的对象是指Activity、ViewGroup、View.\n\n2).Android中事件分发顺序：Activity（Window） -> ViewGroup -> View.\n\n3).事件分发过程由dispatchTouchEvent() 、onInterceptTouchEvent()和onTouchEvent()三个方法协助完成\n\n**设置Button按钮来响应点击事件事件传递情况：（如下图）**\n\n布局如下:\n\n![](http://upload-images.jianshu.io/upload_images/4642697-01f23a099103eb82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/210)\n\n最外层：Activiy A，包含两个子View：ViewGroup B、View C\n\n中间层：ViewGroup B，包含一个子View：View C\n\n最内层：View C\n\n假设用户首先触摸到屏幕上View C上的某个点（如图中黄色区域），那么Action_DOWN事件就在该点产生，然后用户移动手指并最后离开屏幕。\n\n**按钮点击事件:**\n\nDOWN事件被传递给C的onTouchEvent方法，该方法返回true，表示处理这个事件;\n\n因为C正在处理这个事件，那么DOWN事件将不再往上传递给B和A的onTouchEvent()；\n\n该事件列的其他事件（Move、Up）也将传递给C的onTouchEvent();\n\n![](http://upload-images.jianshu.io/upload_images/4642697-ca12c00c79780b57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n(记住这个图的传递顺序,面试的时候能够画出来,就很详细了)\n\n## 四. Binder机制\n\n**1.了解Binder**\n\n    在Android系统中，每一个应用程序都运行在独立的进程中，这也保证了当其中一个程序出现异常而不会影响另一个应用程序的正常运转。在许多情况下，我们activity都会与各种系统的service打交道，很显然，我们写的程序中activity与系统service肯定不是同一个进程，但是它们之间是怎样实现通信的呢？所以Binder是android中一种实现进程间通信（IPC）的方式之一。\n\n    1).首先，Binder分为Client和Server两个进程。\n\n    注意，Client和Server是相对的。谁发消息，谁就是Client，谁接收消息，谁就是Server。\n\n    举个例子，两个进程A和B之间使用Binder通信，进程A发消息给进程B，那么这时候A是Binder Client，B是Binder Server；进程B发消息给进程A，那么这时候B是Binder Client，A是Binder Server——其实这么说虽然简单了，但还是不太严谨，我们先这么理解着。\n\n    2).其次，我们看下面这个图（摘自田维术的博客），基本说明白了Binder的组成解构：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-9fed6a1413057558.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/673)\n\n    图中的IPC就是进程间通信的意思。\n\n    图中的ServiceManager，负责把Binder Server注册到一个容器中。\n\n    有人把ServiceManager比喻成电话局，存储着每个住宅的座机电话，还是很恰当的。张三给李四打电话，拨打电话号码，会先转接到电话局，电话局的接线员查到这个电话号码的地址，因为李四的电话号码之前在电话局注册过，所以就能拨通；没注册，就会提示该号码不存在。\n\n    对照着Android Binder机制，对着上面这图，张三就是Binder Client，李四就是Binder Server，电话局就是ServiceManager，电话局的接线员在这个过程中做了很多事情，对应着图中的Binder驱动.\n\n    3).接下来我们看Binder通信的过程，还是摘自田维术博客的一张图：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-6a03bbb4f16108b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/675)\n\n注：图中的SM也就是ServiceManager。\n\n    我们看到，Client想要直接调用Server的add方法，是不可以的，因为它们在不同的进程中，这时候就需要Binder来帮忙了。\n\n    首先是Server在SM这个容器中注册。\n\n    其次，Client想要调用Server的add方法，就需要先获取Server对象， 但是SM不会把真正的Server对象返回给Client，而是把Server的一个代理对象返回给Client，也就是Proxy。\n\n    然后，Client调用Proxy的add方法，SM会帮他去调用Server的add方法，并把结果返回给Client。\n\n    以上这3步，Binder驱动出了很多力，但我们不需要知道Binder驱动的底层实现，涉及到C++的代码了——把有限的时间去做更有意义的事情。\n\n(ps:以上节选自包建强老师的文章[点我点我](https://link.jianshu.com?t=http://www.cnblogs.com/Jax/p/6864103.html)).\n\n**2.为什么android选用Binder来实现进程间通信？**\n\n1).可靠性。在移动设备上，通常采用基于Client-Server的通信方式来实现互联网与设备间的内部通信。目前linux支持IPC包括传统的管道，System V IPC，即消息队列/共享内存/信号量，以及socket中只有socket支持Client-Server的通信方式。Android系统为开发者提供了丰富进程间通信的功能接口，媒体播放，传感器，无线传输。这些功能都由不同的server来管理。开发都只关心将自己应用程序的client与server的通信建立起来便可以使用这个服务。毫无疑问，如若在底层架设一套协议来实现Client-Server通信，增加了系统的复杂性。在资源有限的手机 上来实现这种复杂的环境，可靠性难以保证。\n\n2).传输性能。socket主要用于跨网络的进程间通信和本机上进程间的通信，但传输效率低，开销大。消息队列和管道采用存储-转发方式，即数据先从发送方缓存区拷贝到内核开辟的一块缓存区中，然后从内核缓存区拷贝到接收方缓存区，其过程至少有两次拷贝。虽然共享内存无需拷贝，但控制复杂。比较各种IPC方式的数据拷贝次数。共享内存：0次。Binder：1次。Socket/管道/消息队列：2次。\n\n3).安全性。Android是一个开放式的平台，所以确保应用程序安全是很重要的。Android对每一个安装应用都分配了UID/PID,其中进程的UID是可用来鉴别进程身份。传统的只能由用户在数据包里填写UID/PID，这样不可靠，容易被恶意程序利用。而我们要求由内核来添加可靠的UID。\n\n所以，出于可靠性、传输性、安全性。android建立了一套新的进程间通信方式。\n\n## 五. Android中进程的级别，以及各自的区别。\n\n**1、前台进程**\n\n    用户当前正在做的事情需要这个进程。如果满足下面的条件之一，一个进程就被认为是前台进程：\n\n1).这个进程拥有一个正在与用户交互的Activity(这个Activity的onResume()方法被调用)。\n\n2).这个进程拥有一个绑定到正在与用户交互的activity上的Service。\n\n3).这个进程拥有一个前台运行的Service（service调用了方法startForeground()）.\n\n4).这个进程拥有一个正在执行其任何一个生命周期回调方法（onCreate(),onStart(),或onDestroy()）的Service。\n\n5).这个进程拥有正在执行其onReceive()方法的BroadcastReceiver。\n\n    通常，在任何时间点，只有很少的前台进程存在。它们只有在达到无法调合的矛盾时才会被杀－－如内存太小而不能继续运行时。通常，到了这时，设备就达到了一个内存分页调度状态，所以需要杀一些前台进程来保证用户界面的反应.\n\n**2、可见进程**\n\n    一个进程不拥有运行于前台的组件，但是依然能影响用户所见。满足下列条件时，进程即为可见：\n\n    这个进程拥有一个不在前台但仍可见的Activity(它的onPause()方法被调用)。当一个前台activity启动一个对话框时，就出了这种情况。\n\n**3、服务进程**\n\n    一个可见进程被认为是极其重要的。并且，除非只有杀掉它才可以保证所有前台进程的运行，否则是不能动它的。\n\n    这个进程拥有一个绑定到可见activity的Service。\n\n    一个进程不在上述两种之内，但它运行着一个被startService()所启动的service。\n\n尽管一个服务进程不直接影响用户所见，但是它们通常做一些用户关心的事情（比如播放音乐或下载数据），所以系统不到前台进程和可见进程活不下去时不会杀它。\n\n**4、后台进程**\n\n    一个进程拥有一个当前不可见的activity(activity的onStop()方法被调用)。\n\n    这样的进程们不会直接影响到用户体验，所以系统可以在任意时刻杀了它们从而为前台、可见、以及服务进程们提供存储空间。通常有很多后台进程在运行。它们被保存在一个LRU(最近最少使用)列表中来确保拥有最近刚被看到的activity的进程最后被杀。如果一个activity正确的实现了它的生命周期方法，并保存了它的当前状态，那么杀死它的进程将不会对用户的可视化体验造成影响。因为当用户返回到这个activity时，这个activity会恢复它所有的可见状态。\n\n**5、空进程**\n\n    一个进程不拥有入何active组件。\n\n    保留这类进程的唯一理由是高速缓存，这样可以提高下一次一个组件要运行它时的启动速度。系统经常为了平衡在进程高速缓存和底层的内核高速缓存之间的整体系统资源而杀死它们。\n\n## 六. 线程池的相关知识。\n\n    Android中的线程池都是之间或间接通过配置ThreadPoolExecutor来实现不同特性的线程池.Android中最常见的四类具有不同特性的线程池分别为FixThreadPool、CachedThreadPool、SingleThreadPool、ScheduleThreadExecutor.\n\n**1).FixThreadPool**\n\n    只有核心线程,并且数量固定的,也不会被回收,所有线程都活动时,因为队列没有限制大小,新任务会等待执行.\n\n    优点:更快的响应外界请求.\n\n**2).SingleThreadPool**\n\n    只有一个核心线程,确保所有的任务都在同一线程中按顺序完成.因此不需要处理线程同步的问题.\n\n**3).CachedThreadPool**\n\n    只有非核心线程,最大线程数非常大,所有线程都活动时,会为新任务创建新线程,否则会利用空闲线程(60s空闲时间,过了就会被回收,所以线程池中有0个线程的可能)处理任务.\n\n    优点:任何任务都会被立即执行(任务队列SynchronousQueue相当于一个空集合);比较适合执行大量的耗时较少的任务.\n\n**4).ScheduledThreadPool**\n\n    核心线程数固定,非核心线程(闲着没活干会被立即回收)数没有限制.\n\n    优点:执行定时任务以及有固定周期的重复任务\n\n    参考[Android开发——Android中常见的4种线程池（保证你能看懂并理解）](https://link.jianshu.com?t=http://blog.csdn.net/seu_calvin/article/details/52415337)\n\n## 七. 内存泄露，怎样查找，怎么产生的内存泄露。\n\n**产生的内存泄露**\n\n1).资源对象没关闭造成的内存泄漏\n\n2).构造Adapter时，没有使用缓存的convertView\n\n3).Bitmap对象不在使用时调用recycle()释放内存\n\n4).试着使用关于application的context来替代和activity相关的context\n\n5).注册没取消造成的内存泄漏\n\n6).集合中对象没清理造成的内存泄漏\n\n**查找内存泄漏**\n\n    查找内存泄漏可以使用Android Stdio 自带的Android Profiler工具,也可以使用Square产品的LeadCanary.\n\n## 八. Android优化\n\n**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n## 九. 插件化相关技术，热修补技术是怎样实现的，和插件化有什么区别\n\n**相同点:**\n\n    都使用ClassLoader来实现的加载的新的功能类，都可以使用PathClassLoader与DexClassLoader\n\n**不同点：**\n\n    热修复因为是为了修复Bug的，所以要将新的同名类替代同名的Bug类，要抢先加载新的类而不是Bug类，所以多做两件事：在原先的app打包的时候，阻止相关类去打上CLASS_ISPREVERIFIED标志，还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements，这样才能抢先代替Bug类，完成系统不加载旧的Bug类.\n\n    而插件化只是增肌新的功能类或者是资源文件，所以不涉及抢先加载旧的类这样的使命，就避过了阻止相关类去打上CLASS_ISPREVERIFIED标志和还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements.\n\n    所以插件化比热修复简单，热修复是在插件化的基础上在进行替旧的Bug类\n\n## 十. 怎样计算一张图片的大小，加载bitmap过程（怎样保证不产生内存溢出），二级缓存，LRUCache算法。\n\n**计算一张图片的大小**\n\n    图片占用内存的计算公式：图片高度 * 图片宽度 * 一个像素占用的内存大小.所以，计算图片占用内存大小的时候，要考虑图片所在的目录跟设备密度，这两个因素其实影响的是图片的高宽，android会对图片进行拉升跟压缩。\n\n**加载bitmap过程（怎样保证不产生内存溢出）**\n\n    由于Android对图片使用内存有限制，若是加载几兆的大图片便内存溢出。Bitmap会将图片的所有像素（即长x宽）加载到内存中，如果图片分辨率过大，会直接导致内存OOM，只有在BitmapFactory加载图片时使用BitmapFactory.Options对相关参数进行配置来减少加载的像素。\n\n**BitmapFactory.Options相关参数详解**\n\n(1).Options.inPreferredConfig值来降低内存消耗。\n\n比如：默认值ARGB_8888改为RGB_565,节约一半内存。\n\n(2).设置Options.inSampleSize 缩放比例，对大图片进行压缩 。\n\n(3).设置Options.inPurgeable和inInputShareable：让系统能及时回 收内存。\n\nA：inPurgeable：设置为True时，表示系统内存不足时可以被回 收，设置为False时，表示不能被回收。\n\nB：inInputShareable：设置是否深拷贝，与inPurgeable结合使用，inPurgeable为false时，该参数无意义。\n\n(4).使用decodeStream代替其他方法。\n\ndecodeResource,setImageResource,setImageBitmap等方法\n\n## 十一. LRUCache算法是怎样实现的。\n\n    内部存在一个LinkedHashMap和maxSize，把最近使用的对象用强引用存储在 LinkedHashMap中，给出来put和get方法，每次put图片时计算缓存中所有图片总大小，跟maxSize进行比较，大于maxSize，就将最久添加的图片移除；反之小于maxSize就添加进来。\n\n    之前，我们会使用内存缓存技术实现，也就是软引用或弱引用，在Android 2.3（APILevel 9）开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，这让软引用和弱引用变得不再可靠。\n\n# 算法\n\n## 一. 算法题\n\nm * n的矩阵，能形成几个正方形（2 * 2能形成1个正方形，2 * 3 2个，3 * 3 6个）\n\n计数的关键是要观察到任意一个倾斜的正方形必然唯一内接于一个非倾斜的正方形，而一个非倾斜的边长为k的非倾斜正方形，一条边上有k-1个内点，每个内点恰好确定一个内接于其中的倾斜正方形，加上非倾斜正方形本身，可知，将边长为k的非倾斜正方形数目乘以k，再按k求和即可得到所有正方形的数目。\n\n设2≤n≤m，k≤n-1，则边长为k的非倾斜有\n\n(n-k)(m-k)个，故所有正方形有\n\n∑(m-k)(n-k)k个\n\n例如m=n=4\n\n正方形有3_3_1+2_2_2+1_1_3=20个\n\n# 下面是面试过程中遇到的题目\n\n大多数题目都可以在上面找到答案.\n\n## 电话面试题\n\n### 1.ArrayList 和 Hashmap 简单说一些,区别,底层的数据结构.\n\n### 2.Handler 消息机制\n\n### 3.引起内存泄漏的场景\n\n### 4.多线程的使用场景?\n\n### 5.常用的线程池有哪几种?\n\n### 6.在公司做了什么?团队规模?为什么离职?\n\n## 面试中实际涉及到的问题\n\n**第一轮**\n\n### **1.知道哪些单例模式,写一个线程安全的单例,并分析为什么是线程安全的**?\n```java\npublic class Singleton {\n\t// Private constructor prevents instantiation from other classes\n\tprivate Singleton() { }\n\n\t/**\n\t* SingletonHolder is loaded on the first execution of Singleton.getInstance() \n\t* or the first access to SingletonHolder.INSTANCE, not before.\n\t*/\n\tprivate static class SingletonHolder { \n\t\t\tpublic static final Singleton INSTANCE = new Singleton();\n\t}\n\n\tpublic static Singleton getInstance() {\n\t\t\treturn SingletonHolder.INSTANCE;\n\t}\n}\n```\n### **2.Java中的集合有哪些?解释一下HashMap?底部的数据结构?散列表冲突的处理方法,散列表是一个什么样的数据结构?HashMap是采用什么方法处理冲突的**?\n\n![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n```\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n```\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**TreeSet两种排序方式**：两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\n```\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n```\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\n```\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n```\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\n```\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n```\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n **五. concurrentHashmap原理，原子类**。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大.\n\n### **3.解释一下什么是MVP架构,画出图解,一句话解释MVP和MVC的区别**?\n\n为了解决逻辑处理和UI视图的松散耦合，MVC和MVP的架构模式在很多App中使用比较广泛。\n\n那什么是MVP呢？它又和我们常常听到的MVC有什么关系了以及区别呢？\n\n![MVP和MVC架构图](http://frodoking.github.io/img/android/mvp_mvc_img.png)\n\nMVP 是从经典的模式MVC演变而来，它们的基本思想有相通的地方：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。作为一种新的模式，**MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会从直接Model中读取数据而不是通过 Controller**。\n\n在MVC里，View是可以直接访问Model的！从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。 在MVC模型里，更关注的Model的不变，而同时有多个对Model的不同显示，及View。所以，在MVC模型里，Model不依赖于View，但是View是依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。\n\n**MVP如何解决MVC的问题**？\n\n在MVP里，Presenter完全把Model和View进行了分离，主要的程序逻辑在Presenter里实现。而且，Presenter与具体的View是没有直接关联的，而是通过定义好的接口进行交互，从而使得在变更View时候可以保持Presenter的不变，即重用！ 不仅如此，我们还可以编写测试用的View，模拟用户的各种操作，从而实现对Presenter的测试–而不需要使用自动化的测试工具。 我们甚至可以在Model和View都没有完成时候，就可以通过编写Mock Object（即实现了Model和View的接口，但没有具体的内容的）来测试Presenter的逻辑。 在MVP里，应用程序的逻辑主要在Presenter来实现，其中的View是很薄的一层。因此就有人提出了Presenter First的设计模式，就是根据User Story来首先设计和开发Presenter。在这个过程中，View是很简单的，能够把信息显示清楚就可以了。在后面，根据需要再随便更改View，而对Presenter没有任何的影响了。 如果要实现的UI比较复杂，而且相关的显示逻辑还跟Model有关系，就可以在View和Presenter之间放置一个Adapter。由这个 Adapter来访问Model和View，避免两者之间的关联。而同时，因为Adapter实现了View的接口，从而可以保证与Presenter之间接口的不变。这样就可以保证View和Presenter之间接口的简洁，又不失去UI的灵活性。 在MVP模式里，View只应该有简单的Set/Get的方法，用户输入和设置界面显示的内容，除此就不应该有更多的内容，绝不容许直接访问Model–这就是与MVC很大的不同之处。\n\nMVP的优点：\n\n> 1、模型与视图完全分离，我们可以修改视图而不影响模型；\n> 2、可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部；\n> 3、我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁；\n> 4、如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）。\n\n**使用方法**\n\n1、建立bean\n\n```\n\npublic class UserBean {\n private String mFirstName;\n private String mLastName;\n\n public UserBean(String firstName, String lastName) {\n this. mFirstName = firstName;\n this. mLastName = lastName;\n }\n\n public String getFirstName() {\n return mFirstName;\n }\n\n public String getLastName() {\n return mLastName;\n }\n}\n```\n \n2、建立model接口（处理业务逻辑，这里指数据读写）\n\n```\n\npublic interface IUserModel {\n void setID(int id);\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n\n int getID();\n\n UserBean load(int id);// 通过id读取user信息,返回一个UserBean\n}\n```\n\n3、建立view接口（更新ui中的view状态），这里列出需要操作当前view的方法\n\n``` \n\npublic interface IUserView {\n int getID();\n\n String getFristName();\n\n String getLastName();\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n}\n\n ```\n4、建立presenter（主导器，通过iView和iModel接口操作model和view），activity可以把所有逻辑给presenter处理，这样java逻辑就从手机的activity中分离出来\n\n```\npublic class UserPresenter {\n private IUserView mUserView;\n private IUserModel mUserModel;\n\n public UserPresenter(IUserView view) {\n mUserView = view;\n mUserModel = new UserModel();\n }\n\n public void saveUser( int id, String firstName, String lastName) {\n mUserModel.setID(id);\n mUserModel.setFirstName(firstName);\n mUserModel.setLastName(lastName);\n }\n\n public void loadUser( int id) {\n UserBean user = mUserModel.load(id);\n mUserView.setFirstName(user.getFirstName()); // 通过调用IUserView的方法来更新显示\n mUserView.setLastName(user.getLastName());\n }\n}\n\n ```\n**结束语**\n\nMVP主要解决就是把逻辑层抽出来成P层，要是遇到需求逻辑上的更改就可以只需要修改P层了或者遇到逻辑上的大概我们可以直接从写一个P也可以，很多开发人员把所有的东西都写在了Activity/Fragment里面这样一来遇到频繁改需求或者逻辑越来越复杂的时候，Activity/Fragment里面就会出现过多的混杂逻辑导致出错，所以MVP模式对于APP来对控制逻辑和UI的解耦来说是一个不错的选择！\n\n在这里多说一下，其实MVP只是一个总体的解决方案。在V和P之间其实我们还可以采用事件总线的方案来解决这种高耦合的情况。本人在另外一篇文章中将会讲到[事件总线（otto的bus和eventbus的一个对比分析）](https://frodoking.github.io/2015/03/30/android-eventbus-otto-analysis/)\n\n\n### **4.Handle消息机制?在使用Handler的时候要注意哪些东西,是否会引起内存泄漏?画一下Handler机制的图解**?\n\n![](http://upload-images.jianshu.io/upload_images/1824194-a947dcc5b22f69fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面一共出现了几种类，ActivityThread，Handler，MessageQueue，Looper，msg（Message）,对这些类作简要介绍：\n\nActivityThread：程序的启动入口，为什么要介绍这个类，是因为该类就是我们说的主线程，它对Looper进行操作的。\n\nHandler：字面意思是操控者，该类有比较重要的地方，就是通过handler来发送消息（sendMessage）到MessageQueue和 操作控件的更新（handleMessage）。handler下面持有这MessageQueue和Looper的对象。\n\nMessageQueue：字面意思是消息队列，就是封装Message类。对Message进行插入和取出操作。\n\nMessage：这个类是封装消息体并被发送到MessageQueue中的，给类是通过链表实现的，其好处方便MessageQueue的插入和取出操作。还有一些字段是（int what，Object obj，int arg1，int arg2）。what是用户定义的消息和代码，以便接收者（handler）知道这个是关于什么的。obj是用来传输任意对象的，arg1和arg2是用来传递一些简单的整数类型的。\n\n下面，我们按照启动顺序来进行源码分析：\n\n![](http://upload-images.jianshu.io/upload_images/1824194-298ebb16ce4a3b70.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://raw.githubusercontent.com/bihe0832/Android-System-Related-Charts/master/framework/handler-sequence.jpg)\n\n\n\n### **5.是否做过性能优化?已经采取了哪些措施进行优化**?\n\n**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n### **6.引起内存泄漏的原因是什么?以及你是怎么解决的**?\n\n这些问题应该都是比较基础的问题,每个开发者都应该是非常熟悉并能详细叙述的.这一轮的面试官问的技术都是平时用到的.\n\n**产生的内存泄露**\n\n1).资源对象没关闭造成的内存泄漏\n\n2).构造Adapter时，没有使用缓存的convertView\n\n3).Bitmap对象不在使用时调用recycle()释放内存\n\n4).试着使用关于application的context来替代和activity相关的context\n\n5).注册没取消造成的内存泄漏\n\n6).集合中对象没清理造成的内存泄漏\n\nAndroid的虚拟机是基于寄存器的Dalvik，它的最大堆大小一般是16M，有的机器为24M。因此我们所能利用 的内存空间是有限的。如果我们的内存占用超过了一定的水平就会出现OutOfMemory的错误。\n\n内存溢出的几点原因总结:\n1、**资源释放问题**: 程序代码的问题，长期保持某些资源(如Context)的引用，造成内存泄露，资源得不到释放 \n\n2、**对象内存过大问题**:\n保存了多个耗用内存过大的对象(如Bitmap)，造成内存超出限制\n\n3、**static**:\nstatic是Java中的一个关键字，当用它来修饰成员变量时，那么该变量就属于该类，而不是该类的实例。所以 用static修饰的变量，它的生命周期是很长的，如果用它来引用一些资源耗费过多的实例(Context的情况最多）\n这时就要谨慎对待了。 \n```\npublic class ClassName {\n private static Context mContext;\n//省略 }\n```\n以上的代码是很危险的，如果将Activity赋值到mContext的话。那么即使该Activity已经onDestroy，但是由于 仍有对象保存它的引用，因此该Activity依然不会被释放。\n我们举Android文档中的一个例子。\n```\nprivate static Drawable sBackground; @Override\nprotected void onCreate(Bundle state) {\n\tsuper.onCreate(state);\n\tTextView label = new TextView(this);\n        label.setText(\"Leaks are bad\");\n\tif (sBackground == null) {\n\tsBackground = getDrawable(R.drawable.large_bitmap); }\n\tlabel.setBackgroundDrawable(sBackground);\n\tsetContentView(label); }\n```\nsBackground, 是 一个静态的变量，但是我们发现，我们并没有显式的保存Contex的引用，但是，当Drawable与\n\nView连接之后，Drawable就将View设 置为一个回调，由于View中是包含Context的引用的，所以，实际上我们依\n\n然保存了Context的引用。这个引用链如下: Drawable->TextView->Context\n\n所以，最终该Context也没有得到释放，发生了内存泄露。\n\n**针对static的解决方案**:\n\n第一、应该尽量避免static成员变量引用资源耗费过多的实例，比如Context。\n\n第二、Context尽量使用Application Context，因为Application的Context的生命周期比较长，引用它不会出现内存\n泄露的问题。\n\n第三、使用WeakReference代替强引用。比如可以使用WeakReference<Context> mContextRef; 该部分的详细内容也可以参考Android文档中Article部分。\n\n4、**线程导致内存溢出**:\n线程产生内存泄露的主要原因在于线程生命周期的不可控。我们来考虑下面一段代码。\n```\npublic class MyActivity extends Activity {\n \t@Override\n\tpublic void onCreate(Bundle savedInstanceState) {\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.main);\n\tnew MyThread().start();\n}\nprivate class MyThread extends Thread{\n\t@Override public void run() {\n\tsuper.run();\n\t//do somthing }\n\t} \n}\n```\n这段代码很平常也很简单，是我们经常使用的形式。我们思考一个问题:假设MyThread的run函数是一个很 费时的操作，当我们开启该线程后，将设备的横屏变为了竖屏，一 般情况下当屏幕转换时会重新创建Activity， 按照我们的想法，老的Activity应该会被销毁才对，然而事实上并非如此。\n\n由于我们的线程是Activity的内部类，所以MyThread中保存了Activity的一个引用，当MyThread的run函数没有 结束时，MyThread是不会被销毁的，因此它所引用的老的Activity也不会被销毁，因此就出现了内存泄露的问题。\n\n有些人喜欢用Android提供的AsyncTask，但事实上AsyncTask的问题更加严重，Thread只有在run函数不结束时才出现这种内存泄露问题，然而AsyncTask内部的实现机制是运用了ThreadPoolExcutor,该类产生的Thread对象的生命周期是不确定的，是应用程序无法控制的，因此如果AsyncTask作为Activity的内部类，就更容易出现内存\n\n**泄露的问题**。\n\n针对这种线程导致的内存泄露问题的解决方案: \n\n第一、将线程的内部类，改为静态内部类。\n\n第二、在线程内部采用弱引用保存Context引用。\n\n二、避免内存溢出的方案:\n** 1、图片过大导致内存溢出**: 模拟器的RAM比较小，由于每张图片先前是压缩的情况，放入到Bitmap的时候，大小会变大，导致超出RAM内存\n\n★android 中用bitmap 时很容易内存溢出，报如下错误:Java.lang.OutOfMemoryError : bitmap size exceeds VM budget \n解决: 方法1: 主要是加上这段:等比例缩小图片\n\n1)通过getResource()方法获取资源:\n```\n//解决加载图片 内存溢出的问题 \n//Options 只保存图片尺寸大小，不保存图片到内存\nBitmapFactory.Options options = new BitmapFactory.Options();\noptions.inSampleSize = 2;\n\n//缩放的比例，缩放是很难按准备的比例进行缩放的，其值表明缩放的倍数，SDK中建议其值是2的指数值,值越大会导致图片不清晰\nBitmapFactory.Options opts = new BitmapFactory.Options(); \nopts.inSampleSize = 2;\nBitmap bmp = null;\nbmp = BitmapFactory.decodeResource(getResources(), mImageIds[position],opts); ...\n//回收\nbmp.recycle();\n```\n2)通过Uri取图片资源\n以上代码可以优化内存溢出，但它只是改变图片大小，并不能彻底解决内存溢出。\n3)通过路径获取图片资源\n\n方法2:对图片采用软引用，及时地进行recyle()操作\n\n具体见“各种引用的简单了解”中的示例\n**2、复用listView**: 方法:对复杂的listview进行合理设计与编码:\n```\nprivate ImageView preview;\nBitmapFactory.Options options = new BitmapFactory.Options();\n//图片宽高都为原来的二分之一，即图片为原来的四分之一\noptions.inSampleSize = 2;\nBitmap bitmap = BitmapFactory.decodeStream(cr.openInputStream(uri), null, options); preview.setImageBitmap(bitmap);\nprivate ImageView preview;\nprivate String fileName= \"/sdcard/DCIM/Camera/2010-05-14 16.01.44.jpg\"; BitmapFactory.Options options = new BitmapFactory.Options();\n//图片宽高都为原来的二分之一，即图片为原来的四分之一 \noptions.inSampleSize = 2;\nBitmap b = BitmapFactory.decodeFile(fileName, options);\npreview.setImageBitmap(b); filePath.setText(fileName);\nSoftReference<Bitmap> bitmap;\nbitmap = new SoftReference<Bitmap>(pBitmap);\nif(bitmap != null){\n\tif(bitmap.get() != null && !bitmap.get().isRecycled()){ bitmap.get().recycle();\n\tbitmap= null;\n }\n}\n\nAdapter中:\n\n@Override\npublic View getView(int position, View convertView, ViewGroup parent) {\n\tViewHolder holder;\n\tif(convertView!=null && convertView instanceof LinearLayout){\n\tholder = (ViewHolder) convertView.getTag(); }else{\n\tconvertView = View.inflate(MainActivity.this, R.layout.item, null); holder = new ViewHolder();\n\tholder.tv = (TextView)\nconvertView.findViewById(R.id.tv); convertView.setTag(holder);\n}\nholder.tv.setText(\"XXXX\");\nholder.tv.setTextColor(Color.argb(180, position*4, position*5, 255-position*2)); return convertView;\n\n}\n\nclass ViewHolder{\n\tprivate TextView tv;\n }\n```\n**3、界面切换**\n方法1:单个页面，横竖屏切换N次后 OOM 1、看看页面布局当中有没有大的图片，比如背景图之类的。\n\n去除xml中相关设置，改在程序中设置背景图(放在onCreate()方法中):\n\n在Activity destory时注意，bg.setCallback(null); 防止Activity得不到及时的释放 2\\. 跟上面方法相似，直接把xml配置文件加载成view 再放到一个容器里 然后直接调用 this.setContentView(View view);方法，避免xml的重复加载\n\n方法2: 在页面切换时尽可能少地重复使用一些代码 比如:重复调用数据库，反复使用某些对象等等......\n\n**4、内存分配**: 方法1:Android堆内存也可自己定义大小和优化Dalvik虚拟机的堆内存分配\n\n注意若使用这种方法:project build target 只能选择 <= 2.2 版本，否则编译将通不过。 所以不建议用这种方式\n\n**常见的内存使用不当的情况**\n\n**1、查询数据库没有关闭游标**\n\n程序中经常会进行查询数据库的操作，但是经常会有使用完毕Cursor后没有关闭的情况。如果我们的查询结果集比较小，对内存的消耗不容易被发现，只有在常时间大量操作的情况下才会复现内存问题，这样就会给以后的测试和问题排查带来困难和风险。\n\nDrawable bg = getResources().getDrawable(R.drawable.bg); XXX.setBackgroundDrawable(rlAdDetailone_bg);\nprivate final static int CWJ_HEAP_SIZE= 6*1024*1024;\nprivate final static float TARGET_HEAP_UTILIZATION = 0.75f; VMRuntime.getRuntime().setMinimumHeapSize(CWJ_HEAP_SIZE); VMRuntime.getRuntime().setTargetHeapUtilization(TARGET_HEAP_UTILIZATION);\nCursor cursor = null; try {\ncursor = getContentResolver().query(uri ...); if (cursor != null && cursor.moveToNext()) { ... ...\n}\n} finally {\nif (cursor != null) {\ntry { cursor.close();\n} catch (Exception e) {\n//ignore this }\n} }\n\n**2、构造Adapter时，没有使用缓存的 convertView**\n\n以构造ListView的BaseAdapter为例，在BaseAdapter中提供了方法: public View getView(int position, View convertView, ViewGroup parent)\n\n来向ListView提供每一个item所需要的view对象。初始时ListView会从BaseAdapter中根据当前的屏幕布局实例 化一定数量的 view对象，同时ListView会将这些view对象缓存起来。当向上滚动ListView时，原先位于最上面的 list item的view对象会被回收，然后被用来构造新出现的最下面的list item。这个构造过程就是由getView()方法完成的，getView()的第二个形参 View convertView就是被缓存起来的list item的view对象(初始化时缓存中没有view对 象则convertView是null)。\n由此可以看出，如果我们不去使用convertView，而是每次都在getView()中重新实例化一个View对象的话，即浪费资源也浪费时间，也会使得内存占用越来越大。ListView回收list item的view对象的过程可以查看:\n```\npublic View getView(int position, View convertView, ViewGroup parent) { View view = null;\nif (convertView != null) {\nview = convertView;\n\npopulate(view, getItem(position)); ...\n} else {\nview = new Xxx(...);\n\n...\n}\nreturn view;\n\n}\n```\n**3、Bitmap对象不在使用时调用recycle()释放内存**\n有时我们会手工的操作Bitmap对象，如果一个Bitmap对象比较占内存，当它不在被使用的时候，可以调用\nBitmap.recycle()方法回收此对象的像素所占用的内存，但这不是必须的，视情况而定。\n\n**4、释放对象的引用**\n当一个生命周期较短的对象A，被一个生命周期较长的对象B保有其引用的情况下，在A的生命周期结束时，\n\n要在B中清除掉对A的引用。 示例A:\n```\npublic class DemoActivity extends Activity { ... ...\nprivate Handler mHandler = ... private Object obj;\npublic void operation() {\nobj = initObj();\n...\n[Mark]\nmHandler.post(new Runnable() {\npublic void run() { useObj(obj);\n}\n});\n} }\n```\n我们有一个成员变量 obj，在operation()中我们希望能够将处理obj实例的操作post到某个线程的MessageQueue 中。在以上的代码中，即便是 mHandler所在的线程使用完了obj所引用的对象，但这个对象仍然不会被垃圾回收掉，因为DemoActivity.obj还保有这个对象的引用。 所以如果在DemoActivity中不再使用这个对象了，可以在 [Mark]的位置释放对象的引用，而代码可以修改为:\n```\n... ...\npublic void operation() {\nobj = initObj();\n...\nfinal Object o = obj;\nobj = null;\nmHandler.post(new Runnable() { public void run() {\nuseObj(o); }\n}\n}\n... ...\n```\n示例B: 假设我们希望在锁屏界面(LockScreen)中，监听系统中的电话服务以获取一些信息(如信号强度等)，则可以在\nLockScreen中定义一个PhoneStateListener的对象，同时将它注册到TelephonyManager服务中。对于LockScreen对象，当需要显示锁屏界 面的时候就会创建一个LockScreen对象，而当锁屏界面消失的时候LockScreen对象就会被释放掉。\n但是如果在释放LockScreen对象的时候忘记取消我们之前注册的PhoneStateListener对象，则会导致LockScreen无 法被垃 圾回收。如果不断的使锁屏界面显示和消失，则最终会由于大量的LockScreen对象没有办法被回收而引起OutOfMemory,使得system_process进程挂掉。\n\n**5、其他**\nAndroid应用程序中最典型的需要注意释放资源的情况是在Activity的生命周期中，在onPause()、onStop()、\nonDestroy()方法中需要适当的释放资源的情况。由于此情况很基础，在此不详细说明，具体可以查看官方文档对Activity生命周期的介绍，以明确何时应该释放哪些资源。\n\n## **第二轮**\n\n### 1.关于并发理解多少?说几个并发的集合?\n[Java 并发编程](http://www.cnblogs.com/paddix/p/5374810.html)\n\n2.Handler 消息机制图解?\n\n3.在项目中做了哪些东西?\n\n4.画图说明View 事件传递机制?并举一个例子阐述\n\n5.类加载机制,如何换肤,换肤插件中存在的问题?hotfix是否用过,原理是否了解?\n\n6.说说项目中用到了哪些设计模式,说了一下策略模式和观察者模式?\n\n7.会JS么?有Hybid开发经验么?\n\n8.说一下快排的思想?手写代码\n\n9.堆有哪些数据结构?\n\n对于这轮米那是明显感觉到压力,知识的纵向了解也比较深,应该是个leader.\n\n**第三轮**\n\n1.介绍一下在项目中的角色?\n\n2.遇到困难是怎么解决的?\n\n3.如何与人相处,与别人意见相左的时候是怎么解决的,并举生活中的一个例子.\n\n4.有没有压力特别大的时候?\n\n这个应该是项目经理了,问的问题偏向于生活性格方面.\n\n以上面试中问到的题目基本上都可以在上面找到答案,所以做准备是很重要的,但技术是一点点积累的,就算你全会背了,面试过了,真正等到工作的时候还是会捉襟见肘的,所以踏实点吧骚年.\n\n",[[1512292594859,["gengmei_pxf@gengmei123.local",[[1,49534,"# [Java 并发编程：核心理论](http://www.cnblogs.com/paddix/p/5374810.html)"]],[49534,49534],[49598,49598]]],[1512292613599,["gengmei_pxf@gengmei123.local",[[-1,49534,"# "]],[49536,49536],[49534,49534]]],[1512292631030,["gengmei_pxf@gengmei123.local",[[-1,49534,"["]],[49535,49535],[49534,49534]]],[1512292634990,["gengmei_pxf@gengmei123.local",[[-1,49548,"](http://www.cnblogs.com/paddix/p/5374810.html)"]],[49548,49595],[49548,49548]]],[1512292635670,["gengmei_pxf@gengmei123.local",[[1,49548,"**"]],[49548,49548],[49550,49550]]],[1512292638322,["gengmei_pxf@gengmei123.local",[[1,49534,"**"]],[49534,49534],[49536,49536]]],[1512292641053,["gengmei_pxf@gengmei123.local",[[1,49553,"\n"]],[49552,49552],[49553,49553]]],[1512292648189,["gengmei_pxf@gengmei123.local",[[1,49553,"共和香型"]],[49553,49553],[49557,49557]]],[1512292649869,["gengmei_pxf@gengmei123.local",[[-1,49553,"共和香型"]],[49557,49557],[49553,49553]]],[1512292668594,["gengmei_pxf@gengmei123.local",[[1,49553,"共享性，呼哧性"]],[49553,49553],[49560,49560]]],[1512292669821,["gengmei_pxf@gengmei123.local",[[-1,49557,"呼哧性"]],[49560,49560],[49557,49557]]],[1512292673865,["gengmei_pxf@gengmei123.local",[[1,49557,"互斥行"]],[49557,49557],[49560,49560]]],[1512292674396,["gengmei_pxf@gengmei123.local",[[-1,49559,"行"]],[49560,49560],[49559,49559]]],[1512292677526,["gengmei_pxf@gengmei123.local",[[1,49559,"性，"]],[49559,49559],[49561,49561]]],[1512292681095,["gengmei_pxf@gengmei123.local",[[1,49561,"院子"]],[49561,49561],[49563,49563]]],[1512292682306,["gengmei_pxf@gengmei123.local",[[-1,49561,"院子"]],[49563,49563],[49561,49561]]],[1512292686549,["gengmei_pxf@gengmei123.local",[[1,49561,"原子性，"]],[49561,49561],[49565,49565]]],[1512292689787,["gengmei_pxf@gengmei123.local",[[-1,49564,"，"]],[49565,49565],[49564,49564]]],[1512292701792,["gengmei_pxf@gengmei123.local",[[1,49564,"，可见性，有序性"]],[49564,49564],[49572,49572]]],[1512292706428,["gengmei_pxf@gengmei123.local",[[1,49573,"\n"]],[49572,49572],[49573,49573]]],[1512292712332,["gengmei_pxf@gengmei123.local",[[1,49534,"\n"]],[49533,49533],[49534,49534]]],[1512292716749,["gengmei_pxf@gengmei123.local",[[1,49553,"："]],[49553,49553],[49554,49554]]]]],["a87d31dc-1459-47e7-92a9-550cfc2d5a56",1512355701015,"# JAVA\n\n## 一. 类的加载过程，Person person = new Person();为例进行说明。\n\n1).因为new用到了Person.class，所以会先找到Person.class文件，并加载到内存中;\n\n2).执行该类中的static代码块，如果有的话，给Person.class类进行初始化;\n\n3).在堆内存中开辟空间分配内存地址;\n\n4).在堆内存中建立对象的特有属性，并进行默认初始化;\n\n5).对属性进行显示初始化;\n\n6).对对象进行构造代码块初始化;\n\n7).对对象进行与之对应的构造函数进行初始化;\n\n8).将内存地址付给栈内存中的p变量\n\n## 二. JVM相关知识，GC机制。\n\n**JVM基本构成**\n\n![](http://upload-images.jianshu.io/upload_images/4642697-bbcb5924cdaf30f8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/473)\n\n从上图可知，JVM主要包括四个部分：\n\n    1.类加载器（ClassLoader）:在JVM启动时或者在类运行时将需要的class加载到JVM中。（下图表示了从java源文件到JVM的整个过程，可配合理解。 \n\n![](http://upload-images.jianshu.io/upload_images/4642697-1cf5f815751beeab.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400)\n\n    2.执行引擎：负责执行class文件中包含的字节码指令；\n\n    3.内存区（也叫运行时数据区）：是在JVM运行的时候操作所分配的内存区。运行时内存区主要可以划分为5个区域，如图：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-160b9ba3bfeaf8f5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/376)\n\n*   方法区(Method Area)：用于存储类结构信息的地方，包括常量池、静态变量、构造函数等。虽然JVM规范把方法区描述为堆的一个逻辑部分， 但它却有个别名non-heap（非堆），所以大家不要搞混淆了。方法区还包含一个运行时常量池。\n\n*   java堆(Heap)：存储java实例或者对象的地方。这块是GC的主要区域。从存储的内容我们可以很容易知道，方法区和堆是被所有java线程共享的。\n\n*   java栈(Stack)：java栈总是和线程关联在一起，每当创建一个线程时，JVM就会为这个线程创建一个对应的java栈。在这个java栈中又会包含多个栈帧，每运行一个方法就创建一个栈帧，用于存储局部变量表、操作栈、方法返回值等。每一个方法从调用直至执行完成的过程，就对应一个栈帧在java栈中入栈到出栈的过程。所以java栈是现成私有的。\n\n*   程序计数器(PC Register)：用于保存当前线程执行的内存地址。由于JVM程序是多线程执行的（线程轮流切换），所以为了保证线程切换回来后，还能恢复到原先状态，就需要一个独立的计数器，记录之前中断的地方，可见程序计数器也是线程私有的。\n\n*   本地方法栈(Native Method Stack)：和java栈的作用差不多，只不过是为JVM使用到的native方法服务的。\n\n        4.本地方法接口：主要是调用C或C++实现的本地方法及返回结果。\n\n**GC机制**\n\n    垃圾收集器一般必须完成两件事：检测出垃圾；回收垃圾。怎么检测出垃圾？一般有以下几种方法：\n\n**_引用计数法：_**\n\n    给一个对象添加引用计数器，每当有个地方引用它，计数器就加1；引用失效就减1。好了，问题来了，如果我有两个对象A和B，互相引用，除此之外，没有其他任何对象引用它们，实际上这两个对象已经无法访问，即是我们说的垃圾对象。但是互相引用，计数不为0，导致无法回收，所以还有另一种方法：\n\n**_可达性分析算法：_**\n\n    以根集对象为起始点进行搜索，如果有对象不可达的话，即是垃圾对象。这里的根集一般包括java栈中引用的对象、方法区常良池中引用的对象、本地方法中引用的对象等。\n\n    总之，JVM在做垃圾回收的时候，会检查堆中的所有对象是否会被这些根集对象引用，不能够被引用的对象就会被垃圾收集器回收。一般回收算法也有如下几种：\n\n1).标记-清除（Mark-sweep）\n\n2).复制（Copying\n\n3).标记-整理（Mark-Compact）\n\n4).分代收集算法\n\n具体的解释可以参考本篇文章[还不点我?](https://link.jianshu.com?t=http://blog.csdn.net/tonytfjing/article/details/44278233)\n\n## 三. 类的加载器，双亲机制，Android的类加载器。\n\n**类的加载器**\n\n    大家都知道，当我们写好一个Java程序之后，不是管是CS还是BS应用，都是由若干个.class文件组织而成的一个完整的Java应用程序，当程序在运行时，即会调用该程序的一个入口函数来调用系统的相关功能，而这些功能都被封装在不同的class文件当中，所以经常要从这个class文件中要调用另外一个class文件中的方法，如果另外一个文件不存在的，则会引发系统异常。而程序在启动的时候，并不会一次性加载程序所要用的所有class文件，而是根据程序的需要，通过Java的类加载机制（ClassLoader）来动态加载某个class文件到内存当中的，从而只有class文件被载入到了内存之后，才能被其它class所引用。所以ClassLoader就是用来动态加载class文件到内存当中用的。\n\n**双亲机制**\n\n**_1、原理介绍_**\n\n    ClassLoader使用的是双亲委托模型来搜索类的，每个ClassLoader实例都有一个父类加载器的引用（不是继承的关系，是一个包含的关系），虚拟机内置的类加载器（Bootstrap ClassLoader）本身没有父类加载器，但可以用作其它ClassLoader实例的的父类加载器。当一个ClassLoader实例需要加载某个类时，它会试图亲自搜索某个类之前，先把这个任务委托给它的父类加载器，这个过程是由上至下依次检查的，首先由最顶层的类加载器Bootstrap ClassLoader试图加载，如果没加载到，则把任务转交给Extension ClassLoader试图加载，如果也没加载到，则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常。否则将这个找到的类生成一个类的定义，并将它加载到内存当中，最后返回这个类在内存中的Class实例对象。\n\n**_2、为什么要使用双亲委托这种模型呢？_**\n\n    因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。\n\n**_3、但是JVM在搜索类的时候，又是如何判定两个class是相同的呢？_**\n\n    JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。比如网络上的一个Java类org.classloader.simple.NetClassLoaderSimple，javac编译之后生成字节码文件NetClassLoaderSimple.class，ClassLoaderA和ClassLoaderB这两个类加载器并读取了NetClassLoaderSimple.class文件，并分别定义出了java.lang.Class实例来表示这个类，对于JVM来说，它们是两个不同的实例对象，但它们确实是同一份字节码文件，如果试图将这个Class实例生成具体的对象进行转换时，就会抛运行时异常java.lang.ClassCaseException，提示这是两个不同的类型。\n\n**Android类加载器**\n\n    对于Android而言，最终的apk文件包含的是dex类型的文件，dex文件是将class文件重新打包，打包的规则又不是简单地压缩，而是完全对class文件内部的各种函数表，变量表进行优化，产生一个新的文件，即dex文件。因此加载这种特殊的Class文件就需要特殊的类加载器DexClassLoader。\n\n## 四. 集合框架，list，map，set都有哪些具体的实现类，区别都是什么?\n\n![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：了对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**===****》****TreeSet****两种排序方式：**两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n## 五. concurrentHashmap原理，原子类。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大.\n\n## 六. volatile原理\n\n    在《Java并发编程：核心理论》一文中，我们已经提到过可见性、有序性及原子性问题，通常情况下我们可以通过Synchronized关键字来解决这些个问题，不过如果对Synchronized原理有了解的话，应该知道Synchronized是一个比较重量级的操作，对系统的性能有比较大的影响，所以，如果有其他解决方案，我们通常都避免使用Synchronized来解决问题。而volatile关键字就是Java中提供的另一种解决可见性和有序性问题的方案。对于原子性，需要强调一点，也是大家容易误解的一点：对volatile变量的单次读/写操作可以保证原子性的，如long和double类型变量，但是并不能保证i++这种操作的原子性，因为本质上i++是读、写两次操作。\n\n参考文章[插好眼了等传送](https://link.jianshu.com?t=https://www.cnblogs.com/paddix/p/5428507.html)\n\n## 七. 多线程的使用场景\n\n使用多线程就一定效率高吗？ 有时候使用多线程并不是为了提高效率，而是使得CPU能够同时处理多个事件。\n\n1).为了不阻塞主线程,启动其他线程来做好事的事情,比如APP中耗时操作都不在UI中做.\n\n2).实现更快的应用程序,即主线程专门监听用户请求,子线程用来处理用户请求,以获得大的吞吐量.感觉这种情况下，多线程的效率未必高。 这种情况下的多线程是为了不必等待， 可以并行处理多条数据。\n\n比如JavaWeb的就是主线程专门监听用户的HTTP请求，然后启动子线程去处理用户的HTTP请求。\n\n3).某种虽然优先级很低的服务，但是却要不定时去做。\n\n比如Jvm的垃圾回收。\n\n4.)某种任务，虽然耗时，但是不耗CPU的操作时，开启多个线程，效率会有显著提高。\n\n比如读取文件，然后处理。 磁盘IO是个很耗费时间，但是不耗CPU计算的工作。 所以可以一个线程读取数据，一个线程处理数据。肯定比一个线程读取数据，然后处理效率高。 因为两个线程的时候充分利用了CPU等待磁盘IO的空闲时间。\n\n## 八. JAVA常量池\n\n**_Interger中的128(-128~127)_**\n\na.当数值范围为-128~127时：如果两个new出来Integer对象，即使值相同，通过“==”比较结果为false，但两个对象直接赋值，则通过“==”比较结果为“true，这一点与String非常相似。\n\nb.当数值不在-128~127时，无论通过哪种方式，即使两个对象的值相等，通过“==”比较，其结果为false；\n\nc.当一个Integer对象直接与一个int基本数据类型通过“==”比较，其结果与第一点相同；\n\nd.Integer对象的hash值为数值本身；\n\n**_为什么是-128-127?_**\n\n    在Integer类中有一个静态内部类IntegerCache，在IntegerCache类中有一个Integer数组，用以缓存当数值范围为-128~127时的Integer对象。\n\n## 九. 简单介绍一下java中的泛型，泛型擦除以及相关的概念。\n\n    泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。 Java语言引入泛型的好处是安全简单。\n\n    在Java SE 1.5之前，没有泛型的情况的下，通过对类型Object的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是一个安全隐患。\n\n    泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，提高代码的重用率。\n\n1、泛型的类型参数只能是类类型（包括自定义类），不能是简单类型。\n\n2、同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的。\n\n3、泛型的类型参数可以有多个。\n\n4、泛型的参数类型可以使用extends语句，例如<T extends superclass>。习惯上称为“有界类型”。\n\n5、泛型的参数类型还可以是通配符类型。例如Class<?> classType = Class.forName(\"java.lang.String\");\n\n**泛型擦除以及相关的概念**\n\n    Java中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会在编译器在编译的时候去掉。这个过程就称为类型擦除。\n\n**类型擦除引起的问题及解决方法**\n\n1、先检查，在编译，以及检查编译的对象和引用传递的问题\n\n2、自动类型转换\n\n3、类型擦除与多态的冲突和解决方法\n\n4、泛型类型变量不能是基本数据类型\n\n5、运行时类型查询\n\n6、异常中使用泛型的问题\n\n7、数组（这个不属于类型擦除引起的问题）\n\n9、类型擦除后的冲突\n\n10、泛型在静态方法和静态类中的问题\n\n# Android\n\n## 一. Handler机制\n\n    Android 的消息机制也就是 handler 机制,创建 handler 的时候会创建一个 looper ( 通过 looper.prepare() 来创建 ),looper 一般为主线程 looper.\n\n    handler 通过 send 发送消息 (sendMessage) ,当然 post 一系列方法最终也是通过 send 来实现的,在 send 方法中handler 会通过 enqueueMessage() 方法中的 enqueueMessage(msg,millis )向消息队列 MessageQueue 插入一条消息,同时会把本身的 handler 通过 msg.target = this 传入.\n\n    Looper 是一个死循环,不断的读取MessageQueue中的消息,loop 方法会调用 MessageQueue 的 next 方法来获取新的消息,next 操作是一个阻塞操作,当没有消息的时候 next 方法会一直阻塞,进而导致 loop 一直阻塞,当有消息的时候,Looper 就会处理消息 Looper 收到消息之后就开始处理消息: msg.target.dispatchMessage(msg),当然这里的 msg.target 就是上面传过来的发送这条消息的 handler 对象,这样 handler 发送的消息最终又交给他的dispatchMessage方法来处理了,这里不同的是,handler 的 dispatchMessage 方法是在创建 Handler时所使用的 Looper 中执行的,这样就成功的将代码逻辑切换到了主线程了.\n\n    Handler 处理消息的过程是:首先,检查Message 的 callback 是否为 null,不为 null 就通过 handleCallBack 来处理消息,Message 的 callback 是一个 Runnable 对象,实际上是 handler 的 post 方法所传递的 Runnable 参数.其次是检查 mCallback 是 否为 null,不为 null 就调用 mCallback 的handleMessage 方法来处理消息.\n\n## 二. View的绘制流程\n\n    View的绘制流程：OnMeasure()——>OnLayout()——>OnDraw()\n\n各步骤的主要工作：\n\n**_OnMeasure()：_**\n\n    测量视图大小。从顶层父View到子View递归调用measure方法，measure方法又回调OnMeasure。\n\n**_OnLayout()：_**\n\n    确定View位置，进行页面布局。从顶层父View向子View的递归调用view.layout方法的过程，即父View根据上一步measure子View所得到的布局大小和布局参数，将子View放在合适的位置上。\n\n**_OnDraw()：_**\n\n    绘制视图:ViewRoot创建一个Canvas对象，然后调用OnDraw()。六个步骤：①、绘制视图的背景；②、保存画布的图层（Layer）；③、绘制View的内容；④、绘制View子视图，如果没有就不用；⑤、还原图层（Layer）；⑥、绘制滚动条。\n\n## 三. 事件传递机制\n\n1).Android事件分发机制的本质是要解决：点击事件由哪个对象发出，经过哪些对象，最终达到哪个对象并最终得到处理。这里的对象是指Activity、ViewGroup、View.\n\n2).Android中事件分发顺序：Activity（Window） -> ViewGroup -> View.\n\n3).事件分发过程由dispatchTouchEvent() 、onInterceptTouchEvent()和onTouchEvent()三个方法协助完成\n\n**设置Button按钮来响应点击事件事件传递情况：（如下图）**\n\n布局如下:\n\n![](http://upload-images.jianshu.io/upload_images/4642697-01f23a099103eb82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/210)\n\n最外层：Activiy A，包含两个子View：ViewGroup B、View C\n\n中间层：ViewGroup B，包含一个子View：View C\n\n最内层：View C\n\n假设用户首先触摸到屏幕上View C上的某个点（如图中黄色区域），那么Action_DOWN事件就在该点产生，然后用户移动手指并最后离开屏幕。\n\n**按钮点击事件:**\n\nDOWN事件被传递给C的onTouchEvent方法，该方法返回true，表示处理这个事件;\n\n因为C正在处理这个事件，那么DOWN事件将不再往上传递给B和A的onTouchEvent()；\n\n该事件列的其他事件（Move、Up）也将传递给C的onTouchEvent();\n\n![](http://upload-images.jianshu.io/upload_images/4642697-ca12c00c79780b57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n(记住这个图的传递顺序,面试的时候能够画出来,就很详细了)\n\n## 四. Binder机制\n\n**1.了解Binder**\n\n    在Android系统中，每一个应用程序都运行在独立的进程中，这也保证了当其中一个程序出现异常而不会影响另一个应用程序的正常运转。在许多情况下，我们activity都会与各种系统的service打交道，很显然，我们写的程序中activity与系统service肯定不是同一个进程，但是它们之间是怎样实现通信的呢？所以Binder是android中一种实现进程间通信（IPC）的方式之一。\n\n    1).首先，Binder分为Client和Server两个进程。\n\n    注意，Client和Server是相对的。谁发消息，谁就是Client，谁接收消息，谁就是Server。\n\n    举个例子，两个进程A和B之间使用Binder通信，进程A发消息给进程B，那么这时候A是Binder Client，B是Binder Server；进程B发消息给进程A，那么这时候B是Binder Client，A是Binder Server——其实这么说虽然简单了，但还是不太严谨，我们先这么理解着。\n\n    2).其次，我们看下面这个图（摘自田维术的博客），基本说明白了Binder的组成解构：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-9fed6a1413057558.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/673)\n\n    图中的IPC就是进程间通信的意思。\n\n    图中的ServiceManager，负责把Binder Server注册到一个容器中。\n\n    有人把ServiceManager比喻成电话局，存储着每个住宅的座机电话，还是很恰当的。张三给李四打电话，拨打电话号码，会先转接到电话局，电话局的接线员查到这个电话号码的地址，因为李四的电话号码之前在电话局注册过，所以就能拨通；没注册，就会提示该号码不存在。\n\n    对照着Android Binder机制，对着上面这图，张三就是Binder Client，李四就是Binder Server，电话局就是ServiceManager，电话局的接线员在这个过程中做了很多事情，对应着图中的Binder驱动.\n\n    3).接下来我们看Binder通信的过程，还是摘自田维术博客的一张图：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-6a03bbb4f16108b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/675)\n\n注：图中的SM也就是ServiceManager。\n\n    我们看到，Client想要直接调用Server的add方法，是不可以的，因为它们在不同的进程中，这时候就需要Binder来帮忙了。\n\n    首先是Server在SM这个容器中注册。\n\n    其次，Client想要调用Server的add方法，就需要先获取Server对象， 但是SM不会把真正的Server对象返回给Client，而是把Server的一个代理对象返回给Client，也就是Proxy。\n\n    然后，Client调用Proxy的add方法，SM会帮他去调用Server的add方法，并把结果返回给Client。\n\n    以上这3步，Binder驱动出了很多力，但我们不需要知道Binder驱动的底层实现，涉及到C++的代码了——把有限的时间去做更有意义的事情。\n\n(ps:以上节选自包建强老师的文章[点我点我](https://link.jianshu.com?t=http://www.cnblogs.com/Jax/p/6864103.html)).\n\n**2.为什么android选用Binder来实现进程间通信？**\n\n1).可靠性。在移动设备上，通常采用基于Client-Server的通信方式来实现互联网与设备间的内部通信。目前linux支持IPC包括传统的管道，System V IPC，即消息队列/共享内存/信号量，以及socket中只有socket支持Client-Server的通信方式。Android系统为开发者提供了丰富进程间通信的功能接口，媒体播放，传感器，无线传输。这些功能都由不同的server来管理。开发都只关心将自己应用程序的client与server的通信建立起来便可以使用这个服务。毫无疑问，如若在底层架设一套协议来实现Client-Server通信，增加了系统的复杂性。在资源有限的手机 上来实现这种复杂的环境，可靠性难以保证。\n\n2).传输性能。socket主要用于跨网络的进程间通信和本机上进程间的通信，但传输效率低，开销大。消息队列和管道采用存储-转发方式，即数据先从发送方缓存区拷贝到内核开辟的一块缓存区中，然后从内核缓存区拷贝到接收方缓存区，其过程至少有两次拷贝。虽然共享内存无需拷贝，但控制复杂。比较各种IPC方式的数据拷贝次数。共享内存：0次。Binder：1次。Socket/管道/消息队列：2次。\n\n3).安全性。Android是一个开放式的平台，所以确保应用程序安全是很重要的。Android对每一个安装应用都分配了UID/PID,其中进程的UID是可用来鉴别进程身份。传统的只能由用户在数据包里填写UID/PID，这样不可靠，容易被恶意程序利用。而我们要求由内核来添加可靠的UID。\n\n所以，出于可靠性、传输性、安全性。android建立了一套新的进程间通信方式。\n\n## 五. Android中进程的级别，以及各自的区别。\n\n**1、前台进程**\n\n    用户当前正在做的事情需要这个进程。如果满足下面的条件之一，一个进程就被认为是前台进程：\n\n1).这个进程拥有一个正在与用户交互的Activity(这个Activity的onResume()方法被调用)。\n\n2).这个进程拥有一个绑定到正在与用户交互的activity上的Service。\n\n3).这个进程拥有一个前台运行的Service（service调用了方法startForeground()）.\n\n4).这个进程拥有一个正在执行其任何一个生命周期回调方法（onCreate(),onStart(),或onDestroy()）的Service。\n\n5).这个进程拥有正在执行其onReceive()方法的BroadcastReceiver。\n\n    通常，在任何时间点，只有很少的前台进程存在。它们只有在达到无法调合的矛盾时才会被杀－－如内存太小而不能继续运行时。通常，到了这时，设备就达到了一个内存分页调度状态，所以需要杀一些前台进程来保证用户界面的反应.\n\n**2、可见进程**\n\n    一个进程不拥有运行于前台的组件，但是依然能影响用户所见。满足下列条件时，进程即为可见：\n\n    这个进程拥有一个不在前台但仍可见的Activity(它的onPause()方法被调用)。当一个前台activity启动一个对话框时，就出了这种情况。\n\n**3、服务进程**\n\n    一个可见进程被认为是极其重要的。并且，除非只有杀掉它才可以保证所有前台进程的运行，否则是不能动它的。\n\n    这个进程拥有一个绑定到可见activity的Service。\n\n    一个进程不在上述两种之内，但它运行着一个被startService()所启动的service。\n\n尽管一个服务进程不直接影响用户所见，但是它们通常做一些用户关心的事情（比如播放音乐或下载数据），所以系统不到前台进程和可见进程活不下去时不会杀它。\n\n**4、后台进程**\n\n    一个进程拥有一个当前不可见的activity(activity的onStop()方法被调用)。\n\n    这样的进程们不会直接影响到用户体验，所以系统可以在任意时刻杀了它们从而为前台、可见、以及服务进程们提供存储空间。通常有很多后台进程在运行。它们被保存在一个LRU(最近最少使用)列表中来确保拥有最近刚被看到的activity的进程最后被杀。如果一个activity正确的实现了它的生命周期方法，并保存了它的当前状态，那么杀死它的进程将不会对用户的可视化体验造成影响。因为当用户返回到这个activity时，这个activity会恢复它所有的可见状态。\n\n**5、空进程**\n\n    一个进程不拥有入何active组件。\n\n    保留这类进程的唯一理由是高速缓存，这样可以提高下一次一个组件要运行它时的启动速度。系统经常为了平衡在进程高速缓存和底层的内核高速缓存之间的整体系统资源而杀死它们。\n\n## 六. 线程池的相关知识。\n\n    Android中的线程池都是之间或间接通过配置ThreadPoolExecutor来实现不同特性的线程池.Android中最常见的四类具有不同特性的线程池分别为FixThreadPool、CachedThreadPool、SingleThreadPool、ScheduleThreadExecutor.\n\n**1).FixThreadPool**\n\n    只有核心线程,并且数量固定的,也不会被回收,所有线程都活动时,因为队列没有限制大小,新任务会等待执行.\n\n    优点:更快的响应外界请求.\n\n**2).SingleThreadPool**\n\n    只有一个核心线程,确保所有的任务都在同一线程中按顺序完成.因此不需要处理线程同步的问题.\n\n**3).CachedThreadPool**\n\n    只有非核心线程,最大线程数非常大,所有线程都活动时,会为新任务创建新线程,否则会利用空闲线程(60s空闲时间,过了就会被回收,所以线程池中有0个线程的可能)处理任务.\n\n    优点:任何任务都会被立即执行(任务队列SynchronousQueue相当于一个空集合);比较适合执行大量的耗时较少的任务.\n\n**4).ScheduledThreadPool**\n\n    核心线程数固定,非核心线程(闲着没活干会被立即回收)数没有限制.\n\n    优点:执行定时任务以及有固定周期的重复任务\n\n    参考[Android开发——Android中常见的4种线程池（保证你能看懂并理解）](https://link.jianshu.com?t=http://blog.csdn.net/seu_calvin/article/details/52415337)\n\n## 七. 内存泄露，怎样查找，怎么产生的内存泄露。\n\n**产生的内存泄露**\n\n1).资源对象没关闭造成的内存泄漏\n\n2).构造Adapter时，没有使用缓存的convertView\n\n3).Bitmap对象不在使用时调用recycle()释放内存\n\n4).试着使用关于application的context来替代和activity相关的context\n\n5).注册没取消造成的内存泄漏\n\n6).集合中对象没清理造成的内存泄漏\n\n**查找内存泄漏**\n\n    查找内存泄漏可以使用Android Stdio 自带的Android Profiler工具,也可以使用Square产品的LeadCanary.\n\n## 八. Android优化\n\n**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n## 九. 插件化相关技术，热修补技术是怎样实现的，和插件化有什么区别\n\n**相同点:**\n\n    都使用ClassLoader来实现的加载的新的功能类，都可以使用PathClassLoader与DexClassLoader\n\n**不同点：**\n\n    热修复因为是为了修复Bug的，所以要将新的同名类替代同名的Bug类，要抢先加载新的类而不是Bug类，所以多做两件事：在原先的app打包的时候，阻止相关类去打上CLASS_ISPREVERIFIED标志，还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements，这样才能抢先代替Bug类，完成系统不加载旧的Bug类.\n\n    而插件化只是增肌新的功能类或者是资源文件，所以不涉及抢先加载旧的类这样的使命，就避过了阻止相关类去打上CLASS_ISPREVERIFIED标志和还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements.\n\n    所以插件化比热修复简单，热修复是在插件化的基础上在进行替旧的Bug类\n\n## 十. 怎样计算一张图片的大小，加载bitmap过程（怎样保证不产生内存溢出），二级缓存，LRUCache算法。\n\n**计算一张图片的大小**\n\n    图片占用内存的计算公式：图片高度 * 图片宽度 * 一个像素占用的内存大小.所以，计算图片占用内存大小的时候，要考虑图片所在的目录跟设备密度，这两个因素其实影响的是图片的高宽，android会对图片进行拉升跟压缩。\n\n**加载bitmap过程（怎样保证不产生内存溢出）**\n\n    由于Android对图片使用内存有限制，若是加载几兆的大图片便内存溢出。Bitmap会将图片的所有像素（即长x宽）加载到内存中，如果图片分辨率过大，会直接导致内存OOM，只有在BitmapFactory加载图片时使用BitmapFactory.Options对相关参数进行配置来减少加载的像素。\n\n**BitmapFactory.Options相关参数详解**\n\n(1).Options.inPreferredConfig值来降低内存消耗。\n\n比如：默认值ARGB_8888改为RGB_565,节约一半内存。\n\n(2).设置Options.inSampleSize 缩放比例，对大图片进行压缩 。\n\n(3).设置Options.inPurgeable和inInputShareable：让系统能及时回 收内存。\n\nA：inPurgeable：设置为True时，表示系统内存不足时可以被回 收，设置为False时，表示不能被回收。\n\nB：inInputShareable：设置是否深拷贝，与inPurgeable结合使用，inPurgeable为false时，该参数无意义。\n\n(4).使用decodeStream代替其他方法。\n\ndecodeResource,setImageResource,setImageBitmap等方法\n\n## 十一. LRUCache算法是怎样实现的。\n\n    内部存在一个LinkedHashMap和maxSize，把最近使用的对象用强引用存储在 LinkedHashMap中，给出来put和get方法，每次put图片时计算缓存中所有图片总大小，跟maxSize进行比较，大于maxSize，就将最久添加的图片移除；反之小于maxSize就添加进来。\n\n    之前，我们会使用内存缓存技术实现，也就是软引用或弱引用，在Android 2.3（APILevel 9）开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，这让软引用和弱引用变得不再可靠。\n\n# 算法\n\n## 一. 算法题\n\nm * n的矩阵，能形成几个正方形（2 * 2能形成1个正方形，2 * 3 2个，3 * 3 6个）\n\n计数的关键是要观察到任意一个倾斜的正方形必然唯一内接于一个非倾斜的正方形，而一个非倾斜的边长为k的非倾斜正方形，一条边上有k-1个内点，每个内点恰好确定一个内接于其中的倾斜正方形，加上非倾斜正方形本身，可知，将边长为k的非倾斜正方形数目乘以k，再按k求和即可得到所有正方形的数目。\n\n设2≤n≤m，k≤n-1，则边长为k的非倾斜有\n\n(n-k)(m-k)个，故所有正方形有\n\n∑(m-k)(n-k)k个\n\n例如m=n=4\n\n正方形有3_3_1+2_2_2+1_1_3=20个\n\n# 下面是面试过程中遇到的题目\n\n大多数题目都可以在上面找到答案.\n\n## 电话面试题\n\n### 1.ArrayList 和 Hashmap 简单说一些,区别,底层的数据结构.\n\n### 2.Handler 消息机制\n\n### 3.引起内存泄漏的场景\n\n### 4.多线程的使用场景?\n\n### 5.常用的线程池有哪几种?\n\n### 6.在公司做了什么?团队规模?为什么离职?\n\n## 面试中实际涉及到的问题\n\n**第一轮**\n\n### **1.知道哪些单例模式,写一个线程安全的单例,并分析为什么是线程安全的**?\n```java\npublic class Singleton {\n\t// Private constructor prevents instantiation from other classes\n\tprivate Singleton() { }\n\n\t/**\n\t* SingletonHolder is loaded on the first execution of Singleton.getInstance() \n\t* or the first access to SingletonHolder.INSTANCE, not before.\n\t*/\n\tprivate static class SingletonHolder { \n\t\t\tpublic static final Singleton INSTANCE = new Singleton();\n\t}\n\n\tpublic static Singleton getInstance() {\n\t\t\treturn SingletonHolder.INSTANCE;\n\t}\n}\n```\n### **2.Java中的集合有哪些?解释一下HashMap?底部的数据结构?散列表冲突的处理方法,散列表是一个什么样的数据结构?HashMap是采用什么方法处理冲突的**?\n\n![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n```\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n```\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**TreeSet两种排序方式**：两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\n```\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n```\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\n```\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n```\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\n```\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n```\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n **五. concurrentHashmap原理，原子类**。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大.\n\n### **3.解释一下什么是MVP架构,画出图解,一句话解释MVP和MVC的区别**?\n\n为了解决逻辑处理和UI视图的松散耦合，MVC和MVP的架构模式在很多App中使用比较广泛。\n\n那什么是MVP呢？它又和我们常常听到的MVC有什么关系了以及区别呢？\n\n![MVP和MVC架构图](http://frodoking.github.io/img/android/mvp_mvc_img.png)\n\nMVP 是从经典的模式MVC演变而来，它们的基本思想有相通的地方：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。作为一种新的模式，**MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会从直接Model中读取数据而不是通过 Controller**。\n\n在MVC里，View是可以直接访问Model的！从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。 在MVC模型里，更关注的Model的不变，而同时有多个对Model的不同显示，及View。所以，在MVC模型里，Model不依赖于View，但是View是依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。\n\n**MVP如何解决MVC的问题**？\n\n在MVP里，Presenter完全把Model和View进行了分离，主要的程序逻辑在Presenter里实现。而且，Presenter与具体的View是没有直接关联的，而是通过定义好的接口进行交互，从而使得在变更View时候可以保持Presenter的不变，即重用！ 不仅如此，我们还可以编写测试用的View，模拟用户的各种操作，从而实现对Presenter的测试–而不需要使用自动化的测试工具。 我们甚至可以在Model和View都没有完成时候，就可以通过编写Mock Object（即实现了Model和View的接口，但没有具体的内容的）来测试Presenter的逻辑。 在MVP里，应用程序的逻辑主要在Presenter来实现，其中的View是很薄的一层。因此就有人提出了Presenter First的设计模式，就是根据User Story来首先设计和开发Presenter。在这个过程中，View是很简单的，能够把信息显示清楚就可以了。在后面，根据需要再随便更改View，而对Presenter没有任何的影响了。 如果要实现的UI比较复杂，而且相关的显示逻辑还跟Model有关系，就可以在View和Presenter之间放置一个Adapter。由这个 Adapter来访问Model和View，避免两者之间的关联。而同时，因为Adapter实现了View的接口，从而可以保证与Presenter之间接口的不变。这样就可以保证View和Presenter之间接口的简洁，又不失去UI的灵活性。 在MVP模式里，View只应该有简单的Set/Get的方法，用户输入和设置界面显示的内容，除此就不应该有更多的内容，绝不容许直接访问Model–这就是与MVC很大的不同之处。\n\nMVP的优点：\n\n> 1、模型与视图完全分离，我们可以修改视图而不影响模型；\n> 2、可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部；\n> 3、我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁；\n> 4、如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）。\n\n**使用方法**\n\n1、建立bean\n\n```\n\npublic class UserBean {\n private String mFirstName;\n private String mLastName;\n\n public UserBean(String firstName, String lastName) {\n this. mFirstName = firstName;\n this. mLastName = lastName;\n }\n\n public String getFirstName() {\n return mFirstName;\n }\n\n public String getLastName() {\n return mLastName;\n }\n}\n```\n \n2、建立model接口（处理业务逻辑，这里指数据读写）\n\n```\n\npublic interface IUserModel {\n void setID(int id);\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n\n int getID();\n\n UserBean load(int id);// 通过id读取user信息,返回一个UserBean\n}\n```\n\n3、建立view接口（更新ui中的view状态），这里列出需要操作当前view的方法\n\n``` \n\npublic interface IUserView {\n int getID();\n\n String getFristName();\n\n String getLastName();\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n}\n\n ```\n4、建立presenter（主导器，通过iView和iModel接口操作model和view），activity可以把所有逻辑给presenter处理，这样java逻辑就从手机的activity中分离出来\n\n```\npublic class UserPresenter {\n private IUserView mUserView;\n private IUserModel mUserModel;\n\n public UserPresenter(IUserView view) {\n mUserView = view;\n mUserModel = new UserModel();\n }\n\n public void saveUser( int id, String firstName, String lastName) {\n mUserModel.setID(id);\n mUserModel.setFirstName(firstName);\n mUserModel.setLastName(lastName);\n }\n\n public void loadUser( int id) {\n UserBean user = mUserModel.load(id);\n mUserView.setFirstName(user.getFirstName()); // 通过调用IUserView的方法来更新显示\n mUserView.setLastName(user.getLastName());\n }\n}\n\n ```\n**结束语**\n\nMVP主要解决就是把逻辑层抽出来成P层，要是遇到需求逻辑上的更改就可以只需要修改P层了或者遇到逻辑上的大概我们可以直接从写一个P也可以，很多开发人员把所有的东西都写在了Activity/Fragment里面这样一来遇到频繁改需求或者逻辑越来越复杂的时候，Activity/Fragment里面就会出现过多的混杂逻辑导致出错，所以MVP模式对于APP来对控制逻辑和UI的解耦来说是一个不错的选择！\n\n在这里多说一下，其实MVP只是一个总体的解决方案。在V和P之间其实我们还可以采用事件总线的方案来解决这种高耦合的情况。本人在另外一篇文章中将会讲到[事件总线（otto的bus和eventbus的一个对比分析）](https://frodoking.github.io/2015/03/30/android-eventbus-otto-analysis/)\n\n\n### **4.Handle消息机制?在使用Handler的时候要注意哪些东西,是否会引起内存泄漏?画一下Handler机制的图解**?\n\n![](http://upload-images.jianshu.io/upload_images/1824194-a947dcc5b22f69fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面一共出现了几种类，ActivityThread，Handler，MessageQueue，Looper，msg（Message）,对这些类作简要介绍：\n\nActivityThread：程序的启动入口，为什么要介绍这个类，是因为该类就是我们说的主线程，它对Looper进行操作的。\n\nHandler：字面意思是操控者，该类有比较重要的地方，就是通过handler来发送消息（sendMessage）到MessageQueue和 操作控件的更新（handleMessage）。handler下面持有这MessageQueue和Looper的对象。\n\nMessageQueue：字面意思是消息队列，就是封装Message类。对Message进行插入和取出操作。\n\nMessage：这个类是封装消息体并被发送到MessageQueue中的，给类是通过链表实现的，其好处方便MessageQueue的插入和取出操作。还有一些字段是（int what，Object obj，int arg1，int arg2）。what是用户定义的消息和代码，以便接收者（handler）知道这个是关于什么的。obj是用来传输任意对象的，arg1和arg2是用来传递一些简单的整数类型的。\n\n下面，我们按照启动顺序来进行源码分析：\n\n![](http://upload-images.jianshu.io/upload_images/1824194-298ebb16ce4a3b70.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://raw.githubusercontent.com/bihe0832/Android-System-Related-Charts/master/framework/handler-sequence.jpg)\n\n\n\n### **5.是否做过性能优化?已经采取了哪些措施进行优化**?\n\n**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n### **6.引起内存泄漏的原因是什么?以及你是怎么解决的**?\n\n这些问题应该都是比较基础的问题,每个开发者都应该是非常熟悉并能详细叙述的.这一轮的面试官问的技术都是平时用到的.\n\n**产生的内存泄露**\n\n1).资源对象没关闭造成的内存泄漏\n\n2).构造Adapter时，没有使用缓存的convertView\n\n3).Bitmap对象不在使用时调用recycle()释放内存\n\n4).试着使用关于application的context来替代和activity相关的context\n\n5).注册没取消造成的内存泄漏\n\n6).集合中对象没清理造成的内存泄漏\n\nAndroid的虚拟机是基于寄存器的Dalvik，它的最大堆大小一般是16M，有的机器为24M。因此我们所能利用 的内存空间是有限的。如果我们的内存占用超过了一定的水平就会出现OutOfMemory的错误。\n\n内存溢出的几点原因总结:\n1、**资源释放问题**: 程序代码的问题，长期保持某些资源(如Context)的引用，造成内存泄露，资源得不到释放 \n\n2、**对象内存过大问题**:\n保存了多个耗用内存过大的对象(如Bitmap)，造成内存超出限制\n\n3、**static**:\nstatic是Java中的一个关键字，当用它来修饰成员变量时，那么该变量就属于该类，而不是该类的实例。所以 用static修饰的变量，它的生命周期是很长的，如果用它来引用一些资源耗费过多的实例(Context的情况最多）\n这时就要谨慎对待了。 \n```\npublic class ClassName {\n private static Context mContext;\n//省略 }\n```\n以上的代码是很危险的，如果将Activity赋值到mContext的话。那么即使该Activity已经onDestroy，但是由于 仍有对象保存它的引用，因此该Activity依然不会被释放。\n我们举Android文档中的一个例子。\n```\nprivate static Drawable sBackground; @Override\nprotected void onCreate(Bundle state) {\n\tsuper.onCreate(state);\n\tTextView label = new TextView(this);\n        label.setText(\"Leaks are bad\");\n\tif (sBackground == null) {\n\tsBackground = getDrawable(R.drawable.large_bitmap); }\n\tlabel.setBackgroundDrawable(sBackground);\n\tsetContentView(label); }\n```\nsBackground, 是 一个静态的变量，但是我们发现，我们并没有显式的保存Contex的引用，但是，当Drawable与\n\nView连接之后，Drawable就将View设 置为一个回调，由于View中是包含Context的引用的，所以，实际上我们依\n\n然保存了Context的引用。这个引用链如下: Drawable->TextView->Context\n\n所以，最终该Context也没有得到释放，发生了内存泄露。\n\n**针对static的解决方案**:\n\n第一、应该尽量避免static成员变量引用资源耗费过多的实例，比如Context。\n\n第二、Context尽量使用Application Context，因为Application的Context的生命周期比较长，引用它不会出现内存\n泄露的问题。\n\n第三、使用WeakReference代替强引用。比如可以使用WeakReference<Context> mContextRef; 该部分的详细内容也可以参考Android文档中Article部分。\n\n4、**线程导致内存溢出**:\n线程产生内存泄露的主要原因在于线程生命周期的不可控。我们来考虑下面一段代码。\n```\npublic class MyActivity extends Activity {\n \t@Override\n\tpublic void onCreate(Bundle savedInstanceState) {\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.main);\n\tnew MyThread().start();\n}\nprivate class MyThread extends Thread{\n\t@Override public void run() {\n\tsuper.run();\n\t//do somthing }\n\t} \n}\n```\n这段代码很平常也很简单，是我们经常使用的形式。我们思考一个问题:假设MyThread的run函数是一个很 费时的操作，当我们开启该线程后，将设备的横屏变为了竖屏，一 般情况下当屏幕转换时会重新创建Activity， 按照我们的想法，老的Activity应该会被销毁才对，然而事实上并非如此。\n\n由于我们的线程是Activity的内部类，所以MyThread中保存了Activity的一个引用，当MyThread的run函数没有 结束时，MyThread是不会被销毁的，因此它所引用的老的Activity也不会被销毁，因此就出现了内存泄露的问题。\n\n有些人喜欢用Android提供的AsyncTask，但事实上AsyncTask的问题更加严重，Thread只有在run函数不结束时才出现这种内存泄露问题，然而AsyncTask内部的实现机制是运用了ThreadPoolExcutor,该类产生的Thread对象的生命周期是不确定的，是应用程序无法控制的，因此如果AsyncTask作为Activity的内部类，就更容易出现内存\n\n**泄露的问题**。\n\n针对这种线程导致的内存泄露问题的解决方案: \n\n第一、将线程的内部类，改为静态内部类。\n\n第二、在线程内部采用弱引用保存Context引用。\n\n二、避免内存溢出的方案:\n** 1、图片过大导致内存溢出**: 模拟器的RAM比较小，由于每张图片先前是压缩的情况，放入到Bitmap的时候，大小会变大，导致超出RAM内存\n\n★android 中用bitmap 时很容易内存溢出，报如下错误:Java.lang.OutOfMemoryError : bitmap size exceeds VM budget \n解决: 方法1: 主要是加上这段:等比例缩小图片\n\n1)通过getResource()方法获取资源:\n```\n//解决加载图片 内存溢出的问题 \n//Options 只保存图片尺寸大小，不保存图片到内存\nBitmapFactory.Options options = new BitmapFactory.Options();\noptions.inSampleSize = 2;\n\n//缩放的比例，缩放是很难按准备的比例进行缩放的，其值表明缩放的倍数，SDK中建议其值是2的指数值,值越大会导致图片不清晰\nBitmapFactory.Options opts = new BitmapFactory.Options(); \nopts.inSampleSize = 2;\nBitmap bmp = null;\nbmp = BitmapFactory.decodeResource(getResources(), mImageIds[position],opts); ...\n//回收\nbmp.recycle();\n```\n2)通过Uri取图片资源\n以上代码可以优化内存溢出，但它只是改变图片大小，并不能彻底解决内存溢出。\n3)通过路径获取图片资源\n\n方法2:对图片采用软引用，及时地进行recyle()操作\n\n具体见“各种引用的简单了解”中的示例\n**2、复用listView**: 方法:对复杂的listview进行合理设计与编码:\n```\nprivate ImageView preview;\nBitmapFactory.Options options = new BitmapFactory.Options();\n//图片宽高都为原来的二分之一，即图片为原来的四分之一\noptions.inSampleSize = 2;\nBitmap bitmap = BitmapFactory.decodeStream(cr.openInputStream(uri), null, options); preview.setImageBitmap(bitmap);\nprivate ImageView preview;\nprivate String fileName= \"/sdcard/DCIM/Camera/2010-05-14 16.01.44.jpg\"; BitmapFactory.Options options = new BitmapFactory.Options();\n//图片宽高都为原来的二分之一，即图片为原来的四分之一 \noptions.inSampleSize = 2;\nBitmap b = BitmapFactory.decodeFile(fileName, options);\npreview.setImageBitmap(b); filePath.setText(fileName);\nSoftReference<Bitmap> bitmap;\nbitmap = new SoftReference<Bitmap>(pBitmap);\nif(bitmap != null){\n\tif(bitmap.get() != null && !bitmap.get().isRecycled()){ bitmap.get().recycle();\n\tbitmap= null;\n }\n}\n\nAdapter中:\n\n@Override\npublic View getView(int position, View convertView, ViewGroup parent) {\n\tViewHolder holder;\n\tif(convertView!=null && convertView instanceof LinearLayout){\n\tholder = (ViewHolder) convertView.getTag(); }else{\n\tconvertView = View.inflate(MainActivity.this, R.layout.item, null); holder = new ViewHolder();\n\tholder.tv = (TextView)\nconvertView.findViewById(R.id.tv); convertView.setTag(holder);\n}\nholder.tv.setText(\"XXXX\");\nholder.tv.setTextColor(Color.argb(180, position*4, position*5, 255-position*2)); return convertView;\n\n}\n\nclass ViewHolder{\n\tprivate TextView tv;\n }\n```\n**3、界面切换**\n方法1:单个页面，横竖屏切换N次后 OOM 1、看看页面布局当中有没有大的图片，比如背景图之类的。\n\n去除xml中相关设置，改在程序中设置背景图(放在onCreate()方法中):\n\n在Activity destory时注意，bg.setCallback(null); 防止Activity得不到及时的释放 2\\. 跟上面方法相似，直接把xml配置文件加载成view 再放到一个容器里 然后直接调用 this.setContentView(View view);方法，避免xml的重复加载\n\n方法2: 在页面切换时尽可能少地重复使用一些代码 比如:重复调用数据库，反复使用某些对象等等......\n\n**4、内存分配**: 方法1:Android堆内存也可自己定义大小和优化Dalvik虚拟机的堆内存分配\n\n注意若使用这种方法:project build target 只能选择 <= 2.2 版本，否则编译将通不过。 所以不建议用这种方式\n\n**常见的内存使用不当的情况**\n\n**1、查询数据库没有关闭游标**\n\n程序中经常会进行查询数据库的操作，但是经常会有使用完毕Cursor后没有关闭的情况。如果我们的查询结果集比较小，对内存的消耗不容易被发现，只有在常时间大量操作的情况下才会复现内存问题，这样就会给以后的测试和问题排查带来困难和风险。\n\nDrawable bg = getResources().getDrawable(R.drawable.bg); XXX.setBackgroundDrawable(rlAdDetailone_bg);\nprivate final static int CWJ_HEAP_SIZE= 6*1024*1024;\nprivate final static float TARGET_HEAP_UTILIZATION = 0.75f; VMRuntime.getRuntime().setMinimumHeapSize(CWJ_HEAP_SIZE); VMRuntime.getRuntime().setTargetHeapUtilization(TARGET_HEAP_UTILIZATION);\nCursor cursor = null; try {\ncursor = getContentResolver().query(uri ...); if (cursor != null && cursor.moveToNext()) { ... ...\n}\n} finally {\nif (cursor != null) {\ntry { cursor.close();\n} catch (Exception e) {\n//ignore this }\n} }\n\n**2、构造Adapter时，没有使用缓存的 convertView**\n\n以构造ListView的BaseAdapter为例，在BaseAdapter中提供了方法: public View getView(int position, View convertView, ViewGroup parent)\n\n来向ListView提供每一个item所需要的view对象。初始时ListView会从BaseAdapter中根据当前的屏幕布局实例 化一定数量的 view对象，同时ListView会将这些view对象缓存起来。当向上滚动ListView时，原先位于最上面的 list item的view对象会被回收，然后被用来构造新出现的最下面的list item。这个构造过程就是由getView()方法完成的，getView()的第二个形参 View convertView就是被缓存起来的list item的view对象(初始化时缓存中没有view对 象则convertView是null)。\n由此可以看出，如果我们不去使用convertView，而是每次都在getView()中重新实例化一个View对象的话，即浪费资源也浪费时间，也会使得内存占用越来越大。ListView回收list item的view对象的过程可以查看:\n```\npublic View getView(int position, View convertView, ViewGroup parent) { View view = null;\nif (convertView != null) {\nview = convertView;\n\npopulate(view, getItem(position)); ...\n} else {\nview = new Xxx(...);\n\n...\n}\nreturn view;\n\n}\n```\n**3、Bitmap对象不在使用时调用recycle()释放内存**\n有时我们会手工的操作Bitmap对象，如果一个Bitmap对象比较占内存，当它不在被使用的时候，可以调用\nBitmap.recycle()方法回收此对象的像素所占用的内存，但这不是必须的，视情况而定。\n\n**4、释放对象的引用**\n当一个生命周期较短的对象A，被一个生命周期较长的对象B保有其引用的情况下，在A的生命周期结束时，\n\n要在B中清除掉对A的引用。 示例A:\n```\npublic class DemoActivity extends Activity { ... ...\nprivate Handler mHandler = ... private Object obj;\npublic void operation() {\nobj = initObj();\n...\n[Mark]\nmHandler.post(new Runnable() {\npublic void run() { useObj(obj);\n}\n});\n} }\n```\n我们有一个成员变量 obj，在operation()中我们希望能够将处理obj实例的操作post到某个线程的MessageQueue 中。在以上的代码中，即便是 mHandler所在的线程使用完了obj所引用的对象，但这个对象仍然不会被垃圾回收掉，因为DemoActivity.obj还保有这个对象的引用。 所以如果在DemoActivity中不再使用这个对象了，可以在 [Mark]的位置释放对象的引用，而代码可以修改为:\n```\n... ...\npublic void operation() {\nobj = initObj();\n...\nfinal Object o = obj;\nobj = null;\nmHandler.post(new Runnable() { public void run() {\nuseObj(o); }\n}\n}\n... ...\n```\n示例B: 假设我们希望在锁屏界面(LockScreen)中，监听系统中的电话服务以获取一些信息(如信号强度等)，则可以在\nLockScreen中定义一个PhoneStateListener的对象，同时将它注册到TelephonyManager服务中。对于LockScreen对象，当需要显示锁屏界 面的时候就会创建一个LockScreen对象，而当锁屏界面消失的时候LockScreen对象就会被释放掉。\n但是如果在释放LockScreen对象的时候忘记取消我们之前注册的PhoneStateListener对象，则会导致LockScreen无 法被垃 圾回收。如果不断的使锁屏界面显示和消失，则最终会由于大量的LockScreen对象没有办法被回收而引起OutOfMemory,使得system_process进程挂掉。\n\n**5、其他**\nAndroid应用程序中最典型的需要注意释放资源的情况是在Activity的生命周期中，在onPause()、onStop()、\nonDestroy()方法中需要适当的释放资源的情况。由于此情况很基础，在此不详细说明，具体可以查看官方文档对Activity生命周期的介绍，以明确何时应该释放哪些资源。\n\n## **第二轮**\n\n### 1.关于并发理解多少?说几个并发的集合?\n[Java 并发编程](http://www.cnblogs.com/paddix/p/5374810.html)\n\n**Java 并发编程：核心理论**：\n共享性，互斥性，原子性，可见性，有序性\n\n2.Handler 消息机制图解?\n\n3.在项目中做了哪些东西?\n\n4.画图说明View 事件传递机制?并举一个例子阐述\n\n5.类加载机制,如何换肤,换肤插件中存在的问题?hotfix是否用过,原理是否了解?\n\n6.说说项目中用到了哪些设计模式,说了一下策略模式和观察者模式?\n\n7.会JS么?有Hybid开发经验么?\n\n8.说一下快排的思想?手写代码\n\n9.堆有哪些数据结构?\n\n对于这轮米那是明显感觉到压力,知识的纵向了解也比较深,应该是个leader.\n\n**第三轮**\n\n1.介绍一下在项目中的角色?\n\n2.遇到困难是怎么解决的?\n\n3.如何与人相处,与别人意见相左的时候是怎么解决的,并举生活中的一个例子.\n\n4.有没有压力特别大的时候?\n\n这个应该是项目经理了,问的问题偏向于生活性格方面.\n\n以上面试中问到的题目基本上都可以在上面找到答案,所以做准备是很重要的,但技术是一点点积累的,就算你全会背了,面试过了,真正等到工作的时候还是会捉襟见肘的,所以踏实点吧骚年.\n\n",[[1512355683891,["gengmei_pxf@gengmei123.local",[[1,49576,"\n"]],[49575,49575],[49576,49576]]],[1512355684809,["gengmei_pxf@gengmei123.local",[[1,49577,"\n"]],[49576,49576],[49577,49577]]],[1512355687401,["gengmei_pxf@gengmei123.local",[[1,49576,"****"]],[49576,49576],[49580,49580]]],[1512355694548,["gengmei_pxf@gengmei123.local",[[1,49578,"并发"]],[49578,49578],[49580,49580]]],[1512355701271,["gengmei_pxf@gengmei123.local",[[-1,49578,"并发"]],[49580,49580],[49578,49578]]],[1512355708310,["gengmei_pxf@gengmei123.local",[[1,49578,"什么是并发编程"]],[49578,49578],[49585,49585]]],[1512355710929,["gengmei_pxf@gengmei123.local",[[1,49587,"、"]],[49587,49587],[49588,49588]]],[1512355712720,["gengmei_pxf@gengmei123.local",[[-1,49587,"、"]],[49588,49588],[49587,49587]]],[1512355713223,["gengmei_pxf@gengmei123.local",[[1,49589,"\n"]],[49587,49587],[49588,49588]]],[1512355715504,["gengmei_pxf@gengmei123.local",[[-1,49583,"编程"]],[49585,49585],[49583,49583]]],[1512355716347,["gengmei_pxf@gengmei123.local",[[1,49583,"："]],[49583,49583],[49584,49584]]],[1512355759552,["gengmei_pxf@gengmei123.local",[[1,49587,"同时在做几件事就是"]],[49587,49587],[49596,49596]]],[1512355761197,["gengmei_pxf@gengmei123.local",[[1,49596,"并发"]],[49596,49596],[49598,49598]]],[1512355763052,["gengmei_pxf@gengmei123.local",[[1,49600,"\n"]],[49598,49598],[49599,49599]]],[1512355763306,["gengmei_pxf@gengmei123.local",[[1,49601,"\n"]],[49599,49599],[49600,49600]]],[1512355766324,["gengmei_pxf@gengmei123.local",[[1,49600,"****"]],[49600,49600],[49604,49604]]],[1512355780970,["gengmei_pxf@gengmei123.local",[[1,49602,"并发的好处"]],[49602,49602],[49607,49607]]],[1512355783044,["gengmei_pxf@gengmei123.local",[[1,49609,"、"]],[49609,49609],[49610,49610]]],[1512355784003,["gengmei_pxf@gengmei123.local",[[-1,49609,"、"]],[49610,49610],[49609,49609]]],[1512355784355,["gengmei_pxf@gengmei123.local",[[1,49611,"\n"]],[49609,49609],[49610,49610]]],[1512355800745,["gengmei_pxf@gengmei123.local",[[1,49610,"1.提高资源利用率"]],[49610,49610],[49619,49619]]],[1512355805046,["gengmei_pxf@gengmei123.local",[[1,49621,"\n"]],[49619,49619],[49620,49620]]],[1512355860641,["gengmei_pxf@gengmei123.local",[[1,49620,"当一个任务并没有完全占用系统资源时，可以利用并发来提高资源利用了"]],[49620,49620],[49652,49652]]],[1512355862525,["gengmei_pxf@gengmei123.local",[[-1,49651,"了"]],[49652,49652],[49651,49651]]],[1512355863766,["gengmei_pxf@gengmei123.local",[[1,49651,"绿"]],[49651,49651],[49652,49652]]],[1512355864181,["gengmei_pxf@gengmei123.local",[[-1,49651,"绿"]],[49652,49652],[49651,49651]]],[1512355870024,["gengmei_pxf@gengmei123.local",[[1,49651,"率，"]],[49651,49651],[49653,49653]]],[1512355908289,["gengmei_pxf@gengmei123.local",[[1,49653,"从而能更快的完成任务"]],[49653,49653],[49663,49663]]],[1512355926509,["gengmei_pxf@gengmei123.local",[[1,49665,"\n"]],[49663,49663],[49664,49664]]],[1512355930103,["gengmei_pxf@gengmei123.local",[[1,49610,"**"]],[49610,49610],[49612,49612]]],[1512355931840,["gengmei_pxf@gengmei123.local",[[1,49614,"**"]],[49614,49614],[49616,49616]]],[1512355935100,["gengmei_pxf@gengmei123.local",[[1,49610,"\n"]],[49609,49609],[49610,49610]]],[1512355940024,["gengmei_pxf@gengmei123.local",[[1,49615," "]],[49615,49615],[49616,49616]]],[1512355945751,["gengmei_pxf@gengmei123.local",[[-1,49615," **"]],[49616,49616],[49615,49615]]],[1512355946726,["gengmei_pxf@gengmei123.local",[[1,49614,"**"]],[49614,49614],[49616,49616]]],[1512355954382,["gengmei_pxf@gengmei123.local",[[1,49624,"**"]],[49624,49624],[49626,49626]]],[1512355957123,["gengmei_pxf@gengmei123.local",[[-1,49614,"**"]],[49616,49616],[49614,49614]]],[1512355965948,["gengmei_pxf@gengmei123.local",[[1,49669,"****"]],[49669,49669],[49673,49673]]],[1512355967918,["gengmei_pxf@gengmei123.local",[[1,49671,"2."]],[49671,49671],[49673,49673]]],[1512356024482,["gengmei_pxf@gengmei123.local",[[1,49673,"在程序任务上能"]],[49673,49673],[49680,49680]]],[1512356045457,["gengmei_pxf@gengmei123.local",[[-1,49679,"能"]],[49680,49680],[49679,49679]]],[1512356050142,["gengmei_pxf@gengmei123.local",[[1,49679,"更加精简"]],[49679,49679],[49683,49683]]],[1512356053264,["gengmei_pxf@gengmei123.local",[[1,49687,"\n"]],[49685,49685],[49686,49686]]],[1512356114945,["gengmei_pxf@gengmei123.local",[[1,49686,"任务明确分配好，"]],[49686,49686],[49694,49694]]],[1512356116736,["gengmei_pxf@gengmei123.local",[[-1,49693,"，"]],[49694,49694],[49693,49693]]],[1512356119828,["gengmei_pxf@gengmei123.local",[[1,49693,"，又能同时"]],[49693,49693],[49698,49698]]],[1512356133732,["gengmei_pxf@gengmei123.local",[[1,49698,"进行，既提高了效率，有"]],[49698,49698],[49709,49709]]],[1512356134368,["gengmei_pxf@gengmei123.local",[[-1,49708,"有"]],[49709,49709],[49708,49708]]],[1512356137348,["gengmei_pxf@gengmei123.local",[[1,49708,"又"]],[49708,49708],[49709,49709]]],[1512356146368,["gengmei_pxf@gengmei123.local",[[-1,49708,"又"]],[49709,49709],[49708,49708]]],[1512356155771,["gengmei_pxf@gengmei123.local",[[1,49708,"逻辑有清晰"]],[49708,49708],[49713,49713]]],[1512356157070,["gengmei_pxf@gengmei123.local",[[-1,49710,"有"]],[49711,49711],[49710,49710]]],[1512356158051,["gengmei_pxf@gengmei123.local",[[1,49710,"又"]],[49710,49710],[49711,49711]]],[1512356253789,["gengmei_pxf@gengmei123.local",[[1,49715,"\n"]],[49713,49713],[49714,49714]]],[1512356255661,["gengmei_pxf@gengmei123.local",[[1,49714,"****"]],[49714,49714],[49718,49718]]],[1512356265368,["gengmei_pxf@gengmei123.local",[[1,49716,"3.更好的相应"]],[49716,49716],[49723,49723]]],[1512356265980,["gengmei_pxf@gengmei123.local",[[-1,49721,"相应"]],[49723,49723],[49721,49721]]],[1512356270201,["gengmei_pxf@gengmei123.local",[[1,49721,"响应程序"]],[49721,49721],[49725,49725]]],[1512356271779,["gengmei_pxf@gengmei123.local",[[1,49729,"\n"]],[49727,49727],[49728,49728]]],[1512356287801,["gengmei_pxf@gengmei123.local",[[1,49728,"Android中"]],[49728,49728],[49736,49736]]],[1512356292308,["gengmei_pxf@gengmei123.local",[[-1,49728,"Android中"]],[49736,49736],[49728,49728]]],[1512356299509,["gengmei_pxf@gengmei123.local",[[1,49728,"例如图片的上传，"]],[49728,49728],[49736,49736]]],[1512356314424,["gengmei_pxf@gengmei123.local",[[1,49736,"页面正常响应"]],[49736,49736],[49742,49742]]],[1512356320820,["gengmei_pxf@gengmei123.local",[[-1,49740,"响应"]],[49742,49742],[49740,49740]]],[1512356352059,["gengmei_pxf@gengmei123.local",[[1,49740,"展示没有卡顿，同时又能上传图片，"]],[49740,49740],[49756,49756]]],[1512356374600,["gengmei_pxf@gengmei123.local",[[-1,49747,"同时"]],[49749,49749],[49747,49747]]],[1512356385532,["gengmei_pxf@gengmei123.local",[[1,49749,"正常"]],[49749,49749],[49751,49751]]],[1512356420782,["gengmei_pxf@gengmei123.local",[[1,49756,"既保证了页面能正常响应"]],[49756,49756],[49767,49767]]],[1512356431097,["gengmei_pxf@gengmei123.local",[[1,49767,"，yo"]],[49767,49767],[49770,49770]]],[1512356431426,["gengmei_pxf@gengmei123.local",[[-1,49768,"yo"]],[49770,49770],[49768,49768]]],[1512356445438,["gengmei_pxf@gengmei123.local",[[1,49768,"又保证图片能上传"]],[49768,49768],[49776,49776]]],[1512356452739,["gengmei_pxf@gengmei123.local",[[1,49774,"正常"]],[49774,49774],[49776,49776]]],[1512356584158,["gengmei_pxf@gengmei123.local",[[1,49780,"\n"]],[49778,49778],[49779,49779]]],[1512356584830,["gengmei_pxf@gengmei123.local",[[1,49781,"\n"]],[49779,49779],[49780,49780]]],[1512356587330,["gengmei_pxf@gengmei123.local",[[1,49780,"****"]],[49780,49780],[49784,49784]]],[1512356592740,["gengmei_pxf@gengmei123.local",[[1,49782,"并发的隐患"]],[49782,49782],[49787,49787]]],[1512356601811,["gengmei_pxf@gengmei123.local",[[-1,49785,"隐患"]],[49787,49787],[49785,49785]]],[1512356605490,["gengmei_pxf@gengmei123.local",[[1,49785,"风险"]],[49785,49785],[49787,49787]]],[1512356606965,["gengmei_pxf@gengmei123.local",[[1,49791,"\n"]],[49789,49789],[49790,49790]]],[1512356610814,["gengmei_pxf@gengmei123.local",[[1,49790,"****"]],[49790,49790],[49794,49794]]],[1512356621072,["gengmei_pxf@gengmei123.local",[[1,49792,"1.并发的代价"]],[49792,49792],[49799,49799]]],[1512356623436,["gengmei_pxf@gengmei123.local",[[1,49803,"\n"]],[49801,49801],[49802,49802]]],[1512356625972,["gengmei_pxf@gengmei123.local",[[1,49790,"\n"]],[49789,49789],[49790,49790]]],[1512356631059,["gengmei_pxf@gengmei123.local",[[-1,49610,"\n"]],[49610,49610],[49609,49609]]],[1512356633068,["gengmei_pxf@gengmei123.local",[[-1,49789,"\n"]],[49789,49789],[49788,49788]]],[1512356638067,["gengmei_pxf@gengmei123.local",[[1,49803,"\n"]],[49800,49800],[49801,49801]]],[1512356652363,["gengmei_pxf@gengmei123.local",[[1,49801,"占用资源"]],[49801,49801],[49805,49805]]],[1512356663371,["gengmei_pxf@gengmei123.local",[[1,49801,"需要"]],[49801,49801],[49803,49803]]],[1512356666482,["gengmei_pxf@gengmei123.local",[[1,49805,"更多"]],[49805,49805],[49807,49807]]],[1512356668238,["gengmei_pxf@gengmei123.local",[[1,49812,"\n"]],[49809,49809],[49810,49810]]],[1512356703569,["gengmei_pxf@gengmei123.local",[[1,49810,"设计一个并发程序并不容易"]],[49810,49810],[49822,49822]]],[1512356704085,["gengmei_pxf@gengmei123.local",[[1,49825,"\n"]],[49822,49822],[49823,49823]]],[1512356716199,["gengmei_pxf@gengmei123.local",[[1,49823,"并发的交互很复杂"]],[49823,49823],[49831,49831]]],[1512356732936,["gengmei_pxf@gengmei123.local",[[1,49826,"资源"]],[49826,49826],[49828,49828]]],[1512356750876,["gengmei_pxf@gengmei123.local",[[-1,49830,"很"]],[49831,49831],[49830,49830]]],[1512356755840,["gengmei_pxf@gengmei123.local",[[1,49812,"好"]],[49812,49812],[49813,49813]]],[1512356759914,["gengmei_pxf@gengmei123.local",[[1,49836,"\n"]],[49833,49833],[49834,49834]]],[1512356760184,["gengmei_pxf@gengmei123.local",[[1,49837,"\n"]],[49834,49834],[49835,49835]]],[1512356762508,["gengmei_pxf@gengmei123.local",[[1,49835,"****"]],[49835,49835],[49839,49839]]],[1512356775670,["gengmei_pxf@gengmei123.local",[[1,49831,"问题"]],[49831,49831],[49833,49833]]],[1512356778756,["gengmei_pxf@gengmei123.local",[[1,49839,"2."]],[49839,49839],[49841,49841]]],[1512356783725,["gengmei_pxf@gengmei123.local",[[1,49843,"的隐患"]],[49843,49843],[49846,49846]]],[1512356814036,["gengmei_pxf@gengmei123.local",[[1,49849,"滥用资源导致系统不稳定"]],[49849,49849],[49860,49860]]],[1512356814719,["gengmei_pxf@gengmei123.local",[[1,49862,"\n"]],[49860,49860],[49861,49861]]],[1512356833851,["gengmei_pxf@gengmei123.local",[[1,49861,"预期结果与现实不符"]],[49861,49861],[49870,49870]]],[1512356834327,["gengmei_pxf@gengmei123.local",[[1,49872,"\n"]],[49870,49870],[49871,49871]]],[1512356838984,["gengmei_pxf@gengmei123.local",[[1,49871,"出现的BUG"]],[49871,49871],[49877,49877]]],[1512356901127,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49870,"."],[1,49871,"\n"],[1,49879,"2."]],[49841,49841],[49881,49881]]],[1512356901127,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49870,"."],[-1,49870,"\n"],[-1,49879,"2."]],[49881,49881],[49841,49841]]],[1512356843072,["gengmei_pxf@gengmei123.local",[[1,49877,"很难排查"]],[49877,49877],[49881,49881]]],[1512356862734,["gengmei_pxf@gengmei123.local",[[-1,49865,"与现实"]],[49868,49868],[49865,49865]]],[1512356864458,["gengmei_pxf@gengmei123.local",[[1,49865,"与"]],[49865,49865],[49866,49866]]],[1512356874126,["gengmei_pxf@gengmei123.local",[[-1,49861,"预期"]],[49861,49863],[49861,49861]]],[1512356875328,["gengmei_pxf@gengmei123.local",[[1,49864,"预期"]],[49864,49864],[49866,49866]]],[1512356879869,["gengmei_pxf@gengmei123.local",[[-1,49875,"很难"]],[49877,49877],[49875,49875]]],[1512356881783,["gengmei_pxf@gengmei123.local",[[1,49875,"难以"]],[49875,49875],[49877,49877]]],[1512373544492,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49881,"2."]],[49841,49841],[49883,49883]]],[1512373544492,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49881,"2."]],[49883,49883],[49841,49841]]],[1512373525979,["gengmei_pxf@gengmei123.local",[[1,49881,"\n"]],[49879,49879],[49880,49880]]],[1512373526371,["gengmei_pxf@gengmei123.local",[[1,49882,"\n"]],[49880,49880],[49881,49881]]],[1512373604491,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49883,"2."]],[49841,49841],[49885,49885]]],[1512373604491,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49883,"2."]],[49885,49885],[49841,49841]]],[1512373571774,["gengmei_pxf@gengmei123.local",[[-1,49882,"\n"]],[49881,49881],[49880,49880]]],[1512373572389,["gengmei_pxf@gengmei123.local",[[-1,49881,"\n"]],[49880,49880],[49879,49879]]],[1512373575068,["gengmei_pxf@gengmei123.local",[[1,49900,"\n"]],[49898,49898],[49899,49899]]],[1512373575468,["gengmei_pxf@gengmei123.local",[[1,49901,"\n"]],[49899,49899],[49900,49900]]],[1512373664490,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49881,"2."],[1,49898,"\n\n"],[-1,49900,"\n\n"]],[49841,49841],[49900,49900]]],[1512373664490,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49881,"2."],[-1,49900,"\n\n"],[1,49904,"\n\n"]],[49900,49900],[49841,49841]]],[1512373607845,["gengmei_pxf@gengmei123.local",[[1,49900,"![](http://upload-images.jianshu.io/upload_images/1824194-a947dcc5b22f69fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面一共出现了几种类，ActivityThread，Handler，MessageQueue，Looper，msg（Message）,对这些类作简要介绍：\n\nActivityThread：程序的启动入口，为什么要介绍这个类，是因为该类就是我们说的主线程，它对Looper进行操作的。\n\nHandler：字面意思是操控者，该类有比较重要的地方，就是通过handler来发送消息（sendMessage）到MessageQueue和 操作控件的更新（handleMessage）。handler下面持有这MessageQueue和Looper的对象。\n\nMessageQueue：字面意思是消息队列，就是封装Message类。对Message进行插入和取出操作。\n\nMessage：这个类是封装消息体并被发送到MessageQueue中的，给类是通过链表实现的，其好处方便MessageQueue的插入和取出操作。还有一些字段是（int what，Object obj，int arg1，int arg2）。what是用户定义的消息和代码，以便接收者（handler）知道这个是关于什么的。obj是用来传输任意对象的，arg1和arg2是用来传递一些简单的整数类型的。\n\n下面，我们按照启动顺序来进行源码分析：\n\n![](http://upload-images.jianshu.io/upload_images/1824194-298ebb16ce4a3b70.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://raw.githubusercontent.com/bihe0832/Android-System-Related-Charts/master/framework/handler-sequence.jpg)"]],[49900,49900],[50834,50834]]],[1512373624931,["gengmei_pxf@gengmei123.local",[[1,50851,"\n"]],[50850,50850],[50851,50851]]],[1512373625123,["gengmei_pxf@gengmei123.local",[[1,50852,"\n"]],[50851,50851],[50852,50852]]],[1512373661367,["gengmei_pxf@gengmei123.local",[[1,50851,"负责"]],[50851,50851],[50853,50853]]],[1512373724500,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49881,"2."],[-1,49898,"3."],[1,50836,"3."],[-1,50849,"4."],[1,50855,"4."]],[49841,49841],[50857,50857]]],[1512373724500,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49881,"2."],[1,49900,"3."],[-1,50836,"3."],[1,50851,"4."],[-1,50855,"4."]],[50857,50857],[49841,49841]]],[1512373681783,["gengmei_pxf@gengmei123.local",[[1,50853,"用户版App社区模块的版本迭代"]],[50853,50853],[50868,50868]]],[1512373686718,["gengmei_pxf@gengmei123.local",[[1,50866,"的功能"]],[50866,50866],[50869,50869]]],[1512373688466,["gengmei_pxf@gengmei123.local",[[1,50871,"，"]],[50871,50871],[50872,50872]]],[1512373710306,["gengmei_pxf@gengmei123.local",[[1,49881,"### "]],[49881,49881],[49885,49885]]],[1512373715922,["gengmei_pxf@gengmei123.local",[[1,50840,"### "]],[50840,50840],[50844,50844]]],[1512373784494,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49885,"2."],[-1,49902,"3."],[1,50844,"3."],[-1,50857,"4."],[1,50882,"4."]],[49841,49841],[50884,50884]]],[1512373784494,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49885,"2."],[1,49904,"3."],[-1,50844,"3."],[1,50859,"4."],[-1,50882,"4."]],[50884,50884],[49841,49841]]],[1512373769963,["gengmei_pxf@gengmei123.local",[[1,50880,"几个组件的开发与管理。"]],[50880,50880],[50891,50891]]],[1512373844501,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49885,"2."],[-1,49902,"3."],[1,50844,"3."],[-1,50857,"4."],[1,50893,"4."]],[49841,49841],[50895,50895]]],[1512373844501,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49885,"2."],[1,49904,"3."],[-1,50844,"3."],[1,50859,"4."],[-1,50893,"4."]],[50895,50895],[49841,49841]]],[1512373784616,["gengmei_pxf@gengmei123.local",[[1,50921,"\n"]],[50919,50919],[50920,50920]]],[1512373784796,["gengmei_pxf@gengmei123.local",[[1,50922,"\n"]],[50920,50920],[50921,50921]]],[1512373788045,["gengmei_pxf@gengmei123.local",[[1,50893,"### "]],[50893,50893],[50897,50897]]],[1512374144515,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49885,"2."],[-1,49902,"3."],[1,50844,"3."],[-1,50857,"4."],[1,50897,"4."],[1,50923,"\n\n"],[-1,50925,"\n\n"]],[49841,49841],[50925,50925]]],[1512374144515,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49885,"2."],[1,49904,"3."],[-1,50844,"3."],[1,50859,"4."],[-1,50897,"4."],[-1,50925,"\n\n"],[1,50929,"\n\n"]],[50925,50925],[49841,49841]]],[1512374104497,["gengmei_pxf@gengmei123.local",[[1,50925,"1).Android事件分发机制的本质是要解决：点击事件由哪个对象发出，经过哪些对象，最终达到哪个对象并最终得到处理。这里的对象是指Activity、ViewGroup、View.\n\n2).Android中事件分发顺序：Activity（Window） -> ViewGroup -> View.\n\n3).事件分发过程由dispatchTouchEvent() 、onInterceptTouchEvent()和onTouchEvent()三个方法协助完成\n\n**设置Button按钮来响应点击事件事件传递情况：（如下图）**\n\n布局如下:\n\n![](http://upload-images.jianshu.io/upload_images/4642697-01f23a099103eb82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/210)\n\n最外层：Activiy A，包含两个子View：ViewGroup B、View C\n\n中间层：ViewGroup B，包含一个子View：View C\n\n最内层：View C\n\n假设用户首先触摸到屏幕上View C上的某个点（如图中黄色区域），那么Action_DOWN事件就在该点产生，然后用户移动手指并最后离开屏幕。\n\n**按钮点击事件:**\n\nDOWN事件被传递给C的onTouchEvent方法，该方法返回true，表示处理这个事件;\n\n因为C正在处理这个事件，那么DOWN事件将不再往上传递给B和A的onTouchEvent()；\n\n该事件列的其他事件（Move、Up）也将传递给C的onTouchEvent();\n\n![](http://upload-images.jianshu.io/upload_images/4642697-ca12c00c79780b57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n(记住这个图的传递顺序,面试的时候能够画出来,就很详细了)"]],[50925,50925],[51803,51803]]],[1512376064496,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49885,"2."],[-1,49902,"3."],[1,50844,"3."],[-1,50857,"4."],[1,50897,"4."],[-1,50923,"5."],[1,51805,"5."]],[49841,49841],[51807,51807]]],[1512376064496,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49885,"2."],[1,49904,"3."],[-1,50844,"3."],[1,50859,"4."],[-1,50897,"4."],[1,50925,"5."],[-1,51805,"5."]],[51807,51807],[49841,49841]]],[1512376007022,["gengmei_pxf@gengmei123.local",[[1,51805,"### "]],[51805,51805],[51809,51809]]],[1512376013002,["gengmei_pxf@gengmei123.local",[[1,51853,"\n"]],[51851,51851],[51852,51852]]],[1512376014130,["gengmei_pxf@gengmei123.local",[[1,51854,"\n"]],[51852,51852],[51853,51853]]],[1512376124499,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49885,"2."],[-1,49902,"3."],[1,50844,"3."],[-1,50857,"4."],[1,50897,"4."],[-1,50923,"5."],[1,51809,"5."],[1,51851,"\n\n"],[-1,51853,"\n\n"]],[49841,49841],[51853,51853]]],[1512376124499,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49885,"2."],[1,49904,"3."],[-1,50844,"3."],[1,50859,"4."],[-1,50897,"4."],[1,50925,"5."],[-1,51809,"5."],[-1,51853,"\n\n"],[1,51857,"\n\n"]],[51853,51853],[49841,49841]]],[1512376085288,["gengmei_pxf@gengmei123.local",[[1,51853,"**类的加载器**\n\n    大家都知道，当我们写好一个Java程序之后，不是管是CS还是BS应用，都是由若干个.class文件组织而成的一个完整的Java应用程序，当程序在运行时，即会调用该程序的一个入口函数来调用系统的相关功能，而这些功能都被封装在不同的class文件当中，所以经常要从这个class文件中要调用另外一个class文件中的方法，如果另外一个文件不存在的，则会引发系统异常。而程序在启动的时候，并不会一次性加载程序所要用的所有class文件，而是根据程序的需要，通过Java的类加载机制（ClassLoader）来动态加载某个class文件到内存当中的，从而只有class文件被载入到了内存之后，才能被其它class所引用。所以ClassLoader就是用来动态加载class文件到内存当中用的。\n\n**双亲机制**\n\n**_1、原理介绍_**\n\n    ClassLoader使用的是双亲委托模型来搜索类的，每个ClassLoader实例都有一个父类加载器的引用（不是继承的关系，是一个包含的关系），虚拟机内置的类加载器（Bootstrap ClassLoader）本身没有父类加载器，但可以用作其它ClassLoader实例的的父类加载器。当一个ClassLoader实例需要加载某个类时，它会试图亲自搜索某个类之前，先把这个任务委托给它的父类加载器，这个过程是由上至下依次检查的，首先由最顶层的类加载器Bootstrap ClassLoader试图加载，如果没加载到，则把任务转交给Extension ClassLoader试图加载，如果也没加载到，则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常。否则将这个找到的类生成一个类的定义，并将它加载到内存当中，最后返回这个类在内存中的Class实例对象。\n\n**_2、为什么要使用双亲委托这种模型呢？_**\n\n    因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。\n\n**_3、但是JVM在搜索类的时候，又是如何判定两个class是相同的呢？_**\n\n    JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。比如网络上的一个Java类org.classloader.simple.NetClassLoaderSimple，javac编译之后生成字节码文件NetClassLoaderSimple.class，ClassLoaderA和ClassLoaderB这两个类加载器并读取了NetClassLoaderSimple.class文件，并分别定义出了java.lang.Class实例来表示这个类，对于JVM来说，它们是两个不同的实例对象，但它们确实是同一份字节码文件，如果试图将这个Class实例生成具体的对象进行转换时，就会抛运行时异常java.lang.ClassCaseException，提示这是两个不同的类型。\n\n**Android类加载器**\n\n    对于Android而言，最终的apk文件包含的是dex类型的文件，dex文件是将class文件重新打包，打包的规则又不是简单地压缩，而是完全对class文件内部的各种函数表，变量表进行优化，产生一个新的文件，即dex文件。因此加载这种特殊的Class文件就需要特殊的类加载器DexClassLoader。"]],[51853,51853],[53689,53689]]],[1512376102636,["gengmei_pxf@gengmei123.local",[[1,51853,"\n"]],[51851,51851],[51852,51852]]],[1512376103004,["gengmei_pxf@gengmei123.local",[[1,51854,"\n"]],[51852,51852],[51853,51853]]],[1512376103799,["gengmei_pxf@gengmei123.local",[[1,51853,"一. 类的加载过程，Person person = new Person();为例进行说明。\n\n1).因为new用到了Person.class，所以会先找到Person.class文件，并加载到内存中;\n\n2).执行该类中的static代码块，如果有的话，给Person.class类进行初始化;\n\n3).在堆内存中开辟空间分配内存地址;\n\n4).在堆内存中建立对象的特有属性，并进行默认初始化;\n\n5).对属性进行显示初始化;\n\n6).对对象进行构造代码块初始化;\n\n7).对对象进行与之对应的构造函数进行初始化;\n\n8).将内存地址付给栈内存中的p变量"]],[51853,51853],[52131,52131]]],[1512376116431,["gengmei_pxf@gengmei123.local",[[1,51853,"**"]],[51853,51853],[51855,51855]]],[1512376117758,["gengmei_pxf@gengmei123.local",[[1,51864,"**"]],[51864,51864],[51866,51866]]],[1512376122478,["gengmei_pxf@gengmei123.local",[[1,52139,"二 "]],[52139,52139],[52141,52141]]],[1512376130010,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49885,"2."],[-1,49902,"3."],[1,50844,"3."],[-1,50857,"4."],[1,50897,"4."],[-1,50923,"5."],[1,51809,"5."],[-1,51851,"6."],[1,53977,"6."]],[49841,49841],[53979,53979]]],[1512376130010,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49885,"2."],[1,49904,"3."],[-1,50844,"3."],[1,50859,"4."],[-1,50897,"4."],[1,50925,"5."],[-1,51809,"5."],[1,51853,"6."],[-1,53977,"6."]],[53979,53979],[49841,49841]]],[1512376126419,["gengmei_pxf@gengmei123.local",[[-1,52140," "]],[52141,52141],[52140,52140]]],[1512376127008,["gengmei_pxf@gengmei123.local",[[1,52140,"。"]],[52140,52140],[52141,52141]]],[1512376127764,["gengmei_pxf@gengmei123.local",[[-1,52140,"。"]],[52141,52141],[52140,52140]]],[1512376128320,["gengmei_pxf@gengmei123.local",[[1,52140,"."]],[52140,52140],[52141,52141]]],[1512376189967,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49885,"2."],[-1,49902,"3."],[1,50844,"3."],[-1,50857,"4."],[1,50897,"4."],[-1,50923,"5."],[1,51809,"5."],[-1,51851,"6."],[1,53977,"6."]],[49841,49841],[53979,53979]]],[1512376189967,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49885,"2."],[1,49904,"3."],[-1,50844,"3."],[1,50859,"4."],[-1,50897,"4."],[1,50925,"5."],[-1,51809,"5."],[1,51853,"6."],[-1,53977,"6."]],[53979,53979],[49841,49841]]],[1512376156068,["gengmei_pxf@gengmei123.local",[[-1,51866,"，"]],[51867,51867],[51866,51866]]],[1512376156707,["gengmei_pxf@gengmei123.local",[[1,51866,"\n"]],[51866,51866],[51867,51867]]],[1512376159290,["gengmei_pxf@gengmei123.local",[[1,51867,"\n"]],[51867,51867],[51868,51868]]],[1512379069949,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49885,"2."],[-1,49902,"3."],[1,50844,"3."],[-1,50857,"4."],[1,50897,"4."],[-1,50923,"5."],[1,51809,"5."],[-1,51851,"6."],[1,53978,"6."]],[49841,49841],[53980,53980]]],[1512379069949,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49885,"2."],[1,49904,"3."],[-1,50844,"3."],[1,50859,"4."],[-1,50897,"4."],[1,50925,"5."],[-1,51809,"5."],[1,51853,"6."],[-1,53978,"6."]],[53980,53980],[49841,49841]]],[1512379057616,["gengmei_pxf@gengmei123.local",[[1,53978,"\n"]],[53976,53976],[53977,53977]]],[1512379057863,["gengmei_pxf@gengmei123.local",[[1,53979,"\n"]],[53977,53977],[53978,53978]]],[1512379058623,["gengmei_pxf@gengmei123.local",[[1,53978,"### **1、换肤方案分析**\n\n1.  res下放多种皮肤的资源文件\n\n2.  加载插件apk使用其中的皮肤资源\n\n方案一： \n优点：容易实现。 \n缺点：res下放多种皮肤的资源文件，无疑会加大apk文件大小，而且资源文件是写死的，不利于后期拓展，若有其他皮肤需求只能通过版本迭代。 \n方案二： \n优点：不会加大apk包，更容易扩展，有新的皮肤只需下载新的插件包即可，无需更新。（相对于方案一） \n缺点：相对于方案一实现较困难，若有更多业务处理需要插件，如使用插件中的四大组件及处理它们的生命周期则是比较麻烦的，需用到动态代理。不过还好有360手机助手团队，在github上开源出来了DroidPlugin插件框架，[https://github.com/Qihoo360/DroidPlugin](https://github.com/Qihoo360/DroidPlugin)，大家以后用这个就OK啦！"]],[53978,53978],[54383,54383]]],[1512379129942,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49885,"2."],[-1,49902,"3."],[1,50844,"3."],[-1,50857,"4."],[1,50897,"4."],[-1,50923,"5."],[1,51809,"5."],[-1,51851,"6."],[1,54385,"6."]],[49841,49841],[54387,54387]]],[1512379129942,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49885,"2."],[1,49904,"3."],[-1,50844,"3."],[1,50859,"4."],[-1,50897,"4."],[1,50925,"5."],[-1,51809,"5."],[1,51853,"6."],[-1,54385,"6."]],[54387,54387],[49841,49841]]],[1512379072715,["gengmei_pxf@gengmei123.local",[[-1,51817,"如何换肤,换肤插件中存在的问题?hotfix是否用过,原理是否了解?"],[-1,54042," "],[1,54043," "],[-1,54052," "],[1,54053," "],[-1,54121," "],[1,54122," "],[-1,54127," "],[1,54128," "],[-1,54177," "],[1,54178," "]],[51817,51851],[51817,51817]]],[1512379074073,["gengmei_pxf@gengmei123.local",[[-1,51816,","]],[51817,51817],[51816,51816]]],[1512379079150,["gengmei_pxf@gengmei123.local",[[1,53943,"\n"]],[53942,53942],[53943,53943]]],[1512379079969,["gengmei_pxf@gengmei123.local",[[1,53943,"如何换肤,换肤插件中存在的问题?hotfix是否用过,原理是否了解?"]],[53943,53943],[53977,53977]]],[1512379085531,["gengmei_pxf@gengmei123.local",[[-1,53978,"### "]],[53978,53982],[53978,53978]]],[1512379086857,["gengmei_pxf@gengmei123.local",[[1,53943,"### "]],[53943,53943],[53947,53947]]],[1512379092017,["gengmei_pxf@gengmei123.local",[[-1,53963,"hotfix是否用过,原理是否了解?"]],[53963,53981],[53963,53963]]],[1512379095758,["gengmei_pxf@gengmei123.local",[[1,54367,"\n"]],[54365,54365],[54366,54366]]],[1512379096030,["gengmei_pxf@gengmei123.local",[[1,54368,"\n"]],[54366,54366],[54367,54367]]],[1512379096561,["gengmei_pxf@gengmei123.local",[[1,54367,"hotfix是否用过,原理是否了解?"]],[54367,54367],[54385,54385]]],[1512379104618,["gengmei_pxf@gengmei123.local",[[1,54367,"7."]],[54367,54367],[54369,54369]]],[1512379108027,["gengmei_pxf@gengmei123.local",[[1,54367,"### "]],[54367,54367],[54371,54371]]],[1512379112002,["gengmei_pxf@gengmei123.local",[[1,53947,"6."]],[53947,53947],[53949,53949]]],[1512380029948,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49885,"2."],[-1,49902,"3."],[1,50844,"3."],[-1,50857,"4."],[1,50897,"4."],[-1,50923,"5."],[1,51809,"5."],[-1,51814,",如6."],[1,51818,"\n\n"],[1,54395,"6."]],[49841,49841],[54397,54397]]],[1512380029948,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49885,"2."],[1,49904,"3."],[-1,50844,"3."],[1,50859,"4."],[-1,50897,"4."],[1,50925,"5."],[-1,51809,"5."],[1,51816,",如6."],[-1,51816,"\n\n"],[-1,54395,"6."]],[54397,54397],[49841,49841]]],[1512380022786,["gengmei_pxf@gengmei123.local",[[1,54230,"\n"]],[54228,54228],[54229,54229]]],[1512380023112,["gengmei_pxf@gengmei123.local",[[1,54231,"\n"]],[54229,54229],[54230,54230]]],[1512380023777,["gengmei_pxf@gengmei123.local",[[1,54230,"**Android换肤技术总结**\n\n背景\n\n纵观现在各种Android app，其换肤需求可以归为 \n\n- 白天/黑夜主题切换（或者别的名字，通常2套），如同花顺/自选股/天天动听等，UI表现为一个switcher。 \n- 多种主题切换，通常为会员特权，如QQ/QQ空间。\n\n对于第一种来说，目测应该是直接通过本地theme来做的，即所有图片/颜色的资源都在apk里面打包了。\n\n而对于第二种，则相对复杂一些，由于作为一种线上服务，可能上架新皮肤，且那么多皮肤包放在apk里面实在太占体积了，所以皮肤资源会在选择后再进行下载，也就不能直接使用android的那套theme。\n\n**技术方案**\n\n内部资源加载方案和动态下载资源下载两种。\n\n动态下载可以称为一种黑科技了，因为往往需要hack系统的一些方法，所以在部分机型和新的API上有时候可能有坑，但相对好处则很多 \n\n- 图片/色值等资源由于是后台下发的，可以随时更新 \n- APK体积减小 \n- 对应用开发者来说，换肤几乎是透明的，不需要关心有几套皮肤 \n- 可以作为增值服务卖钱！！\n\n**内部资源加载方案**\n\n内部资源加载都是通过android本身那套theme来做的，相对业务开发来说工作量更大（需要定义attr和theme），不同方案类似地都是在BaseActivity里面做setTheme，差别主要在解决以下2个问题的策略： \n\n- setTheme后如何实时刷新，而不用重新创建页面（尤其是listview里面的item）。 \n- 哪些view需要刷新，刷新什么（背景？字体颜色？ImageView的src？）。\n\n**自定义view**\n\n[MultipleTheme](http://xiazai.jb51.net/201703/yuanma/MultipleTheme-master(jb51.net).rar) \n\n做自定义view是为了在setTheme后会去立即刷新，更新页面UI对应资源（如TextView替换背景图和文字颜色），在上述项目中，则是通过对rootView进行遍历，对所有实现了ColorUiInterface的view/viewgroup进行setTheme操作来实现即使刷新的。\n\n显然这样太重了，需要把应用内的各种view/viewgroup进行替换。\n\n手动绑定view和要改变的资源类型\n\n[Colorful](http://xiazai.jb51.net/201703/yuanma/Colorful-master(jb51.net).rar)\n\n这个…我们看看用法吧….\n\nViewGroupSetter listViewSetter = new ViewGroupSetter(mNewsListView);\n// 绑定ListView的Item View中的news_title视图，在换肤时修改它的text_color属性\nlistViewSetter.childViewTextColor(R.id.news_title, R.attr.text_color);\n\n// 构建Colorful对象来绑定View与属性的对象关系\nmColorful = new Colorful.Builder(this)\n  .backgroundDrawable(R.id.root_view, R.attr.root_view_bg)\n  // 设置view的背景图片\n  .backgroundColor(R.id.change_btn, R.attr.btn_bg)\n  // 设置背景色\n  .textColor(R.id.textview, R.attr.text_color)\n  .setter(listViewSetter) // 手动设置setter\n  .create(); // 设置文本颜色\n\n我就是想换个皮肤，还得在activity里自己去设置要改变哪个view的什么属性，对应哪个attribute？是不是成本太高了？而且activity的逻辑也很容易被弄得乱七八糟。\n\n**动态资源加载方案**\n\nresource替换\n\n覆盖application的getResource方法，实现自己的resource，优先加载本地皮肤包文件夹下的资源包，对于性能问题，可以通过attribute或者资源名称规范(如需要换肤则用skin_开头)来优化，从而不对不换肤的资源进行额外检查开销。\n\n不过由于Android5.1源码里，drawable初始化的时候调用的是loadDrawable，而不是resource.getDrawable，而loadDrawable是私有的方法，无法覆盖，所以虽然很方便，却无法继续使用（不用关心任何皮肤相关的事情，android:color指定颜色就行了，神奇滴会自动换肤）。\n\n自定义LayoutInflator.Factory\n\n开源项目可参照Android-Skin-Loader。\n\n即setFactory使用自定义的LayoutInflator.Factory，可以重点关注该项目中的SkinInflaterFactory和SkinManager（实现了自己的getColor、getDrawable、getBitmap、getColorStateList等等方法）。\n\n需要自定义一个tag比如app:customStyle，重写所有的style，转成set方法，这样带来的牺牲就是增加了换肤的成本，要写很多style，自己去set，并不完全透明了。\n\nHack Resources internally\n\n黑科技方法，直接对Resources进行hack，Resources.Java:\n\n// Information about preloaded resources. Note that they are not\n// protected by a lock, because while preloading in zygote we are all\n// single-threaded, and after that these are immutable.\nprivate static final LongSparseArray<Drawable.ConstantState>[] sPreloadedDrawables;\nprivate static final LongSparseArray<Drawable.ConstantState> sPreloadedColorDrawables\n  = new LongSparseArray<Drawable.ConstantState>();\nprivate static final LongSparseArray<ColorStateList> sPreloadedColorStateLists\n  = new LongSparseArray<ColorStateList>();\n\n直接对Resources里面的这三个LongSparseArray进行替换，由于apk运行时的资源都是从这三个数组里面加载的，所以只要采用interceptor模式：\n\npublic class DrawablePreloadInterceptor extends LongSparseArray<Drawable.ConstantState>\n\n自己实现一个LongSparseArray，并通过反射set回去，就能实现换肤，具体getDrawable等方法里是怎么取preload数组的，可以自己看Resources的源码。\n\n等等，就这么简单？，NONO，少年你太天真了，怎么去加载xml，9patch的padding怎么更新，怎么打包/加载自定义的皮肤包，drawable的状态怎么刷新，等等。这些都是你需要考虑的，在存在插件的app中，还需要考虑是否会互相覆盖resource id的问题，进而需要修改apt，把resource id按位放在2个range。\n\n手Q和独立版QQ空间使用的是这种方案，效果挺好。\n\n**总结**\n\n尽管动态加载方案比较黑科技，可能因为系统API的更改而出问题，但相对来说\n\n**好处有** \n\n- 灵活性高，后台可以随时更新皮肤包 \n- 相对透明，开发者几乎不用关心有几套皮肤，不用去定义各种theme和attr，甚至连皮肤包的打包都可以交给设计或者专门的同学 \n- apk体积节省 \n\n**存在的问题 **\n\n没有完善的开源项目，如果我们采用动态加载的第二种方案，需要的项目功能包括： \n\n- 自定义皮肤包结构 \n- 换肤引擎，加载皮肤包资源并load，实时刷新。 \n- 皮肤包打包工具 \n- 对各种rom的兼容\n\n如果有这么一个项目的话，就一劳永逸了，有兴趣的同学可以联系一下，大家一起搞一搞。\n\n内部加载方案大同小异，主要解决的都是即时刷新的问题，然而从目前的一些开源项目来看，仍然没有特别简便的方案。让我选的话，我宁愿让界面重新创建，比如重启activity，或者remove所有view再添加回来（或者你可能想遍历rootview，然后一个个检查是否需要换肤然后set…）。"]],[54230,54230],[58062,58062]]],[1512380089949,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49885,"2."],[-1,49902,"3."],[1,50844,"3."],[-1,50857,"4."],[1,50897,"4."],[-1,50923,"5."],[1,51809,"5."],[-1,51814,",如6."],[1,51818,"\n\n"],[-1,54228,"不过"],[1,54230,"\n\n"],[-1,58064,"还好有360手机助手团队，在github上开源出来了DroidPlugin插件框架，[https://github.com/Qihoo360/DroidPlugin](https://github.com/Qihoo360/DroidPlugin)，大家以后用这个就OK啦！\n\n"],[1,58229,"6."]],[49841,49841],[58231,58231]]],[1512380089949,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49885,"2."],[1,49904,"3."],[-1,50844,"3."],[1,50859,"4."],[-1,50897,"4."],[1,50925,"5."],[-1,51809,"5."],[1,51816,",如6."],[-1,51816,"\n\n"],[1,54228,"不过"],[-1,54228,"\n\n"],[1,58064,"还好有360手机助手团队，在github上开源出来了DroidPlugin插件框架，[https://github.com/Qihoo360/DroidPlugin](https://github.com/Qihoo360/DroidPlugin)，大家以后用这个就OK啦！\n\n"],[-1,58090,"6."]],[58231,58231],[49841,49841]]],[1512380045149,["gengmei_pxf@gengmei123.local",[[1,54232,"2"],[-1,54280," "],[1,54281," "],[-1,54339," "],[1,54340," "],[-1,54615," "],[1,54616," "],[-1,54643," "],[1,54644," "],[-1,54654," "],[1,54655," "],[-1,54686," "],[1,54687," "],[-1,54829," "],[1,54830," "],[-1,54880," "],[1,54881," "],[-1,55027," "],[1,55028," "],[-1,57685," "],[1,57686," "],[-1,57750," "],[1,57751," "],[-1,57761," "],[1,57762," "],[-1,57771," "],[1,57772," "],[-1,57813," "],[1,57814," "],[-1,57826," "],[1,57827," "],[-1,57853," "],[1,57854," "],[-1,57864," "],[1,57865," ."]],[54232,54232],[54234,54234]]],[1512380047874,["gengmei_pxf@gengmei123.local",[[-1,53969,"、"]],[53970,53970],[53969,53969]]],[1512380048218,["gengmei_pxf@gengmei123.local",[[1,53969,"."]],[53969,53969],[53970,53970]]],[1512380069083,["gengmei_pxf@gengmei123.local",[[1,55327,"```"]],[55327,55327],[55330,55330]]],[1512380071451,["gengmei_pxf@gengmei123.local",[[1,55849,"```"]],[55849,55849],[55852,55852]]],[1512380084770,["gengmei_pxf@gengmei123.local",[[1,56621,"```"]],[56621,56621],[56624,56624]]],[1512380086650,["gengmei_pxf@gengmei123.local",[[1,57159,"```"]],[57159,57159],[57162,57162]]],[1512380116558,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49885,"2."],[-1,49902,"3."],[1,50844,"3."],[-1,50857,"4."],[1,50897,"4."],[-1,50923,"5."],[1,51809,"5."],[-1,51814,",如6."],[1,51818,"\n\n"],[-1,54228,"不过"],[1,54230,"\n\n"],[1,54233,"."],[-1,55326,"\n"],[1,55330,"\n"],[-1,55848,"\n"],[1,55852,"\n"],[-1,56620,"\n"],[1,56624,"\n"],[-1,57158,"\n"],[1,57162,"\n"],[-1,57878,"."],[1,57879,""],[-1,58078,"还好有360手机助手团队，在github上开源出来了DroidPlugin插件框架，[https://github.com/Qihoo360/DroidPlugin](https://github.com/Qihoo360/DroidPlugin)，大家以后用这个就OK啦！\n\n"],[1,58243,"6."]],[49841,49841],[58245,58245]]],[1512380116558,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49885,"2."],[1,49904,"3."],[-1,50844,"3."],[1,50859,"4."],[-1,50897,"4."],[1,50925,"5."],[-1,51809,"5."],[1,51816,",如6."],[-1,51816,"\n\n"],[1,54228,"不过"],[-1,54228,"\n\n"],[-1,54233,"."],[1,55327,"\n"],[-1,55330,"\n"],[1,55849,"\n"],[-1,55852,"\n"],[1,56621,"\n"],[-1,56624,"\n"],[1,57159,"\n"],[-1,57162,"\n"],[1,57879,"."],[-1,57879,""],[1,58078,"还好有360手机助手团队，在github上开源出来了DroidPlugin插件框架，[https://github.com/Qihoo360/DroidPlugin](https://github.com/Qihoo360/DroidPlugin)，大家以后用这个就OK啦！\n\n"],[-1,58104,"6."]],[58245,58245],[49841,49841]]],[1512380095405,["gengmei_pxf@gengmei123.local",[[1,57780," "]],[57780,57780],[57781,57781]]],[1512380098147,["gengmei_pxf@gengmei123.local",[[-1,57780," "]],[57781,57781],[57780,57780]]],[1512380100120,["gengmei_pxf@gengmei123.local",[[-1,57785," "]],[57786,57786],[57785,57785]]],[1512385276575,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49885,"2."],[-1,49902,"3."],[1,50844,"3."],[-1,50857,"4."],[1,50897,"4."],[-1,50923,"5."],[1,51809,"5."],[-1,51814,",如6."],[1,51818,"\n\n"],[-1,54228,"不过"],[1,54230,"\n\n"],[1,54233,"."],[-1,55326,"\n"],[1,55330,"\n"],[-1,55848,"\n"],[1,55852,"\n"],[-1,56620,"\n"],[1,56624,"\n"],[-1,57158,"\n"],[1,57162,"\n"],[-1,57784," "],[1,57785,"*"],[-1,57877,"."],[1,57878,""],[-1,58077,"还好有360手机助手团队，在github上开源出来了DroidPlugin插件框架，[https://github.com/Qihoo360/DroidPlugin](https://github.com/Qihoo360/DroidPlugin)，大家以后用这个就OK啦！\n\n"],[1,58242,"6."]],[49841,49841],[58244,58244]]],[1512385276575,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49885,"2."],[1,49904,"3."],[-1,50844,"3."],[1,50859,"4."],[-1,50897,"4."],[1,50925,"5."],[-1,51809,"5."],[1,51816,",如6."],[-1,51816,"\n\n"],[1,54228,"不过"],[-1,54228,"\n\n"],[-1,54233,"."],[1,55327,"\n"],[-1,55330,"\n"],[1,55849,"\n"],[-1,55852,"\n"],[1,56621,"\n"],[-1,56624,"\n"],[1,57159,"\n"],[-1,57162,"\n"],[1,57785," "],[-1,57785,"*"],[1,57878,"."],[-1,57878,""],[1,58077,"还好有360手机助手团队，在github上开源出来了DroidPlugin插件框架，[https://github.com/Qihoo360/DroidPlugin](https://github.com/Qihoo360/DroidPlugin)，大家以后用这个就OK啦！\n\n"],[-1,58103,"6."]],[58244,58244],[49841,49841]]],[1512385253899,["gengmei_pxf@gengmei123.local",[[1,54229,"例如# Android插件化系列第（二）篇---动态加载技术之apk换肤"]],[54229,54229],[54265,54265]]],[1512385258190,["gengmei_pxf@gengmei123.local",[[-1,54231,"# "]],[54233,54233],[54231,54231]]],[1512385261635,["gengmei_pxf@gengmei123.local",[[1,54231,"【"]],[54231,54231],[54232,54232]]],[1512385262694,["gengmei_pxf@gengmei123.local",[[-1,54231,"【"]],[54232,54232],[54231,54231]]],[1512385263141,["gengmei_pxf@gengmei123.local",[[1,54231,"["]],[54231,54231],[54232,54232]]],[1512385266180,["gengmei_pxf@gengmei123.local",[[1,54264,"]()"]],[54264,54264],[54267,54267]]],[1512385274561,["gengmei_pxf@gengmei123.local",[[1,54266,"http://www.jianshu.com/p/d1c6e67f7889"]],[54266,54266],[54303,54303]]],[1512385336562,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49885,"2."],[-1,49902,"3."],[1,50844,"3."],[-1,50857,"4."],[1,50897,"4."],[-1,50923,"5."],[1,51809,"5."],[-1,51814,",如6."],[1,51818,"\n\n"],[-1,54228,"不"],[1,54229,"\n"],[-1,54304,"过"],[1,54305,"\n"],[1,54308,"."],[-1,55401,"\n"],[1,55405,"\n"],[-1,55923,"\n"],[1,55927,"\n"],[-1,56695,"\n"],[1,56699,"\n"],[-1,57233,"\n"],[1,57237,"\n"],[-1,57859," "],[1,57860,"*"],[-1,57952,"."],[1,57953,""],[-1,58152,"还好有360手机助手团队，在github上开源出来了DroidPlugin插件框架，[https://github.com/Qihoo360/DroidPlugin](https://github.com/Qihoo360/DroidPlugin)，大家以后用这个就OK啦！\n\n"],[1,58317,"6."]],[49841,49841],[58319,58319]]],[1512385336562,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49885,"2."],[1,49904,"3."],[-1,50844,"3."],[1,50859,"4."],[-1,50897,"4."],[1,50925,"5."],[-1,51809,"5."],[1,51816,",如6."],[-1,51816,"\n\n"],[1,54228,"不"],[-1,54228,"\n"],[1,54304,"过"],[-1,54304,"\n"],[-1,54308,"."],[1,55402,"\n"],[-1,55405,"\n"],[1,55924,"\n"],[-1,55927,"\n"],[1,56696,"\n"],[-1,56699,"\n"],[1,57234,"\n"],[-1,57237,"\n"],[1,57860," "],[-1,57860,"*"],[1,57953,"."],[-1,57953,""],[1,58152,"还好有360手机助手团队，在github上开源出来了DroidPlugin插件框架，[https://github.com/Qihoo360/DroidPlugin](https://github.com/Qihoo360/DroidPlugin)，大家以后用这个就OK啦！\n\n"],[-1,58178,"6."]],[58319,58319],[49841,49841]]],[1512385286498,["gengmei_pxf@gengmei123.local",[[1,54231,":"]],[54231,54231],[54232,54232]]],[1512385291211,["gengmei_pxf@gengmei123.local",[[1,54306,"\n"]],[54305,54305],[54306,54306]]],[1512385305776,["gengmei_pxf@gengmei123.local",[[1,54022,"* "]],[54022,54022],[54024,54024]]],[1512385309376,["gengmei_pxf@gengmei123.local",[[1,54109,"* "]],[54109,54109],[54111,54111]]],[1512385636569,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,49885,"2."],[-1,49902,"3."],[1,50844,"3."],[-1,50857,"4."],[1,50897,"4."],[-1,50923,"5."],[1,51809,"5."],[-1,51814,",如6."],[1,51818,"\n\n"],[-1,54232,"不"],[1,54233,"\n"],[-1,54309,"过"],[1,54310,"\n"],[1,54314,"."],[-1,55407,"\n"],[1,55411,"\n"],[-1,55929,"\n"],[1,55933,"\n"],[-1,56701,"\n"],[1,56705,"\n"],[-1,57239,"\n"],[1,57243,"\n"],[-1,57865," "],[1,57866,"*"],[-1,57958,"."],[1,57959,""],[-1,58158,"还好有360手机助手团队，在github上开源出来了DroidPlugin插件框架，[https://github.com/Qihoo360/DroidPlugin](https://github.com/Qihoo360/DroidPlugin)，大家以后用这个就OK啦！\n\n"],[1,58323,"6."]],[49841,49841],[58325,58325]]],[1512385636569,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,49885,"2."],[1,49904,"3."],[-1,50844,"3."],[1,50859,"4."],[-1,50897,"4."],[1,50925,"5."],[-1,51809,"5."],[1,51816,",如6."],[-1,51816,"\n\n"],[1,54232,"不"],[-1,54232,"\n"],[1,54309,"过"],[-1,54309,"\n"],[-1,54314,"."],[1,55408,"\n"],[-1,55411,"\n"],[1,55930,"\n"],[-1,55933,"\n"],[1,56702,"\n"],[-1,56705,"\n"],[1,57240,"\n"],[-1,57243,"\n"],[1,57866," "],[-1,57866,"*"],[1,57959,"."],[-1,57959,""],[1,58158,"还好有360手机助手团队，在github上开源出来了DroidPlugin插件框架，[https://github.com/Qihoo360/DroidPlugin](https://github.com/Qihoo360/DroidPlugin)，大家以后用这个就OK啦！\n\n"],[-1,58184,"6."]],[58325,58325],[49841,49841]]],[1512385585064,["gengmei_pxf@gengmei123.local",[[1,49881,"\n"]],[49879,49879],[49880,49880]]],[1512385585220,["gengmei_pxf@gengmei123.local",[[1,49882,"\n"]],[49880,49880],[49881,49881]]],[1512385585686,["gengmei_pxf@gengmei123.local",[[1,49883,"\n"]],[49881,49881],[49882,49882]]],[1512385586657,["gengmei_pxf@gengmei123.local",[[-1,49883,"\n"]],[49882,49882],[49881,49881]]],[1512385587177,["gengmei_pxf@gengmei123.local",[[1,49881,"### Java并发集合框架\n\n我们着重说明一下Java并发的集合框架，就是java.util.concurrent包下的集合类\n\n#### 非阻塞队列\n\n> 非阻塞队列就是在队列中没有数据时，对此队列的操作将出现异常或者返回null，无需等待/阻塞的特色。\n\n在JDK的并发包中，常见的非阻塞队列有以下几个： \n- ConcurrentHashMap \n- ConcurrentSkipListMap \n- ConcurrentSkipListSet \n- ConcurrentLinkedQueue \n- ConcurrentLinkedDeque \n- CopyOnWriteArrayList \n- CopyOnWriteArraySet\n\n**ConcurrentHashMap类**\n\n> 这个类是支持并发操作的Map对象，与之对应的不支持并发操作的Map对象是HashMap，Hashtable对象也是Map的一个子类，也是支持并发操作，但是其不支持Iterator并发的删除操作，如果程序中要对map集合做并发以及Iterator并发编辑/删除操作，推荐使用ConcurrentHashMap集合类。\n\nHashMap集合不支持并发示例：\n\n```\npackage com.collections.hashmapdemo;\n\nimport java.util.HashMap;\n\npublic class HashMapDemo {\n    public static HashMap hashMap = new HashMap();\n\n    public static void main(String[] args) {\n        Thread threadA = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for (int i = 0; i < 50000; i++) {\n                    hashMap.put(\"ThreadA\" + (i + 1), \"ThreadA\" + i + 1);\n                    System.out.println(\"ThreadA\" + (i + 1));\n                }\n            }\n        });\n\n        Thread threadB = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for (int i = 0; i < 50000; i++) {\n                    hashMap.put(\"ThreadB\" + (i + 1), \"ThreadB\" + i + 1);\n                    System.out.println(\"ThreadB\" + (i + 1));\n                }\n            }\n        });\n\n        threadA.start();\n        threadB.start();\n    }\n}\n\n```\n\n执行结果 \n有时候程序可以正常执行完，有时候则程序会造成假死的状态，如下图：\n\n![这里写图片描述](http://img.blog.csdn.net/20171018201847398?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uZ2d1b19jaGVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n所以说HashMap不支持多线程并发的操作。\n\nHashtable集合支持并发 \n示例： \n只需要把HashMap示例中public static HashMap hashMap = new HashMap();修改成public static Hashtable hashtable = new Hashtable();即可。 \n我们就说说Hashtable不支持Iterator的编辑/删除操作，示例如下\n\n```\npackage com.collections.hashmapdemo;\n\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.concurrent.TimeUnit;\n\npublic class HashtableNotModifyDemo {\n    public static Hashtable hashtable = new Hashtable();\n    static {\n        for (int i = 0; i < 5; i++) {\n            hashtable.put(\"String\" + (i + 1), i + 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        Thread threadA = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Iterator iterator = hashtable.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        System.out.println(iterator.next());\n                        TimeUnit.SECONDS.sleep(2);\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        Thread threadB = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                hashtable.put(\"z\", \"zValue\");\n            }\n        });\n\n        threadA.start();\n        threadB.start();\n    }\n}\n\n```\n\n执行结果\n\n> String5 \n> java.util.ConcurrentModificationException \n> at java.util.HashtableEnumerator.next(Hashtable.java:1167)atcom.collections.hashmapdemo.HashtableNotModifyDemo1.run(HashtableNotModifyDemo.java:22) \n> at java.lang.Thread.run(Thread.java:745)\n\n说明多线程调用该类的iterator()方法返回Iterator对象后，在调用put方法会报ConcurrentModificationException异常，也就是不支持Iterator并发的编辑/删除操作。如果想实现此功能推荐使用并发集合框架提供的ConcurrentHashMap类。\n\nConcurrentHashMap集合支持并发示例：\n\n> 需要把HashMap示例中public static HashMap hashMap = new HashMap();修改成public \n> static ConcurrentHashMap concurretHashMap = new ConcurrentHashMap();即可。\n\nConcurrentHashMap集合支持Iterator并发操作示例：\n\n> 把类HashtableNotModifyDemo中的public static Hashtable hashtable = new Hashtable();修改为public static ConcurrentHashMap concurretHashMap = new ConcurrentHashMap();测试即可。\n\n**ConcurrentSkipListMap类**\n\n这个并发集合类支持排序功能。一般此集合中存放的对象要实现Comparable接口，方便此集合类排序，如果不实现此接口，则会按照默认排序。\n\n**ConcurrentSkipListSet类**\n\n这个并发集合类不仅支持排序功能，还不允许重复的元素。一般此集合中存放的对象要实现Comparable接口，并且重写equals和hashCode方法。\n\n**ConcurrentLinkedQueue类**\n\n这个并发集合类提供了并发环境的队列操作。\n\n*   poll()当没有获取到数据时返回null，如果有数据则一处表头并将表头数据返回。\n*   element()当没有获取到数据时抛NoSuchElementException异常，如果有数据则返回表头数据。\n*   peek()当没有获取导数据是返回null，获取到数据时则不移除表头，并将表头数据返回。\n\n**ConcurrentLinkedDeque类**\n\nConcurrentLinkedQueue支持对队列头操作，而ConcurrentLinkedDeque也支持队列头和列尾双向操作。\n\n**CopyOnWriteArrayList类**\n\nArrayList是线程不安全的，如果想在并发中实现线程安全，则可以使用CopyOnWriteArrayList类，使用方法和ArrayList无异。\n\n**CopyOnWriteArraySet类**\n\nArraySet是线程不安全的，如果想在并发中实现线程安全，则可以使用CopyOnWriteArraySet类，使用方法和ArraySet无异。\n\n#### 阻塞队列\n\nto be continue……"]],[49881,49881],[54453,54453]]],[1512385597823,["gengmei_pxf@gengmei123.local",[[-1,49883,"#"],[1,49896,""],[-1,50036," "],[1,50037," "],[-1,50057," "],[1,50058," "],[-1,50082," "],[1,50083," "],[-1,50107," "],[1,50108," "],[-1,50132," "],[1,50133," "],[-1,50157," "],[1,50158," "],[-1,50181," "],[1,50182," "],[-1,51343," "],[1,51344," "],[-1,51615," "],[1,51616," "],[-1,51620," "],[1,51621," "],[-1,51740," "],[1,51741," "],[-1,52948," "],[1,52949," "],[-1,52993," "],[1,52994," "],[-1,53144," "],[1,53145," "],[-1,53435," "],[1,53436," "]],[49884,49884],[49883,49883]]],[1512385598216,["gengmei_pxf@gengmei123.local",[[-1,49881,"##"]],[49883,49883],[49881,49881]]],[1512385599764,["gengmei_pxf@gengmei123.local",[[1,49881,"**"]],[49881,49881],[49883,49883]]],[1512385602153,["gengmei_pxf@gengmei123.local",[[1,49894,"**"]],[49894,49894],[49896,49896]]],[1512385619063,["gengmei_pxf@gengmei123.local",[[-1,49883," "]],[49884,49884],[49883,49883]]],[1512385696557,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,54459,"2."],[-1,54476,"3."],[1,55418,"3."],[-1,55431,"4."],[1,55471,"4."],[-1,55497,"5."],[1,56383,"5."],[-1,56388,",如6."],[1,56392,"\n\n"],[-1,58806,"不"],[1,58807,"\n"],[-1,58883,"过"],[1,58884,"\n"],[1,58888,"."],[-1,59981,"\n"],[1,59985,"\n"],[-1,60503,"\n"],[1,60507,"\n"],[-1,61275,"\n"],[1,61279,"\n"],[-1,61813,"\n"],[1,61817,"\n"],[-1,62439," "],[1,62440,"*"],[-1,62532,"."],[1,62533,""],[-1,62732,"还好有360手机助手团队，在github上开源出来了DroidPlugin插件框架，[https://github.com/Qihoo360/DroidPlugin](https://github.com/Qihoo360/DroidPlugin)，大家以后用这个就OK啦！\n\n"],[1,62897,"6."]],[49841,49841],[62899,62899]]],[1512385696557,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,54459,"2."],[1,54478,"3."],[-1,55418,"3."],[1,55433,"4."],[-1,55471,"4."],[1,55499,"5."],[-1,56383,"5."],[1,56390,",如6."],[-1,56390,"\n\n"],[1,58806,"不"],[-1,58806,"\n"],[1,58883,"过"],[-1,58883,"\n"],[-1,58888,"."],[1,59982,"\n"],[-1,59985,"\n"],[1,60504,"\n"],[-1,60507,"\n"],[1,61276,"\n"],[-1,61279,"\n"],[1,61814,"\n"],[-1,61817,"\n"],[1,62440," "],[-1,62440,"*"],[1,62533,"."],[-1,62533,""],[1,62732,"还好有360手机助手团队，在github上开源出来了DroidPlugin插件框架，[https://github.com/Qihoo360/DroidPlugin](https://github.com/Qihoo360/DroidPlugin)，大家以后用这个就OK啦！\n\n"],[-1,62758,"6."]],[62899,62899],[49841,49841]]],[1512385652158,["gengmei_pxf@gengmei123.local",[[-1,49947,"####"]],[49951,49951],[49947,49947]]],[1512385654235,["gengmei_pxf@gengmei123.local",[[1,49947,"*"]],[49947,49947],[49948,49948]]],[1512385662256,["gengmei_pxf@gengmei123.local",[[-1,54423,"####"],[1,54427,"*"]],[54423,54427],[54424,54424]]],[1512385694918,["gengmei_pxf@gengmei123.local",[[1,54423,"####"],[-1,54423,"*#### 阻塞队列\n\nto be continue……"]],[54424,54424],[54423,54423]]],[1512385695654,["gengmei_pxf@gengmei123.local",[[-1,54424,"\n"]],[54423,54423],[54422,54422]]],[1512385699010,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[-1,54423,"#"],[1,54424,"\n"],[1,54428,"2."],[-1,54445,"3."],[1,55387,"3."],[-1,55400,"4."],[1,55440,"4."],[-1,55466,"5."],[1,56352,"5."],[-1,56357,",如6."],[1,56361,"\n\n"],[-1,58775,"不"],[1,58776,"\n"],[-1,58852,"过"],[1,58853,"\n"],[1,58857,"."],[-1,59950,"\n"],[1,59954,"\n"],[-1,60472,"\n"],[1,60476,"\n"],[-1,61244,"\n"],[1,61248,"\n"],[-1,61782,"\n"],[1,61786,"\n"],[-1,62408," "],[1,62409,"*"],[-1,62501,"."],[1,62502,""],[-1,62701,"还好有360手机助手团队，在github上开源出来了DroidPlugin插件框架，[https://github.com/Qihoo360/DroidPlugin](https://github.com/Qihoo360/DroidPlugin)，大家以后用这个就OK啦！\n\n"],[1,62866,"6."]],[49841,49841],[62868,62868]]],[1512385699010,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[1,54423,"#"],[-1,54423,"\n"],[-1,54428,"2."],[1,54447,"3."],[-1,55387,"3."],[1,55402,"4."],[-1,55440,"4."],[1,55468,"5."],[-1,56352,"5."],[1,56359,",如6."],[-1,56359,"\n\n"],[1,58775,"不"],[-1,58775,"\n"],[1,58852,"过"],[-1,58852,"\n"],[-1,58857,"."],[1,59951,"\n"],[-1,59954,"\n"],[1,60473,"\n"],[-1,60476,"\n"],[1,61245,"\n"],[-1,61248,"\n"],[1,61783,"\n"],[-1,61786,"\n"],[1,62409," "],[-1,62409,"*"],[1,62502,"."],[-1,62502,""],[1,62701,"还好有360手机助手团队，在github上开源出来了DroidPlugin插件框架，[https://github.com/Qihoo360/DroidPlugin](https://github.com/Qihoo360/DroidPlugin)，大家以后用这个就OK啦！\n\n"],[-1,62727,"6."]],[62868,62868],[49841,49841]]],[1512385697219,["gengmei_pxf@gengmei123.local",[[-1,54423,"\n"]],[54422,54422],[54421,54421]]],[1512387738829,[null,[[-1,49841,"**的隐患\n\n"],[1,49848,"并发的隐患**"],[-1,49860,"2"],[1,49861,"\n"],[-1,49868,"."],[1,49869,"\n"],[1,54427,"2."],[-1,54444,"3."],[1,55386,"3."],[-1,55399,"4."],[1,55439,"4."],[-1,55465,"5."],[1,56351,"5."],[-1,56356,",如6."],[1,56360,"\n\n"],[-1,58774,"不"],[1,58775,"\n"],[-1,58851,"过"],[1,58852,"\n"],[1,58856,"."],[-1,59949,"\n"],[1,59953,"\n"],[-1,60471,"\n"],[1,60475,"\n"],[-1,61243,"\n"],[1,61247,"\n"],[-1,61781,"\n"],[1,61785,"\n"],[-1,62407," "],[1,62408,"*"],[-1,62500,"."],[1,62501,""],[-1,62700,"还好有360手机助手团队，在github上开源出来了DroidPlugin插件框架，[https://github.com/Qihoo360/DroidPlugin](https://github.com/Qihoo360/DroidPlugin)，大家以后用这个就OK啦！\n\n"],[1,62865,"6."]],[49841,49841],[62867,62867]]],[1512387738829,[null,[[1,49841,"**的隐患\n\n"],[-1,49841,"并发的隐患**"],[1,49860,"2"],[-1,49860,"\n"],[1,49868,"."],[-1,49868,"\n"],[-1,54427,"2."],[1,54446,"3."],[-1,55386,"3."],[1,55401,"4."],[-1,55439,"4."],[1,55467,"5."],[-1,56351,"5."],[1,56358,",如6."],[-1,56358,"\n\n"],[1,58774,"不"],[-1,58774,"\n"],[1,58851,"过"],[-1,58851,"\n"],[-1,58856,"."],[1,59950,"\n"],[-1,59953,"\n"],[1,60472,"\n"],[-1,60475,"\n"],[1,61244,"\n"],[-1,61247,"\n"],[1,61782,"\n"],[-1,61785,"\n"],[1,62408," "],[-1,62408,"*"],[1,62501,"."],[-1,62501,""],[1,62700,"还好有360手机助手团队，在github上开源出来了DroidPlugin插件框架，[https://github.com/Qihoo360/DroidPlugin](https://github.com/Qihoo360/DroidPlugin)，大家以后用这个就OK啦！\n\n"],[-1,62726,"6."]],[62867,62867],[49841,49841]]],[1512387702447,["gengmei_pxf@gengmei123.local",[[1,62726,"\n"]],[62724,62724],[62725,62725]]],[1512387703709,["gengmei_pxf@gengmei123.local",[[1,62727,"\n"]],[62725,62725],[62726,62726]]],[1512387705833,["gengmei_pxf@gengmei123.local",[[1,62726,"【"]],[62726,62726],[62727,62727]]],[1512387706991,["gengmei_pxf@gengmei123.local",[[-1,62726,"【"]],[62727,62727],[62726,62726]]],[1512387709578,["gengmei_pxf@gengmei123.local",[[1,62726,"[]()"]],[62726,62726],[62730,62730]]],[1512387711514,["gengmei_pxf@gengmei123.local",[[1,62727,"## Android热修复技术选型——三大流派解析"]],[62727,62727],[62752,62752]]],[1512387714734,["gengmei_pxf@gengmei123.local",[[-1,62727,"## "]],[62730,62730],[62727,62727]]],[1512387723843,["gengmei_pxf@gengmei123.local",[[1,62751,"https://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&mid=2651112709&idx=1&sn=09f82f5e2e8e287904391dbc4b1f83f6&scene=1&srcid=0909KyPp8gx8aLwII2MEYUQ3"]],[62751,62752],[62896,62896]]]]],["f3042199-5726-40d7-9f6d-23243b77605f",1512460153382,"# JAVA\n\n## 一. 类的加载过程，Person person = new Person();为例进行说明。\n\n1).因为new用到了Person.class，所以会先找到Person.class文件，并加载到内存中;\n\n2).执行该类中的static代码块，如果有的话，给Person.class类进行初始化;\n\n3).在堆内存中开辟空间分配内存地址;\n\n4).在堆内存中建立对象的特有属性，并进行默认初始化;\n\n5).对属性进行显示初始化;\n\n6).对对象进行构造代码块初始化;\n\n7).对对象进行与之对应的构造函数进行初始化;\n\n8).将内存地址付给栈内存中的p变量\n\n## 二. JVM相关知识，GC机制。\n\n**JVM基本构成**\n\n![](http://upload-images.jianshu.io/upload_images/4642697-bbcb5924cdaf30f8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/473)\n\n从上图可知，JVM主要包括四个部分：\n\n    1.类加载器（ClassLoader）:在JVM启动时或者在类运行时将需要的class加载到JVM中。（下图表示了从java源文件到JVM的整个过程，可配合理解。 \n\n![](http://upload-images.jianshu.io/upload_images/4642697-1cf5f815751beeab.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400)\n\n    2.执行引擎：负责执行class文件中包含的字节码指令；\n\n    3.内存区（也叫运行时数据区）：是在JVM运行的时候操作所分配的内存区。运行时内存区主要可以划分为5个区域，如图：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-160b9ba3bfeaf8f5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/376)\n\n*   方法区(Method Area)：用于存储类结构信息的地方，包括常量池、静态变量、构造函数等。虽然JVM规范把方法区描述为堆的一个逻辑部分， 但它却有个别名non-heap（非堆），所以大家不要搞混淆了。方法区还包含一个运行时常量池。\n\n*   java堆(Heap)：存储java实例或者对象的地方。这块是GC的主要区域。从存储的内容我们可以很容易知道，方法区和堆是被所有java线程共享的。\n\n*   java栈(Stack)：java栈总是和线程关联在一起，每当创建一个线程时，JVM就会为这个线程创建一个对应的java栈。在这个java栈中又会包含多个栈帧，每运行一个方法就创建一个栈帧，用于存储局部变量表、操作栈、方法返回值等。每一个方法从调用直至执行完成的过程，就对应一个栈帧在java栈中入栈到出栈的过程。所以java栈是现成私有的。\n\n*   程序计数器(PC Register)：用于保存当前线程执行的内存地址。由于JVM程序是多线程执行的（线程轮流切换），所以为了保证线程切换回来后，还能恢复到原先状态，就需要一个独立的计数器，记录之前中断的地方，可见程序计数器也是线程私有的。\n\n*   本地方法栈(Native Method Stack)：和java栈的作用差不多，只不过是为JVM使用到的native方法服务的。\n\n        4.本地方法接口：主要是调用C或C++实现的本地方法及返回结果。\n\n**GC机制**\n\n    垃圾收集器一般必须完成两件事：检测出垃圾；回收垃圾。怎么检测出垃圾？一般有以下几种方法：\n\n**_引用计数法：_**\n\n    给一个对象添加引用计数器，每当有个地方引用它，计数器就加1；引用失效就减1。好了，问题来了，如果我有两个对象A和B，互相引用，除此之外，没有其他任何对象引用它们，实际上这两个对象已经无法访问，即是我们说的垃圾对象。但是互相引用，计数不为0，导致无法回收，所以还有另一种方法：\n\n**_可达性分析算法：_**\n\n    以根集对象为起始点进行搜索，如果有对象不可达的话，即是垃圾对象。这里的根集一般包括java栈中引用的对象、方法区常良池中引用的对象、本地方法中引用的对象等。\n\n    总之，JVM在做垃圾回收的时候，会检查堆中的所有对象是否会被这些根集对象引用，不能够被引用的对象就会被垃圾收集器回收。一般回收算法也有如下几种：\n\n1).标记-清除（Mark-sweep）\n\n2).复制（Copying\n\n3).标记-整理（Mark-Compact）\n\n4).分代收集算法\n\n具体的解释可以参考本篇文章[还不点我?](https://link.jianshu.com?t=http://blog.csdn.net/tonytfjing/article/details/44278233)\n\n## 三. 类的加载器，双亲机制，Android的类加载器。\n\n**类的加载器**\n\n    大家都知道，当我们写好一个Java程序之后，不是管是CS还是BS应用，都是由若干个.class文件组织而成的一个完整的Java应用程序，当程序在运行时，即会调用该程序的一个入口函数来调用系统的相关功能，而这些功能都被封装在不同的class文件当中，所以经常要从这个class文件中要调用另外一个class文件中的方法，如果另外一个文件不存在的，则会引发系统异常。而程序在启动的时候，并不会一次性加载程序所要用的所有class文件，而是根据程序的需要，通过Java的类加载机制（ClassLoader）来动态加载某个class文件到内存当中的，从而只有class文件被载入到了内存之后，才能被其它class所引用。所以ClassLoader就是用来动态加载class文件到内存当中用的。\n\n**双亲机制**\n\n**_1、原理介绍_**\n\n    ClassLoader使用的是双亲委托模型来搜索类的，每个ClassLoader实例都有一个父类加载器的引用（不是继承的关系，是一个包含的关系），虚拟机内置的类加载器（Bootstrap ClassLoader）本身没有父类加载器，但可以用作其它ClassLoader实例的的父类加载器。当一个ClassLoader实例需要加载某个类时，它会试图亲自搜索某个类之前，先把这个任务委托给它的父类加载器，这个过程是由上至下依次检查的，首先由最顶层的类加载器Bootstrap ClassLoader试图加载，如果没加载到，则把任务转交给Extension ClassLoader试图加载，如果也没加载到，则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常。否则将这个找到的类生成一个类的定义，并将它加载到内存当中，最后返回这个类在内存中的Class实例对象。\n\n**_2、为什么要使用双亲委托这种模型呢？_**\n\n    因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。\n\n**_3、但是JVM在搜索类的时候，又是如何判定两个class是相同的呢？_**\n\n    JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。比如网络上的一个Java类org.classloader.simple.NetClassLoaderSimple，javac编译之后生成字节码文件NetClassLoaderSimple.class，ClassLoaderA和ClassLoaderB这两个类加载器并读取了NetClassLoaderSimple.class文件，并分别定义出了java.lang.Class实例来表示这个类，对于JVM来说，它们是两个不同的实例对象，但它们确实是同一份字节码文件，如果试图将这个Class实例生成具体的对象进行转换时，就会抛运行时异常java.lang.ClassCaseException，提示这是两个不同的类型。\n\n**Android类加载器**\n\n    对于Android而言，最终的apk文件包含的是dex类型的文件，dex文件是将class文件重新打包，打包的规则又不是简单地压缩，而是完全对class文件内部的各种函数表，变量表进行优化，产生一个新的文件，即dex文件。因此加载这种特殊的Class文件就需要特殊的类加载器DexClassLoader。\n\n## 四. 集合框架，list，map，set都有哪些具体的实现类，区别都是什么?\n\n![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：了对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**===****》****TreeSet****两种排序方式：**两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n## 五. concurrentHashmap原理，原子类。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大.\n\n## 六. volatile原理\n\n    在《Java并发编程：核心理论》一文中，我们已经提到过可见性、有序性及原子性问题，通常情况下我们可以通过Synchronized关键字来解决这些个问题，不过如果对Synchronized原理有了解的话，应该知道Synchronized是一个比较重量级的操作，对系统的性能有比较大的影响，所以，如果有其他解决方案，我们通常都避免使用Synchronized来解决问题。而volatile关键字就是Java中提供的另一种解决可见性和有序性问题的方案。对于原子性，需要强调一点，也是大家容易误解的一点：对volatile变量的单次读/写操作可以保证原子性的，如long和double类型变量，但是并不能保证i++这种操作的原子性，因为本质上i++是读、写两次操作。\n\n参考文章[插好眼了等传送](https://link.jianshu.com?t=https://www.cnblogs.com/paddix/p/5428507.html)\n\n## 七. 多线程的使用场景\n\n使用多线程就一定效率高吗？ 有时候使用多线程并不是为了提高效率，而是使得CPU能够同时处理多个事件。\n\n1).为了不阻塞主线程,启动其他线程来做好事的事情,比如APP中耗时操作都不在UI中做.\n\n2).实现更快的应用程序,即主线程专门监听用户请求,子线程用来处理用户请求,以获得大的吞吐量.感觉这种情况下，多线程的效率未必高。 这种情况下的多线程是为了不必等待， 可以并行处理多条数据。\n\n比如JavaWeb的就是主线程专门监听用户的HTTP请求，然后启动子线程去处理用户的HTTP请求。\n\n3).某种虽然优先级很低的服务，但是却要不定时去做。\n\n比如Jvm的垃圾回收。\n\n4.)某种任务，虽然耗时，但是不耗CPU的操作时，开启多个线程，效率会有显著提高。\n\n比如读取文件，然后处理。 磁盘IO是个很耗费时间，但是不耗CPU计算的工作。 所以可以一个线程读取数据，一个线程处理数据。肯定比一个线程读取数据，然后处理效率高。 因为两个线程的时候充分利用了CPU等待磁盘IO的空闲时间。\n\n## 八. JAVA常量池\n\n**_Interger中的128(-128~127)_**\n\na.当数值范围为-128~127时：如果两个new出来Integer对象，即使值相同，通过“==”比较结果为false，但两个对象直接赋值，则通过“==”比较结果为“true，这一点与String非常相似。\n\nb.当数值不在-128~127时，无论通过哪种方式，即使两个对象的值相等，通过“==”比较，其结果为false；\n\nc.当一个Integer对象直接与一个int基本数据类型通过“==”比较，其结果与第一点相同；\n\nd.Integer对象的hash值为数值本身；\n\n**_为什么是-128-127?_**\n\n    在Integer类中有一个静态内部类IntegerCache，在IntegerCache类中有一个Integer数组，用以缓存当数值范围为-128~127时的Integer对象。\n\n## 九. 简单介绍一下java中的泛型，泛型擦除以及相关的概念。\n\n    泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。 Java语言引入泛型的好处是安全简单。\n\n    在Java SE 1.5之前，没有泛型的情况的下，通过对类型Object的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是一个安全隐患。\n\n    泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，提高代码的重用率。\n\n1、泛型的类型参数只能是类类型（包括自定义类），不能是简单类型。\n\n2、同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的。\n\n3、泛型的类型参数可以有多个。\n\n4、泛型的参数类型可以使用extends语句，例如<T extends superclass>。习惯上称为“有界类型”。\n\n5、泛型的参数类型还可以是通配符类型。例如Class<?> classType = Class.forName(\"java.lang.String\");\n\n**泛型擦除以及相关的概念**\n\n    Java中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会在编译器在编译的时候去掉。这个过程就称为类型擦除。\n\n**类型擦除引起的问题及解决方法**\n\n1、先检查，在编译，以及检查编译的对象和引用传递的问题\n\n2、自动类型转换\n\n3、类型擦除与多态的冲突和解决方法\n\n4、泛型类型变量不能是基本数据类型\n\n5、运行时类型查询\n\n6、异常中使用泛型的问题\n\n7、数组（这个不属于类型擦除引起的问题）\n\n9、类型擦除后的冲突\n\n10、泛型在静态方法和静态类中的问题\n\n# Android\n\n## 一. Handler机制\n\n    Android 的消息机制也就是 handler 机制,创建 handler 的时候会创建一个 looper ( 通过 looper.prepare() 来创建 ),looper 一般为主线程 looper.\n\n    handler 通过 send 发送消息 (sendMessage) ,当然 post 一系列方法最终也是通过 send 来实现的,在 send 方法中handler 会通过 enqueueMessage() 方法中的 enqueueMessage(msg,millis )向消息队列 MessageQueue 插入一条消息,同时会把本身的 handler 通过 msg.target = this 传入.\n\n    Looper 是一个死循环,不断的读取MessageQueue中的消息,loop 方法会调用 MessageQueue 的 next 方法来获取新的消息,next 操作是一个阻塞操作,当没有消息的时候 next 方法会一直阻塞,进而导致 loop 一直阻塞,当有消息的时候,Looper 就会处理消息 Looper 收到消息之后就开始处理消息: msg.target.dispatchMessage(msg),当然这里的 msg.target 就是上面传过来的发送这条消息的 handler 对象,这样 handler 发送的消息最终又交给他的dispatchMessage方法来处理了,这里不同的是,handler 的 dispatchMessage 方法是在创建 Handler时所使用的 Looper 中执行的,这样就成功的将代码逻辑切换到了主线程了.\n\n    Handler 处理消息的过程是:首先,检查Message 的 callback 是否为 null,不为 null 就通过 handleCallBack 来处理消息,Message 的 callback 是一个 Runnable 对象,实际上是 handler 的 post 方法所传递的 Runnable 参数.其次是检查 mCallback 是 否为 null,不为 null 就调用 mCallback 的handleMessage 方法来处理消息.\n\n## 二. View的绘制流程\n\n    View的绘制流程：OnMeasure()——>OnLayout()——>OnDraw()\n\n各步骤的主要工作：\n\n**_OnMeasure()：_**\n\n    测量视图大小。从顶层父View到子View递归调用measure方法，measure方法又回调OnMeasure。\n\n**_OnLayout()：_**\n\n    确定View位置，进行页面布局。从顶层父View向子View的递归调用view.layout方法的过程，即父View根据上一步measure子View所得到的布局大小和布局参数，将子View放在合适的位置上。\n\n**_OnDraw()：_**\n\n    绘制视图:ViewRoot创建一个Canvas对象，然后调用OnDraw()。六个步骤：①、绘制视图的背景；②、保存画布的图层（Layer）；③、绘制View的内容；④、绘制View子视图，如果没有就不用；⑤、还原图层（Layer）；⑥、绘制滚动条。\n\n## 三. 事件传递机制\n\n1).Android事件分发机制的本质是要解决：点击事件由哪个对象发出，经过哪些对象，最终达到哪个对象并最终得到处理。这里的对象是指Activity、ViewGroup、View.\n\n2).Android中事件分发顺序：Activity（Window） -> ViewGroup -> View.\n\n3).事件分发过程由dispatchTouchEvent() 、onInterceptTouchEvent()和onTouchEvent()三个方法协助完成\n\n**设置Button按钮来响应点击事件事件传递情况：（如下图）**\n\n布局如下:\n\n![](http://upload-images.jianshu.io/upload_images/4642697-01f23a099103eb82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/210)\n\n最外层：Activiy A，包含两个子View：ViewGroup B、View C\n\n中间层：ViewGroup B，包含一个子View：View C\n\n最内层：View C\n\n假设用户首先触摸到屏幕上View C上的某个点（如图中黄色区域），那么Action_DOWN事件就在该点产生，然后用户移动手指并最后离开屏幕。\n\n**按钮点击事件:**\n\nDOWN事件被传递给C的onTouchEvent方法，该方法返回true，表示处理这个事件;\n\n因为C正在处理这个事件，那么DOWN事件将不再往上传递给B和A的onTouchEvent()；\n\n该事件列的其他事件（Move、Up）也将传递给C的onTouchEvent();\n\n![](http://upload-images.jianshu.io/upload_images/4642697-ca12c00c79780b57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n(记住这个图的传递顺序,面试的时候能够画出来,就很详细了)\n\n## 四. Binder机制\n\n**1.了解Binder**\n\n    在Android系统中，每一个应用程序都运行在独立的进程中，这也保证了当其中一个程序出现异常而不会影响另一个应用程序的正常运转。在许多情况下，我们activity都会与各种系统的service打交道，很显然，我们写的程序中activity与系统service肯定不是同一个进程，但是它们之间是怎样实现通信的呢？所以Binder是android中一种实现进程间通信（IPC）的方式之一。\n\n    1).首先，Binder分为Client和Server两个进程。\n\n    注意，Client和Server是相对的。谁发消息，谁就是Client，谁接收消息，谁就是Server。\n\n    举个例子，两个进程A和B之间使用Binder通信，进程A发消息给进程B，那么这时候A是Binder Client，B是Binder Server；进程B发消息给进程A，那么这时候B是Binder Client，A是Binder Server——其实这么说虽然简单了，但还是不太严谨，我们先这么理解着。\n\n    2).其次，我们看下面这个图（摘自田维术的博客），基本说明白了Binder的组成解构：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-9fed6a1413057558.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/673)\n\n    图中的IPC就是进程间通信的意思。\n\n    图中的ServiceManager，负责把Binder Server注册到一个容器中。\n\n    有人把ServiceManager比喻成电话局，存储着每个住宅的座机电话，还是很恰当的。张三给李四打电话，拨打电话号码，会先转接到电话局，电话局的接线员查到这个电话号码的地址，因为李四的电话号码之前在电话局注册过，所以就能拨通；没注册，就会提示该号码不存在。\n\n    对照着Android Binder机制，对着上面这图，张三就是Binder Client，李四就是Binder Server，电话局就是ServiceManager，电话局的接线员在这个过程中做了很多事情，对应着图中的Binder驱动.\n\n    3).接下来我们看Binder通信的过程，还是摘自田维术博客的一张图：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-6a03bbb4f16108b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/675)\n\n注：图中的SM也就是ServiceManager。\n\n    我们看到，Client想要直接调用Server的add方法，是不可以的，因为它们在不同的进程中，这时候就需要Binder来帮忙了。\n\n    首先是Server在SM这个容器中注册。\n\n    其次，Client想要调用Server的add方法，就需要先获取Server对象， 但是SM不会把真正的Server对象返回给Client，而是把Server的一个代理对象返回给Client，也就是Proxy。\n\n    然后，Client调用Proxy的add方法，SM会帮他去调用Server的add方法，并把结果返回给Client。\n\n    以上这3步，Binder驱动出了很多力，但我们不需要知道Binder驱动的底层实现，涉及到C++的代码了——把有限的时间去做更有意义的事情。\n\n(ps:以上节选自包建强老师的文章[点我点我](https://link.jianshu.com?t=http://www.cnblogs.com/Jax/p/6864103.html)).\n\n**2.为什么android选用Binder来实现进程间通信？**\n\n1).可靠性。在移动设备上，通常采用基于Client-Server的通信方式来实现互联网与设备间的内部通信。目前linux支持IPC包括传统的管道，System V IPC，即消息队列/共享内存/信号量，以及socket中只有socket支持Client-Server的通信方式。Android系统为开发者提供了丰富进程间通信的功能接口，媒体播放，传感器，无线传输。这些功能都由不同的server来管理。开发都只关心将自己应用程序的client与server的通信建立起来便可以使用这个服务。毫无疑问，如若在底层架设一套协议来实现Client-Server通信，增加了系统的复杂性。在资源有限的手机 上来实现这种复杂的环境，可靠性难以保证。\n\n2).传输性能。socket主要用于跨网络的进程间通信和本机上进程间的通信，但传输效率低，开销大。消息队列和管道采用存储-转发方式，即数据先从发送方缓存区拷贝到内核开辟的一块缓存区中，然后从内核缓存区拷贝到接收方缓存区，其过程至少有两次拷贝。虽然共享内存无需拷贝，但控制复杂。比较各种IPC方式的数据拷贝次数。共享内存：0次。Binder：1次。Socket/管道/消息队列：2次。\n\n3).安全性。Android是一个开放式的平台，所以确保应用程序安全是很重要的。Android对每一个安装应用都分配了UID/PID,其中进程的UID是可用来鉴别进程身份。传统的只能由用户在数据包里填写UID/PID，这样不可靠，容易被恶意程序利用。而我们要求由内核来添加可靠的UID。\n\n所以，出于可靠性、传输性、安全性。android建立了一套新的进程间通信方式。\n\n## 五. Android中进程的级别，以及各自的区别。\n\n**1、前台进程**\n\n    用户当前正在做的事情需要这个进程。如果满足下面的条件之一，一个进程就被认为是前台进程：\n\n1).这个进程拥有一个正在与用户交互的Activity(这个Activity的onResume()方法被调用)。\n\n2).这个进程拥有一个绑定到正在与用户交互的activity上的Service。\n\n3).这个进程拥有一个前台运行的Service（service调用了方法startForeground()）.\n\n4).这个进程拥有一个正在执行其任何一个生命周期回调方法（onCreate(),onStart(),或onDestroy()）的Service。\n\n5).这个进程拥有正在执行其onReceive()方法的BroadcastReceiver。\n\n    通常，在任何时间点，只有很少的前台进程存在。它们只有在达到无法调合的矛盾时才会被杀－－如内存太小而不能继续运行时。通常，到了这时，设备就达到了一个内存分页调度状态，所以需要杀一些前台进程来保证用户界面的反应.\n\n**2、可见进程**\n\n    一个进程不拥有运行于前台的组件，但是依然能影响用户所见。满足下列条件时，进程即为可见：\n\n    这个进程拥有一个不在前台但仍可见的Activity(它的onPause()方法被调用)。当一个前台activity启动一个对话框时，就出了这种情况。\n\n**3、服务进程**\n\n    一个可见进程被认为是极其重要的。并且，除非只有杀掉它才可以保证所有前台进程的运行，否则是不能动它的。\n\n    这个进程拥有一个绑定到可见activity的Service。\n\n    一个进程不在上述两种之内，但它运行着一个被startService()所启动的service。\n\n尽管一个服务进程不直接影响用户所见，但是它们通常做一些用户关心的事情（比如播放音乐或下载数据），所以系统不到前台进程和可见进程活不下去时不会杀它。\n\n**4、后台进程**\n\n    一个进程拥有一个当前不可见的activity(activity的onStop()方法被调用)。\n\n    这样的进程们不会直接影响到用户体验，所以系统可以在任意时刻杀了它们从而为前台、可见、以及服务进程们提供存储空间。通常有很多后台进程在运行。它们被保存在一个LRU(最近最少使用)列表中来确保拥有最近刚被看到的activity的进程最后被杀。如果一个activity正确的实现了它的生命周期方法，并保存了它的当前状态，那么杀死它的进程将不会对用户的可视化体验造成影响。因为当用户返回到这个activity时，这个activity会恢复它所有的可见状态。\n\n**5、空进程**\n\n    一个进程不拥有入何active组件。\n\n    保留这类进程的唯一理由是高速缓存，这样可以提高下一次一个组件要运行它时的启动速度。系统经常为了平衡在进程高速缓存和底层的内核高速缓存之间的整体系统资源而杀死它们。\n\n## 六. 线程池的相关知识。\n\n    Android中的线程池都是之间或间接通过配置ThreadPoolExecutor来实现不同特性的线程池.Android中最常见的四类具有不同特性的线程池分别为FixThreadPool、CachedThreadPool、SingleThreadPool、ScheduleThreadExecutor.\n\n**1).FixThreadPool**\n\n    只有核心线程,并且数量固定的,也不会被回收,所有线程都活动时,因为队列没有限制大小,新任务会等待执行.\n\n    优点:更快的响应外界请求.\n\n**2).SingleThreadPool**\n\n    只有一个核心线程,确保所有的任务都在同一线程中按顺序完成.因此不需要处理线程同步的问题.\n\n**3).CachedThreadPool**\n\n    只有非核心线程,最大线程数非常大,所有线程都活动时,会为新任务创建新线程,否则会利用空闲线程(60s空闲时间,过了就会被回收,所以线程池中有0个线程的可能)处理任务.\n\n    优点:任何任务都会被立即执行(任务队列SynchronousQueue相当于一个空集合);比较适合执行大量的耗时较少的任务.\n\n**4).ScheduledThreadPool**\n\n    核心线程数固定,非核心线程(闲着没活干会被立即回收)数没有限制.\n\n    优点:执行定时任务以及有固定周期的重复任务\n\n    参考[Android开发——Android中常见的4种线程池（保证你能看懂并理解）](https://link.jianshu.com?t=http://blog.csdn.net/seu_calvin/article/details/52415337)\n\n## 七. 内存泄露，怎样查找，怎么产生的内存泄露。\n\n**产生的内存泄露**\n\n1).资源对象没关闭造成的内存泄漏\n\n2).构造Adapter时，没有使用缓存的convertView\n\n3).Bitmap对象不在使用时调用recycle()释放内存\n\n4).试着使用关于application的context来替代和activity相关的context\n\n5).注册没取消造成的内存泄漏\n\n6).集合中对象没清理造成的内存泄漏\n\n**查找内存泄漏**\n\n    查找内存泄漏可以使用Android Stdio 自带的Android Profiler工具,也可以使用Square产品的LeadCanary.\n\n## 八. Android优化\n\n**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n## 九. 插件化相关技术，热修补技术是怎样实现的，和插件化有什么区别\n\n**相同点:**\n\n    都使用ClassLoader来实现的加载的新的功能类，都可以使用PathClassLoader与DexClassLoader\n\n**不同点：**\n\n    热修复因为是为了修复Bug的，所以要将新的同名类替代同名的Bug类，要抢先加载新的类而不是Bug类，所以多做两件事：在原先的app打包的时候，阻止相关类去打上CLASS_ISPREVERIFIED标志，还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements，这样才能抢先代替Bug类，完成系统不加载旧的Bug类.\n\n    而插件化只是增肌新的功能类或者是资源文件，所以不涉及抢先加载旧的类这样的使命，就避过了阻止相关类去打上CLASS_ISPREVERIFIED标志和还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements.\n\n    所以插件化比热修复简单，热修复是在插件化的基础上在进行替旧的Bug类\n\n## 十. 怎样计算一张图片的大小，加载bitmap过程（怎样保证不产生内存溢出），二级缓存，LRUCache算法。\n\n**计算一张图片的大小**\n\n    图片占用内存的计算公式：图片高度 * 图片宽度 * 一个像素占用的内存大小.所以，计算图片占用内存大小的时候，要考虑图片所在的目录跟设备密度，这两个因素其实影响的是图片的高宽，android会对图片进行拉升跟压缩。\n\n**加载bitmap过程（怎样保证不产生内存溢出）**\n\n    由于Android对图片使用内存有限制，若是加载几兆的大图片便内存溢出。Bitmap会将图片的所有像素（即长x宽）加载到内存中，如果图片分辨率过大，会直接导致内存OOM，只有在BitmapFactory加载图片时使用BitmapFactory.Options对相关参数进行配置来减少加载的像素。\n\n**BitmapFactory.Options相关参数详解**\n\n(1).Options.inPreferredConfig值来降低内存消耗。\n\n比如：默认值ARGB_8888改为RGB_565,节约一半内存。\n\n(2).设置Options.inSampleSize 缩放比例，对大图片进行压缩 。\n\n(3).设置Options.inPurgeable和inInputShareable：让系统能及时回 收内存。\n\nA：inPurgeable：设置为True时，表示系统内存不足时可以被回 收，设置为False时，表示不能被回收。\n\nB：inInputShareable：设置是否深拷贝，与inPurgeable结合使用，inPurgeable为false时，该参数无意义。\n\n(4).使用decodeStream代替其他方法。\n\ndecodeResource,setImageResource,setImageBitmap等方法\n\n## 十一. LRUCache算法是怎样实现的。\n\n    内部存在一个LinkedHashMap和maxSize，把最近使用的对象用强引用存储在 LinkedHashMap中，给出来put和get方法，每次put图片时计算缓存中所有图片总大小，跟maxSize进行比较，大于maxSize，就将最久添加的图片移除；反之小于maxSize就添加进来。\n\n    之前，我们会使用内存缓存技术实现，也就是软引用或弱引用，在Android 2.3（APILevel 9）开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，这让软引用和弱引用变得不再可靠。\n\n# 算法\n\n## 一. 算法题\n\nm * n的矩阵，能形成几个正方形（2 * 2能形成1个正方形，2 * 3 2个，3 * 3 6个）\n\n计数的关键是要观察到任意一个倾斜的正方形必然唯一内接于一个非倾斜的正方形，而一个非倾斜的边长为k的非倾斜正方形，一条边上有k-1个内点，每个内点恰好确定一个内接于其中的倾斜正方形，加上非倾斜正方形本身，可知，将边长为k的非倾斜正方形数目乘以k，再按k求和即可得到所有正方形的数目。\n\n设2≤n≤m，k≤n-1，则边长为k的非倾斜有\n\n(n-k)(m-k)个，故所有正方形有\n\n∑(m-k)(n-k)k个\n\n例如m=n=4\n\n正方形有3_3_1+2_2_2+1_1_3=20个\n\n# 下面是面试过程中遇到的题目\n\n大多数题目都可以在上面找到答案.\n\n## 电话面试题\n\n### 1.ArrayList 和 Hashmap 简单说一些,区别,底层的数据结构.\n\n### 2.Handler 消息机制\n\n### 3.引起内存泄漏的场景\n\n### 4.多线程的使用场景?\n\n### 5.常用的线程池有哪几种?\n\n### 6.在公司做了什么?团队规模?为什么离职?\n\n## 面试中实际涉及到的问题\n\n**第一轮**\n\n### **1.知道哪些单例模式,写一个线程安全的单例,并分析为什么是线程安全的**?\n```java\npublic class Singleton {\n\t// Private constructor prevents instantiation from other classes\n\tprivate Singleton() { }\n\n\t/**\n\t* SingletonHolder is loaded on the first execution of Singleton.getInstance() \n\t* or the first access to SingletonHolder.INSTANCE, not before.\n\t*/\n\tprivate static class SingletonHolder { \n\t\t\tpublic static final Singleton INSTANCE = new Singleton();\n\t}\n\n\tpublic static Singleton getInstance() {\n\t\t\treturn SingletonHolder.INSTANCE;\n\t}\n}\n```\n### **2.Java中的集合有哪些?解释一下HashMap?底部的数据结构?散列表冲突的处理方法,散列表是一个什么样的数据结构?HashMap是采用什么方法处理冲突的**?\n\n![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n```\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n```\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**TreeSet两种排序方式**：两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\n```\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n```\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\n```\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n```\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\n```\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n```\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n **五. concurrentHashmap原理，原子类**。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大.\n\n### **3.解释一下什么是MVP架构,画出图解,一句话解释MVP和MVC的区别**?\n\n为了解决逻辑处理和UI视图的松散耦合，MVC和MVP的架构模式在很多App中使用比较广泛。\n\n那什么是MVP呢？它又和我们常常听到的MVC有什么关系了以及区别呢？\n\n![MVP和MVC架构图](http://frodoking.github.io/img/android/mvp_mvc_img.png)\n\nMVP 是从经典的模式MVC演变而来，它们的基本思想有相通的地方：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。作为一种新的模式，**MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会从直接Model中读取数据而不是通过 Controller**。\n\n在MVC里，View是可以直接访问Model的！从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。 在MVC模型里，更关注的Model的不变，而同时有多个对Model的不同显示，及View。所以，在MVC模型里，Model不依赖于View，但是View是依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。\n\n**MVP如何解决MVC的问题**？\n\n在MVP里，Presenter完全把Model和View进行了分离，主要的程序逻辑在Presenter里实现。而且，Presenter与具体的View是没有直接关联的，而是通过定义好的接口进行交互，从而使得在变更View时候可以保持Presenter的不变，即重用！ 不仅如此，我们还可以编写测试用的View，模拟用户的各种操作，从而实现对Presenter的测试–而不需要使用自动化的测试工具。 我们甚至可以在Model和View都没有完成时候，就可以通过编写Mock Object（即实现了Model和View的接口，但没有具体的内容的）来测试Presenter的逻辑。 在MVP里，应用程序的逻辑主要在Presenter来实现，其中的View是很薄的一层。因此就有人提出了Presenter First的设计模式，就是根据User Story来首先设计和开发Presenter。在这个过程中，View是很简单的，能够把信息显示清楚就可以了。在后面，根据需要再随便更改View，而对Presenter没有任何的影响了。 如果要实现的UI比较复杂，而且相关的显示逻辑还跟Model有关系，就可以在View和Presenter之间放置一个Adapter。由这个 Adapter来访问Model和View，避免两者之间的关联。而同时，因为Adapter实现了View的接口，从而可以保证与Presenter之间接口的不变。这样就可以保证View和Presenter之间接口的简洁，又不失去UI的灵活性。 在MVP模式里，View只应该有简单的Set/Get的方法，用户输入和设置界面显示的内容，除此就不应该有更多的内容，绝不容许直接访问Model–这就是与MVC很大的不同之处。\n\nMVP的优点：\n\n> 1、模型与视图完全分离，我们可以修改视图而不影响模型；\n> 2、可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部；\n> 3、我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁；\n> 4、如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）。\n\n**使用方法**\n\n1、建立bean\n\n```\n\npublic class UserBean {\n private String mFirstName;\n private String mLastName;\n\n public UserBean(String firstName, String lastName) {\n this. mFirstName = firstName;\n this. mLastName = lastName;\n }\n\n public String getFirstName() {\n return mFirstName;\n }\n\n public String getLastName() {\n return mLastName;\n }\n}\n```\n \n2、建立model接口（处理业务逻辑，这里指数据读写）\n\n```\n\npublic interface IUserModel {\n void setID(int id);\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n\n int getID();\n\n UserBean load(int id);// 通过id读取user信息,返回一个UserBean\n}\n```\n\n3、建立view接口（更新ui中的view状态），这里列出需要操作当前view的方法\n\n``` \n\npublic interface IUserView {\n int getID();\n\n String getFristName();\n\n String getLastName();\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n}\n\n ```\n4、建立presenter（主导器，通过iView和iModel接口操作model和view），activity可以把所有逻辑给presenter处理，这样java逻辑就从手机的activity中分离出来\n\n```\npublic class UserPresenter {\n private IUserView mUserView;\n private IUserModel mUserModel;\n\n public UserPresenter(IUserView view) {\n mUserView = view;\n mUserModel = new UserModel();\n }\n\n public void saveUser( int id, String firstName, String lastName) {\n mUserModel.setID(id);\n mUserModel.setFirstName(firstName);\n mUserModel.setLastName(lastName);\n }\n\n public void loadUser( int id) {\n UserBean user = mUserModel.load(id);\n mUserView.setFirstName(user.getFirstName()); // 通过调用IUserView的方法来更新显示\n mUserView.setLastName(user.getLastName());\n }\n}\n\n ```\n**结束语**\n\nMVP主要解决就是把逻辑层抽出来成P层，要是遇到需求逻辑上的更改就可以只需要修改P层了或者遇到逻辑上的大概我们可以直接从写一个P也可以，很多开发人员把所有的东西都写在了Activity/Fragment里面这样一来遇到频繁改需求或者逻辑越来越复杂的时候，Activity/Fragment里面就会出现过多的混杂逻辑导致出错，所以MVP模式对于APP来对控制逻辑和UI的解耦来说是一个不错的选择！\n\n在这里多说一下，其实MVP只是一个总体的解决方案。在V和P之间其实我们还可以采用事件总线的方案来解决这种高耦合的情况。本人在另外一篇文章中将会讲到[事件总线（otto的bus和eventbus的一个对比分析）](https://frodoking.github.io/2015/03/30/android-eventbus-otto-analysis/)\n\n\n### **4.Handle消息机制?在使用Handler的时候要注意哪些东西,是否会引起内存泄漏?画一下Handler机制的图解**?\n\n![](http://upload-images.jianshu.io/upload_images/1824194-a947dcc5b22f69fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面一共出现了几种类，ActivityThread，Handler，MessageQueue，Looper，msg（Message）,对这些类作简要介绍：\n\nActivityThread：程序的启动入口，为什么要介绍这个类，是因为该类就是我们说的主线程，它对Looper进行操作的。\n\nHandler：字面意思是操控者，该类有比较重要的地方，就是通过handler来发送消息（sendMessage）到MessageQueue和 操作控件的更新（handleMessage）。handler下面持有这MessageQueue和Looper的对象。\n\nMessageQueue：字面意思是消息队列，就是封装Message类。对Message进行插入和取出操作。\n\nMessage：这个类是封装消息体并被发送到MessageQueue中的，给类是通过链表实现的，其好处方便MessageQueue的插入和取出操作。还有一些字段是（int what，Object obj，int arg1，int arg2）。what是用户定义的消息和代码，以便接收者（handler）知道这个是关于什么的。obj是用来传输任意对象的，arg1和arg2是用来传递一些简单的整数类型的。\n\n下面，我们按照启动顺序来进行源码分析：\n\n![](http://upload-images.jianshu.io/upload_images/1824194-298ebb16ce4a3b70.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://raw.githubusercontent.com/bihe0832/Android-System-Related-Charts/master/framework/handler-sequence.jpg)\n\n\n\n### **5.是否做过性能优化?已经采取了哪些措施进行优化**?\n\n**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n### **6.引起内存泄漏的原因是什么?以及你是怎么解决的**?\n\n这些问题应该都是比较基础的问题,每个开发者都应该是非常熟悉并能详细叙述的.这一轮的面试官问的技术都是平时用到的.\n\n**产生的内存泄露**\n\n1).资源对象没关闭造成的内存泄漏\n\n2).构造Adapter时，没有使用缓存的convertView\n\n3).Bitmap对象不在使用时调用recycle()释放内存\n\n4).试着使用关于application的context来替代和activity相关的context\n\n5).注册没取消造成的内存泄漏\n\n6).集合中对象没清理造成的内存泄漏\n\nAndroid的虚拟机是基于寄存器的Dalvik，它的最大堆大小一般是16M，有的机器为24M。因此我们所能利用 的内存空间是有限的。如果我们的内存占用超过了一定的水平就会出现OutOfMemory的错误。\n\n内存溢出的几点原因总结:\n1、**资源释放问题**: 程序代码的问题，长期保持某些资源(如Context)的引用，造成内存泄露，资源得不到释放 \n\n2、**对象内存过大问题**:\n保存了多个耗用内存过大的对象(如Bitmap)，造成内存超出限制\n\n3、**static**:\nstatic是Java中的一个关键字，当用它来修饰成员变量时，那么该变量就属于该类，而不是该类的实例。所以 用static修饰的变量，它的生命周期是很长的，如果用它来引用一些资源耗费过多的实例(Context的情况最多）\n这时就要谨慎对待了。 \n```\npublic class ClassName {\n private static Context mContext;\n//省略 }\n```\n以上的代码是很危险的，如果将Activity赋值到mContext的话。那么即使该Activity已经onDestroy，但是由于 仍有对象保存它的引用，因此该Activity依然不会被释放。\n我们举Android文档中的一个例子。\n```\nprivate static Drawable sBackground; @Override\nprotected void onCreate(Bundle state) {\n\tsuper.onCreate(state);\n\tTextView label = new TextView(this);\n        label.setText(\"Leaks are bad\");\n\tif (sBackground == null) {\n\tsBackground = getDrawable(R.drawable.large_bitmap); }\n\tlabel.setBackgroundDrawable(sBackground);\n\tsetContentView(label); }\n```\nsBackground, 是 一个静态的变量，但是我们发现，我们并没有显式的保存Contex的引用，但是，当Drawable与\n\nView连接之后，Drawable就将View设 置为一个回调，由于View中是包含Context的引用的，所以，实际上我们依\n\n然保存了Context的引用。这个引用链如下: Drawable->TextView->Context\n\n所以，最终该Context也没有得到释放，发生了内存泄露。\n\n**针对static的解决方案**:\n\n第一、应该尽量避免static成员变量引用资源耗费过多的实例，比如Context。\n\n第二、Context尽量使用Application Context，因为Application的Context的生命周期比较长，引用它不会出现内存\n泄露的问题。\n\n第三、使用WeakReference代替强引用。比如可以使用WeakReference<Context> mContextRef; 该部分的详细内容也可以参考Android文档中Article部分。\n\n4、**线程导致内存溢出**:\n线程产生内存泄露的主要原因在于线程生命周期的不可控。我们来考虑下面一段代码。\n```\npublic class MyActivity extends Activity {\n \t@Override\n\tpublic void onCreate(Bundle savedInstanceState) {\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.main);\n\tnew MyThread().start();\n}\nprivate class MyThread extends Thread{\n\t@Override public void run() {\n\tsuper.run();\n\t//do somthing }\n\t} \n}\n```\n这段代码很平常也很简单，是我们经常使用的形式。我们思考一个问题:假设MyThread的run函数是一个很 费时的操作，当我们开启该线程后，将设备的横屏变为了竖屏，一 般情况下当屏幕转换时会重新创建Activity， 按照我们的想法，老的Activity应该会被销毁才对，然而事实上并非如此。\n\n由于我们的线程是Activity的内部类，所以MyThread中保存了Activity的一个引用，当MyThread的run函数没有 结束时，MyThread是不会被销毁的，因此它所引用的老的Activity也不会被销毁，因此就出现了内存泄露的问题。\n\n有些人喜欢用Android提供的AsyncTask，但事实上AsyncTask的问题更加严重，Thread只有在run函数不结束时才出现这种内存泄露问题，然而AsyncTask内部的实现机制是运用了ThreadPoolExcutor,该类产生的Thread对象的生命周期是不确定的，是应用程序无法控制的，因此如果AsyncTask作为Activity的内部类，就更容易出现内存\n\n**泄露的问题**。\n\n针对这种线程导致的内存泄露问题的解决方案: \n\n第一、将线程的内部类，改为静态内部类。\n\n第二、在线程内部采用弱引用保存Context引用。\n\n二、避免内存溢出的方案:\n** 1、图片过大导致内存溢出**: 模拟器的RAM比较小，由于每张图片先前是压缩的情况，放入到Bitmap的时候，大小会变大，导致超出RAM内存\n\n★android 中用bitmap 时很容易内存溢出，报如下错误:Java.lang.OutOfMemoryError : bitmap size exceeds VM budget \n解决: 方法1: 主要是加上这段:等比例缩小图片\n\n1)通过getResource()方法获取资源:\n```\n//解决加载图片 内存溢出的问题 \n//Options 只保存图片尺寸大小，不保存图片到内存\nBitmapFactory.Options options = new BitmapFactory.Options();\noptions.inSampleSize = 2;\n\n//缩放的比例，缩放是很难按准备的比例进行缩放的，其值表明缩放的倍数，SDK中建议其值是2的指数值,值越大会导致图片不清晰\nBitmapFactory.Options opts = new BitmapFactory.Options(); \nopts.inSampleSize = 2;\nBitmap bmp = null;\nbmp = BitmapFactory.decodeResource(getResources(), mImageIds[position],opts); ...\n//回收\nbmp.recycle();\n```\n2)通过Uri取图片资源\n以上代码可以优化内存溢出，但它只是改变图片大小，并不能彻底解决内存溢出。\n3)通过路径获取图片资源\n\n方法2:对图片采用软引用，及时地进行recyle()操作\n\n具体见“各种引用的简单了解”中的示例\n**2、复用listView**: 方法:对复杂的listview进行合理设计与编码:\n```\nprivate ImageView preview;\nBitmapFactory.Options options = new BitmapFactory.Options();\n//图片宽高都为原来的二分之一，即图片为原来的四分之一\noptions.inSampleSize = 2;\nBitmap bitmap = BitmapFactory.decodeStream(cr.openInputStream(uri), null, options); preview.setImageBitmap(bitmap);\nprivate ImageView preview;\nprivate String fileName= \"/sdcard/DCIM/Camera/2010-05-14 16.01.44.jpg\"; BitmapFactory.Options options = new BitmapFactory.Options();\n//图片宽高都为原来的二分之一，即图片为原来的四分之一 \noptions.inSampleSize = 2;\nBitmap b = BitmapFactory.decodeFile(fileName, options);\npreview.setImageBitmap(b); filePath.setText(fileName);\nSoftReference<Bitmap> bitmap;\nbitmap = new SoftReference<Bitmap>(pBitmap);\nif(bitmap != null){\n\tif(bitmap.get() != null && !bitmap.get().isRecycled()){ bitmap.get().recycle();\n\tbitmap= null;\n }\n}\n\nAdapter中:\n\n@Override\npublic View getView(int position, View convertView, ViewGroup parent) {\n\tViewHolder holder;\n\tif(convertView!=null && convertView instanceof LinearLayout){\n\tholder = (ViewHolder) convertView.getTag(); }else{\n\tconvertView = View.inflate(MainActivity.this, R.layout.item, null); holder = new ViewHolder();\n\tholder.tv = (TextView)\nconvertView.findViewById(R.id.tv); convertView.setTag(holder);\n}\nholder.tv.setText(\"XXXX\");\nholder.tv.setTextColor(Color.argb(180, position*4, position*5, 255-position*2)); return convertView;\n\n}\n\nclass ViewHolder{\n\tprivate TextView tv;\n }\n```\n**3、界面切换**\n方法1:单个页面，横竖屏切换N次后 OOM 1、看看页面布局当中有没有大的图片，比如背景图之类的。\n\n去除xml中相关设置，改在程序中设置背景图(放在onCreate()方法中):\n\n在Activity destory时注意，bg.setCallback(null); 防止Activity得不到及时的释放 2\\. 跟上面方法相似，直接把xml配置文件加载成view 再放到一个容器里 然后直接调用 this.setContentView(View view);方法，避免xml的重复加载\n\n方法2: 在页面切换时尽可能少地重复使用一些代码 比如:重复调用数据库，反复使用某些对象等等......\n\n**4、内存分配**: 方法1:Android堆内存也可自己定义大小和优化Dalvik虚拟机的堆内存分配\n\n注意若使用这种方法:project build target 只能选择 <= 2.2 版本，否则编译将通不过。 所以不建议用这种方式\n\n**常见的内存使用不当的情况**\n\n**1、查询数据库没有关闭游标**\n\n程序中经常会进行查询数据库的操作，但是经常会有使用完毕Cursor后没有关闭的情况。如果我们的查询结果集比较小，对内存的消耗不容易被发现，只有在常时间大量操作的情况下才会复现内存问题，这样就会给以后的测试和问题排查带来困难和风险。\n\nDrawable bg = getResources().getDrawable(R.drawable.bg); XXX.setBackgroundDrawable(rlAdDetailone_bg);\nprivate final static int CWJ_HEAP_SIZE= 6*1024*1024;\nprivate final static float TARGET_HEAP_UTILIZATION = 0.75f; VMRuntime.getRuntime().setMinimumHeapSize(CWJ_HEAP_SIZE); VMRuntime.getRuntime().setTargetHeapUtilization(TARGET_HEAP_UTILIZATION);\nCursor cursor = null; try {\ncursor = getContentResolver().query(uri ...); if (cursor != null && cursor.moveToNext()) { ... ...\n}\n} finally {\nif (cursor != null) {\ntry { cursor.close();\n} catch (Exception e) {\n//ignore this }\n} }\n\n**2、构造Adapter时，没有使用缓存的 convertView**\n\n以构造ListView的BaseAdapter为例，在BaseAdapter中提供了方法: public View getView(int position, View convertView, ViewGroup parent)\n\n来向ListView提供每一个item所需要的view对象。初始时ListView会从BaseAdapter中根据当前的屏幕布局实例 化一定数量的 view对象，同时ListView会将这些view对象缓存起来。当向上滚动ListView时，原先位于最上面的 list item的view对象会被回收，然后被用来构造新出现的最下面的list item。这个构造过程就是由getView()方法完成的，getView()的第二个形参 View convertView就是被缓存起来的list item的view对象(初始化时缓存中没有view对 象则convertView是null)。\n由此可以看出，如果我们不去使用convertView，而是每次都在getView()中重新实例化一个View对象的话，即浪费资源也浪费时间，也会使得内存占用越来越大。ListView回收list item的view对象的过程可以查看:\n```\npublic View getView(int position, View convertView, ViewGroup parent) { View view = null;\nif (convertView != null) {\nview = convertView;\n\npopulate(view, getItem(position)); ...\n} else {\nview = new Xxx(...);\n\n...\n}\nreturn view;\n\n}\n```\n**3、Bitmap对象不在使用时调用recycle()释放内存**\n有时我们会手工的操作Bitmap对象，如果一个Bitmap对象比较占内存，当它不在被使用的时候，可以调用\nBitmap.recycle()方法回收此对象的像素所占用的内存，但这不是必须的，视情况而定。\n\n**4、释放对象的引用**\n当一个生命周期较短的对象A，被一个生命周期较长的对象B保有其引用的情况下，在A的生命周期结束时，\n\n要在B中清除掉对A的引用。 示例A:\n```\npublic class DemoActivity extends Activity { ... ...\nprivate Handler mHandler = ... private Object obj;\npublic void operation() {\nobj = initObj();\n...\n[Mark]\nmHandler.post(new Runnable() {\npublic void run() { useObj(obj);\n}\n});\n} }\n```\n我们有一个成员变量 obj，在operation()中我们希望能够将处理obj实例的操作post到某个线程的MessageQueue 中。在以上的代码中，即便是 mHandler所在的线程使用完了obj所引用的对象，但这个对象仍然不会被垃圾回收掉，因为DemoActivity.obj还保有这个对象的引用。 所以如果在DemoActivity中不再使用这个对象了，可以在 [Mark]的位置释放对象的引用，而代码可以修改为:\n```\n... ...\npublic void operation() {\nobj = initObj();\n...\nfinal Object o = obj;\nobj = null;\nmHandler.post(new Runnable() { public void run() {\nuseObj(o); }\n}\n}\n... ...\n```\n示例B: 假设我们希望在锁屏界面(LockScreen)中，监听系统中的电话服务以获取一些信息(如信号强度等)，则可以在\nLockScreen中定义一个PhoneStateListener的对象，同时将它注册到TelephonyManager服务中。对于LockScreen对象，当需要显示锁屏界 面的时候就会创建一个LockScreen对象，而当锁屏界面消失的时候LockScreen对象就会被释放掉。\n但是如果在释放LockScreen对象的时候忘记取消我们之前注册的PhoneStateListener对象，则会导致LockScreen无 法被垃 圾回收。如果不断的使锁屏界面显示和消失，则最终会由于大量的LockScreen对象没有办法被回收而引起OutOfMemory,使得system_process进程挂掉。\n\n**5、其他**\nAndroid应用程序中最典型的需要注意释放资源的情况是在Activity的生命周期中，在onPause()、onStop()、\nonDestroy()方法中需要适当的释放资源的情况。由于此情况很基础，在此不详细说明，具体可以查看官方文档对Activity生命周期的介绍，以明确何时应该释放哪些资源。\n\n## **第二轮**\n\n### 1.关于并发理解多少?说几个并发的集合?\n[Java 并发编程](http://www.cnblogs.com/paddix/p/5374810.html)\n\n**Java 并发编程：核心理论**：\n共享性，互斥性，原子性，可见性，有序性\n\n**什么是并发：**\n同时在做几件事就是并发\n\n**并发的好处**\n**1.提高资源利用率**\n当一个任务并没有完全占用系统资源时，可以利用并发来提高资源利用率，从而能更快的完成任务\n**2.在程序任务上更加精简**\n任务明确分配好，又能同时进行，既提高了效率，逻辑又清晰\n**3.更好的响应程序**\n例如图片的上传，页面正常展示没有卡顿，又能正常上传图片，既保证了页面能正常响应，又保证图片能正常上传\n\n**并发的风险**\n**1.并发的代价**\n需要占用更多资源\n设计好一个并发程序并不容易\n并发的资源交互问题复杂\n\n**2.并发的隐患**\n滥用资源导致系统不稳定\n结果与预期不符\n出现的BUG难以排查\n\n**Java并发集合框架**\n\n我们着重说明一下Java并发的集合框架，就是java.util.concurrent包下的集合类\n\n* 非阻塞队列\n\n> 非阻塞队列就是在队列中没有数据时，对此队列的操作将出现异常或者返回null，无需等待/阻塞的特色。\n\n在JDK的并发包中，常见的非阻塞队列有以下几个： \n- ConcurrentHashMap \n- ConcurrentSkipListMap \n- ConcurrentSkipListSet \n- ConcurrentLinkedQueue \n- ConcurrentLinkedDeque \n- CopyOnWriteArrayList \n- CopyOnWriteArraySet\n\n**ConcurrentHashMap类**\n\n> 这个类是支持并发操作的Map对象，与之对应的不支持并发操作的Map对象是HashMap，Hashtable对象也是Map的一个子类，也是支持并发操作，但是其不支持Iterator并发的删除操作，如果程序中要对map集合做并发以及Iterator并发编辑/删除操作，推荐使用ConcurrentHashMap集合类。\n\nHashMap集合不支持并发示例：\n\n```\npackage com.collections.hashmapdemo;\n\nimport java.util.HashMap;\n\npublic class HashMapDemo {\n    public static HashMap hashMap = new HashMap();\n\n    public static void main(String[] args) {\n        Thread threadA = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for (int i = 0; i < 50000; i++) {\n                    hashMap.put(\"ThreadA\" + (i + 1), \"ThreadA\" + i + 1);\n                    System.out.println(\"ThreadA\" + (i + 1));\n                }\n            }\n        });\n\n        Thread threadB = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for (int i = 0; i < 50000; i++) {\n                    hashMap.put(\"ThreadB\" + (i + 1), \"ThreadB\" + i + 1);\n                    System.out.println(\"ThreadB\" + (i + 1));\n                }\n            }\n        });\n\n        threadA.start();\n        threadB.start();\n    }\n}\n\n```\n\n执行结果 \n有时候程序可以正常执行完，有时候则程序会造成假死的状态，如下图：\n\n![这里写图片描述](http://img.blog.csdn.net/20171018201847398?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uZ2d1b19jaGVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n所以说HashMap不支持多线程并发的操作。\n\nHashtable集合支持并发 \n示例： \n只需要把HashMap示例中public static HashMap hashMap = new HashMap();修改成public static Hashtable hashtable = new Hashtable();即可。 \n我们就说说Hashtable不支持Iterator的编辑/删除操作，示例如下\n\n```\npackage com.collections.hashmapdemo;\n\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.concurrent.TimeUnit;\n\npublic class HashtableNotModifyDemo {\n    public static Hashtable hashtable = new Hashtable();\n    static {\n        for (int i = 0; i < 5; i++) {\n            hashtable.put(\"String\" + (i + 1), i + 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        Thread threadA = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Iterator iterator = hashtable.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        System.out.println(iterator.next());\n                        TimeUnit.SECONDS.sleep(2);\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        Thread threadB = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                hashtable.put(\"z\", \"zValue\");\n            }\n        });\n\n        threadA.start();\n        threadB.start();\n    }\n}\n\n```\n\n执行结果\n\n> String5 \n> java.util.ConcurrentModificationException \n> at java.util.HashtableEnumerator.next(Hashtable.java:1167)atcom.collections.hashmapdemo.HashtableNotModifyDemo1.run(HashtableNotModifyDemo.java:22) \n> at java.lang.Thread.run(Thread.java:745)\n\n说明多线程调用该类的iterator()方法返回Iterator对象后，在调用put方法会报ConcurrentModificationException异常，也就是不支持Iterator并发的编辑/删除操作。如果想实现此功能推荐使用并发集合框架提供的ConcurrentHashMap类。\n\nConcurrentHashMap集合支持并发示例：\n\n> 需要把HashMap示例中public static HashMap hashMap = new HashMap();修改成public \n> static ConcurrentHashMap concurretHashMap = new ConcurrentHashMap();即可。\n\nConcurrentHashMap集合支持Iterator并发操作示例：\n\n> 把类HashtableNotModifyDemo中的public static Hashtable hashtable = new Hashtable();修改为public static ConcurrentHashMap concurretHashMap = new ConcurrentHashMap();测试即可。\n\n**ConcurrentSkipListMap类**\n\n这个并发集合类支持排序功能。一般此集合中存放的对象要实现Comparable接口，方便此集合类排序，如果不实现此接口，则会按照默认排序。\n\n**ConcurrentSkipListSet类**\n\n这个并发集合类不仅支持排序功能，还不允许重复的元素。一般此集合中存放的对象要实现Comparable接口，并且重写equals和hashCode方法。\n\n**ConcurrentLinkedQueue类**\n\n这个并发集合类提供了并发环境的队列操作。\n\n*   poll()当没有获取到数据时返回null，如果有数据则一处表头并将表头数据返回。\n*   element()当没有获取到数据时抛NoSuchElementException异常，如果有数据则返回表头数据。\n*   peek()当没有获取导数据是返回null，获取到数据时则不移除表头，并将表头数据返回。\n\n**ConcurrentLinkedDeque类**\n\nConcurrentLinkedQueue支持对队列头操作，而ConcurrentLinkedDeque也支持队列头和列尾双向操作。\n\n**CopyOnWriteArrayList类**\n\nArrayList是线程不安全的，如果想在并发中实现线程安全，则可以使用CopyOnWriteArrayList类，使用方法和ArrayList无异。\n\n**CopyOnWriteArraySet类**\n\nArraySet是线程不安全的，如果想在并发中实现线程安全，则可以使用CopyOnWriteArraySet类，使用方法和ArraySet无异。\n\n### 2.Handler 消息机制图解?\n\n![](http://upload-images.jianshu.io/upload_images/1824194-a947dcc5b22f69fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面一共出现了几种类，ActivityThread，Handler，MessageQueue，Looper，msg（Message）,对这些类作简要介绍：\n\nActivityThread：程序的启动入口，为什么要介绍这个类，是因为该类就是我们说的主线程，它对Looper进行操作的。\n\nHandler：字面意思是操控者，该类有比较重要的地方，就是通过handler来发送消息（sendMessage）到MessageQueue和 操作控件的更新（handleMessage）。handler下面持有这MessageQueue和Looper的对象。\n\nMessageQueue：字面意思是消息队列，就是封装Message类。对Message进行插入和取出操作。\n\nMessage：这个类是封装消息体并被发送到MessageQueue中的，给类是通过链表实现的，其好处方便MessageQueue的插入和取出操作。还有一些字段是（int what，Object obj，int arg1，int arg2）。what是用户定义的消息和代码，以便接收者（handler）知道这个是关于什么的。obj是用来传输任意对象的，arg1和arg2是用来传递一些简单的整数类型的。\n\n下面，我们按照启动顺序来进行源码分析：\n\n![](http://upload-images.jianshu.io/upload_images/1824194-298ebb16ce4a3b70.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://raw.githubusercontent.com/bihe0832/Android-System-Related-Charts/master/framework/handler-sequence.jpg)\n\n### 3.在项目中做了哪些东西?\n\n负责用户版App社区模块的版本的功能迭代，几个组件的开发与管理。\n\n### 4.画图说明View 事件传递机制?并举一个例子阐述\n\n1).Android事件分发机制的本质是要解决：点击事件由哪个对象发出，经过哪些对象，最终达到哪个对象并最终得到处理。这里的对象是指Activity、ViewGroup、View.\n\n2).Android中事件分发顺序：Activity（Window） -> ViewGroup -> View.\n\n3).事件分发过程由dispatchTouchEvent() 、onInterceptTouchEvent()和onTouchEvent()三个方法协助完成\n\n**设置Button按钮来响应点击事件事件传递情况：（如下图）**\n\n布局如下:\n\n![](http://upload-images.jianshu.io/upload_images/4642697-01f23a099103eb82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/210)\n\n最外层：Activiy A，包含两个子View：ViewGroup B、View C\n\n中间层：ViewGroup B，包含一个子View：View C\n\n最内层：View C\n\n假设用户首先触摸到屏幕上View C上的某个点（如图中黄色区域），那么Action_DOWN事件就在该点产生，然后用户移动手指并最后离开屏幕。\n\n**按钮点击事件:**\n\nDOWN事件被传递给C的onTouchEvent方法，该方法返回true，表示处理这个事件;\n\n因为C正在处理这个事件，那么DOWN事件将不再往上传递给B和A的onTouchEvent()；\n\n该事件列的其他事件（Move、Up）也将传递给C的onTouchEvent();\n\n![](http://upload-images.jianshu.io/upload_images/4642697-ca12c00c79780b57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n(记住这个图的传递顺序,面试的时候能够画出来,就很详细了)\n\n### 5.类加载机制\n\n**一. 类的加载过程**\n\nPerson person = new Person();为例进行说明。\n\n1).因为new用到了Person.class，所以会先找到Person.class文件，并加载到内存中;\n\n2).执行该类中的static代码块，如果有的话，给Person.class类进行初始化;\n\n3).在堆内存中开辟空间分配内存地址;\n\n4).在堆内存中建立对象的特有属性，并进行默认初始化;\n\n5).对属性进行显示初始化;\n\n6).对对象进行构造代码块初始化;\n\n7).对对象进行与之对应的构造函数进行初始化;\n\n8).将内存地址付给栈内存中的p变量\n\n**二.类的加载器**\n\n    大家都知道，当我们写好一个Java程序之后，不是管是CS还是BS应用，都是由若干个.class文件组织而成的一个完整的Java应用程序，当程序在运行时，即会调用该程序的一个入口函数来调用系统的相关功能，而这些功能都被封装在不同的class文件当中，所以经常要从这个class文件中要调用另外一个class文件中的方法，如果另外一个文件不存在的，则会引发系统异常。而程序在启动的时候，并不会一次性加载程序所要用的所有class文件，而是根据程序的需要，通过Java的类加载机制（ClassLoader）来动态加载某个class文件到内存当中的，从而只有class文件被载入到了内存之后，才能被其它class所引用。所以ClassLoader就是用来动态加载class文件到内存当中用的。\n\n**双亲机制**\n\n**_1、原理介绍_**\n\n    ClassLoader使用的是双亲委托模型来搜索类的，每个ClassLoader实例都有一个父类加载器的引用（不是继承的关系，是一个包含的关系），虚拟机内置的类加载器（Bootstrap ClassLoader）本身没有父类加载器，但可以用作其它ClassLoader实例的的父类加载器。当一个ClassLoader实例需要加载某个类时，它会试图亲自搜索某个类之前，先把这个任务委托给它的父类加载器，这个过程是由上至下依次检查的，首先由最顶层的类加载器Bootstrap ClassLoader试图加载，如果没加载到，则把任务转交给Extension ClassLoader试图加载，如果也没加载到，则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常。否则将这个找到的类生成一个类的定义，并将它加载到内存当中，最后返回这个类在内存中的Class实例对象。\n\n**_2、为什么要使用双亲委托这种模型呢？_**\n\n    因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。\n\n**_3、但是JVM在搜索类的时候，又是如何判定两个class是相同的呢？_**\n\n    JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。比如网络上的一个Java类org.classloader.simple.NetClassLoaderSimple，javac编译之后生成字节码文件NetClassLoaderSimple.class，ClassLoaderA和ClassLoaderB这两个类加载器并读取了NetClassLoaderSimple.class文件，并分别定义出了java.lang.Class实例来表示这个类，对于JVM来说，它们是两个不同的实例对象，但它们确实是同一份字节码文件，如果试图将这个Class实例生成具体的对象进行转换时，就会抛运行时异常java.lang.ClassCaseException，提示这是两个不同的类型。\n\n**Android类加载器**\n\n    对于Android而言，最终的apk文件包含的是dex类型的文件，dex文件是将class文件重新打包，打包的规则又不是简单地压缩，而是完全对class文件内部的各种函数表，变量表进行优化，产生一个新的文件，即dex文件。因此加载这种特殊的Class文件就需要特殊的类加载器DexClassLoader。\n\n### 6.如何换肤,换肤插件中存在的问题?\n**1.换肤方案分析**\n\n1.  res下放多种皮肤的资源文件\n\n2.  加载插件apk使用其中的皮肤资源\n\n* 方案一： \n优点：容易实现。 \n缺点：res下放多种皮肤的资源文件，无疑会加大apk文件大小，而且资源文件是写死的，不利于后期拓展，若有其他皮肤需求只能通过版本迭代。 \n* 方案二： \n优点：不会加大apk包，更容易扩展，有新的皮肤只需下载新的插件包即可，无需更新。（相对于方案一） \n缺点：相对于方案一实现较困难，若有更多业务处理需要插件，如使用插件中的四大组件及处理它们的生命周期则是比较麻烦的，需用到动态代理。\n例如:[Android插件化系列第（二）篇---动态加载技术之apk换肤](http://www.jianshu.com/p/d1c6e67f7889)\n\n**2.Android换肤技术总结**\n\n背景\n\n纵观现在各种Android app，其换肤需求可以归为 \n\n- 白天/黑夜主题切换（或者别的名字，通常2套），如同花顺/自选股/天天动听等，UI表现为一个switcher。 \n- 多种主题切换，通常为会员特权，如QQ/QQ空间。\n\n对于第一种来说，目测应该是直接通过本地theme来做的，即所有图片/颜色的资源都在apk里面打包了。\n\n而对于第二种，则相对复杂一些，由于作为一种线上服务，可能上架新皮肤，且那么多皮肤包放在apk里面实在太占体积了，所以皮肤资源会在选择后再进行下载，也就不能直接使用android的那套theme。\n\n**技术方案**\n\n内部资源加载方案和动态下载资源下载两种。\n\n动态下载可以称为一种黑科技了，因为往往需要hack系统的一些方法，所以在部分机型和新的API上有时候可能有坑，但相对好处则很多 \n\n- 图片/色值等资源由于是后台下发的，可以随时更新 \n- APK体积减小 \n- 对应用开发者来说，换肤几乎是透明的，不需要关心有几套皮肤 \n- 可以作为增值服务卖钱！！\n\n**内部资源加载方案**\n\n内部资源加载都是通过android本身那套theme来做的，相对业务开发来说工作量更大（需要定义attr和theme），不同方案类似地都是在BaseActivity里面做setTheme，差别主要在解决以下2个问题的策略： \n\n- setTheme后如何实时刷新，而不用重新创建页面（尤其是listview里面的item）。 \n- 哪些view需要刷新，刷新什么（背景？字体颜色？ImageView的src？）。\n\n**自定义view**\n\n[MultipleTheme](http://xiazai.jb51.net/201703/yuanma/MultipleTheme-master(jb51.net).rar) \n\n做自定义view是为了在setTheme后会去立即刷新，更新页面UI对应资源（如TextView替换背景图和文字颜色），在上述项目中，则是通过对rootView进行遍历，对所有实现了ColorUiInterface的view/viewgroup进行setTheme操作来实现即使刷新的。\n\n显然这样太重了，需要把应用内的各种view/viewgroup进行替换。\n\n手动绑定view和要改变的资源类型\n\n[Colorful](http://xiazai.jb51.net/201703/yuanma/Colorful-master(jb51.net).rar)\n\n这个…我们看看用法吧….\n```\nViewGroupSetter listViewSetter = new ViewGroupSetter(mNewsListView);\n// 绑定ListView的Item View中的news_title视图，在换肤时修改它的text_color属性\nlistViewSetter.childViewTextColor(R.id.news_title, R.attr.text_color);\n\n// 构建Colorful对象来绑定View与属性的对象关系\nmColorful = new Colorful.Builder(this)\n  .backgroundDrawable(R.id.root_view, R.attr.root_view_bg)\n  // 设置view的背景图片\n  .backgroundColor(R.id.change_btn, R.attr.btn_bg)\n  // 设置背景色\n  .textColor(R.id.textview, R.attr.text_color)\n  .setter(listViewSetter) // 手动设置setter\n  .create(); // 设置文本颜色\n```\n我就是想换个皮肤，还得在activity里自己去设置要改变哪个view的什么属性，对应哪个attribute？是不是成本太高了？而且activity的逻辑也很容易被弄得乱七八糟。\n\n**动态资源加载方案**\n\nresource替换\n\n覆盖application的getResource方法，实现自己的resource，优先加载本地皮肤包文件夹下的资源包，对于性能问题，可以通过attribute或者资源名称规范(如需要换肤则用skin_开头)来优化，从而不对不换肤的资源进行额外检查开销。\n\n不过由于Android5.1源码里，drawable初始化的时候调用的是loadDrawable，而不是resource.getDrawable，而loadDrawable是私有的方法，无法覆盖，所以虽然很方便，却无法继续使用（不用关心任何皮肤相关的事情，android:color指定颜色就行了，神奇滴会自动换肤）。\n\n自定义LayoutInflator.Factory\n\n开源项目可参照Android-Skin-Loader。\n\n即setFactory使用自定义的LayoutInflator.Factory，可以重点关注该项目中的SkinInflaterFactory和SkinManager（实现了自己的getColor、getDrawable、getBitmap、getColorStateList等等方法）。\n\n需要自定义一个tag比如app:customStyle，重写所有的style，转成set方法，这样带来的牺牲就是增加了换肤的成本，要写很多style，自己去set，并不完全透明了。\n\nHack Resources internally\n\n黑科技方法，直接对Resources进行hack，Resources.Java:\n```\n// Information about preloaded resources. Note that they are not\n// protected by a lock, because while preloading in zygote we are all\n// single-threaded, and after that these are immutable.\nprivate static final LongSparseArray<Drawable.ConstantState>[] sPreloadedDrawables;\nprivate static final LongSparseArray<Drawable.ConstantState> sPreloadedColorDrawables\n  = new LongSparseArray<Drawable.ConstantState>();\nprivate static final LongSparseArray<ColorStateList> sPreloadedColorStateLists\n  = new LongSparseArray<ColorStateList>();\n```\n直接对Resources里面的这三个LongSparseArray进行替换，由于apk运行时的资源都是从这三个数组里面加载的，所以只要采用interceptor模式：\n\npublic class DrawablePreloadInterceptor extends LongSparseArray<Drawable.ConstantState>\n\n自己实现一个LongSparseArray，并通过反射set回去，就能实现换肤，具体getDrawable等方法里是怎么取preload数组的，可以自己看Resources的源码。\n\n等等，就这么简单？，NONO，少年你太天真了，怎么去加载xml，9patch的padding怎么更新，怎么打包/加载自定义的皮肤包，drawable的状态怎么刷新，等等。这些都是你需要考虑的，在存在插件的app中，还需要考虑是否会互相覆盖resource id的问题，进而需要修改apt，把resource id按位放在2个range。\n\n手Q和独立版QQ空间使用的是这种方案，效果挺好。\n\n**总结**\n\n尽管动态加载方案比较黑科技，可能因为系统API的更改而出问题，但相对来说\n\n**好处有** \n\n- 灵活性高，后台可以随时更新皮肤包 \n- 相对透明，开发者几乎不用关心有几套皮肤，不用去定义各种theme和attr，甚至连皮肤包的打包都可以交给设计或者专门的同学 \n- apk体积节省 \n\n**存在的问题**\n\n没有完善的开源项目，如果我们采用动态加载的第二种方案，需要的项目功能包括： \n\n- 自定义皮肤包结构 \n- 换肤引擎，加载皮肤包资源并load，实时刷新。 \n- 皮肤包打包工具 \n- 对各种rom的兼容\n\n如果有这么一个项目的话，就一劳永逸了，有兴趣的同学可以联系一下，大家一起搞一搞。\n\n内部加载方案大同小异，主要解决的都是即时刷新的问题，然而从目前的一些开源项目来看，仍然没有特别简便的方案。让我选的话，我宁愿让界面重新创建，比如重启activity，或者remove所有view再添加回来（或者你可能想遍历rootview，然后一个个检查是否需要换肤然后set…）。\n\n### 7.hotfix是否用过,原理是否了解?\n\n[Android热修复技术选型——三大流派解析](https://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&mid=2651112709&idx=1&sn=09f82f5e2e8e287904391dbc4b1f83f6&scene=1&srcid=0909KyPp8gx8aLwII2MEYUQ3)\n\n6.说说项目中用到了哪些设计模式,说了一下策略模式和观察者模式?\n\n7.会JS么?有Hybid开发经验么?\n\n8.说一下快排的思想?手写代码\n\n9.堆有哪些数据结构?\n\n对于这轮米那是明显感觉到压力,知识的纵向了解也比较深,应该是个leader.\n\n**第三轮**\n\n1.介绍一下在项目中的角色?\n\n2.遇到困难是怎么解决的?\n\n3.如何与人相处,与别人意见相左的时候是怎么解决的,并举生活中的一个例子.\n\n4.有没有压力特别大的时候?\n\n这个应该是项目经理了,问的问题偏向于生活性格方面.\n\n以上面试中问到的题目基本上都可以在上面找到答案,所以做准备是很重要的,但技术是一点点积累的,就算你全会背了,面试过了,真正等到工作的时候还是会捉襟见肘的,所以踏实点吧骚年.\n\n",[[1512460123263,["gengmei_pxf@gengmei123.local",[[-1,62899,"6"]],[62900,62900],[62899,62899]]],[1512460123492,["gengmei_pxf@gengmei123.local",[[1,62899,"8"]],[62899,62899],[62900,62900]]],[1512460126317,["gengmei_pxf@gengmei123.local",[[1,62899,"### "]],[62899,62899],[62903,62903]]],[1512469047643,["gengmei_pxf@gengmei123.local",[[1,62937,"\n"]],[62935,62935],[62936,62936]]],[1512469048274,["gengmei_pxf@gengmei123.local",[[1,62938,"\n"]],[62936,62936],[62937,62937]]],[1512469050230,["gengmei_pxf@gengmei123.local",[[1,62937,"【】"]],[62937,62937],[62939,62939]]],[1512469050995,["gengmei_pxf@gengmei123.local",[[-1,62937,"【】"]],[62939,62939],[62937,62937]]],[1512469053516,["gengmei_pxf@gengmei123.local",[[1,62937,"[]()"]],[62937,62937],[62941,62941]]],[1512469054765,["gengmei_pxf@gengmei123.local",[[1,62940,"https://github.com/simple-android-framework-exchange/android_design_patterns_analysis#schedule"]],[62940,62940],[63034,63034]]],[1512469064837,["gengmei_pxf@gengmei123.local",[[1,62938,"Android源码设计模式分析项目"]],[62938,62938],[62955,62955]]],[1512469074045,["gengmei_pxf@gengmei123.local",[[1,63054,"### "]],[63054,63054],[63058,63058]]],[1512469075481,["gengmei_pxf@gengmei123.local",[[-1,63058,"7"]],[63059,63059],[63058,63058]]],[1512469075707,["gengmei_pxf@gengmei123.local",[[1,63058,"9"]],[63058,63058],[63059,63059]]],[1512469080593,["gengmei_pxf@gengmei123.local",[[-1,63079,"8"]],[63080,63080],[63079,63079]]],[1512469081045,["gengmei_pxf@gengmei123.local",[[1,63079,"10"]],[63079,63079],[63081,63081]]],[1512469083974,["gengmei_pxf@gengmei123.local",[[1,63079,"### "]],[63079,63079],[63083,63083]]],[1512469085609,["gengmei_pxf@gengmei123.local",[[-1,63101,"9"]],[63102,63102],[63101,63101]]],[1512469086901,["gengmei_pxf@gengmei123.local",[[1,63101,"11"]],[63101,63101],[63103,63103]]],[1512469089693,["gengmei_pxf@gengmei123.local",[[1,63101,"### "]],[63101,63101],[63105,63105]]]]],["fbd16e13-6133-44bc-941c-bbfd47fe841c",1512545673732,"# JAVA\n\n## 一. 类的加载过程，Person person = new Person();为例进行说明。\n\n1).因为new用到了Person.class，所以会先找到Person.class文件，并加载到内存中;\n\n2).执行该类中的static代码块，如果有的话，给Person.class类进行初始化;\n\n3).在堆内存中开辟空间分配内存地址;\n\n4).在堆内存中建立对象的特有属性，并进行默认初始化;\n\n5).对属性进行显示初始化;\n\n6).对对象进行构造代码块初始化;\n\n7).对对象进行与之对应的构造函数进行初始化;\n\n8).将内存地址付给栈内存中的p变量\n\n## 二. JVM相关知识，GC机制。\n\n**JVM基本构成**\n\n![](http://upload-images.jianshu.io/upload_images/4642697-bbcb5924cdaf30f8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/473)\n\n从上图可知，JVM主要包括四个部分：\n\n    1.类加载器（ClassLoader）:在JVM启动时或者在类运行时将需要的class加载到JVM中。（下图表示了从java源文件到JVM的整个过程，可配合理解。 \n\n![](http://upload-images.jianshu.io/upload_images/4642697-1cf5f815751beeab.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400)\n\n    2.执行引擎：负责执行class文件中包含的字节码指令；\n\n    3.内存区（也叫运行时数据区）：是在JVM运行的时候操作所分配的内存区。运行时内存区主要可以划分为5个区域，如图：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-160b9ba3bfeaf8f5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/376)\n\n*   方法区(Method Area)：用于存储类结构信息的地方，包括常量池、静态变量、构造函数等。虽然JVM规范把方法区描述为堆的一个逻辑部分， 但它却有个别名non-heap（非堆），所以大家不要搞混淆了。方法区还包含一个运行时常量池。\n\n*   java堆(Heap)：存储java实例或者对象的地方。这块是GC的主要区域。从存储的内容我们可以很容易知道，方法区和堆是被所有java线程共享的。\n\n*   java栈(Stack)：java栈总是和线程关联在一起，每当创建一个线程时，JVM就会为这个线程创建一个对应的java栈。在这个java栈中又会包含多个栈帧，每运行一个方法就创建一个栈帧，用于存储局部变量表、操作栈、方法返回值等。每一个方法从调用直至执行完成的过程，就对应一个栈帧在java栈中入栈到出栈的过程。所以java栈是现成私有的。\n\n*   程序计数器(PC Register)：用于保存当前线程执行的内存地址。由于JVM程序是多线程执行的（线程轮流切换），所以为了保证线程切换回来后，还能恢复到原先状态，就需要一个独立的计数器，记录之前中断的地方，可见程序计数器也是线程私有的。\n\n*   本地方法栈(Native Method Stack)：和java栈的作用差不多，只不过是为JVM使用到的native方法服务的。\n\n        4.本地方法接口：主要是调用C或C++实现的本地方法及返回结果。\n\n**GC机制**\n\n    垃圾收集器一般必须完成两件事：检测出垃圾；回收垃圾。怎么检测出垃圾？一般有以下几种方法：\n\n**_引用计数法：_**\n\n    给一个对象添加引用计数器，每当有个地方引用它，计数器就加1；引用失效就减1。好了，问题来了，如果我有两个对象A和B，互相引用，除此之外，没有其他任何对象引用它们，实际上这两个对象已经无法访问，即是我们说的垃圾对象。但是互相引用，计数不为0，导致无法回收，所以还有另一种方法：\n\n**_可达性分析算法：_**\n\n    以根集对象为起始点进行搜索，如果有对象不可达的话，即是垃圾对象。这里的根集一般包括java栈中引用的对象、方法区常良池中引用的对象、本地方法中引用的对象等。\n\n    总之，JVM在做垃圾回收的时候，会检查堆中的所有对象是否会被这些根集对象引用，不能够被引用的对象就会被垃圾收集器回收。一般回收算法也有如下几种：\n\n1).标记-清除（Mark-sweep）\n\n2).复制（Copying\n\n3).标记-整理（Mark-Compact）\n\n4).分代收集算法\n\n具体的解释可以参考本篇文章[还不点我?](https://link.jianshu.com?t=http://blog.csdn.net/tonytfjing/article/details/44278233)\n\n## 三. 类的加载器，双亲机制，Android的类加载器。\n\n**类的加载器**\n\n    大家都知道，当我们写好一个Java程序之后，不是管是CS还是BS应用，都是由若干个.class文件组织而成的一个完整的Java应用程序，当程序在运行时，即会调用该程序的一个入口函数来调用系统的相关功能，而这些功能都被封装在不同的class文件当中，所以经常要从这个class文件中要调用另外一个class文件中的方法，如果另外一个文件不存在的，则会引发系统异常。而程序在启动的时候，并不会一次性加载程序所要用的所有class文件，而是根据程序的需要，通过Java的类加载机制（ClassLoader）来动态加载某个class文件到内存当中的，从而只有class文件被载入到了内存之后，才能被其它class所引用。所以ClassLoader就是用来动态加载class文件到内存当中用的。\n\n**双亲机制**\n\n**_1、原理介绍_**\n\n    ClassLoader使用的是双亲委托模型来搜索类的，每个ClassLoader实例都有一个父类加载器的引用（不是继承的关系，是一个包含的关系），虚拟机内置的类加载器（Bootstrap ClassLoader）本身没有父类加载器，但可以用作其它ClassLoader实例的的父类加载器。当一个ClassLoader实例需要加载某个类时，它会试图亲自搜索某个类之前，先把这个任务委托给它的父类加载器，这个过程是由上至下依次检查的，首先由最顶层的类加载器Bootstrap ClassLoader试图加载，如果没加载到，则把任务转交给Extension ClassLoader试图加载，如果也没加载到，则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常。否则将这个找到的类生成一个类的定义，并将它加载到内存当中，最后返回这个类在内存中的Class实例对象。\n\n**_2、为什么要使用双亲委托这种模型呢？_**\n\n    因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。\n\n**_3、但是JVM在搜索类的时候，又是如何判定两个class是相同的呢？_**\n\n    JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。比如网络上的一个Java类org.classloader.simple.NetClassLoaderSimple，javac编译之后生成字节码文件NetClassLoaderSimple.class，ClassLoaderA和ClassLoaderB这两个类加载器并读取了NetClassLoaderSimple.class文件，并分别定义出了java.lang.Class实例来表示这个类，对于JVM来说，它们是两个不同的实例对象，但它们确实是同一份字节码文件，如果试图将这个Class实例生成具体的对象进行转换时，就会抛运行时异常java.lang.ClassCaseException，提示这是两个不同的类型。\n\n**Android类加载器**\n\n    对于Android而言，最终的apk文件包含的是dex类型的文件，dex文件是将class文件重新打包，打包的规则又不是简单地压缩，而是完全对class文件内部的各种函数表，变量表进行优化，产生一个新的文件，即dex文件。因此加载这种特殊的Class文件就需要特殊的类加载器DexClassLoader。\n\n## 四. 集合框架，list，map，set都有哪些具体的实现类，区别都是什么?\n\n![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：了对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**===****》****TreeSet****两种排序方式：**两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n## 五. concurrentHashmap原理，原子类。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大.\n\n## 六. volatile原理\n\n    在《Java并发编程：核心理论》一文中，我们已经提到过可见性、有序性及原子性问题，通常情况下我们可以通过Synchronized关键字来解决这些个问题，不过如果对Synchronized原理有了解的话，应该知道Synchronized是一个比较重量级的操作，对系统的性能有比较大的影响，所以，如果有其他解决方案，我们通常都避免使用Synchronized来解决问题。而volatile关键字就是Java中提供的另一种解决可见性和有序性问题的方案。对于原子性，需要强调一点，也是大家容易误解的一点：对volatile变量的单次读/写操作可以保证原子性的，如long和double类型变量，但是并不能保证i++这种操作的原子性，因为本质上i++是读、写两次操作。\n\n参考文章[插好眼了等传送](https://link.jianshu.com?t=https://www.cnblogs.com/paddix/p/5428507.html)\n\n## 七. 多线程的使用场景\n\n使用多线程就一定效率高吗？ 有时候使用多线程并不是为了提高效率，而是使得CPU能够同时处理多个事件。\n\n1).为了不阻塞主线程,启动其他线程来做好事的事情,比如APP中耗时操作都不在UI中做.\n\n2).实现更快的应用程序,即主线程专门监听用户请求,子线程用来处理用户请求,以获得大的吞吐量.感觉这种情况下，多线程的效率未必高。 这种情况下的多线程是为了不必等待， 可以并行处理多条数据。\n\n比如JavaWeb的就是主线程专门监听用户的HTTP请求，然后启动子线程去处理用户的HTTP请求。\n\n3).某种虽然优先级很低的服务，但是却要不定时去做。\n\n比如Jvm的垃圾回收。\n\n4.)某种任务，虽然耗时，但是不耗CPU的操作时，开启多个线程，效率会有显著提高。\n\n比如读取文件，然后处理。 磁盘IO是个很耗费时间，但是不耗CPU计算的工作。 所以可以一个线程读取数据，一个线程处理数据。肯定比一个线程读取数据，然后处理效率高。 因为两个线程的时候充分利用了CPU等待磁盘IO的空闲时间。\n\n## 八. JAVA常量池\n\n**_Interger中的128(-128~127)_**\n\na.当数值范围为-128~127时：如果两个new出来Integer对象，即使值相同，通过“==”比较结果为false，但两个对象直接赋值，则通过“==”比较结果为“true，这一点与String非常相似。\n\nb.当数值不在-128~127时，无论通过哪种方式，即使两个对象的值相等，通过“==”比较，其结果为false；\n\nc.当一个Integer对象直接与一个int基本数据类型通过“==”比较，其结果与第一点相同；\n\nd.Integer对象的hash值为数值本身；\n\n**_为什么是-128-127?_**\n\n    在Integer类中有一个静态内部类IntegerCache，在IntegerCache类中有一个Integer数组，用以缓存当数值范围为-128~127时的Integer对象。\n\n## 九. 简单介绍一下java中的泛型，泛型擦除以及相关的概念。\n\n    泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。 Java语言引入泛型的好处是安全简单。\n\n    在Java SE 1.5之前，没有泛型的情况的下，通过对类型Object的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是一个安全隐患。\n\n    泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，提高代码的重用率。\n\n1、泛型的类型参数只能是类类型（包括自定义类），不能是简单类型。\n\n2、同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的。\n\n3、泛型的类型参数可以有多个。\n\n4、泛型的参数类型可以使用extends语句，例如<T extends superclass>。习惯上称为“有界类型”。\n\n5、泛型的参数类型还可以是通配符类型。例如Class<?> classType = Class.forName(\"java.lang.String\");\n\n**泛型擦除以及相关的概念**\n\n    Java中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会在编译器在编译的时候去掉。这个过程就称为类型擦除。\n\n**类型擦除引起的问题及解决方法**\n\n1、先检查，在编译，以及检查编译的对象和引用传递的问题\n\n2、自动类型转换\n\n3、类型擦除与多态的冲突和解决方法\n\n4、泛型类型变量不能是基本数据类型\n\n5、运行时类型查询\n\n6、异常中使用泛型的问题\n\n7、数组（这个不属于类型擦除引起的问题）\n\n9、类型擦除后的冲突\n\n10、泛型在静态方法和静态类中的问题\n\n# Android\n\n## 一. Handler机制\n\n    Android 的消息机制也就是 handler 机制,创建 handler 的时候会创建一个 looper ( 通过 looper.prepare() 来创建 ),looper 一般为主线程 looper.\n\n    handler 通过 send 发送消息 (sendMessage) ,当然 post 一系列方法最终也是通过 send 来实现的,在 send 方法中handler 会通过 enqueueMessage() 方法中的 enqueueMessage(msg,millis )向消息队列 MessageQueue 插入一条消息,同时会把本身的 handler 通过 msg.target = this 传入.\n\n    Looper 是一个死循环,不断的读取MessageQueue中的消息,loop 方法会调用 MessageQueue 的 next 方法来获取新的消息,next 操作是一个阻塞操作,当没有消息的时候 next 方法会一直阻塞,进而导致 loop 一直阻塞,当有消息的时候,Looper 就会处理消息 Looper 收到消息之后就开始处理消息: msg.target.dispatchMessage(msg),当然这里的 msg.target 就是上面传过来的发送这条消息的 handler 对象,这样 handler 发送的消息最终又交给他的dispatchMessage方法来处理了,这里不同的是,handler 的 dispatchMessage 方法是在创建 Handler时所使用的 Looper 中执行的,这样就成功的将代码逻辑切换到了主线程了.\n\n    Handler 处理消息的过程是:首先,检查Message 的 callback 是否为 null,不为 null 就通过 handleCallBack 来处理消息,Message 的 callback 是一个 Runnable 对象,实际上是 handler 的 post 方法所传递的 Runnable 参数.其次是检查 mCallback 是 否为 null,不为 null 就调用 mCallback 的handleMessage 方法来处理消息.\n\n## 二. View的绘制流程\n\n    View的绘制流程：OnMeasure()——>OnLayout()——>OnDraw()\n\n各步骤的主要工作：\n\n**_OnMeasure()：_**\n\n    测量视图大小。从顶层父View到子View递归调用measure方法，measure方法又回调OnMeasure。\n\n**_OnLayout()：_**\n\n    确定View位置，进行页面布局。从顶层父View向子View的递归调用view.layout方法的过程，即父View根据上一步measure子View所得到的布局大小和布局参数，将子View放在合适的位置上。\n\n**_OnDraw()：_**\n\n    绘制视图:ViewRoot创建一个Canvas对象，然后调用OnDraw()。六个步骤：①、绘制视图的背景；②、保存画布的图层（Layer）；③、绘制View的内容；④、绘制View子视图，如果没有就不用；⑤、还原图层（Layer）；⑥、绘制滚动条。\n\n## 三. 事件传递机制\n\n1).Android事件分发机制的本质是要解决：点击事件由哪个对象发出，经过哪些对象，最终达到哪个对象并最终得到处理。这里的对象是指Activity、ViewGroup、View.\n\n2).Android中事件分发顺序：Activity（Window） -> ViewGroup -> View.\n\n3).事件分发过程由dispatchTouchEvent() 、onInterceptTouchEvent()和onTouchEvent()三个方法协助完成\n\n**设置Button按钮来响应点击事件事件传递情况：（如下图）**\n\n布局如下:\n\n![](http://upload-images.jianshu.io/upload_images/4642697-01f23a099103eb82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/210)\n\n最外层：Activiy A，包含两个子View：ViewGroup B、View C\n\n中间层：ViewGroup B，包含一个子View：View C\n\n最内层：View C\n\n假设用户首先触摸到屏幕上View C上的某个点（如图中黄色区域），那么Action_DOWN事件就在该点产生，然后用户移动手指并最后离开屏幕。\n\n**按钮点击事件:**\n\nDOWN事件被传递给C的onTouchEvent方法，该方法返回true，表示处理这个事件;\n\n因为C正在处理这个事件，那么DOWN事件将不再往上传递给B和A的onTouchEvent()；\n\n该事件列的其他事件（Move、Up）也将传递给C的onTouchEvent();\n\n![](http://upload-images.jianshu.io/upload_images/4642697-ca12c00c79780b57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n(记住这个图的传递顺序,面试的时候能够画出来,就很详细了)\n\n## 四. Binder机制\n\n**1.了解Binder**\n\n    在Android系统中，每一个应用程序都运行在独立的进程中，这也保证了当其中一个程序出现异常而不会影响另一个应用程序的正常运转。在许多情况下，我们activity都会与各种系统的service打交道，很显然，我们写的程序中activity与系统service肯定不是同一个进程，但是它们之间是怎样实现通信的呢？所以Binder是android中一种实现进程间通信（IPC）的方式之一。\n\n    1).首先，Binder分为Client和Server两个进程。\n\n    注意，Client和Server是相对的。谁发消息，谁就是Client，谁接收消息，谁就是Server。\n\n    举个例子，两个进程A和B之间使用Binder通信，进程A发消息给进程B，那么这时候A是Binder Client，B是Binder Server；进程B发消息给进程A，那么这时候B是Binder Client，A是Binder Server——其实这么说虽然简单了，但还是不太严谨，我们先这么理解着。\n\n    2).其次，我们看下面这个图（摘自田维术的博客），基本说明白了Binder的组成解构：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-9fed6a1413057558.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/673)\n\n    图中的IPC就是进程间通信的意思。\n\n    图中的ServiceManager，负责把Binder Server注册到一个容器中。\n\n    有人把ServiceManager比喻成电话局，存储着每个住宅的座机电话，还是很恰当的。张三给李四打电话，拨打电话号码，会先转接到电话局，电话局的接线员查到这个电话号码的地址，因为李四的电话号码之前在电话局注册过，所以就能拨通；没注册，就会提示该号码不存在。\n\n    对照着Android Binder机制，对着上面这图，张三就是Binder Client，李四就是Binder Server，电话局就是ServiceManager，电话局的接线员在这个过程中做了很多事情，对应着图中的Binder驱动.\n\n    3).接下来我们看Binder通信的过程，还是摘自田维术博客的一张图：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-6a03bbb4f16108b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/675)\n\n注：图中的SM也就是ServiceManager。\n\n    我们看到，Client想要直接调用Server的add方法，是不可以的，因为它们在不同的进程中，这时候就需要Binder来帮忙了。\n\n    首先是Server在SM这个容器中注册。\n\n    其次，Client想要调用Server的add方法，就需要先获取Server对象， 但是SM不会把真正的Server对象返回给Client，而是把Server的一个代理对象返回给Client，也就是Proxy。\n\n    然后，Client调用Proxy的add方法，SM会帮他去调用Server的add方法，并把结果返回给Client。\n\n    以上这3步，Binder驱动出了很多力，但我们不需要知道Binder驱动的底层实现，涉及到C++的代码了——把有限的时间去做更有意义的事情。\n\n(ps:以上节选自包建强老师的文章[点我点我](https://link.jianshu.com?t=http://www.cnblogs.com/Jax/p/6864103.html)).\n\n**2.为什么android选用Binder来实现进程间通信？**\n\n1).可靠性。在移动设备上，通常采用基于Client-Server的通信方式来实现互联网与设备间的内部通信。目前linux支持IPC包括传统的管道，System V IPC，即消息队列/共享内存/信号量，以及socket中只有socket支持Client-Server的通信方式。Android系统为开发者提供了丰富进程间通信的功能接口，媒体播放，传感器，无线传输。这些功能都由不同的server来管理。开发都只关心将自己应用程序的client与server的通信建立起来便可以使用这个服务。毫无疑问，如若在底层架设一套协议来实现Client-Server通信，增加了系统的复杂性。在资源有限的手机 上来实现这种复杂的环境，可靠性难以保证。\n\n2).传输性能。socket主要用于跨网络的进程间通信和本机上进程间的通信，但传输效率低，开销大。消息队列和管道采用存储-转发方式，即数据先从发送方缓存区拷贝到内核开辟的一块缓存区中，然后从内核缓存区拷贝到接收方缓存区，其过程至少有两次拷贝。虽然共享内存无需拷贝，但控制复杂。比较各种IPC方式的数据拷贝次数。共享内存：0次。Binder：1次。Socket/管道/消息队列：2次。\n\n3).安全性。Android是一个开放式的平台，所以确保应用程序安全是很重要的。Android对每一个安装应用都分配了UID/PID,其中进程的UID是可用来鉴别进程身份。传统的只能由用户在数据包里填写UID/PID，这样不可靠，容易被恶意程序利用。而我们要求由内核来添加可靠的UID。\n\n所以，出于可靠性、传输性、安全性。android建立了一套新的进程间通信方式。\n\n## 五. Android中进程的级别，以及各自的区别。\n\n**1、前台进程**\n\n    用户当前正在做的事情需要这个进程。如果满足下面的条件之一，一个进程就被认为是前台进程：\n\n1).这个进程拥有一个正在与用户交互的Activity(这个Activity的onResume()方法被调用)。\n\n2).这个进程拥有一个绑定到正在与用户交互的activity上的Service。\n\n3).这个进程拥有一个前台运行的Service（service调用了方法startForeground()）.\n\n4).这个进程拥有一个正在执行其任何一个生命周期回调方法（onCreate(),onStart(),或onDestroy()）的Service。\n\n5).这个进程拥有正在执行其onReceive()方法的BroadcastReceiver。\n\n    通常，在任何时间点，只有很少的前台进程存在。它们只有在达到无法调合的矛盾时才会被杀－－如内存太小而不能继续运行时。通常，到了这时，设备就达到了一个内存分页调度状态，所以需要杀一些前台进程来保证用户界面的反应.\n\n**2、可见进程**\n\n    一个进程不拥有运行于前台的组件，但是依然能影响用户所见。满足下列条件时，进程即为可见：\n\n    这个进程拥有一个不在前台但仍可见的Activity(它的onPause()方法被调用)。当一个前台activity启动一个对话框时，就出了这种情况。\n\n**3、服务进程**\n\n    一个可见进程被认为是极其重要的。并且，除非只有杀掉它才可以保证所有前台进程的运行，否则是不能动它的。\n\n    这个进程拥有一个绑定到可见activity的Service。\n\n    一个进程不在上述两种之内，但它运行着一个被startService()所启动的service。\n\n尽管一个服务进程不直接影响用户所见，但是它们通常做一些用户关心的事情（比如播放音乐或下载数据），所以系统不到前台进程和可见进程活不下去时不会杀它。\n\n**4、后台进程**\n\n    一个进程拥有一个当前不可见的activity(activity的onStop()方法被调用)。\n\n    这样的进程们不会直接影响到用户体验，所以系统可以在任意时刻杀了它们从而为前台、可见、以及服务进程们提供存储空间。通常有很多后台进程在运行。它们被保存在一个LRU(最近最少使用)列表中来确保拥有最近刚被看到的activity的进程最后被杀。如果一个activity正确的实现了它的生命周期方法，并保存了它的当前状态，那么杀死它的进程将不会对用户的可视化体验造成影响。因为当用户返回到这个activity时，这个activity会恢复它所有的可见状态。\n\n**5、空进程**\n\n    一个进程不拥有入何active组件。\n\n    保留这类进程的唯一理由是高速缓存，这样可以提高下一次一个组件要运行它时的启动速度。系统经常为了平衡在进程高速缓存和底层的内核高速缓存之间的整体系统资源而杀死它们。\n\n## 六. 线程池的相关知识。\n\n    Android中的线程池都是之间或间接通过配置ThreadPoolExecutor来实现不同特性的线程池.Android中最常见的四类具有不同特性的线程池分别为FixThreadPool、CachedThreadPool、SingleThreadPool、ScheduleThreadExecutor.\n\n**1).FixThreadPool**\n\n    只有核心线程,并且数量固定的,也不会被回收,所有线程都活动时,因为队列没有限制大小,新任务会等待执行.\n\n    优点:更快的响应外界请求.\n\n**2).SingleThreadPool**\n\n    只有一个核心线程,确保所有的任务都在同一线程中按顺序完成.因此不需要处理线程同步的问题.\n\n**3).CachedThreadPool**\n\n    只有非核心线程,最大线程数非常大,所有线程都活动时,会为新任务创建新线程,否则会利用空闲线程(60s空闲时间,过了就会被回收,所以线程池中有0个线程的可能)处理任务.\n\n    优点:任何任务都会被立即执行(任务队列SynchronousQueue相当于一个空集合);比较适合执行大量的耗时较少的任务.\n\n**4).ScheduledThreadPool**\n\n    核心线程数固定,非核心线程(闲着没活干会被立即回收)数没有限制.\n\n    优点:执行定时任务以及有固定周期的重复任务\n\n    参考[Android开发——Android中常见的4种线程池（保证你能看懂并理解）](https://link.jianshu.com?t=http://blog.csdn.net/seu_calvin/article/details/52415337)\n\n## 七. 内存泄露，怎样查找，怎么产生的内存泄露。\n\n**产生的内存泄露**\n\n1).资源对象没关闭造成的内存泄漏\n\n2).构造Adapter时，没有使用缓存的convertView\n\n3).Bitmap对象不在使用时调用recycle()释放内存\n\n4).试着使用关于application的context来替代和activity相关的context\n\n5).注册没取消造成的内存泄漏\n\n6).集合中对象没清理造成的内存泄漏\n\n**查找内存泄漏**\n\n    查找内存泄漏可以使用Android Stdio 自带的Android Profiler工具,也可以使用Square产品的LeadCanary.\n\n## 八. Android优化\n\n**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n## 九. 插件化相关技术，热修补技术是怎样实现的，和插件化有什么区别\n\n**相同点:**\n\n    都使用ClassLoader来实现的加载的新的功能类，都可以使用PathClassLoader与DexClassLoader\n\n**不同点：**\n\n    热修复因为是为了修复Bug的，所以要将新的同名类替代同名的Bug类，要抢先加载新的类而不是Bug类，所以多做两件事：在原先的app打包的时候，阻止相关类去打上CLASS_ISPREVERIFIED标志，还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements，这样才能抢先代替Bug类，完成系统不加载旧的Bug类.\n\n    而插件化只是增肌新的功能类或者是资源文件，所以不涉及抢先加载旧的类这样的使命，就避过了阻止相关类去打上CLASS_ISPREVERIFIED标志和还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements.\n\n    所以插件化比热修复简单，热修复是在插件化的基础上在进行替旧的Bug类\n\n## 十. 怎样计算一张图片的大小，加载bitmap过程（怎样保证不产生内存溢出），二级缓存，LRUCache算法。\n\n**计算一张图片的大小**\n\n    图片占用内存的计算公式：图片高度 * 图片宽度 * 一个像素占用的内存大小.所以，计算图片占用内存大小的时候，要考虑图片所在的目录跟设备密度，这两个因素其实影响的是图片的高宽，android会对图片进行拉升跟压缩。\n\n**加载bitmap过程（怎样保证不产生内存溢出）**\n\n    由于Android对图片使用内存有限制，若是加载几兆的大图片便内存溢出。Bitmap会将图片的所有像素（即长x宽）加载到内存中，如果图片分辨率过大，会直接导致内存OOM，只有在BitmapFactory加载图片时使用BitmapFactory.Options对相关参数进行配置来减少加载的像素。\n\n**BitmapFactory.Options相关参数详解**\n\n(1).Options.inPreferredConfig值来降低内存消耗。\n\n比如：默认值ARGB_8888改为RGB_565,节约一半内存。\n\n(2).设置Options.inSampleSize 缩放比例，对大图片进行压缩 。\n\n(3).设置Options.inPurgeable和inInputShareable：让系统能及时回 收内存。\n\nA：inPurgeable：设置为True时，表示系统内存不足时可以被回 收，设置为False时，表示不能被回收。\n\nB：inInputShareable：设置是否深拷贝，与inPurgeable结合使用，inPurgeable为false时，该参数无意义。\n\n(4).使用decodeStream代替其他方法。\n\ndecodeResource,setImageResource,setImageBitmap等方法\n\n## 十一. LRUCache算法是怎样实现的。\n\n    内部存在一个LinkedHashMap和maxSize，把最近使用的对象用强引用存储在 LinkedHashMap中，给出来put和get方法，每次put图片时计算缓存中所有图片总大小，跟maxSize进行比较，大于maxSize，就将最久添加的图片移除；反之小于maxSize就添加进来。\n\n    之前，我们会使用内存缓存技术实现，也就是软引用或弱引用，在Android 2.3（APILevel 9）开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，这让软引用和弱引用变得不再可靠。\n\n# 算法\n\n## 一. 算法题\n\nm * n的矩阵，能形成几个正方形（2 * 2能形成1个正方形，2 * 3 2个，3 * 3 6个）\n\n计数的关键是要观察到任意一个倾斜的正方形必然唯一内接于一个非倾斜的正方形，而一个非倾斜的边长为k的非倾斜正方形，一条边上有k-1个内点，每个内点恰好确定一个内接于其中的倾斜正方形，加上非倾斜正方形本身，可知，将边长为k的非倾斜正方形数目乘以k，再按k求和即可得到所有正方形的数目。\n\n设2≤n≤m，k≤n-1，则边长为k的非倾斜有\n\n(n-k)(m-k)个，故所有正方形有\n\n∑(m-k)(n-k)k个\n\n例如m=n=4\n\n正方形有3_3_1+2_2_2+1_1_3=20个\n\n# 下面是面试过程中遇到的题目\n\n大多数题目都可以在上面找到答案.\n\n## 电话面试题\n\n### 1.ArrayList 和 Hashmap 简单说一些,区别,底层的数据结构.\n\n### 2.Handler 消息机制\n\n### 3.引起内存泄漏的场景\n\n### 4.多线程的使用场景?\n\n### 5.常用的线程池有哪几种?\n\n### 6.在公司做了什么?团队规模?为什么离职?\n\n## 面试中实际涉及到的问题\n\n**第一轮**\n\n### **1.知道哪些单例模式,写一个线程安全的单例,并分析为什么是线程安全的**?\n```java\npublic class Singleton {\n\t// Private constructor prevents instantiation from other classes\n\tprivate Singleton() { }\n\n\t/**\n\t* SingletonHolder is loaded on the first execution of Singleton.getInstance() \n\t* or the first access to SingletonHolder.INSTANCE, not before.\n\t*/\n\tprivate static class SingletonHolder { \n\t\t\tpublic static final Singleton INSTANCE = new Singleton();\n\t}\n\n\tpublic static Singleton getInstance() {\n\t\t\treturn SingletonHolder.INSTANCE;\n\t}\n}\n```\n### **2.Java中的集合有哪些?解释一下HashMap?底部的数据结构?散列表冲突的处理方法,散列表是一个什么样的数据结构?HashMap是采用什么方法处理冲突的**?\n\n![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n```\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n```\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**TreeSet两种排序方式**：两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\n```\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n```\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\n```\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n```\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\n```\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n```\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n **五. concurrentHashmap原理，原子类**。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大.\n\n### **3.解释一下什么是MVP架构,画出图解,一句话解释MVP和MVC的区别**?\n\n为了解决逻辑处理和UI视图的松散耦合，MVC和MVP的架构模式在很多App中使用比较广泛。\n\n那什么是MVP呢？它又和我们常常听到的MVC有什么关系了以及区别呢？\n\n![MVP和MVC架构图](http://frodoking.github.io/img/android/mvp_mvc_img.png)\n\nMVP 是从经典的模式MVC演变而来，它们的基本思想有相通的地方：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。作为一种新的模式，**MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会从直接Model中读取数据而不是通过 Controller**。\n\n在MVC里，View是可以直接访问Model的！从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。 在MVC模型里，更关注的Model的不变，而同时有多个对Model的不同显示，及View。所以，在MVC模型里，Model不依赖于View，但是View是依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。\n\n**MVP如何解决MVC的问题**？\n\n在MVP里，Presenter完全把Model和View进行了分离，主要的程序逻辑在Presenter里实现。而且，Presenter与具体的View是没有直接关联的，而是通过定义好的接口进行交互，从而使得在变更View时候可以保持Presenter的不变，即重用！ 不仅如此，我们还可以编写测试用的View，模拟用户的各种操作，从而实现对Presenter的测试–而不需要使用自动化的测试工具。 我们甚至可以在Model和View都没有完成时候，就可以通过编写Mock Object（即实现了Model和View的接口，但没有具体的内容的）来测试Presenter的逻辑。 在MVP里，应用程序的逻辑主要在Presenter来实现，其中的View是很薄的一层。因此就有人提出了Presenter First的设计模式，就是根据User Story来首先设计和开发Presenter。在这个过程中，View是很简单的，能够把信息显示清楚就可以了。在后面，根据需要再随便更改View，而对Presenter没有任何的影响了。 如果要实现的UI比较复杂，而且相关的显示逻辑还跟Model有关系，就可以在View和Presenter之间放置一个Adapter。由这个 Adapter来访问Model和View，避免两者之间的关联。而同时，因为Adapter实现了View的接口，从而可以保证与Presenter之间接口的不变。这样就可以保证View和Presenter之间接口的简洁，又不失去UI的灵活性。 在MVP模式里，View只应该有简单的Set/Get的方法，用户输入和设置界面显示的内容，除此就不应该有更多的内容，绝不容许直接访问Model–这就是与MVC很大的不同之处。\n\nMVP的优点：\n\n> 1、模型与视图完全分离，我们可以修改视图而不影响模型；\n> 2、可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部；\n> 3、我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁；\n> 4、如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）。\n\n**使用方法**\n\n1、建立bean\n\n```\n\npublic class UserBean {\n private String mFirstName;\n private String mLastName;\n\n public UserBean(String firstName, String lastName) {\n this. mFirstName = firstName;\n this. mLastName = lastName;\n }\n\n public String getFirstName() {\n return mFirstName;\n }\n\n public String getLastName() {\n return mLastName;\n }\n}\n```\n \n2、建立model接口（处理业务逻辑，这里指数据读写）\n\n```\n\npublic interface IUserModel {\n void setID(int id);\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n\n int getID();\n\n UserBean load(int id);// 通过id读取user信息,返回一个UserBean\n}\n```\n\n3、建立view接口（更新ui中的view状态），这里列出需要操作当前view的方法\n\n``` \n\npublic interface IUserView {\n int getID();\n\n String getFristName();\n\n String getLastName();\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n}\n\n ```\n4、建立presenter（主导器，通过iView和iModel接口操作model和view），activity可以把所有逻辑给presenter处理，这样java逻辑就从手机的activity中分离出来\n\n```\npublic class UserPresenter {\n private IUserView mUserView;\n private IUserModel mUserModel;\n\n public UserPresenter(IUserView view) {\n mUserView = view;\n mUserModel = new UserModel();\n }\n\n public void saveUser( int id, String firstName, String lastName) {\n mUserModel.setID(id);\n mUserModel.setFirstName(firstName);\n mUserModel.setLastName(lastName);\n }\n\n public void loadUser( int id) {\n UserBean user = mUserModel.load(id);\n mUserView.setFirstName(user.getFirstName()); // 通过调用IUserView的方法来更新显示\n mUserView.setLastName(user.getLastName());\n }\n}\n\n ```\n**结束语**\n\nMVP主要解决就是把逻辑层抽出来成P层，要是遇到需求逻辑上的更改就可以只需要修改P层了或者遇到逻辑上的大概我们可以直接从写一个P也可以，很多开发人员把所有的东西都写在了Activity/Fragment里面这样一来遇到频繁改需求或者逻辑越来越复杂的时候，Activity/Fragment里面就会出现过多的混杂逻辑导致出错，所以MVP模式对于APP来对控制逻辑和UI的解耦来说是一个不错的选择！\n\n在这里多说一下，其实MVP只是一个总体的解决方案。在V和P之间其实我们还可以采用事件总线的方案来解决这种高耦合的情况。本人在另外一篇文章中将会讲到[事件总线（otto的bus和eventbus的一个对比分析）](https://frodoking.github.io/2015/03/30/android-eventbus-otto-analysis/)\n\n\n### **4.Handle消息机制?在使用Handler的时候要注意哪些东西,是否会引起内存泄漏?画一下Handler机制的图解**?\n\n![](http://upload-images.jianshu.io/upload_images/1824194-a947dcc5b22f69fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面一共出现了几种类，ActivityThread，Handler，MessageQueue，Looper，msg（Message）,对这些类作简要介绍：\n\nActivityThread：程序的启动入口，为什么要介绍这个类，是因为该类就是我们说的主线程，它对Looper进行操作的。\n\nHandler：字面意思是操控者，该类有比较重要的地方，就是通过handler来发送消息（sendMessage）到MessageQueue和 操作控件的更新（handleMessage）。handler下面持有这MessageQueue和Looper的对象。\n\nMessageQueue：字面意思是消息队列，就是封装Message类。对Message进行插入和取出操作。\n\nMessage：这个类是封装消息体并被发送到MessageQueue中的，给类是通过链表实现的，其好处方便MessageQueue的插入和取出操作。还有一些字段是（int what，Object obj，int arg1，int arg2）。what是用户定义的消息和代码，以便接收者（handler）知道这个是关于什么的。obj是用来传输任意对象的，arg1和arg2是用来传递一些简单的整数类型的。\n\n下面，我们按照启动顺序来进行源码分析：\n\n![](http://upload-images.jianshu.io/upload_images/1824194-298ebb16ce4a3b70.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://raw.githubusercontent.com/bihe0832/Android-System-Related-Charts/master/framework/handler-sequence.jpg)\n\n\n\n### **5.是否做过性能优化?已经采取了哪些措施进行优化**?\n\n**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n### **6.引起内存泄漏的原因是什么?以及你是怎么解决的**?\n\n这些问题应该都是比较基础的问题,每个开发者都应该是非常熟悉并能详细叙述的.这一轮的面试官问的技术都是平时用到的.\n\n**产生的内存泄露**\n\n1).资源对象没关闭造成的内存泄漏\n\n2).构造Adapter时，没有使用缓存的convertView\n\n3).Bitmap对象不在使用时调用recycle()释放内存\n\n4).试着使用关于application的context来替代和activity相关的context\n\n5).注册没取消造成的内存泄漏\n\n6).集合中对象没清理造成的内存泄漏\n\nAndroid的虚拟机是基于寄存器的Dalvik，它的最大堆大小一般是16M，有的机器为24M。因此我们所能利用 的内存空间是有限的。如果我们的内存占用超过了一定的水平就会出现OutOfMemory的错误。\n\n内存溢出的几点原因总结:\n1、**资源释放问题**: 程序代码的问题，长期保持某些资源(如Context)的引用，造成内存泄露，资源得不到释放 \n\n2、**对象内存过大问题**:\n保存了多个耗用内存过大的对象(如Bitmap)，造成内存超出限制\n\n3、**static**:\nstatic是Java中的一个关键字，当用它来修饰成员变量时，那么该变量就属于该类，而不是该类的实例。所以 用static修饰的变量，它的生命周期是很长的，如果用它来引用一些资源耗费过多的实例(Context的情况最多）\n这时就要谨慎对待了。 \n```\npublic class ClassName {\n private static Context mContext;\n//省略 }\n```\n以上的代码是很危险的，如果将Activity赋值到mContext的话。那么即使该Activity已经onDestroy，但是由于 仍有对象保存它的引用，因此该Activity依然不会被释放。\n我们举Android文档中的一个例子。\n```\nprivate static Drawable sBackground; @Override\nprotected void onCreate(Bundle state) {\n\tsuper.onCreate(state);\n\tTextView label = new TextView(this);\n        label.setText(\"Leaks are bad\");\n\tif (sBackground == null) {\n\tsBackground = getDrawable(R.drawable.large_bitmap); }\n\tlabel.setBackgroundDrawable(sBackground);\n\tsetContentView(label); }\n```\nsBackground, 是 一个静态的变量，但是我们发现，我们并没有显式的保存Contex的引用，但是，当Drawable与\n\nView连接之后，Drawable就将View设 置为一个回调，由于View中是包含Context的引用的，所以，实际上我们依\n\n然保存了Context的引用。这个引用链如下: Drawable->TextView->Context\n\n所以，最终该Context也没有得到释放，发生了内存泄露。\n\n**针对static的解决方案**:\n\n第一、应该尽量避免static成员变量引用资源耗费过多的实例，比如Context。\n\n第二、Context尽量使用Application Context，因为Application的Context的生命周期比较长，引用它不会出现内存\n泄露的问题。\n\n第三、使用WeakReference代替强引用。比如可以使用WeakReference<Context> mContextRef; 该部分的详细内容也可以参考Android文档中Article部分。\n\n4、**线程导致内存溢出**:\n线程产生内存泄露的主要原因在于线程生命周期的不可控。我们来考虑下面一段代码。\n```\npublic class MyActivity extends Activity {\n \t@Override\n\tpublic void onCreate(Bundle savedInstanceState) {\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.main);\n\tnew MyThread().start();\n}\nprivate class MyThread extends Thread{\n\t@Override public void run() {\n\tsuper.run();\n\t//do somthing }\n\t} \n}\n```\n这段代码很平常也很简单，是我们经常使用的形式。我们思考一个问题:假设MyThread的run函数是一个很 费时的操作，当我们开启该线程后，将设备的横屏变为了竖屏，一 般情况下当屏幕转换时会重新创建Activity， 按照我们的想法，老的Activity应该会被销毁才对，然而事实上并非如此。\n\n由于我们的线程是Activity的内部类，所以MyThread中保存了Activity的一个引用，当MyThread的run函数没有 结束时，MyThread是不会被销毁的，因此它所引用的老的Activity也不会被销毁，因此就出现了内存泄露的问题。\n\n有些人喜欢用Android提供的AsyncTask，但事实上AsyncTask的问题更加严重，Thread只有在run函数不结束时才出现这种内存泄露问题，然而AsyncTask内部的实现机制是运用了ThreadPoolExcutor,该类产生的Thread对象的生命周期是不确定的，是应用程序无法控制的，因此如果AsyncTask作为Activity的内部类，就更容易出现内存\n\n**泄露的问题**。\n\n针对这种线程导致的内存泄露问题的解决方案: \n\n第一、将线程的内部类，改为静态内部类。\n\n第二、在线程内部采用弱引用保存Context引用。\n\n二、避免内存溢出的方案:\n** 1、图片过大导致内存溢出**: 模拟器的RAM比较小，由于每张图片先前是压缩的情况，放入到Bitmap的时候，大小会变大，导致超出RAM内存\n\n★android 中用bitmap 时很容易内存溢出，报如下错误:Java.lang.OutOfMemoryError : bitmap size exceeds VM budget \n解决: 方法1: 主要是加上这段:等比例缩小图片\n\n1)通过getResource()方法获取资源:\n```\n//解决加载图片 内存溢出的问题 \n//Options 只保存图片尺寸大小，不保存图片到内存\nBitmapFactory.Options options = new BitmapFactory.Options();\noptions.inSampleSize = 2;\n\n//缩放的比例，缩放是很难按准备的比例进行缩放的，其值表明缩放的倍数，SDK中建议其值是2的指数值,值越大会导致图片不清晰\nBitmapFactory.Options opts = new BitmapFactory.Options(); \nopts.inSampleSize = 2;\nBitmap bmp = null;\nbmp = BitmapFactory.decodeResource(getResources(), mImageIds[position],opts); ...\n//回收\nbmp.recycle();\n```\n2)通过Uri取图片资源\n以上代码可以优化内存溢出，但它只是改变图片大小，并不能彻底解决内存溢出。\n3)通过路径获取图片资源\n\n方法2:对图片采用软引用，及时地进行recyle()操作\n\n具体见“各种引用的简单了解”中的示例\n**2、复用listView**: 方法:对复杂的listview进行合理设计与编码:\n```\nprivate ImageView preview;\nBitmapFactory.Options options = new BitmapFactory.Options();\n//图片宽高都为原来的二分之一，即图片为原来的四分之一\noptions.inSampleSize = 2;\nBitmap bitmap = BitmapFactory.decodeStream(cr.openInputStream(uri), null, options); preview.setImageBitmap(bitmap);\nprivate ImageView preview;\nprivate String fileName= \"/sdcard/DCIM/Camera/2010-05-14 16.01.44.jpg\"; BitmapFactory.Options options = new BitmapFactory.Options();\n//图片宽高都为原来的二分之一，即图片为原来的四分之一 \noptions.inSampleSize = 2;\nBitmap b = BitmapFactory.decodeFile(fileName, options);\npreview.setImageBitmap(b); filePath.setText(fileName);\nSoftReference<Bitmap> bitmap;\nbitmap = new SoftReference<Bitmap>(pBitmap);\nif(bitmap != null){\n\tif(bitmap.get() != null && !bitmap.get().isRecycled()){ bitmap.get().recycle();\n\tbitmap= null;\n }\n}\n\nAdapter中:\n\n@Override\npublic View getView(int position, View convertView, ViewGroup parent) {\n\tViewHolder holder;\n\tif(convertView!=null && convertView instanceof LinearLayout){\n\tholder = (ViewHolder) convertView.getTag(); }else{\n\tconvertView = View.inflate(MainActivity.this, R.layout.item, null); holder = new ViewHolder();\n\tholder.tv = (TextView)\nconvertView.findViewById(R.id.tv); convertView.setTag(holder);\n}\nholder.tv.setText(\"XXXX\");\nholder.tv.setTextColor(Color.argb(180, position*4, position*5, 255-position*2)); return convertView;\n\n}\n\nclass ViewHolder{\n\tprivate TextView tv;\n }\n```\n**3、界面切换**\n方法1:单个页面，横竖屏切换N次后 OOM 1、看看页面布局当中有没有大的图片，比如背景图之类的。\n\n去除xml中相关设置，改在程序中设置背景图(放在onCreate()方法中):\n\n在Activity destory时注意，bg.setCallback(null); 防止Activity得不到及时的释放 2\\. 跟上面方法相似，直接把xml配置文件加载成view 再放到一个容器里 然后直接调用 this.setContentView(View view);方法，避免xml的重复加载\n\n方法2: 在页面切换时尽可能少地重复使用一些代码 比如:重复调用数据库，反复使用某些对象等等......\n\n**4、内存分配**: 方法1:Android堆内存也可自己定义大小和优化Dalvik虚拟机的堆内存分配\n\n注意若使用这种方法:project build target 只能选择 <= 2.2 版本，否则编译将通不过。 所以不建议用这种方式\n\n**常见的内存使用不当的情况**\n\n**1、查询数据库没有关闭游标**\n\n程序中经常会进行查询数据库的操作，但是经常会有使用完毕Cursor后没有关闭的情况。如果我们的查询结果集比较小，对内存的消耗不容易被发现，只有在常时间大量操作的情况下才会复现内存问题，这样就会给以后的测试和问题排查带来困难和风险。\n\nDrawable bg = getResources().getDrawable(R.drawable.bg); XXX.setBackgroundDrawable(rlAdDetailone_bg);\nprivate final static int CWJ_HEAP_SIZE= 6*1024*1024;\nprivate final static float TARGET_HEAP_UTILIZATION = 0.75f; VMRuntime.getRuntime().setMinimumHeapSize(CWJ_HEAP_SIZE); VMRuntime.getRuntime().setTargetHeapUtilization(TARGET_HEAP_UTILIZATION);\nCursor cursor = null; try {\ncursor = getContentResolver().query(uri ...); if (cursor != null && cursor.moveToNext()) { ... ...\n}\n} finally {\nif (cursor != null) {\ntry { cursor.close();\n} catch (Exception e) {\n//ignore this }\n} }\n\n**2、构造Adapter时，没有使用缓存的 convertView**\n\n以构造ListView的BaseAdapter为例，在BaseAdapter中提供了方法: public View getView(int position, View convertView, ViewGroup parent)\n\n来向ListView提供每一个item所需要的view对象。初始时ListView会从BaseAdapter中根据当前的屏幕布局实例 化一定数量的 view对象，同时ListView会将这些view对象缓存起来。当向上滚动ListView时，原先位于最上面的 list item的view对象会被回收，然后被用来构造新出现的最下面的list item。这个构造过程就是由getView()方法完成的，getView()的第二个形参 View convertView就是被缓存起来的list item的view对象(初始化时缓存中没有view对 象则convertView是null)。\n由此可以看出，如果我们不去使用convertView，而是每次都在getView()中重新实例化一个View对象的话，即浪费资源也浪费时间，也会使得内存占用越来越大。ListView回收list item的view对象的过程可以查看:\n```\npublic View getView(int position, View convertView, ViewGroup parent) { View view = null;\nif (convertView != null) {\nview = convertView;\n\npopulate(view, getItem(position)); ...\n} else {\nview = new Xxx(...);\n\n...\n}\nreturn view;\n\n}\n```\n**3、Bitmap对象不在使用时调用recycle()释放内存**\n有时我们会手工的操作Bitmap对象，如果一个Bitmap对象比较占内存，当它不在被使用的时候，可以调用\nBitmap.recycle()方法回收此对象的像素所占用的内存，但这不是必须的，视情况而定。\n\n**4、释放对象的引用**\n当一个生命周期较短的对象A，被一个生命周期较长的对象B保有其引用的情况下，在A的生命周期结束时，\n\n要在B中清除掉对A的引用。 示例A:\n```\npublic class DemoActivity extends Activity { ... ...\nprivate Handler mHandler = ... private Object obj;\npublic void operation() {\nobj = initObj();\n...\n[Mark]\nmHandler.post(new Runnable() {\npublic void run() { useObj(obj);\n}\n});\n} }\n```\n我们有一个成员变量 obj，在operation()中我们希望能够将处理obj实例的操作post到某个线程的MessageQueue 中。在以上的代码中，即便是 mHandler所在的线程使用完了obj所引用的对象，但这个对象仍然不会被垃圾回收掉，因为DemoActivity.obj还保有这个对象的引用。 所以如果在DemoActivity中不再使用这个对象了，可以在 [Mark]的位置释放对象的引用，而代码可以修改为:\n```\n... ...\npublic void operation() {\nobj = initObj();\n...\nfinal Object o = obj;\nobj = null;\nmHandler.post(new Runnable() { public void run() {\nuseObj(o); }\n}\n}\n... ...\n```\n示例B: 假设我们希望在锁屏界面(LockScreen)中，监听系统中的电话服务以获取一些信息(如信号强度等)，则可以在\nLockScreen中定义一个PhoneStateListener的对象，同时将它注册到TelephonyManager服务中。对于LockScreen对象，当需要显示锁屏界 面的时候就会创建一个LockScreen对象，而当锁屏界面消失的时候LockScreen对象就会被释放掉。\n但是如果在释放LockScreen对象的时候忘记取消我们之前注册的PhoneStateListener对象，则会导致LockScreen无 法被垃 圾回收。如果不断的使锁屏界面显示和消失，则最终会由于大量的LockScreen对象没有办法被回收而引起OutOfMemory,使得system_process进程挂掉。\n\n**5、其他**\nAndroid应用程序中最典型的需要注意释放资源的情况是在Activity的生命周期中，在onPause()、onStop()、\nonDestroy()方法中需要适当的释放资源的情况。由于此情况很基础，在此不详细说明，具体可以查看官方文档对Activity生命周期的介绍，以明确何时应该释放哪些资源。\n\n## **第二轮**\n\n### 1.关于并发理解多少?说几个并发的集合?\n[Java 并发编程](http://www.cnblogs.com/paddix/p/5374810.html)\n\n**Java 并发编程：核心理论**：\n共享性，互斥性，原子性，可见性，有序性\n\n**什么是并发：**\n同时在做几件事就是并发\n\n**并发的好处**\n**1.提高资源利用率**\n当一个任务并没有完全占用系统资源时，可以利用并发来提高资源利用率，从而能更快的完成任务\n**2.在程序任务上更加精简**\n任务明确分配好，又能同时进行，既提高了效率，逻辑又清晰\n**3.更好的响应程序**\n例如图片的上传，页面正常展示没有卡顿，又能正常上传图片，既保证了页面能正常响应，又保证图片能正常上传\n\n**并发的风险**\n**1.并发的代价**\n需要占用更多资源\n设计好一个并发程序并不容易\n并发的资源交互问题复杂\n\n**2.并发的隐患**\n滥用资源导致系统不稳定\n结果与预期不符\n出现的BUG难以排查\n\n**Java并发集合框架**\n\n我们着重说明一下Java并发的集合框架，就是java.util.concurrent包下的集合类\n\n* 非阻塞队列\n\n> 非阻塞队列就是在队列中没有数据时，对此队列的操作将出现异常或者返回null，无需等待/阻塞的特色。\n\n在JDK的并发包中，常见的非阻塞队列有以下几个： \n- ConcurrentHashMap \n- ConcurrentSkipListMap \n- ConcurrentSkipListSet \n- ConcurrentLinkedQueue \n- ConcurrentLinkedDeque \n- CopyOnWriteArrayList \n- CopyOnWriteArraySet\n\n**ConcurrentHashMap类**\n\n> 这个类是支持并发操作的Map对象，与之对应的不支持并发操作的Map对象是HashMap，Hashtable对象也是Map的一个子类，也是支持并发操作，但是其不支持Iterator并发的删除操作，如果程序中要对map集合做并发以及Iterator并发编辑/删除操作，推荐使用ConcurrentHashMap集合类。\n\nHashMap集合不支持并发示例：\n\n```\npackage com.collections.hashmapdemo;\n\nimport java.util.HashMap;\n\npublic class HashMapDemo {\n    public static HashMap hashMap = new HashMap();\n\n    public static void main(String[] args) {\n        Thread threadA = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for (int i = 0; i < 50000; i++) {\n                    hashMap.put(\"ThreadA\" + (i + 1), \"ThreadA\" + i + 1);\n                    System.out.println(\"ThreadA\" + (i + 1));\n                }\n            }\n        });\n\n        Thread threadB = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for (int i = 0; i < 50000; i++) {\n                    hashMap.put(\"ThreadB\" + (i + 1), \"ThreadB\" + i + 1);\n                    System.out.println(\"ThreadB\" + (i + 1));\n                }\n            }\n        });\n\n        threadA.start();\n        threadB.start();\n    }\n}\n\n```\n\n执行结果 \n有时候程序可以正常执行完，有时候则程序会造成假死的状态，如下图：\n\n![这里写图片描述](http://img.blog.csdn.net/20171018201847398?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uZ2d1b19jaGVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n所以说HashMap不支持多线程并发的操作。\n\nHashtable集合支持并发 \n示例： \n只需要把HashMap示例中public static HashMap hashMap = new HashMap();修改成public static Hashtable hashtable = new Hashtable();即可。 \n我们就说说Hashtable不支持Iterator的编辑/删除操作，示例如下\n\n```\npackage com.collections.hashmapdemo;\n\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.concurrent.TimeUnit;\n\npublic class HashtableNotModifyDemo {\n    public static Hashtable hashtable = new Hashtable();\n    static {\n        for (int i = 0; i < 5; i++) {\n            hashtable.put(\"String\" + (i + 1), i + 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        Thread threadA = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Iterator iterator = hashtable.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        System.out.println(iterator.next());\n                        TimeUnit.SECONDS.sleep(2);\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        Thread threadB = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                hashtable.put(\"z\", \"zValue\");\n            }\n        });\n\n        threadA.start();\n        threadB.start();\n    }\n}\n\n```\n\n执行结果\n\n> String5 \n> java.util.ConcurrentModificationException \n> at java.util.HashtableEnumerator.next(Hashtable.java:1167)atcom.collections.hashmapdemo.HashtableNotModifyDemo1.run(HashtableNotModifyDemo.java:22) \n> at java.lang.Thread.run(Thread.java:745)\n\n说明多线程调用该类的iterator()方法返回Iterator对象后，在调用put方法会报ConcurrentModificationException异常，也就是不支持Iterator并发的编辑/删除操作。如果想实现此功能推荐使用并发集合框架提供的ConcurrentHashMap类。\n\nConcurrentHashMap集合支持并发示例：\n\n> 需要把HashMap示例中public static HashMap hashMap = new HashMap();修改成public \n> static ConcurrentHashMap concurretHashMap = new ConcurrentHashMap();即可。\n\nConcurrentHashMap集合支持Iterator并发操作示例：\n\n> 把类HashtableNotModifyDemo中的public static Hashtable hashtable = new Hashtable();修改为public static ConcurrentHashMap concurretHashMap = new ConcurrentHashMap();测试即可。\n\n**ConcurrentSkipListMap类**\n\n这个并发集合类支持排序功能。一般此集合中存放的对象要实现Comparable接口，方便此集合类排序，如果不实现此接口，则会按照默认排序。\n\n**ConcurrentSkipListSet类**\n\n这个并发集合类不仅支持排序功能，还不允许重复的元素。一般此集合中存放的对象要实现Comparable接口，并且重写equals和hashCode方法。\n\n**ConcurrentLinkedQueue类**\n\n这个并发集合类提供了并发环境的队列操作。\n\n*   poll()当没有获取到数据时返回null，如果有数据则一处表头并将表头数据返回。\n*   element()当没有获取到数据时抛NoSuchElementException异常，如果有数据则返回表头数据。\n*   peek()当没有获取导数据是返回null，获取到数据时则不移除表头，并将表头数据返回。\n\n**ConcurrentLinkedDeque类**\n\nConcurrentLinkedQueue支持对队列头操作，而ConcurrentLinkedDeque也支持队列头和列尾双向操作。\n\n**CopyOnWriteArrayList类**\n\nArrayList是线程不安全的，如果想在并发中实现线程安全，则可以使用CopyOnWriteArrayList类，使用方法和ArrayList无异。\n\n**CopyOnWriteArraySet类**\n\nArraySet是线程不安全的，如果想在并发中实现线程安全，则可以使用CopyOnWriteArraySet类，使用方法和ArraySet无异。\n\n### 2.Handler 消息机制图解?\n\n![](http://upload-images.jianshu.io/upload_images/1824194-a947dcc5b22f69fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面一共出现了几种类，ActivityThread，Handler，MessageQueue，Looper，msg（Message）,对这些类作简要介绍：\n\nActivityThread：程序的启动入口，为什么要介绍这个类，是因为该类就是我们说的主线程，它对Looper进行操作的。\n\nHandler：字面意思是操控者，该类有比较重要的地方，就是通过handler来发送消息（sendMessage）到MessageQueue和 操作控件的更新（handleMessage）。handler下面持有这MessageQueue和Looper的对象。\n\nMessageQueue：字面意思是消息队列，就是封装Message类。对Message进行插入和取出操作。\n\nMessage：这个类是封装消息体并被发送到MessageQueue中的，给类是通过链表实现的，其好处方便MessageQueue的插入和取出操作。还有一些字段是（int what，Object obj，int arg1，int arg2）。what是用户定义的消息和代码，以便接收者（handler）知道这个是关于什么的。obj是用来传输任意对象的，arg1和arg2是用来传递一些简单的整数类型的。\n\n下面，我们按照启动顺序来进行源码分析：\n\n![](http://upload-images.jianshu.io/upload_images/1824194-298ebb16ce4a3b70.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://raw.githubusercontent.com/bihe0832/Android-System-Related-Charts/master/framework/handler-sequence.jpg)\n\n### 3.在项目中做了哪些东西?\n\n负责用户版App社区模块的版本的功能迭代，几个组件的开发与管理。\n\n### 4.画图说明View 事件传递机制?并举一个例子阐述\n\n1).Android事件分发机制的本质是要解决：点击事件由哪个对象发出，经过哪些对象，最终达到哪个对象并最终得到处理。这里的对象是指Activity、ViewGroup、View.\n\n2).Android中事件分发顺序：Activity（Window） -> ViewGroup -> View.\n\n3).事件分发过程由dispatchTouchEvent() 、onInterceptTouchEvent()和onTouchEvent()三个方法协助完成\n\n**设置Button按钮来响应点击事件事件传递情况：（如下图）**\n\n布局如下:\n\n![](http://upload-images.jianshu.io/upload_images/4642697-01f23a099103eb82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/210)\n\n最外层：Activiy A，包含两个子View：ViewGroup B、View C\n\n中间层：ViewGroup B，包含一个子View：View C\n\n最内层：View C\n\n假设用户首先触摸到屏幕上View C上的某个点（如图中黄色区域），那么Action_DOWN事件就在该点产生，然后用户移动手指并最后离开屏幕。\n\n**按钮点击事件:**\n\nDOWN事件被传递给C的onTouchEvent方法，该方法返回true，表示处理这个事件;\n\n因为C正在处理这个事件，那么DOWN事件将不再往上传递给B和A的onTouchEvent()；\n\n该事件列的其他事件（Move、Up）也将传递给C的onTouchEvent();\n\n![](http://upload-images.jianshu.io/upload_images/4642697-ca12c00c79780b57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n(记住这个图的传递顺序,面试的时候能够画出来,就很详细了)\n\n### 5.类加载机制\n\n**一. 类的加载过程**\n\nPerson person = new Person();为例进行说明。\n\n1).因为new用到了Person.class，所以会先找到Person.class文件，并加载到内存中;\n\n2).执行该类中的static代码块，如果有的话，给Person.class类进行初始化;\n\n3).在堆内存中开辟空间分配内存地址;\n\n4).在堆内存中建立对象的特有属性，并进行默认初始化;\n\n5).对属性进行显示初始化;\n\n6).对对象进行构造代码块初始化;\n\n7).对对象进行与之对应的构造函数进行初始化;\n\n8).将内存地址付给栈内存中的p变量\n\n**二.类的加载器**\n\n    大家都知道，当我们写好一个Java程序之后，不是管是CS还是BS应用，都是由若干个.class文件组织而成的一个完整的Java应用程序，当程序在运行时，即会调用该程序的一个入口函数来调用系统的相关功能，而这些功能都被封装在不同的class文件当中，所以经常要从这个class文件中要调用另外一个class文件中的方法，如果另外一个文件不存在的，则会引发系统异常。而程序在启动的时候，并不会一次性加载程序所要用的所有class文件，而是根据程序的需要，通过Java的类加载机制（ClassLoader）来动态加载某个class文件到内存当中的，从而只有class文件被载入到了内存之后，才能被其它class所引用。所以ClassLoader就是用来动态加载class文件到内存当中用的。\n\n**双亲机制**\n\n**_1、原理介绍_**\n\n    ClassLoader使用的是双亲委托模型来搜索类的，每个ClassLoader实例都有一个父类加载器的引用（不是继承的关系，是一个包含的关系），虚拟机内置的类加载器（Bootstrap ClassLoader）本身没有父类加载器，但可以用作其它ClassLoader实例的的父类加载器。当一个ClassLoader实例需要加载某个类时，它会试图亲自搜索某个类之前，先把这个任务委托给它的父类加载器，这个过程是由上至下依次检查的，首先由最顶层的类加载器Bootstrap ClassLoader试图加载，如果没加载到，则把任务转交给Extension ClassLoader试图加载，如果也没加载到，则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常。否则将这个找到的类生成一个类的定义，并将它加载到内存当中，最后返回这个类在内存中的Class实例对象。\n\n**_2、为什么要使用双亲委托这种模型呢？_**\n\n    因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。\n\n**_3、但是JVM在搜索类的时候，又是如何判定两个class是相同的呢？_**\n\n    JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。比如网络上的一个Java类org.classloader.simple.NetClassLoaderSimple，javac编译之后生成字节码文件NetClassLoaderSimple.class，ClassLoaderA和ClassLoaderB这两个类加载器并读取了NetClassLoaderSimple.class文件，并分别定义出了java.lang.Class实例来表示这个类，对于JVM来说，它们是两个不同的实例对象，但它们确实是同一份字节码文件，如果试图将这个Class实例生成具体的对象进行转换时，就会抛运行时异常java.lang.ClassCaseException，提示这是两个不同的类型。\n\n**Android类加载器**\n\n    对于Android而言，最终的apk文件包含的是dex类型的文件，dex文件是将class文件重新打包，打包的规则又不是简单地压缩，而是完全对class文件内部的各种函数表，变量表进行优化，产生一个新的文件，即dex文件。因此加载这种特殊的Class文件就需要特殊的类加载器DexClassLoader。\n\n### 6.如何换肤,换肤插件中存在的问题?\n**1.换肤方案分析**\n\n1.  res下放多种皮肤的资源文件\n\n2.  加载插件apk使用其中的皮肤资源\n\n* 方案一： \n优点：容易实现。 \n缺点：res下放多种皮肤的资源文件，无疑会加大apk文件大小，而且资源文件是写死的，不利于后期拓展，若有其他皮肤需求只能通过版本迭代。 \n* 方案二： \n优点：不会加大apk包，更容易扩展，有新的皮肤只需下载新的插件包即可，无需更新。（相对于方案一） \n缺点：相对于方案一实现较困难，若有更多业务处理需要插件，如使用插件中的四大组件及处理它们的生命周期则是比较麻烦的，需用到动态代理。\n例如:[Android插件化系列第（二）篇---动态加载技术之apk换肤](http://www.jianshu.com/p/d1c6e67f7889)\n\n**2.Android换肤技术总结**\n\n背景\n\n纵观现在各种Android app，其换肤需求可以归为 \n\n- 白天/黑夜主题切换（或者别的名字，通常2套），如同花顺/自选股/天天动听等，UI表现为一个switcher。 \n- 多种主题切换，通常为会员特权，如QQ/QQ空间。\n\n对于第一种来说，目测应该是直接通过本地theme来做的，即所有图片/颜色的资源都在apk里面打包了。\n\n而对于第二种，则相对复杂一些，由于作为一种线上服务，可能上架新皮肤，且那么多皮肤包放在apk里面实在太占体积了，所以皮肤资源会在选择后再进行下载，也就不能直接使用android的那套theme。\n\n**技术方案**\n\n内部资源加载方案和动态下载资源下载两种。\n\n动态下载可以称为一种黑科技了，因为往往需要hack系统的一些方法，所以在部分机型和新的API上有时候可能有坑，但相对好处则很多 \n\n- 图片/色值等资源由于是后台下发的，可以随时更新 \n- APK体积减小 \n- 对应用开发者来说，换肤几乎是透明的，不需要关心有几套皮肤 \n- 可以作为增值服务卖钱！！\n\n**内部资源加载方案**\n\n内部资源加载都是通过android本身那套theme来做的，相对业务开发来说工作量更大（需要定义attr和theme），不同方案类似地都是在BaseActivity里面做setTheme，差别主要在解决以下2个问题的策略： \n\n- setTheme后如何实时刷新，而不用重新创建页面（尤其是listview里面的item）。 \n- 哪些view需要刷新，刷新什么（背景？字体颜色？ImageView的src？）。\n\n**自定义view**\n\n[MultipleTheme](http://xiazai.jb51.net/201703/yuanma/MultipleTheme-master(jb51.net).rar) \n\n做自定义view是为了在setTheme后会去立即刷新，更新页面UI对应资源（如TextView替换背景图和文字颜色），在上述项目中，则是通过对rootView进行遍历，对所有实现了ColorUiInterface的view/viewgroup进行setTheme操作来实现即使刷新的。\n\n显然这样太重了，需要把应用内的各种view/viewgroup进行替换。\n\n手动绑定view和要改变的资源类型\n\n[Colorful](http://xiazai.jb51.net/201703/yuanma/Colorful-master(jb51.net).rar)\n\n这个…我们看看用法吧….\n```\nViewGroupSetter listViewSetter = new ViewGroupSetter(mNewsListView);\n// 绑定ListView的Item View中的news_title视图，在换肤时修改它的text_color属性\nlistViewSetter.childViewTextColor(R.id.news_title, R.attr.text_color);\n\n// 构建Colorful对象来绑定View与属性的对象关系\nmColorful = new Colorful.Builder(this)\n  .backgroundDrawable(R.id.root_view, R.attr.root_view_bg)\n  // 设置view的背景图片\n  .backgroundColor(R.id.change_btn, R.attr.btn_bg)\n  // 设置背景色\n  .textColor(R.id.textview, R.attr.text_color)\n  .setter(listViewSetter) // 手动设置setter\n  .create(); // 设置文本颜色\n```\n我就是想换个皮肤，还得在activity里自己去设置要改变哪个view的什么属性，对应哪个attribute？是不是成本太高了？而且activity的逻辑也很容易被弄得乱七八糟。\n\n**动态资源加载方案**\n\nresource替换\n\n覆盖application的getResource方法，实现自己的resource，优先加载本地皮肤包文件夹下的资源包，对于性能问题，可以通过attribute或者资源名称规范(如需要换肤则用skin_开头)来优化，从而不对不换肤的资源进行额外检查开销。\n\n不过由于Android5.1源码里，drawable初始化的时候调用的是loadDrawable，而不是resource.getDrawable，而loadDrawable是私有的方法，无法覆盖，所以虽然很方便，却无法继续使用（不用关心任何皮肤相关的事情，android:color指定颜色就行了，神奇滴会自动换肤）。\n\n自定义LayoutInflator.Factory\n\n开源项目可参照Android-Skin-Loader。\n\n即setFactory使用自定义的LayoutInflator.Factory，可以重点关注该项目中的SkinInflaterFactory和SkinManager（实现了自己的getColor、getDrawable、getBitmap、getColorStateList等等方法）。\n\n需要自定义一个tag比如app:customStyle，重写所有的style，转成set方法，这样带来的牺牲就是增加了换肤的成本，要写很多style，自己去set，并不完全透明了。\n\nHack Resources internally\n\n黑科技方法，直接对Resources进行hack，Resources.Java:\n```\n// Information about preloaded resources. Note that they are not\n// protected by a lock, because while preloading in zygote we are all\n// single-threaded, and after that these are immutable.\nprivate static final LongSparseArray<Drawable.ConstantState>[] sPreloadedDrawables;\nprivate static final LongSparseArray<Drawable.ConstantState> sPreloadedColorDrawables\n  = new LongSparseArray<Drawable.ConstantState>();\nprivate static final LongSparseArray<ColorStateList> sPreloadedColorStateLists\n  = new LongSparseArray<ColorStateList>();\n```\n直接对Resources里面的这三个LongSparseArray进行替换，由于apk运行时的资源都是从这三个数组里面加载的，所以只要采用interceptor模式：\n\npublic class DrawablePreloadInterceptor extends LongSparseArray<Drawable.ConstantState>\n\n自己实现一个LongSparseArray，并通过反射set回去，就能实现换肤，具体getDrawable等方法里是怎么取preload数组的，可以自己看Resources的源码。\n\n等等，就这么简单？，NONO，少年你太天真了，怎么去加载xml，9patch的padding怎么更新，怎么打包/加载自定义的皮肤包，drawable的状态怎么刷新，等等。这些都是你需要考虑的，在存在插件的app中，还需要考虑是否会互相覆盖resource id的问题，进而需要修改apt，把resource id按位放在2个range。\n\n手Q和独立版QQ空间使用的是这种方案，效果挺好。\n\n**总结**\n\n尽管动态加载方案比较黑科技，可能因为系统API的更改而出问题，但相对来说\n\n**好处有** \n\n- 灵活性高，后台可以随时更新皮肤包 \n- 相对透明，开发者几乎不用关心有几套皮肤，不用去定义各种theme和attr，甚至连皮肤包的打包都可以交给设计或者专门的同学 \n- apk体积节省 \n\n**存在的问题**\n\n没有完善的开源项目，如果我们采用动态加载的第二种方案，需要的项目功能包括： \n\n- 自定义皮肤包结构 \n- 换肤引擎，加载皮肤包资源并load，实时刷新。 \n- 皮肤包打包工具 \n- 对各种rom的兼容\n\n如果有这么一个项目的话，就一劳永逸了，有兴趣的同学可以联系一下，大家一起搞一搞。\n\n内部加载方案大同小异，主要解决的都是即时刷新的问题，然而从目前的一些开源项目来看，仍然没有特别简便的方案。让我选的话，我宁愿让界面重新创建，比如重启activity，或者remove所有view再添加回来（或者你可能想遍历rootview，然后一个个检查是否需要换肤然后set…）。\n\n### 7.hotfix是否用过,原理是否了解?\n\n[Android热修复技术选型——三大流派解析](https://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&mid=2651112709&idx=1&sn=09f82f5e2e8e287904391dbc4b1f83f6&scene=1&srcid=0909KyPp8gx8aLwII2MEYUQ3)\n\n### 8.说说项目中用到了哪些设计模式,说了一下策略模式和观察者模式?\n\n[Android源码设计模式分析项目](https://github.com/simple-android-framework-exchange/android_design_patterns_analysis#schedule)\n\n### 9.会JS么?有Hybid开发经验么?\n\n### 10.说一下快排的思想?手写代码\n\n### 11.堆有哪些数据结构?\n\n对于这轮米那是明显感觉到压力,知识的纵向了解也比较深,应该是个leader.\n\n**第三轮**\n\n1.介绍一下在项目中的角色?\n\n2.遇到困难是怎么解决的?\n\n3.如何与人相处,与别人意见相左的时候是怎么解决的,并举生活中的一个例子.\n\n4.有没有压力特别大的时候?\n\n这个应该是项目经理了,问的问题偏向于生活性格方面.\n\n以上面试中问到的题目基本上都可以在上面找到答案,所以做准备是很重要的,但技术是一点点积累的,就算你全会背了,面试过了,真正等到工作的时候还是会捉襟见肘的,所以踏实点吧骚年.\n\n",[[1512545632000,["gengmei_pxf@gengmei123.local",[[1,63054,"\n"]],[63052,63052],[63053,63053]]],[1512545633027,["gengmei_pxf@gengmei123.local",[[1,63055,"\n"]],[63053,63053],[63054,63054]]],[1512545663964,["gengmei_pxf@gengmei123.local",[[1,63054,"单例模式，builder模式，外观模式，"]],[63054,63054],[63074,63074]]],[1512545686625,["gengmei_pxf@gengmei123.local",[[1,63074,"模板方法模式，"]],[63074,63074],[63081,63081]]],[1512545735971,["gengmei_pxf@gengmei123.local",[[1,63068,"（）"]],[63068,63068],[63070,63070]]],[1512545740810,["gengmei_pxf@gengmei123.local",[[1,63069,"dialog"]],[63069,63069],[63075,63075]]],[1512545743533,["gengmei_pxf@gengmei123.local",[[1,63081,"（）"]],[63081,63081],[63083,63083]]],[1512545754865,["gengmei_pxf@gengmei123.local",[[1,63082,"context，contextImpl"]],[63082,63082],[63101,63101]]],[1512545757893,["gengmei_pxf@gengmei123.local",[[1,63109,"（）"]],[63109,63109],[63111,63111]]],[1512545781279,["gengmei_pxf@gengmei123.local",[[1,63110,"asynckTash"]],[63110,63110],[63120,63120]]],[1512545781812,["gengmei_pxf@gengmei123.local",[[-1,63119,"h"]],[63120,63120],[63119,63119]]],[1512545793217,["gengmei_pxf@gengmei123.local",[[1,63119,"k,activity生命周期"]],[63119,63119],[63133,63133]]],[1512545794737,["gengmei_pxf@gengmei123.local",[[1,63133,"函数"]],[63133,63133],[63135,63135]]],[1512545806638,["gengmei_pxf@gengmei123.local",[[1,63137,"策略模式（）"]],[63137,63137],[63143,63143]]],[1512545886059,["gengmei_pxf@gengmei123.local",[[1,63142,"动画 interpolator Interpolator"]],[63142,63142],[63170,63170]]],[1512545891495,["gengmei_pxf@gengmei123.local",[[-1,63144," interpolator"]],[63145,63157],[63144,63144]]],[1512545913283,["gengmei_pxf@gengmei123.local",[[1,63158,"，迭代器模式"]],[63158,63158],[63164,63164]]],[1512545932864,["gengmei_pxf@gengmei123.local",[[1,63159,"代理模式（）"]],[63159,63159],[63165,63165]]],[1512545944209,["gengmei_pxf@gengmei123.local",[[1,63164,"binder"]],[63164,63164],[63170,63170]]],[1512545947091,["gengmei_pxf@gengmei123.local",[[1,63176,"（）"]],[63176,63176],[63178,63178]]],[1512545961026,["gengmei_pxf@gengmei123.local",[[1,63177,"IT儿啊投入"]],[63177,63177],[63183,63183]]],[1512545962948,["gengmei_pxf@gengmei123.local",[[-1,63177,"IT儿啊投入"]],[63183,63183],[63177,63177]]],[1512545984815,["gengmei_pxf@gengmei123.local",[[1,63177,"iterator # Iterator"]],[63177,63177],[63196,63196]]],[1512545990048,["gengmei_pxf@gengmei123.local",[[-1,63177,"iterator # "]],[63177,63188],[63177,63177]]],[1512545994087,["gengmei_pxf@gengmei123.local",[[1,63171,"，"]],[63171,63171],[63172,63172]]],[1512545997244,["gengmei_pxf@gengmei123.local",[[1,63187,"，"]],[63187,63187],[63188,63188]]],[1512546009694,["gengmei_pxf@gengmei123.local",[[1,63054,"**"]],[63054,63054],[63056,63056]]],[1512546014014,["gengmei_pxf@gengmei123.local",[[1,63060,"**"]],[63060,63060],[63062,63062]]],[1512546018842,["gengmei_pxf@gengmei123.local",[[1,63192,"****"]],[63192,63192],[63196,63196]]],[1512546040459,["gengmei_pxf@gengmei123.local",[[1,63194,"命令模式（）"]],[63194,63194],[63200,63200]]],[1512546050525,["gengmei_pxf@gengmei123.local",[[1,63199,"runnable"]],[63199,63199],[63207,63207]]],[1512546052976,["gengmei_pxf@gengmei123.local",[[-1,63199,"r"]],[63200,63200],[63199,63199]]],[1512546054347,["gengmei_pxf@gengmei123.local",[[1,63199,"R"]],[63199,63199],[63200,63200]]],[1512546059833,["gengmei_pxf@gengmei123.local",[[1,63210,","]],[63210,63210],[63211,63211]]],[1512546062823,["gengmei_pxf@gengmei123.local",[[-1,63210,","]],[63211,63211],[63210,63210]]],[1512546066023,["gengmei_pxf@gengmei123.local",[[1,63210,"，****"]],[63210,63210],[63215,63215]]],[1512546083619,["gengmei_pxf@gengmei123.local",[[1,63213,"原型模式（）"]],[63213,63213],[63219,63219]]],[1512546090075,["gengmei_pxf@gengmei123.local",[[1,63218,"Intent"]],[63218,63218],[63224,63224]]],[1512546093232,["gengmei_pxf@gengmei123.local",[[1,63227,"，"]],[63227,63227],[63228,63228]]],[1512546108008,["gengmei_pxf@gengmei123.local",[[1,63228,"责任链模式（）"]],[63228,63228],[63235,63235]]],[1512546118027,["gengmei_pxf@gengmei123.local",[[1,63234,"事件分发机制"]],[63234,63234],[63240,63240]]],[1512546122313,["gengmei_pxf@gengmei123.local",[[1,63228,"**"]],[63228,63228],[63230,63230]]],[1512546124560,["gengmei_pxf@gengmei123.local",[[1,63243,"**"]],[63243,63243],[63245,63245]]],[1512546138643,["gengmei_pxf@gengmei123.local",[[-1,63060,"**"]],[63060,63062],[63060,63060]]],[1512546142266,["gengmei_pxf@gengmei123.local",[[-1,63190,"**"]],[63192,63192],[63190,63190]]],[1512546144731,["gengmei_pxf@gengmei123.local",[[-1,63204,"**"]],[63206,63206],[63204,63204]]],[1512546147011,["gengmei_pxf@gengmei123.local",[[-1,63205,"**"]],[63206,63207],[63205,63205]]],[1512546149924,["gengmei_pxf@gengmei123.local",[[-1,63217,"**"]],[63218,63219],[63217,63217]]],[1512546152633,["gengmei_pxf@gengmei123.local",[[-1,63218,"**"]],[63219,63220],[63218,63218]]],[1512546161370,["gengmei_pxf@gengmei123.local",[[1,63061,"\n"]],[63061,63061],[63062,63062]]],[1512546170178,["gengmei_pxf@gengmei123.local",[[-1,63060,"，"]],[63061,63061],[63060,63060]]],[1512546172472,["gengmei_pxf@gengmei123.local",[[1,63078,"\n"]],[63078,63078],[63079,63079]]],[1512546174362,["gengmei_pxf@gengmei123.local",[[-1,63079,"，"]],[63079,63080],[63079,63079]]],[1512546178367,["gengmei_pxf@gengmei123.local",[[-1,63104,"，"],[1,63105,"\n"]],[63104,63105],[63105,63105]]],[1512546185761,["gengmei_pxf@gengmei123.local",[[-1,63138,"，"],[1,63139,"\n"]],[63138,63139],[63139,63139]]],[1512546189257,["gengmei_pxf@gengmei123.local",[[-1,63160,"，"],[1,63161,"\n"]],[63160,63161],[63161,63161]]],[1512546191985,["gengmei_pxf@gengmei123.local",[[-1,63173,"，"],[1,63174,"\n"]],[63173,63174],[63174,63174]]],[1512546194945,["gengmei_pxf@gengmei123.local",[[-1,63189,"，"],[1,63190,"\n"]],[63189,63190],[63190,63190]]],[1512546198072,["gengmei_pxf@gengmei123.local",[[-1,63204,"，"],[1,63205,"\n"]],[63204,63205],[63205,63205]]],[1512546200800,["gengmei_pxf@gengmei123.local",[[-1,63217,"，"],[1,63218,"\n"]],[63217,63218],[63218,63218]]],[1512546218704,["gengmei_pxf@gengmei123.local",[[1,63231,"\n"]],[63231,63231],[63232,63232]]],[1512546248794,["gengmei_pxf@gengmei123.local",[[1,63232,"桥接模式bridge（）"]],[63232,63232],[63244,63244]]],[1512546255907,["gengmei_pxf@gengmei123.local",[[1,63243,"listview和"]],[63243,63243],[63252,63252]]],[1512546272921,["gengmei_pxf@gengmei123.local",[[1,63252,"baseAdapter"]],[63252,63252],[63263,63263]]],[1512546275603,["gengmei_pxf@gengmei123.local",[[-1,63252,"b"]],[63253,63253],[63252,63252]]],[1512546289220,["gengmei_pxf@gengmei123.local",[[1,63252,"B"],[1,63290,"\n"]],[63291,63291],[63292,63292]]],[1512546490447,["gengmei_pxf@gengmei123.local",[[1,63060,"（）"]],[63060,63060],[63062,63062]]],[1512546491713,["gengmei_pxf@gengmei123.local",[[1,63061,"application、eventBus"]],[63061,63061],[63081,63081]]],[1512546511500,["gengmei_pxf@gengmei123.local",[[-1,63093,"d"],[1,63094,"AlertD"],[1,63099,"、Glide、OkHttp"]],[63093,63099],[63117,63117]]],[1512546517277,["gengmei_pxf@gengmei123.local",[[1,63090,"创建"]],[63090,63090],[63092,63092]]],[1512546584750,["gengmei_pxf@gengmei123.local",[[1,63121,"\n"]],[63120,63120],[63121,63121]]],[1512546590468,["gengmei_pxf@gengmei123.local",[[1,63121,"装饰模式"]],[63121,63121],[63125,63125]]],[1512546591492,["gengmei_pxf@gengmei123.local",[[1,63125,"（）"]],[63125,63125],[63127,63127]]],[1512546594058,["gengmei_pxf@gengmei123.local",[[-1,63133,"context"]],[63133,63140],[63133,63133]]],[1512546595282,["gengmei_pxf@gengmei123.local",[[1,63126,"context"]],[63126,63126],[63133,63133]]],[1512546596823,["gengmei_pxf@gengmei123.local",[[-1,63140,"，"]],[63141,63141],[63140,63140]]],[1512546638470,["gengmei_pxf@gengmei123.local",[[-1,63192,"动画 Interpolator"],[1,63207,"Volley、属性动画、插值器"]],[63192,63207],[63207,63207]]],[1512546640147,["gengmei_pxf@gengmei123.local",[[1,63192,"动画 Interpolator"],[-1,63192,"Volley、属性动画、插值器"]],[63207,63207],[63192,63207]]],[1512546641733,["gengmei_pxf@gengmei123.local",[[1,63192,"Volley、属性"],[1,63194,"、插值器"]],[63192,63194],[63207,63207]]],[1512546663599,["gengmei_pxf@gengmei123.local",[[1,63160,"Activity和Fr"],[1,63161,"gment生命周期、A"],[-1,63165,"k"],[-1,63170,",a"],[1,63172,"、BaseA"],[-1,63179,"生命周期函数"]],[63160,63185],[63204,63204]]],[1512546666860,["gengmei_pxf@gengmei123.local",[[-1,63191,"、"]],[63192,63192],[63191,63191]]],[1512546668165,["gengmei_pxf@gengmei123.local",[[1,63191,"、"]],[63191,63191],[63192,63192]]],[1512546712583,["gengmei_pxf@gengmei123.local",[[1,63241,"\n"]],[63240,63240],[63241,63241]]],[1512546717513,["gengmei_pxf@gengmei123.local",[[1,63241,"组合模式（）"]],[63241,63241],[63247,63247]]],[1512546719070,["gengmei_pxf@gengmei123.local",[[1,63246,"View、ViewGroup"]],[63246,63246],[63260,63260]]],[1512546747046,["gengmei_pxf@gengmei123.local",[[1,63260,"\n"]],[63260,63260],[63261,63261]]],[1512546748099,["gengmei_pxf@gengmei123.local",[[-1,63260,"\n"]],[63261,63261],[63260,63260]]],[1512546748847,["gengmei_pxf@gengmei123.local",[[1,63262,"\n"]],[63261,63261],[63262,63262]]],[1512546758627,["gengmei_pxf@gengmei123.local",[[1,63262,"观察者模式（）"]],[63262,63262],[63269,63269]]],[1512546770635,["gengmei_pxf@gengmei123.local",[[1,63268,"ListView、RxJava，监听事件"]],[63268,63268],[63288,63288]]],[1512546787009,["gengmei_pxf@gengmei123.local",[[1,63359,"，try-catch语句、有序广播、事件分发机制"]],[63359,63359],[63383,63383]]],[1512546789206,["gengmei_pxf@gengmei123.local",[[-1,63359,"，try-catch语句、有序广播、事件分发机制"]],[63383,63383],[63359,63359]]],[1512546791168,["gengmei_pxf@gengmei123.local",[[1,63353,"try-catch语句、有序广播、"]],[63353,63359],[63376,63376]]],[1512546800960,["gengmei_pxf@gengmei123.local",[[-1,63262,"观察者模式（ListView、RxJava，监听事件）"]],[63262,63289],[63262,63262]]],[1512546801854,["gengmei_pxf@gengmei123.local",[[-1,63262,"\n"]],[63262,63262],[63261,63261]]],[1512546803732,["gengmei_pxf@gengmei123.local",[[1,63121,"\n"]],[63120,63120],[63121,63121]]],[1512546804192,["gengmei_pxf@gengmei123.local",[[1,63121,"观察者模式（ListView、RxJava，监听事件）"]],[63121,63121],[63148,63148]]],[1512546858586,["gengmei_pxf@gengmei123.local",[[1,63410,"\n"]],[63410,63410],[63411,63411]]],[1512546865898,["gengmei_pxf@gengmei123.local",[[1,63411,"适配器模式（）"]],[63411,63411],[63418,63418]]],[1512546866814,["gengmei_pxf@gengmei123.local",[[1,63417,"BaseAdapter类"]],[63417,63417],[63429,63429]]],[1512546885821,["gengmei_pxf@gengmei123.local",[[1,63056,"1."]],[63056,63056],[63058,63058]]],[1512546891449,["gengmei_pxf@gengmei123.local",[[-1,63056,"1."],[1,63058,"\n"]],[63056,63058],[63057,63057]]],[1512546893249,["gengmei_pxf@gengmei123.local",[[-1,63056,"\n"]],[63057,63057],[63056,63056]]],[1512546908140,["gengmei_pxf@gengmei123.local",[[1,63056,"1."]],[63054,63426],[63058,63058]]],[1512546910468,["gengmei_pxf@gengmei123.local",[[1,63085,"2."]],[63085,63085],[63087,63087]]],[1512546912905,["gengmei_pxf@gengmei123.local",[[1,63125,"3."]],[63125,63125],[63127,63127]]],[1512546915515,["gengmei_pxf@gengmei123.local",[[1,63155,"4."]],[63155,63155],[63157,63157]]],[1512546917971,["gengmei_pxf@gengmei123.local",[[1,63171,"5."]],[63171,63171],[63173,63173]]],[1512546920003,["gengmei_pxf@gengmei123.local",[[1,63191,"6."]],[63191,63191],[63193,63193]]],[1512546922842,["gengmei_pxf@gengmei123.local",[[1,63246,"7."]],[63246,63246],[63248,63248]]],[1512546925032,["gengmei_pxf@gengmei123.local",[[1,63283,"8."]],[63283,63283],[63285,63285]]],[1512546928515,["gengmei_pxf@gengmei123.local",[[1,63306,"9."]],[63306,63306],[63308,63308]]],[1512546930556,["gengmei_pxf@gengmei123.local",[[1,63321,"10，"]],[63321,63321],[63324,63324]]],[1512546931165,["gengmei_pxf@gengmei123.local",[[-1,63323,"，"]],[63324,63324],[63323,63323]]],[1512546931550,["gengmei_pxf@gengmei123.local",[[1,63323,"。"]],[63323,63323],[63324,63324]]],[1512546933671,["gengmei_pxf@gengmei123.local",[[-1,63323,"。"]],[63324,63324],[63323,63323]]],[1512546934033,["gengmei_pxf@gengmei123.local",[[1,63323,"。"]],[63323,63323],[63324,63324]]],[1512546934829,["gengmei_pxf@gengmei123.local",[[-1,63323,"。"]],[63324,63324],[63323,63323]]],[1512546935948,["gengmei_pxf@gengmei123.local",[[1,63323,"."]],[63323,63323],[63324,63324]]],[1512546938177,["gengmei_pxf@gengmei123.local",[[1,63340,"11."]],[63340,63340],[63343,63343]]],[1512546940321,["gengmei_pxf@gengmei123.local",[[1,63358,"12."]],[63358,63358],[63361,63361]]],[1512546943100,["gengmei_pxf@gengmei123.local",[[1,63374,"13."]],[63374,63374],[63377,63377]]],[1512546945339,["gengmei_pxf@gengmei123.local",[[1,63408,"14."]],[63408,63408],[63411,63411]]],[1512546947464,["gengmei_pxf@gengmei123.local",[[1,63444,"15."]],[63444,63444],[63447,63447]]],[1512547032445,["gengmei_pxf@gengmei123.local",[[-1,63540,"米那是"]],[63543,63543],[63540,63540]]],[1512547034702,["gengmei_pxf@gengmei123.local",[[1,63540,"miansi"]],[63540,63540],[63546,63546]]],[1512547036324,["gengmei_pxf@gengmei123.local",[[-1,63540,"miansi"]],[63546,63546],[63540,63540]]],[1512547039017,["gengmei_pxf@gengmei123.local",[[1,63540,"面试"]],[63540,63540],[63542,63542]]],[1512547920693,["gengmei_pxf@gengmei123.local",[[1,63494,"混合开发是 Native 和 Web 技术一起用，开发者以 Native 代码为主体，在合适的地方部分使用 Web 技术。比如在 Android 中的 Activity 内放置一个 Webview（一个浏览器引擎，只拥有渲染 HTML，CSS 和执行 JavaScript 的核心功能）。这样，部分用户界面就可以在 WebView 中使用 Web 技术实现。\n\n促使我们在移动开发中使用 Web 技术主要动力在于，相比于 Native 技术，Web 技术具有诸多优势：\n\n* 高效率的界面开发：HTML，CSS，JavaScript 的组合被证明在用户界面开发方面具有很高的效率。\n\n* 跨平台：统一的浏览器内核标准，使得 Web 技术具有跨平台特性。iOS 和 Android 可以使用一套代码。\n\n* 热更新：可越过发布渠道自主更新应用。\n\n这些优势都和开发效率有关。Web 技术具有这些优势的原因是，Web 技术是一个开放标准。基于开放的标准已经发展出来庞大生态，而且这个生态从 PC 时代发展至今已积累多年，开发者可以利用生态中产出的各种成果，从而省去很多重复工作。\n\n在大型移动应用的开发中，项目代码庞杂，通常还需要 iOS，Android，移动 Web 和 桌面 Web 全平台支持。相对于同时开发几个版本，使用混合开发显然可以在代码重用、开发成本和效率方面有很大的优势，在权衡性能体验的前提下，使用混合开发是非常现实的选择。"]],[63494,63494],[64113,64113]]],[1512550023547,["gengmei_pxf@gengmei123.local",[[1,64115,"\n"]],[64113,64113],[64114,64114]]],[1512550023850,["gengmei_pxf@gengmei123.local",[[1,64116,"\n"]],[64114,64114],[64115,64115]]],[1512550029106,["gengmei_pxf@gengmei123.local",[[1,63494,"\n"]],[63493,63493],[63494,63494]]],[1512550032106,["gengmei_pxf@gengmei123.local",[[1,63494,"****"]],[63494,63494],[63498,63498]]],[1512550043804,["gengmei_pxf@gengmei123.local",[[1,63496,"为什么引入"]],[63496,63496],[63501,63501]]],[1512550050816,["gengmei_pxf@gengmei123.local",[[1,63501,"Hybid"]],[63501,63501],[63506,63506]]],[1512550054193,["gengmei_pxf@gengmei123.local",[[-1,63504,"id"]],[63506,63506],[63504,63504]]],[1512550058886,["gengmei_pxf@gengmei123.local",[[1,63504,"ridkai"]],[63504,63504],[63510,63510]]],[1512550059745,["gengmei_pxf@gengmei123.local",[[-1,63507,"kai"]],[63510,63510],[63507,63507]]],[1512550061254,["gengmei_pxf@gengmei123.local",[[1,63507,"开发"]],[63507,63507],[63509,63509]]],[1512550071779,["gengmei_pxf@gengmei123.local",[[1,64133,"****"]],[64133,64133],[64137,64137]]],[1512550076104,["gengmei_pxf@gengmei123.local",[[1,64135,"实现方式"]],[64135,64135],[64139,64139]]],[1512550081520,["gengmei_pxf@gengmei123.local",[[1,64143,"\n"]],[64141,64141],[64142,64142]]],[1512550082022,["gengmei_pxf@gengmei123.local",[[1,64142,"一般来讲，也是我目前知道的两种主流的方式就是\n\n1.  js调用Native中的代码\n2.  Schema：WebView拦截页面跳转\n\n第2种方式实现起来很简单，但是一个致命的问题就是这种交互方式是单向的，Html 5无法实现回调。像云音乐App中这种点击跳转到具体页面的功能，Schema的方式确实可以简单实现，而且也非常适合。如果需求变得复杂，假如Html 5需要获取Native App中的用户信息，那么最好使用js调用的方式。"]],[64142,64142],[64360,64360]]],[1512551107141,["gengmei_pxf@gengmei123.local",[[1,64362,"\n"]],[64360,64360],[64361,64361]]],[1512551108447,["gengmei_pxf@gengmei123.local",[[1,64363,"\n"]],[64361,64361],[64362,64362]]],[1512551109173,["gengmei_pxf@gengmei123.local",[[1,64362,"··"]],[64362,64362],[64364,64364]]],[1512551110113,["gengmei_pxf@gengmei123.local",[[-1,64362,"··"]],[64364,64364],[64362,64362]]],[1512551111684,["gengmei_pxf@gengmei123.local",[[1,64362,"```"]],[64362,64362],[64365,64365]]],[1512551112209,["gengmei_pxf@gengmei123.local",[[1,64367,"\n"]],[64365,64365],[64366,64366]]],[1512551112929,["gengmei_pxf@gengmei123.local",[[1,64368,"\n"]],[64366,64366],[64367,64367]]],[1512551113780,["gengmei_pxf@gengmei123.local",[[1,64367,"```"]],[64367,64367],[64370,64370]]],[1512551116129,["gengmei_pxf@gengmei123.local",[[1,64367,"\n"]],[64366,64366],[64367,64367]]],[1512551116987,["gengmei_pxf@gengmei123.local",[[1,64367,"public final boolean filter(Context context, String url) {\n   mContext = context;\n if (null == mContext || TextUtils.isEmpty(url)) {\n      return true;\n  }\n   //普通url\n  if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n      return dealWithHttp(url);\n  }\n   //更美协议\n  if (url.startsWith(mProtocolName)) {\n      return dealWithProtocol(url);\n  }\n   //系统协议\n  return dealWithSystemProtocol(url); }\n\n/**\n * 普通url处理 * * @param url\n  * @return\n  */ protected boolean dealWithHttp(String url) {\n   if (null != mOnLoadUrlListener && mWhiteList.inWhiteList(url)) {\n      mOnLoadUrlListener.onLoadUrl(url);\n  }\n   return true; }\n\n/**\n * 协议处理 * * @param url\n  * @return\n  */ protected boolean dealWithProtocol(String url) {\n   try {\n      if (mContext instanceof GMActivity) {\n         ((GMActivity) mContext).startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse(url)), 1024);\n  } else if (mContext instanceof Activity) {\n         ((Activity) mContext).startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse(url)), 1024);\n  }\n   } catch (Exception e) {\n      e.printStackTrace();\n  }\n   return true; }\n\n/**\n * 系统协议处理，eg：tel（拨打电话） * @param url\n  * @return\n  */ protected boolean dealWithSystemProtocol(String url){\n   try {\n      if (mContext instanceof GMActivity) {\n         ((GMActivity) mContext).startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse(url)), 1024);\n  } else if (mContext instanceof Activity) {\n         ((Activity) mContext).startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse(url)), 1024);\n  }\n   } catch (Exception e) {\n      e.printStackTrace();\n  }\n   return true; }"]],[64367,64367],[65999,65999]]],[1512551181462,["gengmei_pxf@gengmei123.local",[[1,64362,"\n"]],[64361,64361],[64362,64362]]],[1512551182906,["gengmei_pxf@gengmei123.local",[[1,64362,"tong"]],[64362,64362],[64366,64366]]],[1512551183798,["gengmei_pxf@gengmei123.local",[[-1,64362,"tong"]],[64366,64366],[64362,64362]]],[1512551193837,["gengmei_pxf@gengmei123.local",[[1,64362,"通过shouldOverrideUrlLoading方法拦截url"]],[64362,64362],[64395,64395]]],[1512551626286,["gengmei_pxf@gengmei123.local",[[1,66038,"`WebView.addJavascriptInterface(Object o, String interface)`方法注册可供js调用的Java对象"]],[66038,66038],[66115,66115]]],[1512551628770,["gengmei_pxf@gengmei123.local",[[1,66116,"\n"]],[66115,66115],[66116,66116]]],[1512551628954,["gengmei_pxf@gengmei123.local",[[1,66117,"\n"]],[66116,66116],[66117,66117]]],[1512551638517,["gengmei_pxf@gengmei123.local",[[1,64395,"，"]],[64395,64395],[64396,64396]]],[1512551720476,["gengmei_pxf@gengmei123.local",[[1,64396,"如果host是内定的协议的话"]],[64396,64396],[64410,64410]]],[1512551724369,["gengmei_pxf@gengmei123.local",[[1,64410,"就行"]],[64410,64410],[64412,64412]]],[1512551725467,["gengmei_pxf@gengmei123.local",[[-1,64411,"行"]],[64412,64412],[64411,64411]]],[1512551730442,["gengmei_pxf@gengmei123.local",[[1,64411,"进行"]],[64411,64411],[64413,64413]]],[1512551750923,["gengmei_pxf@gengmei123.local",[[-1,64408,"的话"]],[64410,64410],[64408,64408]]],[1512551754292,["gengmei_pxf@gengmei123.local",[[-1,64409,"进行"]],[64411,64411],[64409,64409]]],[1512551770247,["gengmei_pxf@gengmei123.local",[[1,64409,"打开对应协议的activity，"]],[64409,64409],[64425,64425]]],[1512551773339,["gengmei_pxf@gengmei123.local",[[-1,64424,"，"]],[64425,64425],[64424,64424]]],[1512551782008,["gengmei_pxf@gengmei123.local",[[1,64424,"，如果是"]],[64424,64424],[64428,64428]]],[1512551784712,["gengmei_pxf@gengmei123.local",[[-1,64427,"是"]],[64428,64428],[64427,64427]]],[1512551804215,["gengmei_pxf@gengmei123.local",[[1,64427,"是正常的url的http或者HTTPS"]],[64427,64427],[64446,64446]]],[1512551807439,["gengmei_pxf@gengmei123.local",[[-1,64436,"ttp"]],[64435,64439],[64435,64436]]],[1512551807660,["gengmei_pxf@gengmei123.local",[[1,64436,"'t"]],[64435,64436],[64435,64438]]],[1512551807800,["gengmei_pxf@gengmei123.local",[[1,64438,"'t"]],[64435,64438],[64435,64440]]],[1512551807973,["gengmei_pxf@gengmei123.local",[[-1,64436,"'"],[-1,64438,"'"],[1,64440,"p"]],[64435,64440],[64435,64439]]],[1512551808839,["gengmei_pxf@gengmei123.local",[[-1,64435,"http"],[1,64439,"HTTP"]],[64435,64439],[64439,64439]]],[1512551826011,["gengmei_pxf@gengmei123.local",[[1,64446,"就正常loadurl"]],[64446,64446],[64456,64456]]],[1512551827873,["gengmei_pxf@gengmei123.local",[[-1,64453,"url"]],[64456,64456],[64453,64453]]],[1512551843085,["gengmei_pxf@gengmei123.local",[[1,64453,"Url，否则就是"]],[64453,64453],[64461,64461]]],[1512551855637,["gengmei_pxf@gengmei123.local",[[1,64461,"默认打开系统页面"]],[64461,64461],[64469,64469]]],[1512551900219,["gengmei_pxf@gengmei123.local",[[1,64463,"是系统协议处理，"]],[64463,64463],[64471,64471]]],[1512551902569,["gengmei_pxf@gengmei123.local",[[1,64477,"，"]],[64477,64477],[64478,64478]]],[1512551920379,["gengmei_pxf@gengmei123.local",[[1,64478,"例如调起伯带暗花"]],[64478,64478],[64486,64486]]],[1512551922245,["gengmei_pxf@gengmei123.local",[[-1,64482,"伯带暗花"]],[64486,64486],[64482,64482]]],[1512551928247,["gengmei_pxf@gengmei123.local",[[1,64482,"拨打电话。"]],[64482,64482],[64487,64487]]],[1512551949326,["gengmei_pxf@gengmei123.local",[[1,64361,"*****"]],[64361,64361],[64366,64366]]],[1512551950380,["gengmei_pxf@gengmei123.local",[[-1,64365,"*"]],[64366,64366],[64365,64365]]],[1512551951923,["gengmei_pxf@gengmei123.local",[[1,64363,"Schema的方式"]],[64363,64363],[64372,64372]]],[1512551965146,["gengmei_pxf@gengmei123.local",[[1,64361,"\n"]],[64360,64360],[64361,64361]]],[1512551989821,["gengmei_pxf@gengmei123.local",[[-1,66144,"`WebView.addJavascriptInterface(Object o, String interface)`方法注册可供js调用的Java对象"]],[66144,66221],[66144,66144]]],[1512551990930,["gengmei_pxf@gengmei123.local",[[-1,66146,"\n"]],[66144,66144],[66143,66143]]],[1512551991922,["gengmei_pxf@gengmei123.local",[[-1,66142,"`"]],[66143,66143],[66142,66142]]],[1512551994942,["gengmei_pxf@gengmei123.local",[[1,66142,"`"]],[66142,66142],[66143,66143]]],[1512552000745,["gengmei_pxf@gengmei123.local",[[1,64362,"\n"]],[64360,64360],[64361,64361]]],[1512552000921,["gengmei_pxf@gengmei123.local",[[1,64363,"\n"]],[64361,64361],[64362,64362]]],[1512552001899,["gengmei_pxf@gengmei123.local",[[1,64362,"`WebView.addJavascriptInterface(Object o, String interface)`方法注册可供js调用的Java对象"]],[64362,64362],[64439,64439]]],[1512552011448,["gengmei_pxf@gengmei123.local",[[1,64362,"\n"]],[64361,64361],[64362,64362]]],[1512552012515,["gengmei_pxf@gengmei123.local",[[1,64362,"****"]],[64362,64362],[64366,64366]]],[1512552013681,["gengmei_pxf@gengmei123.local",[[1,64365,"js调用的方式"]],[64366,64366],[64372,64372]]],[1512552014413,["gengmei_pxf@gengmei123.local",[[-1,64365,"js调用的方式"]],[64372,64372],[64366,64366]]],[1512552015458,["gengmei_pxf@gengmei123.local",[[1,64364,"js调用的方式"]],[64364,64364],[64371,64371]]],[1512552021200,["gengmei_pxf@gengmei123.local",[[1,64453,"\n"]],[64451,64451],[64452,64452]]],[1512552021808,["gengmei_pxf@gengmei123.local",[[1,64454,"\n"]],[64452,64452],[64453,64453]]],[1512552137558,["gengmei_pxf@gengmei123.local",[[1,64453,"·"]],[64453,64453],[64454,64454]]],[1512552138818,["gengmei_pxf@gengmei123.local",[[-1,64453,"·"]],[64454,64454],[64453,64453]]],[1512552143293,["gengmei_pxf@gengmei123.local",[[1,64453,"`addJavascriptInterface(mJsBridge, mWindowClientName);`"]],[64453,64453],[64508,64508]]],[1512552146610,["gengmei_pxf@gengmei123.local",[[1,64510,"\n"]],[64508,64508],[64509,64509]]],[1512552189466,["gengmei_pxf@gengmei123.local",[[1,64510,"zai"]],[64510,64510],[64513,64513]]],[1512552190473,["gengmei_pxf@gengmei123.local",[[-1,64510,"zai"]],[64513,64513],[64510,64510]]],[1512552202229,["gengmei_pxf@gengmei123.local",[[1,64510,"在mJsBridge对象中封装一些"]],[64510,64510],[64527,64527]]],[1512552206147,["gengmei_pxf@gengmei123.local",[[1,64527,"共js"]],[64527,64527],[64530,64530]]],[1512552208935,["gengmei_pxf@gengmei123.local",[[-1,64527,"共"]],[64528,64528],[64527,64527]]],[1512552211069,["gengmei_pxf@gengmei123.local",[[1,64527,"供"]],[64527,64527],[64528,64528]]],[1512552262801,["gengmei_pxf@gengmei123.local",[[1,64530,"调用的Java方法，例如有loading框显示与隐藏，页面关闭的统一"]],[64530,64530],[64564,64564]]],[1512552296315,["gengmei_pxf@gengmei123.local",[[1,64564,"动画，dialog的显示，toast的显示，"]],[64564,64564],[64586,64586]]],[1512552361205,["gengmei_pxf@gengmei123.local",[[1,64586,"调用native打开相册，打开通讯录，打电话，发短信等"]],[64586,64586],[64613,64613]]],[1512552369135,["gengmei_pxf@gengmei123.local",[[1,64594,"系统的"]],[64594,64594],[64597,64597]]],[1512552404270,["gengmei_pxf@gengmei123.local",[[1,64617,"\n"]],[64616,64616],[64617,64617]]],[1512552412500,["gengmei_pxf@gengmei123.local",[[-1,66401,"\n"]],[66400,66400],[66399,66399]]],[1512552414982,["gengmei_pxf@gengmei123.local",[[1,66423,"\n"]],[66421,66421],[66422,66422]]],[1512555713979,["gengmei_pxf@gengmei123.local",[[1,64362,"\n"]],[64360,64360],[64361,64361]]],[1512555714145,["gengmei_pxf@gengmei123.local",[[1,64363,"\n"]],[64361,64361],[64362,64362]]],[1512555714984,["gengmei_pxf@gengmei123.local",[[1,64362,"Android API level 16以及之前的版本存在远程代码执行安全漏洞，该漏洞源于程序没有正确限制使用WebView.addJavascriptInterface方法，远程攻击者可通过使用Java Reflection API利用该漏洞执行任意Java对象的方法，简单的说就是通过addJavascriptInterface给WebView加入一个JavaScript桥接接口，JavaScript通过调用这个接口可以直接操作本地的JAVA接口。该漏洞最早公布于CVE-2012-6636【1】，其描述了WebView中addJavascriptInterface API导致的远程代码执行安全漏洞。"]],[64362,64362],[64666,64666]]],[1512555730789,["gengmei_pxf@gengmei123.local",[[1,64361,"****"]],[64361,64361],[64365,64365]]],[1512555732410,["gengmei_pxf@gengmei123.local",[[1,64363,"安全漏洞"]],[64363,64363],[64367,64367]]],[1512555734822,["gengmei_pxf@gengmei123.local",[[1,64363,"JS"]],[64363,64363],[64365,64365]]],[1512555740393,["gengmei_pxf@gengmei123.local",[[1,64361,"\n"]],[64361,64361],[64362,64362]]],[1512555777886,["gengmei_pxf@gengmei123.local",[[1,64364,"【"]],[64364,64364],[64365,64365]]],[1512555778624,["gengmei_pxf@gengmei123.local",[[-1,64364,"【"]],[64365,64365],[64364,64364]]],[1512555779483,["gengmei_pxf@gengmei123.local",[[1,64364,"["]],[64364,64364],[64365,64365]]],[1512555783264,["gengmei_pxf@gengmei123.local",[[1,64371,"]()"]],[64371,64371],[64374,64374]]],[1512555784554,["gengmei_pxf@gengmei123.local",[[1,64373,"http://jaq.alibaba.com/blog.htm?id=48"]],[64373,64373],[64410,64410]]],[1512556242164,["gengmei_pxf@gengmei123.local",[[1,66781,"基本思想：选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分。\n\n![](http://img.my.csdn.net/uploads/201209/07/1347009479_6587.jpg)\n\n**[java]** [view plain](http://blog.csdn.net/qy1387/article/details/7752973# \"view plain\") [copy](http://blog.csdn.net/qy1387/article/details/7752973# \"copy\") [print](http://blog.csdn.net/qy1387/article/details/7752973# \"print\")[?](http://blog.csdn.net/qy1387/article/details/7752973# \"?\")\n\n1.  public static void quickSort(int[] array) {  \n2.  _quickSort(array, 0, array.length - 1);  \n3.  System.out.println(Arrays.toString(array) + \" quickSort\");  \n4.  }  \n\n7.  private static int getMiddle(int[] list, int low, int high) {  \n8.  int tmp = list[low];    //数组的第一个作为中轴  \n9.  while (low < high) {  \n10.  while (low < high && list[high] >= tmp) {  \n11.  high--;  \n12.  }  \n\n15.  list[low] = list[high];   //比中轴小的记录移到低端  \n16.  while (low < high && list[low] <= tmp) {  \n17.  low++;  \n18.  }  \n\n21.  list[high] = list[low];   //比中轴大的记录移到高端  \n22.  }  \n23.  list[low] = tmp;              //中轴记录到尾  \n24.  return low;                  //返回中轴的位置  \n25.  }  \n\n28.  private static void _quickSort(int[] list, int low, int high) {  \n29.  if (low < high) {  \n30.  int middle = getMiddle(list, low, high);  //将list数组进行一分为二  \n31.  _quickSort(list, low, middle - 1);      //对低字表进行递归排序  \n32.  _quickSort(list, middle + 1, high);      //对高字表进行递归排序  \n33.  }  \n34.  }"]],[66781,66781],[68208,68208]]],[1512556250651,["gengmei_pxf@gengmei123.local",[[-1,66971," "],[1,66972," "],[-1,67051," "],[1,67052," "],[-1,67119," "],[1,67120," "],[-1,67252,"1.  public static void quickSort(int[] array) {  \n2.  _quickSort(array, 0, array.length - 1);  \n3.  System.out.println(Arrays.toString(array) + \" quickSort\");  \n4.  }  \n\n7.  private static int getMiddle(int[] list, int low, int high) {  \n8.  int tmp = list[low];    //数组的第一个作为中轴  \n9.  while (low < high) {  \n10.  while (low < high && list[high] >= tmp) {  \n11.  high--;  \n12.  }  \n\n15.  list[low] = list[high];   //比中轴小的记录移到低端  \n16.  while (low < high && list[low] <= tmp) {  \n17.  low++;  \n18.  }  \n\n21.  list[high] = list[low];   //比中轴大的记录移到高端  \n22.  }  \n23.  list[low] = tmp;              //中轴记录到尾  \n24.  return low;                  //返回中轴的位置  \n25.  }  \n\n28.  private static void _quickSort(int[] list, int low, int high) {  \n29.  if (low < high) {  \n30.  int middle = getMiddle(list, low, high);  //将list数组进行一分为二  \n31.  _quickSort(list, low, middle - 1);      //对低字表进行递归排序  \n32.  _quickSort(list, middle + 1, high);      //对高字表进行递归排序  \n33.  }  \n34.  }"]],[67252,68208],[67252,67252]]],[1512556266792,["gengmei_pxf@gengmei123.local",[[1,67252,"基本思想：选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分。\n\n![](http://img.my.csdn.net/uploads/201209/07/1347009479_6587.jpg)\n\n**[java]** [view plain](http://blog.csdn.net/qy1387/article/details/7752973# \"view plain\") [copy](http://blog.csdn.net/qy1387/article/details/7752973# \"copy\") [print](http://blog.csdn.net/qy1387/article/details/7752973# \"print\")[?](http://blog.csdn.net/qy1387/article/details/7752973# \"?\")\n\n1.  public static void quickSort(int[] array) {  \n2.  _quickSort(array, 0, array.length - 1);  \n3.  System.out.println(Arrays.toString(array) + \" quickSort\");  \n4.  }  \n\n7.  private static int getMiddle(int[] list, int low, int high) {  \n8.  int tmp = list[low];    //数组的第一个作为中轴  \n9.  while (low < high) {  \n10.  while (low < high && list[high] >= tmp) {  \n11.  high--;  \n12.  }  \n\n15.  list[low] = list[high];   //比中轴小的记录移到低端  \n16.  while (low < high && list[low] <= tmp) {  \n17.  low++;  \n18.  }  \n\n21.  list[high] = list[low];   //比中轴大的记录移到高端  \n22.  }  \n23.  list[low] = tmp;              //中轴记录到尾  \n24.  return low;                  //返回中轴的位置  \n25.  }  \n\n28.  private static void _quickSort(int[] list, int low, int high) {  \n29.  if (low < high) {  \n30.  int middle = getMiddle(list, low, high);  //将list数组进行一分为二  \n31.  _quickSort(list, low, middle - 1);      //对低字表进行递归排序  \n32.  _quickSort(list, middle + 1, high);      //对高字表进行递归排序  \n33.  }  \n34.  }"]],[67252,67252],[68679,68679]]],[1512556269770,["gengmei_pxf@gengmei123.local",[[-1,67252,"基本思想：选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分。\n\n![](http://img.my.csdn.net/uploads/201209/07/1347009479_6587.jpg)\n\n**[java]** [view plain](http://blog.csdn.net/qy1387/article/details/7752973# \"view plain\") [copy](http://blog.csdn.net/qy1387/article/details/7752973# \"copy\") [print](http://blog.csdn.net/qy1387/article/details/7752973# \"print\")[?](http://blog.csdn.net/qy1387/article/details/7752973# \"?\")\n\n1.  public static void quickSort(int[] array) {  \n2.  _quickSort(array, 0, array.length - 1);  \n3.  System.out.println(Arrays.toString(array) + \" quickSort\");  \n4.  }  \n\n7.  private static int getMiddle(int[] list, int low, int high) {  \n8.  int tmp = list[low];    //数组的第一个作为中轴  \n9.  while (low < high) {  \n10.  while (low < high && list[high] >= tmp) {  \n11.  high--;  \n12.  }  \n\n15.  list[low] = list[high];   //比中轴小的记录移到低端  \n16.  while (low < high && list[low] <= tmp) {  \n17.  low++;  \n18.  }  \n\n21.  list[high] = list[low];   //比中轴大的记录移到高端  \n22.  }  \n23.  list[low] = tmp;              //中轴记录到尾  \n24.  return low;                  //返回中轴的位置  \n25.  }  \n\n28.  private static void _quickSort(int[] list, int low, int high) {  \n29.  if (low < high) {  \n30.  int middle = getMiddle(list, low, high);  //将list数组进行一分为二  \n31.  _quickSort(list, low, middle - 1);      //对低字表进行递归排序  \n32.  _quickSort(list, middle + 1, high);      //对高字表进行递归排序  \n33.  }  \n34.  }"]],[68679,68679],[67252,67252]]],[1512556290355,["gengmei_pxf@gengmei123.local",[[1,67252,"public static void quickSort(int[] array) {\n    _quickSort(array, 0, array.length - 1);\n    System.out.println(Arrays.toString(array) + \" quickSort\");\n}\n\n\nprivate static int getMiddle(int[] list, int low, int high) {\n    int tmp = list[low];    //数组的第一个作为中轴\n    while (low < high) {\n        while (low < high && list[high] >= tmp) {\n            high--;\n        }\n\n\n        list[low] = list[high];   //比中轴小的记录移到低端\n        while (low < high && list[low] <= tmp) {\n            low++;\n        }\n\n\n        list[high] = list[low];   //比中轴大的记录移到高端\n    }\n    list[low] = tmp;              //中轴记录到尾\n    return low;                  //返回中轴的位置\n}\n\n\nprivate static void _quickSort(int[] list, int low, int high) {\n    if (low < high) {\n        int middle = getMiddle(list, low, high);  //将list数组进行一分为二\n        _quickSort(list, low, middle - 1);      //对低字表进行递归排序\n        _quickSort(list, middle + 1, high);      //对高字表进行递归排序\n    }\n}"]],[67252,67252],[68171,68171]]],[1512556304355,["gengmei_pxf@gengmei123.local",[[-1,66961,"**[java]** [view plain]"],[-1,67296,"   "],[1,67299,"   "],[-1,67340,"   "],[1,67343,"   "],[-1,67469,"   "],[1,67472,"   "],[-1,67494,"   "],[1,67497,"   "],[-1,67510,"   "],[1,67513,"   "],[-1,67535,"       "],[1,67542,"       "],[-1,67585,"           "],[1,67596,"           "],[-1,67605,"       "],[1,67612,"       "],[-1,67617,"       "],[1,67624,"       "],[-1,67649," "],[1,67650," "],[-1,67665,"       "],[1,67672,"       "],[-1,67714,"           "],[1,67725,"           "],[-1,67733,"       "],[1,67740,"       "],[-1,67745,"       "],[1,67752,"       "],[-1,67777," "],[1,67778," "],[-1,67793,"    }\n   "],[1,67802,"    }\n   "],[-1,67820,"             "],[1,67833,"             "],[-1,67842,"   "],[1,67845,"   "],[-1,67858,"               "],[1,67873,"               "],[-1,67953,"   "],[1,67956,"   "],[-1,67975,"       "],[1,67982,"       "],[-1,68024," "],[1,68025," "],[-1,68041,"       "],[1,68048,"       "],[-1,68084,"     "],[1,68089,"     "],[-1,68102,"       "],[1,68109,"       "],[-1,68146,"   "],[1,68149,"   "],[-1,68164,"   "],[1,68167,"   "]],[66961,66984],[66961,66961]]],[1512556312068,["gengmei_pxf@gengmei123.local",[[1,66961,"**[java]** [view plain]"],[1,67273,"   "],[-1,67273,"   "],[1,67317,"   "],[-1,67317,"   "],[1,67446,"   "],[-1,67446,"   "],[1,67471,"   "],[-1,67471,"   "],[1,67487,"   "],[-1,67487,"   "],[1,67512,"       "],[-1,67512,"       "],[1,67562,"           "],[-1,67562,"           "],[1,67582,"       "],[-1,67582,"       "],[1,67594,"       "],[-1,67594,"       "],[1,67626," "],[-1,67626," "],[1,67642,"       "],[-1,67642,"       "],[1,67691,"           "],[-1,67691,"           "],[1,67710,"       "],[-1,67710,"       "],[1,67722,"       "],[-1,67722,"       "],[1,67754," "],[-1,67754," "],[1,67770,"    }\n   "],[-1,67770,"    }\n   "],[1,67797,"             "],[-1,67797,"             "],[1,67819,"   "],[-1,67819,"   "],[1,67835,"               "],[-1,67835,"               "],[1,67930,"   "],[-1,67930,"   "],[1,67952,"       "],[-1,67952,"       "],[1,68001," "],[-1,68001," "],[1,68018,"       "],[-1,68018,"       "],[1,68061,"     "],[-1,68061,"     "],[1,68079,"       "],[-1,68079,"       "],[1,68123,"   "],[-1,68123,"   "],[1,68141,"   "],[-1,68141,"   "]],[66961,66961],[66961,66984]]],[1512556317798,["gengmei_pxf@gengmei123.local",[[-1,66961,"**[java]** [view plain](http://blog.csdn.net/qy1387/article/details/7752973# \"view plain\") [copy](http://blog.csdn.net/qy1387/article/details/7752973# \"copy\") [print](http://blog.csdn.net/qy1387/article/details/7752973# \"print\")[?](http://blog.csdn.net/qy1387/article/details/7752973# \"?\")"],[-1,67296,"   "],[1,67299,"   "],[-1,67340,"   "],[1,67343,"   "],[-1,67469,"   "],[1,67472,"   "],[-1,67494,"   "],[1,67497,"   "],[-1,67510,"   "],[1,67513,"   "],[-1,67535,"       "],[1,67542,"       "],[-1,67585,"           "],[1,67596,"           "],[-1,67605,"       "],[1,67612,"       "],[-1,67617,"       "],[1,67624,"       "],[-1,67649," "],[1,67650," "],[-1,67665,"       "],[1,67672,"       "],[-1,67714,"           "],[1,67725,"           "],[-1,67733,"       "],[1,67740,"       "],[-1,67745,"       "],[1,67752,"       "],[-1,67777," "],[1,67778," "],[-1,67793,"    }\n   "],[1,67802,"    }\n   "],[-1,67820,"             "],[1,67833,"             "],[-1,67842,"   "],[1,67845,"   "],[-1,67858,"               "],[1,67873,"               "],[-1,67953,"   "],[1,67956,"   "],[-1,67975,"       "],[1,67982,"       "],[-1,68024," "],[1,68025," "],[-1,68041,"       "],[1,68048,"       "],[-1,68084,"     "],[1,68089,"     "],[-1,68102,"       "],[1,68109,"       "],[-1,68146,"   "],[1,68149,"   "],[-1,68164,"   "],[1,68167,"   "]],[66961,67250],[66961,66961]]],[1512556319423,["gengmei_pxf@gengmei123.local",[[-1,66962,"\n"]],[66961,66961],[66960,66960]]],[1512556320095,["gengmei_pxf@gengmei123.local",[[-1,66961,"\n"]],[66960,66960],[66959,66959]]],[1512556322159,["gengmei_pxf@gengmei123.local",[[-1,67115,"\n"]],[67115,67115],[67114,67114]]],[1512556322933,["gengmei_pxf@gengmei123.local",[[-1,67114,"\n"]],[67114,67114],[67113,67113]]],[1512556324855,["gengmei_pxf@gengmei123.local",[[-1,67323,"\n"]],[67323,67323],[67322,67322]]],[1512556325311,["gengmei_pxf@gengmei123.local",[[-1,67322,"\n"]],[67322,67322],[67321,67321]]],[1512556335503,["gengmei_pxf@gengmei123.local",[[1,66960,"```"]],[66960,66960],[66963,66963]]],[1512556337605,["gengmei_pxf@gengmei123.local",[[1,66960,"\n"]],[66959,66959],[66960,66960]]],[1512556340421,["gengmei_pxf@gengmei123.local",[[1,67881,"\n"]],[67880,67880],[67881,67881]]],[1512556340637,["gengmei_pxf@gengmei123.local",[[1,67882,"\n"]],[67881,67881],[67882,67882]]],[1512556342224,["gengmei_pxf@gengmei123.local",[[1,67881,"```"]],[67881,67881],[67884,67884]]],[1512556372772,["gengmei_pxf@gengmei123.local",[[-1,67453,"\n"]],[67453,67453],[67452,67452]]],[1512556373284,["gengmei_pxf@gengmei123.local",[[-1,67452,"\n"]],[67452,67452],[67451,67451]]],[1512556376580,["gengmei_pxf@gengmei123.local",[[-1,67595,"\n"]],[67595,67595],[67594,67594]]],[1512556853895,["gengmei_pxf@gengmei123.local",[[1,66961,"\n"]],[66960,66960],[66961,66961]]],[1512556854324,["gengmei_pxf@gengmei123.local",[[1,66962,"\n"]],[66961,66961],[66962,66962]]],[1512556856033,["gengmei_pxf@gengmei123.local",[[1,66961,"！"]],[66961,66961],[66962,66962]]],[1512556856959,["gengmei_pxf@gengmei123.local",[[-1,66961,"！"]],[66962,66962],[66961,66961]]],[1512556859408,["gengmei_pxf@gengmei123.local",[[1,66961,"![]"]],[66961,66961],[66964,66964]]],[1512556860655,["gengmei_pxf@gengmei123.local",[[1,66964,"()"]],[66964,66964],[66966,66966]]],[1512556861711,["gengmei_pxf@gengmei123.local",[[1,66965,"http://ou21vt4uz.bkt.clouddn.com/qickSort.png"]],[66965,66965],[67010,67010]]]]],["7c13d2be-f05c-4926-8b8f-478897077f55",1512615673389,"# JAVA\n\n## 一. 类的加载过程，Person person = new Person();为例进行说明。\n\n1).因为new用到了Person.class，所以会先找到Person.class文件，并加载到内存中;\n\n2).执行该类中的static代码块，如果有的话，给Person.class类进行初始化;\n\n3).在堆内存中开辟空间分配内存地址;\n\n4).在堆内存中建立对象的特有属性，并进行默认初始化;\n\n5).对属性进行显示初始化;\n\n6).对对象进行构造代码块初始化;\n\n7).对对象进行与之对应的构造函数进行初始化;\n\n8).将内存地址付给栈内存中的p变量\n\n## 二. JVM相关知识，GC机制。\n\n**JVM基本构成**\n\n![](http://upload-images.jianshu.io/upload_images/4642697-bbcb5924cdaf30f8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/473)\n\n从上图可知，JVM主要包括四个部分：\n\n    1.类加载器（ClassLoader）:在JVM启动时或者在类运行时将需要的class加载到JVM中。（下图表示了从java源文件到JVM的整个过程，可配合理解。 \n\n![](http://upload-images.jianshu.io/upload_images/4642697-1cf5f815751beeab.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400)\n\n    2.执行引擎：负责执行class文件中包含的字节码指令；\n\n    3.内存区（也叫运行时数据区）：是在JVM运行的时候操作所分配的内存区。运行时内存区主要可以划分为5个区域，如图：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-160b9ba3bfeaf8f5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/376)\n\n*   方法区(Method Area)：用于存储类结构信息的地方，包括常量池、静态变量、构造函数等。虽然JVM规范把方法区描述为堆的一个逻辑部分， 但它却有个别名non-heap（非堆），所以大家不要搞混淆了。方法区还包含一个运行时常量池。\n\n*   java堆(Heap)：存储java实例或者对象的地方。这块是GC的主要区域。从存储的内容我们可以很容易知道，方法区和堆是被所有java线程共享的。\n\n*   java栈(Stack)：java栈总是和线程关联在一起，每当创建一个线程时，JVM就会为这个线程创建一个对应的java栈。在这个java栈中又会包含多个栈帧，每运行一个方法就创建一个栈帧，用于存储局部变量表、操作栈、方法返回值等。每一个方法从调用直至执行完成的过程，就对应一个栈帧在java栈中入栈到出栈的过程。所以java栈是现成私有的。\n\n*   程序计数器(PC Register)：用于保存当前线程执行的内存地址。由于JVM程序是多线程执行的（线程轮流切换），所以为了保证线程切换回来后，还能恢复到原先状态，就需要一个独立的计数器，记录之前中断的地方，可见程序计数器也是线程私有的。\n\n*   本地方法栈(Native Method Stack)：和java栈的作用差不多，只不过是为JVM使用到的native方法服务的。\n\n        4.本地方法接口：主要是调用C或C++实现的本地方法及返回结果。\n\n**GC机制**\n\n    垃圾收集器一般必须完成两件事：检测出垃圾；回收垃圾。怎么检测出垃圾？一般有以下几种方法：\n\n**_引用计数法：_**\n\n    给一个对象添加引用计数器，每当有个地方引用它，计数器就加1；引用失效就减1。好了，问题来了，如果我有两个对象A和B，互相引用，除此之外，没有其他任何对象引用它们，实际上这两个对象已经无法访问，即是我们说的垃圾对象。但是互相引用，计数不为0，导致无法回收，所以还有另一种方法：\n\n**_可达性分析算法：_**\n\n    以根集对象为起始点进行搜索，如果有对象不可达的话，即是垃圾对象。这里的根集一般包括java栈中引用的对象、方法区常良池中引用的对象、本地方法中引用的对象等。\n\n    总之，JVM在做垃圾回收的时候，会检查堆中的所有对象是否会被这些根集对象引用，不能够被引用的对象就会被垃圾收集器回收。一般回收算法也有如下几种：\n\n1).标记-清除（Mark-sweep）\n\n2).复制（Copying\n\n3).标记-整理（Mark-Compact）\n\n4).分代收集算法\n\n具体的解释可以参考本篇文章[还不点我?](https://link.jianshu.com?t=http://blog.csdn.net/tonytfjing/article/details/44278233)\n\n## 三. 类的加载器，双亲机制，Android的类加载器。\n\n**类的加载器**\n\n    大家都知道，当我们写好一个Java程序之后，不是管是CS还是BS应用，都是由若干个.class文件组织而成的一个完整的Java应用程序，当程序在运行时，即会调用该程序的一个入口函数来调用系统的相关功能，而这些功能都被封装在不同的class文件当中，所以经常要从这个class文件中要调用另外一个class文件中的方法，如果另外一个文件不存在的，则会引发系统异常。而程序在启动的时候，并不会一次性加载程序所要用的所有class文件，而是根据程序的需要，通过Java的类加载机制（ClassLoader）来动态加载某个class文件到内存当中的，从而只有class文件被载入到了内存之后，才能被其它class所引用。所以ClassLoader就是用来动态加载class文件到内存当中用的。\n\n**双亲机制**\n\n**_1、原理介绍_**\n\n    ClassLoader使用的是双亲委托模型来搜索类的，每个ClassLoader实例都有一个父类加载器的引用（不是继承的关系，是一个包含的关系），虚拟机内置的类加载器（Bootstrap ClassLoader）本身没有父类加载器，但可以用作其它ClassLoader实例的的父类加载器。当一个ClassLoader实例需要加载某个类时，它会试图亲自搜索某个类之前，先把这个任务委托给它的父类加载器，这个过程是由上至下依次检查的，首先由最顶层的类加载器Bootstrap ClassLoader试图加载，如果没加载到，则把任务转交给Extension ClassLoader试图加载，如果也没加载到，则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常。否则将这个找到的类生成一个类的定义，并将它加载到内存当中，最后返回这个类在内存中的Class实例对象。\n\n**_2、为什么要使用双亲委托这种模型呢？_**\n\n    因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。\n\n**_3、但是JVM在搜索类的时候，又是如何判定两个class是相同的呢？_**\n\n    JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。比如网络上的一个Java类org.classloader.simple.NetClassLoaderSimple，javac编译之后生成字节码文件NetClassLoaderSimple.class，ClassLoaderA和ClassLoaderB这两个类加载器并读取了NetClassLoaderSimple.class文件，并分别定义出了java.lang.Class实例来表示这个类，对于JVM来说，它们是两个不同的实例对象，但它们确实是同一份字节码文件，如果试图将这个Class实例生成具体的对象进行转换时，就会抛运行时异常java.lang.ClassCaseException，提示这是两个不同的类型。\n\n**Android类加载器**\n\n    对于Android而言，最终的apk文件包含的是dex类型的文件，dex文件是将class文件重新打包，打包的规则又不是简单地压缩，而是完全对class文件内部的各种函数表，变量表进行优化，产生一个新的文件，即dex文件。因此加载这种特殊的Class文件就需要特殊的类加载器DexClassLoader。\n\n## 四. 集合框架，list，map，set都有哪些具体的实现类，区别都是什么?\n\n![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：了对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**===****》****TreeSet****两种排序方式：**两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n## 五. concurrentHashmap原理，原子类。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大.\n\n## 六. volatile原理\n\n    在《Java并发编程：核心理论》一文中，我们已经提到过可见性、有序性及原子性问题，通常情况下我们可以通过Synchronized关键字来解决这些个问题，不过如果对Synchronized原理有了解的话，应该知道Synchronized是一个比较重量级的操作，对系统的性能有比较大的影响，所以，如果有其他解决方案，我们通常都避免使用Synchronized来解决问题。而volatile关键字就是Java中提供的另一种解决可见性和有序性问题的方案。对于原子性，需要强调一点，也是大家容易误解的一点：对volatile变量的单次读/写操作可以保证原子性的，如long和double类型变量，但是并不能保证i++这种操作的原子性，因为本质上i++是读、写两次操作。\n\n参考文章[插好眼了等传送](https://link.jianshu.com?t=https://www.cnblogs.com/paddix/p/5428507.html)\n\n## 七. 多线程的使用场景\n\n使用多线程就一定效率高吗？ 有时候使用多线程并不是为了提高效率，而是使得CPU能够同时处理多个事件。\n\n1).为了不阻塞主线程,启动其他线程来做好事的事情,比如APP中耗时操作都不在UI中做.\n\n2).实现更快的应用程序,即主线程专门监听用户请求,子线程用来处理用户请求,以获得大的吞吐量.感觉这种情况下，多线程的效率未必高。 这种情况下的多线程是为了不必等待， 可以并行处理多条数据。\n\n比如JavaWeb的就是主线程专门监听用户的HTTP请求，然后启动子线程去处理用户的HTTP请求。\n\n3).某种虽然优先级很低的服务，但是却要不定时去做。\n\n比如Jvm的垃圾回收。\n\n4.)某种任务，虽然耗时，但是不耗CPU的操作时，开启多个线程，效率会有显著提高。\n\n比如读取文件，然后处理。 磁盘IO是个很耗费时间，但是不耗CPU计算的工作。 所以可以一个线程读取数据，一个线程处理数据。肯定比一个线程读取数据，然后处理效率高。 因为两个线程的时候充分利用了CPU等待磁盘IO的空闲时间。\n\n## 八. JAVA常量池\n\n**_Interger中的128(-128~127)_**\n\na.当数值范围为-128~127时：如果两个new出来Integer对象，即使值相同，通过“==”比较结果为false，但两个对象直接赋值，则通过“==”比较结果为“true，这一点与String非常相似。\n\nb.当数值不在-128~127时，无论通过哪种方式，即使两个对象的值相等，通过“==”比较，其结果为false；\n\nc.当一个Integer对象直接与一个int基本数据类型通过“==”比较，其结果与第一点相同；\n\nd.Integer对象的hash值为数值本身；\n\n**_为什么是-128-127?_**\n\n    在Integer类中有一个静态内部类IntegerCache，在IntegerCache类中有一个Integer数组，用以缓存当数值范围为-128~127时的Integer对象。\n\n## 九. 简单介绍一下java中的泛型，泛型擦除以及相关的概念。\n\n    泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。 Java语言引入泛型的好处是安全简单。\n\n    在Java SE 1.5之前，没有泛型的情况的下，通过对类型Object的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是一个安全隐患。\n\n    泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，提高代码的重用率。\n\n1、泛型的类型参数只能是类类型（包括自定义类），不能是简单类型。\n\n2、同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的。\n\n3、泛型的类型参数可以有多个。\n\n4、泛型的参数类型可以使用extends语句，例如<T extends superclass>。习惯上称为“有界类型”。\n\n5、泛型的参数类型还可以是通配符类型。例如Class<?> classType = Class.forName(\"java.lang.String\");\n\n**泛型擦除以及相关的概念**\n\n    Java中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会在编译器在编译的时候去掉。这个过程就称为类型擦除。\n\n**类型擦除引起的问题及解决方法**\n\n1、先检查，在编译，以及检查编译的对象和引用传递的问题\n\n2、自动类型转换\n\n3、类型擦除与多态的冲突和解决方法\n\n4、泛型类型变量不能是基本数据类型\n\n5、运行时类型查询\n\n6、异常中使用泛型的问题\n\n7、数组（这个不属于类型擦除引起的问题）\n\n9、类型擦除后的冲突\n\n10、泛型在静态方法和静态类中的问题\n\n# Android\n\n## 一. Handler机制\n\n    Android 的消息机制也就是 handler 机制,创建 handler 的时候会创建一个 looper ( 通过 looper.prepare() 来创建 ),looper 一般为主线程 looper.\n\n    handler 通过 send 发送消息 (sendMessage) ,当然 post 一系列方法最终也是通过 send 来实现的,在 send 方法中handler 会通过 enqueueMessage() 方法中的 enqueueMessage(msg,millis )向消息队列 MessageQueue 插入一条消息,同时会把本身的 handler 通过 msg.target = this 传入.\n\n    Looper 是一个死循环,不断的读取MessageQueue中的消息,loop 方法会调用 MessageQueue 的 next 方法来获取新的消息,next 操作是一个阻塞操作,当没有消息的时候 next 方法会一直阻塞,进而导致 loop 一直阻塞,当有消息的时候,Looper 就会处理消息 Looper 收到消息之后就开始处理消息: msg.target.dispatchMessage(msg),当然这里的 msg.target 就是上面传过来的发送这条消息的 handler 对象,这样 handler 发送的消息最终又交给他的dispatchMessage方法来处理了,这里不同的是,handler 的 dispatchMessage 方法是在创建 Handler时所使用的 Looper 中执行的,这样就成功的将代码逻辑切换到了主线程了.\n\n    Handler 处理消息的过程是:首先,检查Message 的 callback 是否为 null,不为 null 就通过 handleCallBack 来处理消息,Message 的 callback 是一个 Runnable 对象,实际上是 handler 的 post 方法所传递的 Runnable 参数.其次是检查 mCallback 是 否为 null,不为 null 就调用 mCallback 的handleMessage 方法来处理消息.\n\n## 二. View的绘制流程\n\n    View的绘制流程：OnMeasure()——>OnLayout()——>OnDraw()\n\n各步骤的主要工作：\n\n**_OnMeasure()：_**\n\n    测量视图大小。从顶层父View到子View递归调用measure方法，measure方法又回调OnMeasure。\n\n**_OnLayout()：_**\n\n    确定View位置，进行页面布局。从顶层父View向子View的递归调用view.layout方法的过程，即父View根据上一步measure子View所得到的布局大小和布局参数，将子View放在合适的位置上。\n\n**_OnDraw()：_**\n\n    绘制视图:ViewRoot创建一个Canvas对象，然后调用OnDraw()。六个步骤：①、绘制视图的背景；②、保存画布的图层（Layer）；③、绘制View的内容；④、绘制View子视图，如果没有就不用；⑤、还原图层（Layer）；⑥、绘制滚动条。\n\n## 三. 事件传递机制\n\n1).Android事件分发机制的本质是要解决：点击事件由哪个对象发出，经过哪些对象，最终达到哪个对象并最终得到处理。这里的对象是指Activity、ViewGroup、View.\n\n2).Android中事件分发顺序：Activity（Window） -> ViewGroup -> View.\n\n3).事件分发过程由dispatchTouchEvent() 、onInterceptTouchEvent()和onTouchEvent()三个方法协助完成\n\n**设置Button按钮来响应点击事件事件传递情况：（如下图）**\n\n布局如下:\n\n![](http://upload-images.jianshu.io/upload_images/4642697-01f23a099103eb82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/210)\n\n最外层：Activiy A，包含两个子View：ViewGroup B、View C\n\n中间层：ViewGroup B，包含一个子View：View C\n\n最内层：View C\n\n假设用户首先触摸到屏幕上View C上的某个点（如图中黄色区域），那么Action_DOWN事件就在该点产生，然后用户移动手指并最后离开屏幕。\n\n**按钮点击事件:**\n\nDOWN事件被传递给C的onTouchEvent方法，该方法返回true，表示处理这个事件;\n\n因为C正在处理这个事件，那么DOWN事件将不再往上传递给B和A的onTouchEvent()；\n\n该事件列的其他事件（Move、Up）也将传递给C的onTouchEvent();\n\n![](http://upload-images.jianshu.io/upload_images/4642697-ca12c00c79780b57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n(记住这个图的传递顺序,面试的时候能够画出来,就很详细了)\n\n## 四. Binder机制\n\n**1.了解Binder**\n\n    在Android系统中，每一个应用程序都运行在独立的进程中，这也保证了当其中一个程序出现异常而不会影响另一个应用程序的正常运转。在许多情况下，我们activity都会与各种系统的service打交道，很显然，我们写的程序中activity与系统service肯定不是同一个进程，但是它们之间是怎样实现通信的呢？所以Binder是android中一种实现进程间通信（IPC）的方式之一。\n\n    1).首先，Binder分为Client和Server两个进程。\n\n    注意，Client和Server是相对的。谁发消息，谁就是Client，谁接收消息，谁就是Server。\n\n    举个例子，两个进程A和B之间使用Binder通信，进程A发消息给进程B，那么这时候A是Binder Client，B是Binder Server；进程B发消息给进程A，那么这时候B是Binder Client，A是Binder Server——其实这么说虽然简单了，但还是不太严谨，我们先这么理解着。\n\n    2).其次，我们看下面这个图（摘自田维术的博客），基本说明白了Binder的组成解构：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-9fed6a1413057558.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/673)\n\n    图中的IPC就是进程间通信的意思。\n\n    图中的ServiceManager，负责把Binder Server注册到一个容器中。\n\n    有人把ServiceManager比喻成电话局，存储着每个住宅的座机电话，还是很恰当的。张三给李四打电话，拨打电话号码，会先转接到电话局，电话局的接线员查到这个电话号码的地址，因为李四的电话号码之前在电话局注册过，所以就能拨通；没注册，就会提示该号码不存在。\n\n    对照着Android Binder机制，对着上面这图，张三就是Binder Client，李四就是Binder Server，电话局就是ServiceManager，电话局的接线员在这个过程中做了很多事情，对应着图中的Binder驱动.\n\n    3).接下来我们看Binder通信的过程，还是摘自田维术博客的一张图：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-6a03bbb4f16108b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/675)\n\n注：图中的SM也就是ServiceManager。\n\n    我们看到，Client想要直接调用Server的add方法，是不可以的，因为它们在不同的进程中，这时候就需要Binder来帮忙了。\n\n    首先是Server在SM这个容器中注册。\n\n    其次，Client想要调用Server的add方法，就需要先获取Server对象， 但是SM不会把真正的Server对象返回给Client，而是把Server的一个代理对象返回给Client，也就是Proxy。\n\n    然后，Client调用Proxy的add方法，SM会帮他去调用Server的add方法，并把结果返回给Client。\n\n    以上这3步，Binder驱动出了很多力，但我们不需要知道Binder驱动的底层实现，涉及到C++的代码了——把有限的时间去做更有意义的事情。\n\n(ps:以上节选自包建强老师的文章[点我点我](https://link.jianshu.com?t=http://www.cnblogs.com/Jax/p/6864103.html)).\n\n**2.为什么android选用Binder来实现进程间通信？**\n\n1).可靠性。在移动设备上，通常采用基于Client-Server的通信方式来实现互联网与设备间的内部通信。目前linux支持IPC包括传统的管道，System V IPC，即消息队列/共享内存/信号量，以及socket中只有socket支持Client-Server的通信方式。Android系统为开发者提供了丰富进程间通信的功能接口，媒体播放，传感器，无线传输。这些功能都由不同的server来管理。开发都只关心将自己应用程序的client与server的通信建立起来便可以使用这个服务。毫无疑问，如若在底层架设一套协议来实现Client-Server通信，增加了系统的复杂性。在资源有限的手机 上来实现这种复杂的环境，可靠性难以保证。\n\n2).传输性能。socket主要用于跨网络的进程间通信和本机上进程间的通信，但传输效率低，开销大。消息队列和管道采用存储-转发方式，即数据先从发送方缓存区拷贝到内核开辟的一块缓存区中，然后从内核缓存区拷贝到接收方缓存区，其过程至少有两次拷贝。虽然共享内存无需拷贝，但控制复杂。比较各种IPC方式的数据拷贝次数。共享内存：0次。Binder：1次。Socket/管道/消息队列：2次。\n\n3).安全性。Android是一个开放式的平台，所以确保应用程序安全是很重要的。Android对每一个安装应用都分配了UID/PID,其中进程的UID是可用来鉴别进程身份。传统的只能由用户在数据包里填写UID/PID，这样不可靠，容易被恶意程序利用。而我们要求由内核来添加可靠的UID。\n\n所以，出于可靠性、传输性、安全性。android建立了一套新的进程间通信方式。\n\n## 五. Android中进程的级别，以及各自的区别。\n\n**1、前台进程**\n\n    用户当前正在做的事情需要这个进程。如果满足下面的条件之一，一个进程就被认为是前台进程：\n\n1).这个进程拥有一个正在与用户交互的Activity(这个Activity的onResume()方法被调用)。\n\n2).这个进程拥有一个绑定到正在与用户交互的activity上的Service。\n\n3).这个进程拥有一个前台运行的Service（service调用了方法startForeground()）.\n\n4).这个进程拥有一个正在执行其任何一个生命周期回调方法（onCreate(),onStart(),或onDestroy()）的Service。\n\n5).这个进程拥有正在执行其onReceive()方法的BroadcastReceiver。\n\n    通常，在任何时间点，只有很少的前台进程存在。它们只有在达到无法调合的矛盾时才会被杀－－如内存太小而不能继续运行时。通常，到了这时，设备就达到了一个内存分页调度状态，所以需要杀一些前台进程来保证用户界面的反应.\n\n**2、可见进程**\n\n    一个进程不拥有运行于前台的组件，但是依然能影响用户所见。满足下列条件时，进程即为可见：\n\n    这个进程拥有一个不在前台但仍可见的Activity(它的onPause()方法被调用)。当一个前台activity启动一个对话框时，就出了这种情况。\n\n**3、服务进程**\n\n    一个可见进程被认为是极其重要的。并且，除非只有杀掉它才可以保证所有前台进程的运行，否则是不能动它的。\n\n    这个进程拥有一个绑定到可见activity的Service。\n\n    一个进程不在上述两种之内，但它运行着一个被startService()所启动的service。\n\n尽管一个服务进程不直接影响用户所见，但是它们通常做一些用户关心的事情（比如播放音乐或下载数据），所以系统不到前台进程和可见进程活不下去时不会杀它。\n\n**4、后台进程**\n\n    一个进程拥有一个当前不可见的activity(activity的onStop()方法被调用)。\n\n    这样的进程们不会直接影响到用户体验，所以系统可以在任意时刻杀了它们从而为前台、可见、以及服务进程们提供存储空间。通常有很多后台进程在运行。它们被保存在一个LRU(最近最少使用)列表中来确保拥有最近刚被看到的activity的进程最后被杀。如果一个activity正确的实现了它的生命周期方法，并保存了它的当前状态，那么杀死它的进程将不会对用户的可视化体验造成影响。因为当用户返回到这个activity时，这个activity会恢复它所有的可见状态。\n\n**5、空进程**\n\n    一个进程不拥有入何active组件。\n\n    保留这类进程的唯一理由是高速缓存，这样可以提高下一次一个组件要运行它时的启动速度。系统经常为了平衡在进程高速缓存和底层的内核高速缓存之间的整体系统资源而杀死它们。\n\n## 六. 线程池的相关知识。\n\n    Android中的线程池都是之间或间接通过配置ThreadPoolExecutor来实现不同特性的线程池.Android中最常见的四类具有不同特性的线程池分别为FixThreadPool、CachedThreadPool、SingleThreadPool、ScheduleThreadExecutor.\n\n**1).FixThreadPool**\n\n    只有核心线程,并且数量固定的,也不会被回收,所有线程都活动时,因为队列没有限制大小,新任务会等待执行.\n\n    优点:更快的响应外界请求.\n\n**2).SingleThreadPool**\n\n    只有一个核心线程,确保所有的任务都在同一线程中按顺序完成.因此不需要处理线程同步的问题.\n\n**3).CachedThreadPool**\n\n    只有非核心线程,最大线程数非常大,所有线程都活动时,会为新任务创建新线程,否则会利用空闲线程(60s空闲时间,过了就会被回收,所以线程池中有0个线程的可能)处理任务.\n\n    优点:任何任务都会被立即执行(任务队列SynchronousQueue相当于一个空集合);比较适合执行大量的耗时较少的任务.\n\n**4).ScheduledThreadPool**\n\n    核心线程数固定,非核心线程(闲着没活干会被立即回收)数没有限制.\n\n    优点:执行定时任务以及有固定周期的重复任务\n\n    参考[Android开发——Android中常见的4种线程池（保证你能看懂并理解）](https://link.jianshu.com?t=http://blog.csdn.net/seu_calvin/article/details/52415337)\n\n## 七. 内存泄露，怎样查找，怎么产生的内存泄露。\n\n**产生的内存泄露**\n\n1).资源对象没关闭造成的内存泄漏\n\n2).构造Adapter时，没有使用缓存的convertView\n\n3).Bitmap对象不在使用时调用recycle()释放内存\n\n4).试着使用关于application的context来替代和activity相关的context\n\n5).注册没取消造成的内存泄漏\n\n6).集合中对象没清理造成的内存泄漏\n\n**查找内存泄漏**\n\n    查找内存泄漏可以使用Android Stdio 自带的Android Profiler工具,也可以使用Square产品的LeadCanary.\n\n## 八. Android优化\n\n**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n## 九. 插件化相关技术，热修补技术是怎样实现的，和插件化有什么区别\n\n**相同点:**\n\n    都使用ClassLoader来实现的加载的新的功能类，都可以使用PathClassLoader与DexClassLoader\n\n**不同点：**\n\n    热修复因为是为了修复Bug的，所以要将新的同名类替代同名的Bug类，要抢先加载新的类而不是Bug类，所以多做两件事：在原先的app打包的时候，阻止相关类去打上CLASS_ISPREVERIFIED标志，还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements，这样才能抢先代替Bug类，完成系统不加载旧的Bug类.\n\n    而插件化只是增肌新的功能类或者是资源文件，所以不涉及抢先加载旧的类这样的使命，就避过了阻止相关类去打上CLASS_ISPREVERIFIED标志和还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements.\n\n    所以插件化比热修复简单，热修复是在插件化的基础上在进行替旧的Bug类\n\n## 十. 怎样计算一张图片的大小，加载bitmap过程（怎样保证不产生内存溢出），二级缓存，LRUCache算法。\n\n**计算一张图片的大小**\n\n    图片占用内存的计算公式：图片高度 * 图片宽度 * 一个像素占用的内存大小.所以，计算图片占用内存大小的时候，要考虑图片所在的目录跟设备密度，这两个因素其实影响的是图片的高宽，android会对图片进行拉升跟压缩。\n\n**加载bitmap过程（怎样保证不产生内存溢出）**\n\n    由于Android对图片使用内存有限制，若是加载几兆的大图片便内存溢出。Bitmap会将图片的所有像素（即长x宽）加载到内存中，如果图片分辨率过大，会直接导致内存OOM，只有在BitmapFactory加载图片时使用BitmapFactory.Options对相关参数进行配置来减少加载的像素。\n\n**BitmapFactory.Options相关参数详解**\n\n(1).Options.inPreferredConfig值来降低内存消耗。\n\n比如：默认值ARGB_8888改为RGB_565,节约一半内存。\n\n(2).设置Options.inSampleSize 缩放比例，对大图片进行压缩 。\n\n(3).设置Options.inPurgeable和inInputShareable：让系统能及时回 收内存。\n\nA：inPurgeable：设置为True时，表示系统内存不足时可以被回 收，设置为False时，表示不能被回收。\n\nB：inInputShareable：设置是否深拷贝，与inPurgeable结合使用，inPurgeable为false时，该参数无意义。\n\n(4).使用decodeStream代替其他方法。\n\ndecodeResource,setImageResource,setImageBitmap等方法\n\n## 十一. LRUCache算法是怎样实现的。\n\n    内部存在一个LinkedHashMap和maxSize，把最近使用的对象用强引用存储在 LinkedHashMap中，给出来put和get方法，每次put图片时计算缓存中所有图片总大小，跟maxSize进行比较，大于maxSize，就将最久添加的图片移除；反之小于maxSize就添加进来。\n\n    之前，我们会使用内存缓存技术实现，也就是软引用或弱引用，在Android 2.3（APILevel 9）开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，这让软引用和弱引用变得不再可靠。\n\n# 算法\n\n## 一. 算法题\n\nm * n的矩阵，能形成几个正方形（2 * 2能形成1个正方形，2 * 3 2个，3 * 3 6个）\n\n计数的关键是要观察到任意一个倾斜的正方形必然唯一内接于一个非倾斜的正方形，而一个非倾斜的边长为k的非倾斜正方形，一条边上有k-1个内点，每个内点恰好确定一个内接于其中的倾斜正方形，加上非倾斜正方形本身，可知，将边长为k的非倾斜正方形数目乘以k，再按k求和即可得到所有正方形的数目。\n\n设2≤n≤m，k≤n-1，则边长为k的非倾斜有\n\n(n-k)(m-k)个，故所有正方形有\n\n∑(m-k)(n-k)k个\n\n例如m=n=4\n\n正方形有3_3_1+2_2_2+1_1_3=20个\n\n# 下面是面试过程中遇到的题目\n\n大多数题目都可以在上面找到答案.\n\n## 电话面试题\n\n### 1.ArrayList 和 Hashmap 简单说一些,区别,底层的数据结构.\n\n### 2.Handler 消息机制\n\n### 3.引起内存泄漏的场景\n\n### 4.多线程的使用场景?\n\n### 5.常用的线程池有哪几种?\n\n### 6.在公司做了什么?团队规模?为什么离职?\n\n## 面试中实际涉及到的问题\n\n**第一轮**\n\n### **1.知道哪些单例模式,写一个线程安全的单例,并分析为什么是线程安全的**?\n```java\npublic class Singleton {\n\t// Private constructor prevents instantiation from other classes\n\tprivate Singleton() { }\n\n\t/**\n\t* SingletonHolder is loaded on the first execution of Singleton.getInstance() \n\t* or the first access to SingletonHolder.INSTANCE, not before.\n\t*/\n\tprivate static class SingletonHolder { \n\t\t\tpublic static final Singleton INSTANCE = new Singleton();\n\t}\n\n\tpublic static Singleton getInstance() {\n\t\t\treturn SingletonHolder.INSTANCE;\n\t}\n}\n```\n### **2.Java中的集合有哪些?解释一下HashMap?底部的数据结构?散列表冲突的处理方法,散列表是一个什么样的数据结构?HashMap是采用什么方法处理冲突的**?\n\n![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n```\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n```\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**TreeSet两种排序方式**：两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\n```\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n```\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\n```\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n```\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\n```\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n```\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n **五. concurrentHashmap原理，原子类**。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大.\n\n### **3.解释一下什么是MVP架构,画出图解,一句话解释MVP和MVC的区别**?\n\n为了解决逻辑处理和UI视图的松散耦合，MVC和MVP的架构模式在很多App中使用比较广泛。\n\n那什么是MVP呢？它又和我们常常听到的MVC有什么关系了以及区别呢？\n\n![MVP和MVC架构图](http://frodoking.github.io/img/android/mvp_mvc_img.png)\n\nMVP 是从经典的模式MVC演变而来，它们的基本思想有相通的地方：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。作为一种新的模式，**MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会从直接Model中读取数据而不是通过 Controller**。\n\n在MVC里，View是可以直接访问Model的！从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。 在MVC模型里，更关注的Model的不变，而同时有多个对Model的不同显示，及View。所以，在MVC模型里，Model不依赖于View，但是View是依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。\n\n**MVP如何解决MVC的问题**？\n\n在MVP里，Presenter完全把Model和View进行了分离，主要的程序逻辑在Presenter里实现。而且，Presenter与具体的View是没有直接关联的，而是通过定义好的接口进行交互，从而使得在变更View时候可以保持Presenter的不变，即重用！ 不仅如此，我们还可以编写测试用的View，模拟用户的各种操作，从而实现对Presenter的测试–而不需要使用自动化的测试工具。 我们甚至可以在Model和View都没有完成时候，就可以通过编写Mock Object（即实现了Model和View的接口，但没有具体的内容的）来测试Presenter的逻辑。 在MVP里，应用程序的逻辑主要在Presenter来实现，其中的View是很薄的一层。因此就有人提出了Presenter First的设计模式，就是根据User Story来首先设计和开发Presenter。在这个过程中，View是很简单的，能够把信息显示清楚就可以了。在后面，根据需要再随便更改View，而对Presenter没有任何的影响了。 如果要实现的UI比较复杂，而且相关的显示逻辑还跟Model有关系，就可以在View和Presenter之间放置一个Adapter。由这个 Adapter来访问Model和View，避免两者之间的关联。而同时，因为Adapter实现了View的接口，从而可以保证与Presenter之间接口的不变。这样就可以保证View和Presenter之间接口的简洁，又不失去UI的灵活性。 在MVP模式里，View只应该有简单的Set/Get的方法，用户输入和设置界面显示的内容，除此就不应该有更多的内容，绝不容许直接访问Model–这就是与MVC很大的不同之处。\n\nMVP的优点：\n\n> 1、模型与视图完全分离，我们可以修改视图而不影响模型；\n> 2、可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部；\n> 3、我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁；\n> 4、如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）。\n\n**使用方法**\n\n1、建立bean\n\n```\n\npublic class UserBean {\n private String mFirstName;\n private String mLastName;\n\n public UserBean(String firstName, String lastName) {\n this. mFirstName = firstName;\n this. mLastName = lastName;\n }\n\n public String getFirstName() {\n return mFirstName;\n }\n\n public String getLastName() {\n return mLastName;\n }\n}\n```\n \n2、建立model接口（处理业务逻辑，这里指数据读写）\n\n```\n\npublic interface IUserModel {\n void setID(int id);\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n\n int getID();\n\n UserBean load(int id);// 通过id读取user信息,返回一个UserBean\n}\n```\n\n3、建立view接口（更新ui中的view状态），这里列出需要操作当前view的方法\n\n``` \n\npublic interface IUserView {\n int getID();\n\n String getFristName();\n\n String getLastName();\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n}\n\n ```\n4、建立presenter（主导器，通过iView和iModel接口操作model和view），activity可以把所有逻辑给presenter处理，这样java逻辑就从手机的activity中分离出来\n\n```\npublic class UserPresenter {\n private IUserView mUserView;\n private IUserModel mUserModel;\n\n public UserPresenter(IUserView view) {\n mUserView = view;\n mUserModel = new UserModel();\n }\n\n public void saveUser( int id, String firstName, String lastName) {\n mUserModel.setID(id);\n mUserModel.setFirstName(firstName);\n mUserModel.setLastName(lastName);\n }\n\n public void loadUser( int id) {\n UserBean user = mUserModel.load(id);\n mUserView.setFirstName(user.getFirstName()); // 通过调用IUserView的方法来更新显示\n mUserView.setLastName(user.getLastName());\n }\n}\n\n ```\n**结束语**\n\nMVP主要解决就是把逻辑层抽出来成P层，要是遇到需求逻辑上的更改就可以只需要修改P层了或者遇到逻辑上的大概我们可以直接从写一个P也可以，很多开发人员把所有的东西都写在了Activity/Fragment里面这样一来遇到频繁改需求或者逻辑越来越复杂的时候，Activity/Fragment里面就会出现过多的混杂逻辑导致出错，所以MVP模式对于APP来对控制逻辑和UI的解耦来说是一个不错的选择！\n\n在这里多说一下，其实MVP只是一个总体的解决方案。在V和P之间其实我们还可以采用事件总线的方案来解决这种高耦合的情况。本人在另外一篇文章中将会讲到[事件总线（otto的bus和eventbus的一个对比分析）](https://frodoking.github.io/2015/03/30/android-eventbus-otto-analysis/)\n\n\n### **4.Handle消息机制?在使用Handler的时候要注意哪些东西,是否会引起内存泄漏?画一下Handler机制的图解**?\n\n![](http://upload-images.jianshu.io/upload_images/1824194-a947dcc5b22f69fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面一共出现了几种类，ActivityThread，Handler，MessageQueue，Looper，msg（Message）,对这些类作简要介绍：\n\nActivityThread：程序的启动入口，为什么要介绍这个类，是因为该类就是我们说的主线程，它对Looper进行操作的。\n\nHandler：字面意思是操控者，该类有比较重要的地方，就是通过handler来发送消息（sendMessage）到MessageQueue和 操作控件的更新（handleMessage）。handler下面持有这MessageQueue和Looper的对象。\n\nMessageQueue：字面意思是消息队列，就是封装Message类。对Message进行插入和取出操作。\n\nMessage：这个类是封装消息体并被发送到MessageQueue中的，给类是通过链表实现的，其好处方便MessageQueue的插入和取出操作。还有一些字段是（int what，Object obj，int arg1，int arg2）。what是用户定义的消息和代码，以便接收者（handler）知道这个是关于什么的。obj是用来传输任意对象的，arg1和arg2是用来传递一些简单的整数类型的。\n\n下面，我们按照启动顺序来进行源码分析：\n\n![](http://upload-images.jianshu.io/upload_images/1824194-298ebb16ce4a3b70.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://raw.githubusercontent.com/bihe0832/Android-System-Related-Charts/master/framework/handler-sequence.jpg)\n\n\n\n### **5.是否做过性能优化?已经采取了哪些措施进行优化**?\n\n**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n### **6.引起内存泄漏的原因是什么?以及你是怎么解决的**?\n\n这些问题应该都是比较基础的问题,每个开发者都应该是非常熟悉并能详细叙述的.这一轮的面试官问的技术都是平时用到的.\n\n**产生的内存泄露**\n\n1).资源对象没关闭造成的内存泄漏\n\n2).构造Adapter时，没有使用缓存的convertView\n\n3).Bitmap对象不在使用时调用recycle()释放内存\n\n4).试着使用关于application的context来替代和activity相关的context\n\n5).注册没取消造成的内存泄漏\n\n6).集合中对象没清理造成的内存泄漏\n\nAndroid的虚拟机是基于寄存器的Dalvik，它的最大堆大小一般是16M，有的机器为24M。因此我们所能利用 的内存空间是有限的。如果我们的内存占用超过了一定的水平就会出现OutOfMemory的错误。\n\n内存溢出的几点原因总结:\n1、**资源释放问题**: 程序代码的问题，长期保持某些资源(如Context)的引用，造成内存泄露，资源得不到释放 \n\n2、**对象内存过大问题**:\n保存了多个耗用内存过大的对象(如Bitmap)，造成内存超出限制\n\n3、**static**:\nstatic是Java中的一个关键字，当用它来修饰成员变量时，那么该变量就属于该类，而不是该类的实例。所以 用static修饰的变量，它的生命周期是很长的，如果用它来引用一些资源耗费过多的实例(Context的情况最多）\n这时就要谨慎对待了。 \n```\npublic class ClassName {\n private static Context mContext;\n//省略 }\n```\n以上的代码是很危险的，如果将Activity赋值到mContext的话。那么即使该Activity已经onDestroy，但是由于 仍有对象保存它的引用，因此该Activity依然不会被释放。\n我们举Android文档中的一个例子。\n```\nprivate static Drawable sBackground; @Override\nprotected void onCreate(Bundle state) {\n\tsuper.onCreate(state);\n\tTextView label = new TextView(this);\n        label.setText(\"Leaks are bad\");\n\tif (sBackground == null) {\n\tsBackground = getDrawable(R.drawable.large_bitmap); }\n\tlabel.setBackgroundDrawable(sBackground);\n\tsetContentView(label); }\n```\nsBackground, 是 一个静态的变量，但是我们发现，我们并没有显式的保存Contex的引用，但是，当Drawable与\n\nView连接之后，Drawable就将View设 置为一个回调，由于View中是包含Context的引用的，所以，实际上我们依\n\n然保存了Context的引用。这个引用链如下: Drawable->TextView->Context\n\n所以，最终该Context也没有得到释放，发生了内存泄露。\n\n**针对static的解决方案**:\n\n第一、应该尽量避免static成员变量引用资源耗费过多的实例，比如Context。\n\n第二、Context尽量使用Application Context，因为Application的Context的生命周期比较长，引用它不会出现内存\n泄露的问题。\n\n第三、使用WeakReference代替强引用。比如可以使用WeakReference<Context> mContextRef; 该部分的详细内容也可以参考Android文档中Article部分。\n\n4、**线程导致内存溢出**:\n线程产生内存泄露的主要原因在于线程生命周期的不可控。我们来考虑下面一段代码。\n```\npublic class MyActivity extends Activity {\n \t@Override\n\tpublic void onCreate(Bundle savedInstanceState) {\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.main);\n\tnew MyThread().start();\n}\nprivate class MyThread extends Thread{\n\t@Override public void run() {\n\tsuper.run();\n\t//do somthing }\n\t} \n}\n```\n这段代码很平常也很简单，是我们经常使用的形式。我们思考一个问题:假设MyThread的run函数是一个很 费时的操作，当我们开启该线程后，将设备的横屏变为了竖屏，一 般情况下当屏幕转换时会重新创建Activity， 按照我们的想法，老的Activity应该会被销毁才对，然而事实上并非如此。\n\n由于我们的线程是Activity的内部类，所以MyThread中保存了Activity的一个引用，当MyThread的run函数没有 结束时，MyThread是不会被销毁的，因此它所引用的老的Activity也不会被销毁，因此就出现了内存泄露的问题。\n\n有些人喜欢用Android提供的AsyncTask，但事实上AsyncTask的问题更加严重，Thread只有在run函数不结束时才出现这种内存泄露问题，然而AsyncTask内部的实现机制是运用了ThreadPoolExcutor,该类产生的Thread对象的生命周期是不确定的，是应用程序无法控制的，因此如果AsyncTask作为Activity的内部类，就更容易出现内存\n\n**泄露的问题**。\n\n针对这种线程导致的内存泄露问题的解决方案: \n\n第一、将线程的内部类，改为静态内部类。\n\n第二、在线程内部采用弱引用保存Context引用。\n\n二、避免内存溢出的方案:\n** 1、图片过大导致内存溢出**: 模拟器的RAM比较小，由于每张图片先前是压缩的情况，放入到Bitmap的时候，大小会变大，导致超出RAM内存\n\n★android 中用bitmap 时很容易内存溢出，报如下错误:Java.lang.OutOfMemoryError : bitmap size exceeds VM budget \n解决: 方法1: 主要是加上这段:等比例缩小图片\n\n1)通过getResource()方法获取资源:\n```\n//解决加载图片 内存溢出的问题 \n//Options 只保存图片尺寸大小，不保存图片到内存\nBitmapFactory.Options options = new BitmapFactory.Options();\noptions.inSampleSize = 2;\n\n//缩放的比例，缩放是很难按准备的比例进行缩放的，其值表明缩放的倍数，SDK中建议其值是2的指数值,值越大会导致图片不清晰\nBitmapFactory.Options opts = new BitmapFactory.Options(); \nopts.inSampleSize = 2;\nBitmap bmp = null;\nbmp = BitmapFactory.decodeResource(getResources(), mImageIds[position],opts); ...\n//回收\nbmp.recycle();\n```\n2)通过Uri取图片资源\n以上代码可以优化内存溢出，但它只是改变图片大小，并不能彻底解决内存溢出。\n3)通过路径获取图片资源\n\n方法2:对图片采用软引用，及时地进行recyle()操作\n\n具体见“各种引用的简单了解”中的示例\n**2、复用listView**: 方法:对复杂的listview进行合理设计与编码:\n```\nprivate ImageView preview;\nBitmapFactory.Options options = new BitmapFactory.Options();\n//图片宽高都为原来的二分之一，即图片为原来的四分之一\noptions.inSampleSize = 2;\nBitmap bitmap = BitmapFactory.decodeStream(cr.openInputStream(uri), null, options); preview.setImageBitmap(bitmap);\nprivate ImageView preview;\nprivate String fileName= \"/sdcard/DCIM/Camera/2010-05-14 16.01.44.jpg\"; BitmapFactory.Options options = new BitmapFactory.Options();\n//图片宽高都为原来的二分之一，即图片为原来的四分之一 \noptions.inSampleSize = 2;\nBitmap b = BitmapFactory.decodeFile(fileName, options);\npreview.setImageBitmap(b); filePath.setText(fileName);\nSoftReference<Bitmap> bitmap;\nbitmap = new SoftReference<Bitmap>(pBitmap);\nif(bitmap != null){\n\tif(bitmap.get() != null && !bitmap.get().isRecycled()){ bitmap.get().recycle();\n\tbitmap= null;\n }\n}\n\nAdapter中:\n\n@Override\npublic View getView(int position, View convertView, ViewGroup parent) {\n\tViewHolder holder;\n\tif(convertView!=null && convertView instanceof LinearLayout){\n\tholder = (ViewHolder) convertView.getTag(); }else{\n\tconvertView = View.inflate(MainActivity.this, R.layout.item, null); holder = new ViewHolder();\n\tholder.tv = (TextView)\nconvertView.findViewById(R.id.tv); convertView.setTag(holder);\n}\nholder.tv.setText(\"XXXX\");\nholder.tv.setTextColor(Color.argb(180, position*4, position*5, 255-position*2)); return convertView;\n\n}\n\nclass ViewHolder{\n\tprivate TextView tv;\n }\n```\n**3、界面切换**\n方法1:单个页面，横竖屏切换N次后 OOM 1、看看页面布局当中有没有大的图片，比如背景图之类的。\n\n去除xml中相关设置，改在程序中设置背景图(放在onCreate()方法中):\n\n在Activity destory时注意，bg.setCallback(null); 防止Activity得不到及时的释放 2\\. 跟上面方法相似，直接把xml配置文件加载成view 再放到一个容器里 然后直接调用 this.setContentView(View view);方法，避免xml的重复加载\n\n方法2: 在页面切换时尽可能少地重复使用一些代码 比如:重复调用数据库，反复使用某些对象等等......\n\n**4、内存分配**: 方法1:Android堆内存也可自己定义大小和优化Dalvik虚拟机的堆内存分配\n\n注意若使用这种方法:project build target 只能选择 <= 2.2 版本，否则编译将通不过。 所以不建议用这种方式\n\n**常见的内存使用不当的情况**\n\n**1、查询数据库没有关闭游标**\n\n程序中经常会进行查询数据库的操作，但是经常会有使用完毕Cursor后没有关闭的情况。如果我们的查询结果集比较小，对内存的消耗不容易被发现，只有在常时间大量操作的情况下才会复现内存问题，这样就会给以后的测试和问题排查带来困难和风险。\n\nDrawable bg = getResources().getDrawable(R.drawable.bg); XXX.setBackgroundDrawable(rlAdDetailone_bg);\nprivate final static int CWJ_HEAP_SIZE= 6*1024*1024;\nprivate final static float TARGET_HEAP_UTILIZATION = 0.75f; VMRuntime.getRuntime().setMinimumHeapSize(CWJ_HEAP_SIZE); VMRuntime.getRuntime().setTargetHeapUtilization(TARGET_HEAP_UTILIZATION);\nCursor cursor = null; try {\ncursor = getContentResolver().query(uri ...); if (cursor != null && cursor.moveToNext()) { ... ...\n}\n} finally {\nif (cursor != null) {\ntry { cursor.close();\n} catch (Exception e) {\n//ignore this }\n} }\n\n**2、构造Adapter时，没有使用缓存的 convertView**\n\n以构造ListView的BaseAdapter为例，在BaseAdapter中提供了方法: public View getView(int position, View convertView, ViewGroup parent)\n\n来向ListView提供每一个item所需要的view对象。初始时ListView会从BaseAdapter中根据当前的屏幕布局实例 化一定数量的 view对象，同时ListView会将这些view对象缓存起来。当向上滚动ListView时，原先位于最上面的 list item的view对象会被回收，然后被用来构造新出现的最下面的list item。这个构造过程就是由getView()方法完成的，getView()的第二个形参 View convertView就是被缓存起来的list item的view对象(初始化时缓存中没有view对 象则convertView是null)。\n由此可以看出，如果我们不去使用convertView，而是每次都在getView()中重新实例化一个View对象的话，即浪费资源也浪费时间，也会使得内存占用越来越大。ListView回收list item的view对象的过程可以查看:\n```\npublic View getView(int position, View convertView, ViewGroup parent) { View view = null;\nif (convertView != null) {\nview = convertView;\n\npopulate(view, getItem(position)); ...\n} else {\nview = new Xxx(...);\n\n...\n}\nreturn view;\n\n}\n```\n**3、Bitmap对象不在使用时调用recycle()释放内存**\n有时我们会手工的操作Bitmap对象，如果一个Bitmap对象比较占内存，当它不在被使用的时候，可以调用\nBitmap.recycle()方法回收此对象的像素所占用的内存，但这不是必须的，视情况而定。\n\n**4、释放对象的引用**\n当一个生命周期较短的对象A，被一个生命周期较长的对象B保有其引用的情况下，在A的生命周期结束时，\n\n要在B中清除掉对A的引用。 示例A:\n```\npublic class DemoActivity extends Activity { ... ...\nprivate Handler mHandler = ... private Object obj;\npublic void operation() {\nobj = initObj();\n...\n[Mark]\nmHandler.post(new Runnable() {\npublic void run() { useObj(obj);\n}\n});\n} }\n```\n我们有一个成员变量 obj，在operation()中我们希望能够将处理obj实例的操作post到某个线程的MessageQueue 中。在以上的代码中，即便是 mHandler所在的线程使用完了obj所引用的对象，但这个对象仍然不会被垃圾回收掉，因为DemoActivity.obj还保有这个对象的引用。 所以如果在DemoActivity中不再使用这个对象了，可以在 [Mark]的位置释放对象的引用，而代码可以修改为:\n```\n... ...\npublic void operation() {\nobj = initObj();\n...\nfinal Object o = obj;\nobj = null;\nmHandler.post(new Runnable() { public void run() {\nuseObj(o); }\n}\n}\n... ...\n```\n示例B: 假设我们希望在锁屏界面(LockScreen)中，监听系统中的电话服务以获取一些信息(如信号强度等)，则可以在\nLockScreen中定义一个PhoneStateListener的对象，同时将它注册到TelephonyManager服务中。对于LockScreen对象，当需要显示锁屏界 面的时候就会创建一个LockScreen对象，而当锁屏界面消失的时候LockScreen对象就会被释放掉。\n但是如果在释放LockScreen对象的时候忘记取消我们之前注册的PhoneStateListener对象，则会导致LockScreen无 法被垃 圾回收。如果不断的使锁屏界面显示和消失，则最终会由于大量的LockScreen对象没有办法被回收而引起OutOfMemory,使得system_process进程挂掉。\n\n**5、其他**\nAndroid应用程序中最典型的需要注意释放资源的情况是在Activity的生命周期中，在onPause()、onStop()、\nonDestroy()方法中需要适当的释放资源的情况。由于此情况很基础，在此不详细说明，具体可以查看官方文档对Activity生命周期的介绍，以明确何时应该释放哪些资源。\n\n## **第二轮**\n\n### 1.关于并发理解多少?说几个并发的集合?\n[Java 并发编程](http://www.cnblogs.com/paddix/p/5374810.html)\n\n**Java 并发编程：核心理论**：\n共享性，互斥性，原子性，可见性，有序性\n\n**什么是并发：**\n同时在做几件事就是并发\n\n**并发的好处**\n**1.提高资源利用率**\n当一个任务并没有完全占用系统资源时，可以利用并发来提高资源利用率，从而能更快的完成任务\n**2.在程序任务上更加精简**\n任务明确分配好，又能同时进行，既提高了效率，逻辑又清晰\n**3.更好的响应程序**\n例如图片的上传，页面正常展示没有卡顿，又能正常上传图片，既保证了页面能正常响应，又保证图片能正常上传\n\n**并发的风险**\n**1.并发的代价**\n需要占用更多资源\n设计好一个并发程序并不容易\n并发的资源交互问题复杂\n\n**2.并发的隐患**\n滥用资源导致系统不稳定\n结果与预期不符\n出现的BUG难以排查\n\n**Java并发集合框架**\n\n我们着重说明一下Java并发的集合框架，就是java.util.concurrent包下的集合类\n\n* 非阻塞队列\n\n> 非阻塞队列就是在队列中没有数据时，对此队列的操作将出现异常或者返回null，无需等待/阻塞的特色。\n\n在JDK的并发包中，常见的非阻塞队列有以下几个： \n- ConcurrentHashMap \n- ConcurrentSkipListMap \n- ConcurrentSkipListSet \n- ConcurrentLinkedQueue \n- ConcurrentLinkedDeque \n- CopyOnWriteArrayList \n- CopyOnWriteArraySet\n\n**ConcurrentHashMap类**\n\n> 这个类是支持并发操作的Map对象，与之对应的不支持并发操作的Map对象是HashMap，Hashtable对象也是Map的一个子类，也是支持并发操作，但是其不支持Iterator并发的删除操作，如果程序中要对map集合做并发以及Iterator并发编辑/删除操作，推荐使用ConcurrentHashMap集合类。\n\nHashMap集合不支持并发示例：\n\n```\npackage com.collections.hashmapdemo;\n\nimport java.util.HashMap;\n\npublic class HashMapDemo {\n    public static HashMap hashMap = new HashMap();\n\n    public static void main(String[] args) {\n        Thread threadA = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for (int i = 0; i < 50000; i++) {\n                    hashMap.put(\"ThreadA\" + (i + 1), \"ThreadA\" + i + 1);\n                    System.out.println(\"ThreadA\" + (i + 1));\n                }\n            }\n        });\n\n        Thread threadB = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for (int i = 0; i < 50000; i++) {\n                    hashMap.put(\"ThreadB\" + (i + 1), \"ThreadB\" + i + 1);\n                    System.out.println(\"ThreadB\" + (i + 1));\n                }\n            }\n        });\n\n        threadA.start();\n        threadB.start();\n    }\n}\n\n```\n\n执行结果 \n有时候程序可以正常执行完，有时候则程序会造成假死的状态，如下图：\n\n![这里写图片描述](http://img.blog.csdn.net/20171018201847398?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uZ2d1b19jaGVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n所以说HashMap不支持多线程并发的操作。\n\nHashtable集合支持并发 \n示例： \n只需要把HashMap示例中public static HashMap hashMap = new HashMap();修改成public static Hashtable hashtable = new Hashtable();即可。 \n我们就说说Hashtable不支持Iterator的编辑/删除操作，示例如下\n\n```\npackage com.collections.hashmapdemo;\n\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.concurrent.TimeUnit;\n\npublic class HashtableNotModifyDemo {\n    public static Hashtable hashtable = new Hashtable();\n    static {\n        for (int i = 0; i < 5; i++) {\n            hashtable.put(\"String\" + (i + 1), i + 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        Thread threadA = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Iterator iterator = hashtable.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        System.out.println(iterator.next());\n                        TimeUnit.SECONDS.sleep(2);\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        Thread threadB = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                hashtable.put(\"z\", \"zValue\");\n            }\n        });\n\n        threadA.start();\n        threadB.start();\n    }\n}\n\n```\n\n执行结果\n\n> String5 \n> java.util.ConcurrentModificationException \n> at java.util.HashtableEnumerator.next(Hashtable.java:1167)atcom.collections.hashmapdemo.HashtableNotModifyDemo1.run(HashtableNotModifyDemo.java:22) \n> at java.lang.Thread.run(Thread.java:745)\n\n说明多线程调用该类的iterator()方法返回Iterator对象后，在调用put方法会报ConcurrentModificationException异常，也就是不支持Iterator并发的编辑/删除操作。如果想实现此功能推荐使用并发集合框架提供的ConcurrentHashMap类。\n\nConcurrentHashMap集合支持并发示例：\n\n> 需要把HashMap示例中public static HashMap hashMap = new HashMap();修改成public \n> static ConcurrentHashMap concurretHashMap = new ConcurrentHashMap();即可。\n\nConcurrentHashMap集合支持Iterator并发操作示例：\n\n> 把类HashtableNotModifyDemo中的public static Hashtable hashtable = new Hashtable();修改为public static ConcurrentHashMap concurretHashMap = new ConcurrentHashMap();测试即可。\n\n**ConcurrentSkipListMap类**\n\n这个并发集合类支持排序功能。一般此集合中存放的对象要实现Comparable接口，方便此集合类排序，如果不实现此接口，则会按照默认排序。\n\n**ConcurrentSkipListSet类**\n\n这个并发集合类不仅支持排序功能，还不允许重复的元素。一般此集合中存放的对象要实现Comparable接口，并且重写equals和hashCode方法。\n\n**ConcurrentLinkedQueue类**\n\n这个并发集合类提供了并发环境的队列操作。\n\n*   poll()当没有获取到数据时返回null，如果有数据则一处表头并将表头数据返回。\n*   element()当没有获取到数据时抛NoSuchElementException异常，如果有数据则返回表头数据。\n*   peek()当没有获取导数据是返回null，获取到数据时则不移除表头，并将表头数据返回。\n\n**ConcurrentLinkedDeque类**\n\nConcurrentLinkedQueue支持对队列头操作，而ConcurrentLinkedDeque也支持队列头和列尾双向操作。\n\n**CopyOnWriteArrayList类**\n\nArrayList是线程不安全的，如果想在并发中实现线程安全，则可以使用CopyOnWriteArrayList类，使用方法和ArrayList无异。\n\n**CopyOnWriteArraySet类**\n\nArraySet是线程不安全的，如果想在并发中实现线程安全，则可以使用CopyOnWriteArraySet类，使用方法和ArraySet无异。\n\n### 2.Handler 消息机制图解?\n\n![](http://upload-images.jianshu.io/upload_images/1824194-a947dcc5b22f69fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面一共出现了几种类，ActivityThread，Handler，MessageQueue，Looper，msg（Message）,对这些类作简要介绍：\n\nActivityThread：程序的启动入口，为什么要介绍这个类，是因为该类就是我们说的主线程，它对Looper进行操作的。\n\nHandler：字面意思是操控者，该类有比较重要的地方，就是通过handler来发送消息（sendMessage）到MessageQueue和 操作控件的更新（handleMessage）。handler下面持有这MessageQueue和Looper的对象。\n\nMessageQueue：字面意思是消息队列，就是封装Message类。对Message进行插入和取出操作。\n\nMessage：这个类是封装消息体并被发送到MessageQueue中的，给类是通过链表实现的，其好处方便MessageQueue的插入和取出操作。还有一些字段是（int what，Object obj，int arg1，int arg2）。what是用户定义的消息和代码，以便接收者（handler）知道这个是关于什么的。obj是用来传输任意对象的，arg1和arg2是用来传递一些简单的整数类型的。\n\n下面，我们按照启动顺序来进行源码分析：\n\n![](http://upload-images.jianshu.io/upload_images/1824194-298ebb16ce4a3b70.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://raw.githubusercontent.com/bihe0832/Android-System-Related-Charts/master/framework/handler-sequence.jpg)\n\n### 3.在项目中做了哪些东西?\n\n负责用户版App社区模块的版本的功能迭代，几个组件的开发与管理。\n\n### 4.画图说明View 事件传递机制?并举一个例子阐述\n\n1).Android事件分发机制的本质是要解决：点击事件由哪个对象发出，经过哪些对象，最终达到哪个对象并最终得到处理。这里的对象是指Activity、ViewGroup、View.\n\n2).Android中事件分发顺序：Activity（Window） -> ViewGroup -> View.\n\n3).事件分发过程由dispatchTouchEvent() 、onInterceptTouchEvent()和onTouchEvent()三个方法协助完成\n\n**设置Button按钮来响应点击事件事件传递情况：（如下图）**\n\n布局如下:\n\n![](http://upload-images.jianshu.io/upload_images/4642697-01f23a099103eb82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/210)\n\n最外层：Activiy A，包含两个子View：ViewGroup B、View C\n\n中间层：ViewGroup B，包含一个子View：View C\n\n最内层：View C\n\n假设用户首先触摸到屏幕上View C上的某个点（如图中黄色区域），那么Action_DOWN事件就在该点产生，然后用户移动手指并最后离开屏幕。\n\n**按钮点击事件:**\n\nDOWN事件被传递给C的onTouchEvent方法，该方法返回true，表示处理这个事件;\n\n因为C正在处理这个事件，那么DOWN事件将不再往上传递给B和A的onTouchEvent()；\n\n该事件列的其他事件（Move、Up）也将传递给C的onTouchEvent();\n\n![](http://upload-images.jianshu.io/upload_images/4642697-ca12c00c79780b57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n(记住这个图的传递顺序,面试的时候能够画出来,就很详细了)\n\n### 5.类加载机制\n\n**一. 类的加载过程**\n\nPerson person = new Person();为例进行说明。\n\n1).因为new用到了Person.class，所以会先找到Person.class文件，并加载到内存中;\n\n2).执行该类中的static代码块，如果有的话，给Person.class类进行初始化;\n\n3).在堆内存中开辟空间分配内存地址;\n\n4).在堆内存中建立对象的特有属性，并进行默认初始化;\n\n5).对属性进行显示初始化;\n\n6).对对象进行构造代码块初始化;\n\n7).对对象进行与之对应的构造函数进行初始化;\n\n8).将内存地址付给栈内存中的p变量\n\n**二.类的加载器**\n\n    大家都知道，当我们写好一个Java程序之后，不是管是CS还是BS应用，都是由若干个.class文件组织而成的一个完整的Java应用程序，当程序在运行时，即会调用该程序的一个入口函数来调用系统的相关功能，而这些功能都被封装在不同的class文件当中，所以经常要从这个class文件中要调用另外一个class文件中的方法，如果另外一个文件不存在的，则会引发系统异常。而程序在启动的时候，并不会一次性加载程序所要用的所有class文件，而是根据程序的需要，通过Java的类加载机制（ClassLoader）来动态加载某个class文件到内存当中的，从而只有class文件被载入到了内存之后，才能被其它class所引用。所以ClassLoader就是用来动态加载class文件到内存当中用的。\n\n**双亲机制**\n\n**_1、原理介绍_**\n\n    ClassLoader使用的是双亲委托模型来搜索类的，每个ClassLoader实例都有一个父类加载器的引用（不是继承的关系，是一个包含的关系），虚拟机内置的类加载器（Bootstrap ClassLoader）本身没有父类加载器，但可以用作其它ClassLoader实例的的父类加载器。当一个ClassLoader实例需要加载某个类时，它会试图亲自搜索某个类之前，先把这个任务委托给它的父类加载器，这个过程是由上至下依次检查的，首先由最顶层的类加载器Bootstrap ClassLoader试图加载，如果没加载到，则把任务转交给Extension ClassLoader试图加载，如果也没加载到，则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常。否则将这个找到的类生成一个类的定义，并将它加载到内存当中，最后返回这个类在内存中的Class实例对象。\n\n**_2、为什么要使用双亲委托这种模型呢？_**\n\n    因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。\n\n**_3、但是JVM在搜索类的时候，又是如何判定两个class是相同的呢？_**\n\n    JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。比如网络上的一个Java类org.classloader.simple.NetClassLoaderSimple，javac编译之后生成字节码文件NetClassLoaderSimple.class，ClassLoaderA和ClassLoaderB这两个类加载器并读取了NetClassLoaderSimple.class文件，并分别定义出了java.lang.Class实例来表示这个类，对于JVM来说，它们是两个不同的实例对象，但它们确实是同一份字节码文件，如果试图将这个Class实例生成具体的对象进行转换时，就会抛运行时异常java.lang.ClassCaseException，提示这是两个不同的类型。\n\n**Android类加载器**\n\n    对于Android而言，最终的apk文件包含的是dex类型的文件，dex文件是将class文件重新打包，打包的规则又不是简单地压缩，而是完全对class文件内部的各种函数表，变量表进行优化，产生一个新的文件，即dex文件。因此加载这种特殊的Class文件就需要特殊的类加载器DexClassLoader。\n\n### 6.如何换肤,换肤插件中存在的问题?\n**1.换肤方案分析**\n\n1.  res下放多种皮肤的资源文件\n\n2.  加载插件apk使用其中的皮肤资源\n\n* 方案一： \n优点：容易实现。 \n缺点：res下放多种皮肤的资源文件，无疑会加大apk文件大小，而且资源文件是写死的，不利于后期拓展，若有其他皮肤需求只能通过版本迭代。 \n* 方案二： \n优点：不会加大apk包，更容易扩展，有新的皮肤只需下载新的插件包即可，无需更新。（相对于方案一） \n缺点：相对于方案一实现较困难，若有更多业务处理需要插件，如使用插件中的四大组件及处理它们的生命周期则是比较麻烦的，需用到动态代理。\n例如:[Android插件化系列第（二）篇---动态加载技术之apk换肤](http://www.jianshu.com/p/d1c6e67f7889)\n\n**2.Android换肤技术总结**\n\n背景\n\n纵观现在各种Android app，其换肤需求可以归为 \n\n- 白天/黑夜主题切换（或者别的名字，通常2套），如同花顺/自选股/天天动听等，UI表现为一个switcher。 \n- 多种主题切换，通常为会员特权，如QQ/QQ空间。\n\n对于第一种来说，目测应该是直接通过本地theme来做的，即所有图片/颜色的资源都在apk里面打包了。\n\n而对于第二种，则相对复杂一些，由于作为一种线上服务，可能上架新皮肤，且那么多皮肤包放在apk里面实在太占体积了，所以皮肤资源会在选择后再进行下载，也就不能直接使用android的那套theme。\n\n**技术方案**\n\n内部资源加载方案和动态下载资源下载两种。\n\n动态下载可以称为一种黑科技了，因为往往需要hack系统的一些方法，所以在部分机型和新的API上有时候可能有坑，但相对好处则很多 \n\n- 图片/色值等资源由于是后台下发的，可以随时更新 \n- APK体积减小 \n- 对应用开发者来说，换肤几乎是透明的，不需要关心有几套皮肤 \n- 可以作为增值服务卖钱！！\n\n**内部资源加载方案**\n\n内部资源加载都是通过android本身那套theme来做的，相对业务开发来说工作量更大（需要定义attr和theme），不同方案类似地都是在BaseActivity里面做setTheme，差别主要在解决以下2个问题的策略： \n\n- setTheme后如何实时刷新，而不用重新创建页面（尤其是listview里面的item）。 \n- 哪些view需要刷新，刷新什么（背景？字体颜色？ImageView的src？）。\n\n**自定义view**\n\n[MultipleTheme](http://xiazai.jb51.net/201703/yuanma/MultipleTheme-master(jb51.net).rar) \n\n做自定义view是为了在setTheme后会去立即刷新，更新页面UI对应资源（如TextView替换背景图和文字颜色），在上述项目中，则是通过对rootView进行遍历，对所有实现了ColorUiInterface的view/viewgroup进行setTheme操作来实现即使刷新的。\n\n显然这样太重了，需要把应用内的各种view/viewgroup进行替换。\n\n手动绑定view和要改变的资源类型\n\n[Colorful](http://xiazai.jb51.net/201703/yuanma/Colorful-master(jb51.net).rar)\n\n这个…我们看看用法吧….\n```\nViewGroupSetter listViewSetter = new ViewGroupSetter(mNewsListView);\n// 绑定ListView的Item View中的news_title视图，在换肤时修改它的text_color属性\nlistViewSetter.childViewTextColor(R.id.news_title, R.attr.text_color);\n\n// 构建Colorful对象来绑定View与属性的对象关系\nmColorful = new Colorful.Builder(this)\n  .backgroundDrawable(R.id.root_view, R.attr.root_view_bg)\n  // 设置view的背景图片\n  .backgroundColor(R.id.change_btn, R.attr.btn_bg)\n  // 设置背景色\n  .textColor(R.id.textview, R.attr.text_color)\n  .setter(listViewSetter) // 手动设置setter\n  .create(); // 设置文本颜色\n```\n我就是想换个皮肤，还得在activity里自己去设置要改变哪个view的什么属性，对应哪个attribute？是不是成本太高了？而且activity的逻辑也很容易被弄得乱七八糟。\n\n**动态资源加载方案**\n\nresource替换\n\n覆盖application的getResource方法，实现自己的resource，优先加载本地皮肤包文件夹下的资源包，对于性能问题，可以通过attribute或者资源名称规范(如需要换肤则用skin_开头)来优化，从而不对不换肤的资源进行额外检查开销。\n\n不过由于Android5.1源码里，drawable初始化的时候调用的是loadDrawable，而不是resource.getDrawable，而loadDrawable是私有的方法，无法覆盖，所以虽然很方便，却无法继续使用（不用关心任何皮肤相关的事情，android:color指定颜色就行了，神奇滴会自动换肤）。\n\n自定义LayoutInflator.Factory\n\n开源项目可参照Android-Skin-Loader。\n\n即setFactory使用自定义的LayoutInflator.Factory，可以重点关注该项目中的SkinInflaterFactory和SkinManager（实现了自己的getColor、getDrawable、getBitmap、getColorStateList等等方法）。\n\n需要自定义一个tag比如app:customStyle，重写所有的style，转成set方法，这样带来的牺牲就是增加了换肤的成本，要写很多style，自己去set，并不完全透明了。\n\nHack Resources internally\n\n黑科技方法，直接对Resources进行hack，Resources.Java:\n```\n// Information about preloaded resources. Note that they are not\n// protected by a lock, because while preloading in zygote we are all\n// single-threaded, and after that these are immutable.\nprivate static final LongSparseArray<Drawable.ConstantState>[] sPreloadedDrawables;\nprivate static final LongSparseArray<Drawable.ConstantState> sPreloadedColorDrawables\n  = new LongSparseArray<Drawable.ConstantState>();\nprivate static final LongSparseArray<ColorStateList> sPreloadedColorStateLists\n  = new LongSparseArray<ColorStateList>();\n```\n直接对Resources里面的这三个LongSparseArray进行替换，由于apk运行时的资源都是从这三个数组里面加载的，所以只要采用interceptor模式：\n\npublic class DrawablePreloadInterceptor extends LongSparseArray<Drawable.ConstantState>\n\n自己实现一个LongSparseArray，并通过反射set回去，就能实现换肤，具体getDrawable等方法里是怎么取preload数组的，可以自己看Resources的源码。\n\n等等，就这么简单？，NONO，少年你太天真了，怎么去加载xml，9patch的padding怎么更新，怎么打包/加载自定义的皮肤包，drawable的状态怎么刷新，等等。这些都是你需要考虑的，在存在插件的app中，还需要考虑是否会互相覆盖resource id的问题，进而需要修改apt，把resource id按位放在2个range。\n\n手Q和独立版QQ空间使用的是这种方案，效果挺好。\n\n**总结**\n\n尽管动态加载方案比较黑科技，可能因为系统API的更改而出问题，但相对来说\n\n**好处有** \n\n- 灵活性高，后台可以随时更新皮肤包 \n- 相对透明，开发者几乎不用关心有几套皮肤，不用去定义各种theme和attr，甚至连皮肤包的打包都可以交给设计或者专门的同学 \n- apk体积节省 \n\n**存在的问题**\n\n没有完善的开源项目，如果我们采用动态加载的第二种方案，需要的项目功能包括： \n\n- 自定义皮肤包结构 \n- 换肤引擎，加载皮肤包资源并load，实时刷新。 \n- 皮肤包打包工具 \n- 对各种rom的兼容\n\n如果有这么一个项目的话，就一劳永逸了，有兴趣的同学可以联系一下，大家一起搞一搞。\n\n内部加载方案大同小异，主要解决的都是即时刷新的问题，然而从目前的一些开源项目来看，仍然没有特别简便的方案。让我选的话，我宁愿让界面重新创建，比如重启activity，或者remove所有view再添加回来（或者你可能想遍历rootview，然后一个个检查是否需要换肤然后set…）。\n\n### 7.hotfix是否用过,原理是否了解?\n\n[Android热修复技术选型——三大流派解析](https://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&mid=2651112709&idx=1&sn=09f82f5e2e8e287904391dbc4b1f83f6&scene=1&srcid=0909KyPp8gx8aLwII2MEYUQ3)\n\n### 8.说说项目中用到了哪些设计模式,说了一下策略模式和观察者模式?\n\n[Android源码设计模式分析项目](https://github.com/simple-android-framework-exchange/android_design_patterns_analysis#schedule)\n\n**1.单例模式（application、eventBus）\n2.builder创建模式（AlertDialog、Glide、OkHttp）\n3.观察者模式（ListView、RxJava，监听事件）\n4.装饰模式（context）\n5.外观模式（contextImpl）\n6.模板方法模式（Activity和Fragment生命周期、AsyncTask、BaseActivity）\n7.策略模式（Volley、属性动画、插值器 Interpolator）\n8.组合模式（View、ViewGroup）\n9.代理模式（binder）\n10.迭代器模式（Iterator）\n11.命令模式（Runnable）\n12.原型模式（Intent）\n13.责任链模式（try-catch语句、有序广播、事件分发机制）\n14.桥接模式bridge（listview和BaseAdapter）\n15.适配器模式（BaseAdapter类）**\n\n### 9.会JS么?有Hybid开发经验么?\n**为什么引入Hybrid开发**\n混合开发是 Native 和 Web 技术一起用，开发者以 Native 代码为主体，在合适的地方部分使用 Web 技术。比如在 Android 中的 Activity 内放置一个 Webview（一个浏览器引擎，只拥有渲染 HTML，CSS 和执行 JavaScript 的核心功能）。这样，部分用户界面就可以在 WebView 中使用 Web 技术实现。\n\n促使我们在移动开发中使用 Web 技术主要动力在于，相比于 Native 技术，Web 技术具有诸多优势：\n\n* 高效率的界面开发：HTML，CSS，JavaScript 的组合被证明在用户界面开发方面具有很高的效率。\n\n* 跨平台：统一的浏览器内核标准，使得 Web 技术具有跨平台特性。iOS 和 Android 可以使用一套代码。\n\n* 热更新：可越过发布渠道自主更新应用。\n\n这些优势都和开发效率有关。Web 技术具有这些优势的原因是，Web 技术是一个开放标准。基于开放的标准已经发展出来庞大生态，而且这个生态从 PC 时代发展至今已积累多年，开发者可以利用生态中产出的各种成果，从而省去很多重复工作。\n\n在大型移动应用的开发中，项目代码庞杂，通常还需要 iOS，Android，移动 Web 和 桌面 Web 全平台支持。相对于同时开发几个版本，使用混合开发显然可以在代码重用、开发成本和效率方面有很大的优势，在权衡性能体验的前提下，使用混合开发是非常现实的选择。\n\n**实现方式**\n一般来讲，也是我目前知道的两种主流的方式就是\n\n1.  js调用Native中的代码\n2.  Schema：WebView拦截页面跳转\n\n第2种方式实现起来很简单，但是一个致命的问题就是这种交互方式是单向的，Html 5无法实现回调。像云音乐App中这种点击跳转到具体页面的功能，Schema的方式确实可以简单实现，而且也非常适合。如果需求变得复杂，假如Html 5需要获取Native App中的用户信息，那么最好使用js调用的方式。\n\n**[JS安全漏洞](http://jaq.alibaba.com/blog.htm?id=48)**\nAndroid API level 16以及之前的版本存在远程代码执行安全漏洞，该漏洞源于程序没有正确限制使用WebView.addJavascriptInterface方法，远程攻击者可通过使用Java Reflection API利用该漏洞执行任意Java对象的方法，简单的说就是通过addJavascriptInterface给WebView加入一个JavaScript桥接接口，JavaScript通过调用这个接口可以直接操作本地的JAVA接口。该漏洞最早公布于CVE-2012-6636【1】，其描述了WebView中addJavascriptInterface API导致的远程代码执行安全漏洞。\n\n**js调用的方式**\n`WebView.addJavascriptInterface(Object o, String interface)`方法注册可供js调用的Java对象\n\n`addJavascriptInterface(mJsBridge, mWindowClientName);`\n\n在mJsBridge对象中封装一些供js调用的Java方法，例如有loading框显示与隐藏，页面关闭的统一动画，dialog的显示，toast的显示，调用native系统的打开相册，打开通讯录，打电话，发短信等\n\n**Schema的方式**\n通过shouldOverrideUrlLoading方法拦截url，如果host是内定的协议就打开对应协议的activity，如果是正常的url的HTTP或者HTTPS就正常loadUrl，否则就是默认是系统协议处理，打开系统页面，例如调起拨打电话。\n```\n\npublic final boolean filter(Context context, String url) {\n   mContext = context;\n if (null == mContext || TextUtils.isEmpty(url)) {\n      return true;\n  }\n   //普通url\n  if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n      return dealWithHttp(url);\n  }\n   //更美协议\n  if (url.startsWith(mProtocolName)) {\n      return dealWithProtocol(url);\n  }\n   //系统协议\n  return dealWithSystemProtocol(url); }\n\n/**\n * 普通url处理 * * @param url\n  * @return\n  */ protected boolean dealWithHttp(String url) {\n   if (null != mOnLoadUrlListener && mWhiteList.inWhiteList(url)) {\n      mOnLoadUrlListener.onLoadUrl(url);\n  }\n   return true; }\n\n/**\n * 协议处理 * * @param url\n  * @return\n  */ protected boolean dealWithProtocol(String url) {\n   try {\n      if (mContext instanceof GMActivity) {\n         ((GMActivity) mContext).startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse(url)), 1024);\n  } else if (mContext instanceof Activity) {\n         ((Activity) mContext).startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse(url)), 1024);\n  }\n   } catch (Exception e) {\n      e.printStackTrace();\n  }\n   return true; }\n\n/**\n * 系统协议处理，eg：tel（拨打电话） * @param url\n  * @return\n  */ protected boolean dealWithSystemProtocol(String url){\n   try {\n      if (mContext instanceof GMActivity) {\n         ((GMActivity) mContext).startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse(url)), 1024);\n  } else if (mContext instanceof Activity) {\n         ((Activity) mContext).startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse(url)), 1024);\n  }\n   } catch (Exception e) {\n      e.printStackTrace();\n  }\n   return true; }\n```\n\n### 10.说一下快排的思想?手写代码\n\n基本思想：选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分。\n\n![](http://img.my.csdn.net/uploads/201209/07/1347009479_6587.jpg)\n\n![](http://ou21vt4uz.bkt.clouddn.com/qickSort.png)\n\n```\npublic static void quickSort(int[] array) {\n    _quickSort(array, 0, array.length - 1);\n    System.out.println(Arrays.toString(array) + \" quickSort\");\n}\nprivate static int getMiddle(int[] list, int low, int high) {\n    int tmp = list[low];    //数组的第一个作为中轴\n    while (low < high) {\n        while (low < high && list[high] >= tmp) {\n            high--;\n        }\n        list[low] = list[high];   //比中轴小的记录移到低端\n        while (low < high && list[low] <= tmp) {\n            low++;\n        }\n        list[high] = list[low];   //比中轴大的记录移到高端\n    }\n    list[low] = tmp;              //中轴记录到尾\n    return low;                  //返回中轴的位置\n}\n\nprivate static void _quickSort(int[] list, int low, int high) {\n    if (low < high) {\n        int middle = getMiddle(list, low, high);  //将list数组进行一分为二\n        _quickSort(list, low, middle - 1);      //对低字表进行递归排序\n        _quickSort(list, middle + 1, high);      //对高字表进行递归排序\n    }\n}\n```\n\n### 11.堆有哪些数据结构?\n\n对于这轮面试明显感觉到压力,知识的纵向了解也比较深,应该是个leader.\n\n**第三轮**\n\n1.介绍一下在项目中的角色?\n\n2.遇到困难是怎么解决的?\n\n3.如何与人相处,与别人意见相左的时候是怎么解决的,并举生活中的一个例子.\n\n4.有没有压力特别大的时候?\n\n这个应该是项目经理了,问的问题偏向于生活性格方面.\n\n以上面试中问到的题目基本上都可以在上面找到答案,所以做准备是很重要的,但技术是一点点积累的,就算你全会背了,面试过了,真正等到工作的时候还是会捉襟见肘的,所以踏实点吧骚年.\n\n",[[1512615659542,["gengmei_pxf@gengmei123.local",[[1,66894,"\n"]],[66892,66892],[66893,66893]]],[1512615660368,["gengmei_pxf@gengmei123.local",[[1,66893,"对于一个数组，选取某个元素作为切分元素（比如第一个元素），然后把比这个元素小的都放到它前面，比这个元素大的都放到它后面，这样切分元素的最终位置就确定了，并且数组被划分为两个子数组。然后再用同样的方法分别对子数组进行排序，最终整个数组将变成有序的"]],[66893,66893],[67015,67015]]],[1512615707298,["gengmei_pxf@gengmei123.local",[[-1,66788,"一个"],[1,66790,"某个元素作为"]],[66788,66790],[66794,66794]]],[1512615721136,["gengmei_pxf@gengmei123.local",[[1,66895,"，最终整个数组将变成有序的"]],[66895,66895],[66908,66908]]],[1512615724725,["gengmei_pxf@gengmei123.local",[[-1,66910,"对于一个数组，选取某个元素作为切分元素（比如第一个元素），然后把比这个元素小的都放到它前面，比这个元素大的都放到它后面，这样切分元素的最终位置就确定了，并且数组被划分为两个子数组。然后再用同样的方法分别对子数组进行排序，最终整个数组将变成有序的"]],[66910,67032],[66910,66910]]],[1512615725948,["gengmei_pxf@gengmei123.local",[[-1,66911,"\n"]],[66910,66910],[66909,66909]]],[1512639169022,["gengmei_pxf@gengmei123.local",[[1,67952,"\n"]],[67950,67950],[67951,67951]]],[1512639170035,["gengmei_pxf@gengmei123.local",[[1,67951,"(1) **枢轴的选取方式的优化**：\n\n枢轴的选取方式有：(1) 固定位置选取；(2) 随机位置选取； (3) 三值取中法 等\n\n固定位置选取：选取当前序列的第一个元素或者最后一个元素作为枢轴，上面的算法的枢轴选取方式即为固定位置选取。该方法不是一个好的选取方案，因为当整个序列有序时，每次分割(partition)操作只会将待排序序列减1，此时为最坏情况，算法复杂度沦为O(n^2)。然而，在待排序的序列中局部有序是相当常见的，所以固定位置选取枢轴不是一种好的选择。\n\n随机位置选取：随机选取当前待排序序列的任意记录作为枢轴。由于采取随机，所以时间性能要强于固定位置选取。\n\n三值取中法： 待排序序列的前(第一个位置)、中(中间位置)、后(最后一个位置)三个记录中的中间值(按大小排序)作为枢轴\n\n作者：tianma\n链接：http://www.jianshu.com/p/bc62a66be82c\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[67951,67951],[68393,68393]]],[1512639179263,["gengmei_pxf@gengmei123.local",[[-1,68302,"作者：tianma\n链接：http://www.jianshu.com/p/bc62a66be82c\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[68302,68393],[68302,68302]]],[1512639228900,["gengmei_pxf@gengmei123.local",[[1,68302,"三值取中本质上就是随机位置选取，但是由于随机位置选取过程中需要用到随机种子来产生随机数，而三值取中不需要，所以三值取中要优于随机位置选取。\n\n所以优化枢轴的选取方式时，我们选择三值取中的方式。\n\n(2) **优化小数组时的排序方案**：\n\n当局部排序数组长度较小时，采用插入排序，而非快速排序，因为长度分割到够小后，继续分割的效率要低于直接插入排序。\n\n(3) **略去不必要的交换**\n\n略去不必要的交换，将交换操作改为替换操作。\n\n因为交换操作需要进行3次赋值操作，而替换操作只需要进行1次赋值操作。\n\n**_Java实现_**\n\n```\n// 优化的快速排序\nclass OptimizedQuickSorter extends QuickSorter {\n\n    /**\n     * 插入排序最大数组长度值\n     */\n    private static final int MAX_LENGTH_INSERT_SORT = 7;\n\n    /**\n     * 对数组arr[low...high]的子序列作快速排序，使之有序\n     */\n    @Override\n    protected void quickSort(int[] arr, int low, int high) {\n        int pivotLoc; // 记录枢轴(pivot)所在位置\n        if ((high - low + 1) > MAX_LENGTH_INSERT_SORT) {\n            // 待排序数组长度大于临界值，则进行快速排序\n            pivotLoc = partition(arr, low, high); // 将arr[low...high]一分为二,并返回枢轴位置\n\n            quickSort(arr, low, pivotLoc - 1);// 递归遍历arr[low...pivotLoc-1]\n            quickSort(arr, pivotLoc + 1, high); // 递归遍历arr[pivotLoc+1...high]\n        } else {\n            // 2\\. 优化小数组时的排序方案，将快速排序改为插入排序\n            insertSort(arr, low, high); // 对arr[low...high]子序列进行插入排序\n        }\n    }\n\n    /**\n     * 在arr[low...high]中利用三值取中选取枢轴(pivot)，将arr[low...high]分成两部分，\n     * 前半部分的子序列的记录均小于pivot，后半部分的记录均大于pivot;最后返回pivot的位置\n     */\n    @Override\n    protected int partition(int[] arr, int low, int high) {\n        int pivot;\n        pivot = medianOfThree(arr, low, high); // 1\\. 优化排序基准，使用三值取中获取中值\n        while (low < high) { // 从数组的两端向中间扫描 // A\n            while (low < high && arr[high] >= pivot) { // B\n                high--;\n            }\n            // swap(arr, low, high); // 将比枢轴pivot小的元素交换到低位\n            arr[low] = arr[high]; // 3\\. 优化不必要的交换，使用替换而不是交换  // C\n            while (low < high && arr[low] <= pivot) { // D\n                low++;\n            }\n            // swap(arr, low, high); // 将比枢轴pivot大的元素交换到高位\n            arr[high] = arr[low]; // 3\\. 优化不必要的交换，使用替换而不是交换 // E\n        }\n        arr[low] = pivot; // F\n        return low; // 返回一趟下来后枢轴pivot所在的位置\n    }\n\n    /**\n     * 通过三值取中(从arr[low...high]子序列中)获取枢轴pivot的值，让arr[low]变成中值;并返回计算的枢轴(pivot)\n     */\n    private int medianOfThree(int[] arr, int low, int high) {\n        int mid = low + ((high - low) >> 1); // mid = low + (high-low)/2, 中间元素下标\n\n        // 使用三值取中得到枢轴\n        if (arr[low] > arr[high]) { // 目的：让arr[low] <= arr[high]\n            swap(arr, low, high);\n        }\n        if (arr[mid] > arr[high]) { // 目的：让arr[mid] <= arr[high]\n            swap(arr, mid, high);\n        }\n        if (arr[mid] > arr[low]) { // 目的： 让arr[low] >= arr[mid]\n            swap(arr, low, mid);\n        }\n        // 经过上述变化，最终 arr[mid]<=arr[low]<=arr[high]，则arr[low]为中间值\n        return arr[low];\n    }\n\n    /**\n     * 对子序列arr[low...high]进行插入排序\n     */\n    private void insertSort(int[] arr, int low, int high) {\n        int i, j;\n        int tmp;\n        for (i = low + 1; i <= high; i++) { // 从下标low+1开始遍历,因为下标为low的已经排好序\n            if (arr[i] < arr[i - 1]) {\n                // 如果当前下标对应的记录小于前一位记录,则需要插入,否则不需要插入，直接将记录数增加1\n                tmp = arr[i]; // 记录下标i对应的元素\n                for (j = i - 1; j >= low && arr[j] > tmp; j--) {\n                    arr[j + 1] = arr[j]; // 记录后移\n                }\n                arr[j + 1] = tmp; // 插入正确位置\n            }\n        }\n    }\n}\n\n```\n\n**_演示_**\n\n作者：tianma\n链接：http://www.jianshu.com/p/bc62a66be82c\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[68302,68302],[71620,71620]]],[1512639241509,["gengmei_pxf@gengmei123.local",[[-1,71519,"**_演示_**\n\n作者：tianma\n链接：http://www.jianshu.com/p/bc62a66be82c\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n"]],[71518,71620],[71518,71518]]],[1512639259949,["gengmei_pxf@gengmei123.local",[[1,71518,"##### 复杂度#####\n\n时间复杂度：\n\n时间复杂度为O(nlogn)，在对快速排序进行各种细节性的优化后，快速排序的性能大大提高，在一般条件下超越了其它排序方法，故得此名。\n\n空间复杂度：\n\n就空间复杂度来说，主要是递归造成的栈空间的使用，最好情况，递归的深度为log2n，其空间复杂度也就为O(logn)，最坏情况，需要进行n‐1递归调用，其空间复杂度为O(n)，平均情况，空间复杂度也为O(logn)。\n\n作者：tianma\n链接：http://www.jianshu.com/p/bc62a66be82c\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[71518,71518],[71818,71818]]],[1512639263780,["gengmei_pxf@gengmei123.local",[[-1,71527,"#####"]],[71532,71532],[71527,71527]]],[1512639264957,["gengmei_pxf@gengmei123.local",[[1,71527,"**"]],[71527,71527],[71529,71529]]],[1512639268884,["gengmei_pxf@gengmei123.local",[[-1,71518,"#####"]],[71520,71523],[71518,71518]]],[1512639269108,["gengmei_pxf@gengmei123.local",[[-1,71517,"\n"]],[71518,71518],[71517,71517]]],[1512639271875,["gengmei_pxf@gengmei123.local",[[1,71517,"\n"]],[71517,71517],[71518,71518]]],[1512639273740,["gengmei_pxf@gengmei123.local",[[1,71518,"***"]],[71518,71518],[71521,71521]]],[1512639277043,["gengmei_pxf@gengmei123.local",[[-1,71520,"*"]],[71521,71521],[71520,71520]]],[1512639282235,["gengmei_pxf@gengmei123.local",[[-1,71721,"作者：tianma\n链接：http://www.jianshu.com/p/bc62a66be82c\n來源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[71721,71812],[71721,71721]]],[1512639282763,["gengmei_pxf@gengmei123.local",[[-1,71722,"\n"]],[71721,71721],[71720,71720]]],[1512639284115,["gengmei_pxf@gengmei123.local",[[-1,71721,"\n"]],[71720,71720],[71719,71719]]],[1512639291786,["gengmei_pxf@gengmei123.local",[[-1,71520," "]],[71521,71521],[71520,71520]]]]],["467468f6-374f-4ce2-9b24-4cf73a933532",1516950147289,"# JAVA\n\n## 一. 类的加载过程，Person person = new Person();为例进行说明。\n\n1).因为new用到了Person.class，所以会先找到Person.class文件，并加载到内存中;\n\n2).执行该类中的static代码块，如果有的话，给Person.class类进行初始化;\n\n3).在堆内存中开辟空间分配内存地址;\n\n4).在堆内存中建立对象的特有属性，并进行默认初始化;\n\n5).对属性进行显示初始化;\n\n6).对对象进行构造代码块初始化;\n\n7).对对象进行与之对应的构造函数进行初始化;\n\n8).将内存地址付给栈内存中的p变量\n\n## 二. JVM相关知识，GC机制。\n\n**JVM基本构成**\n\n![](http://upload-images.jianshu.io/upload_images/4642697-bbcb5924cdaf30f8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/473)\n\n从上图可知，JVM主要包括四个部分：\n\n    1.类加载器（ClassLoader）:在JVM启动时或者在类运行时将需要的class加载到JVM中。（下图表示了从java源文件到JVM的整个过程，可配合理解。 \n\n![](http://upload-images.jianshu.io/upload_images/4642697-1cf5f815751beeab.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400)\n\n    2.执行引擎：负责执行class文件中包含的字节码指令；\n\n    3.内存区（也叫运行时数据区）：是在JVM运行的时候操作所分配的内存区。运行时内存区主要可以划分为5个区域，如图：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-160b9ba3bfeaf8f5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/376)\n\n*   方法区(Method Area)：用于存储类结构信息的地方，包括常量池、静态变量、构造函数等。虽然JVM规范把方法区描述为堆的一个逻辑部分， 但它却有个别名non-heap（非堆），所以大家不要搞混淆了。方法区还包含一个运行时常量池。\n\n*   java堆(Heap)：存储java实例或者对象的地方。这块是GC的主要区域。从存储的内容我们可以很容易知道，方法区和堆是被所有java线程共享的。\n\n*   java栈(Stack)：java栈总是和线程关联在一起，每当创建一个线程时，JVM就会为这个线程创建一个对应的java栈。在这个java栈中又会包含多个栈帧，每运行一个方法就创建一个栈帧，用于存储局部变量表、操作栈、方法返回值等。每一个方法从调用直至执行完成的过程，就对应一个栈帧在java栈中入栈到出栈的过程。所以java栈是现成私有的。\n\n*   程序计数器(PC Register)：用于保存当前线程执行的内存地址。由于JVM程序是多线程执行的（线程轮流切换），所以为了保证线程切换回来后，还能恢复到原先状态，就需要一个独立的计数器，记录之前中断的地方，可见程序计数器也是线程私有的。\n\n*   本地方法栈(Native Method Stack)：和java栈的作用差不多，只不过是为JVM使用到的native方法服务的。\n\n        4.本地方法接口：主要是调用C或C++实现的本地方法及返回结果。\n\n**GC机制**\n\n    垃圾收集器一般必须完成两件事：检测出垃圾；回收垃圾。怎么检测出垃圾？一般有以下几种方法：\n\n**_引用计数法：_**\n\n    给一个对象添加引用计数器，每当有个地方引用它，计数器就加1；引用失效就减1。好了，问题来了，如果我有两个对象A和B，互相引用，除此之外，没有其他任何对象引用它们，实际上这两个对象已经无法访问，即是我们说的垃圾对象。但是互相引用，计数不为0，导致无法回收，所以还有另一种方法：\n\n**_可达性分析算法：_**\n\n    以根集对象为起始点进行搜索，如果有对象不可达的话，即是垃圾对象。这里的根集一般包括java栈中引用的对象、方法区常良池中引用的对象、本地方法中引用的对象等。\n\n    总之，JVM在做垃圾回收的时候，会检查堆中的所有对象是否会被这些根集对象引用，不能够被引用的对象就会被垃圾收集器回收。一般回收算法也有如下几种：\n\n1).标记-清除（Mark-sweep）\n\n2).复制（Copying\n\n3).标记-整理（Mark-Compact）\n\n4).分代收集算法\n\n具体的解释可以参考本篇文章[还不点我?](https://link.jianshu.com?t=http://blog.csdn.net/tonytfjing/article/details/44278233)\n\n## 三. 类的加载器，双亲机制，Android的类加载器。\n\n**类的加载器**\n\n    大家都知道，当我们写好一个Java程序之后，不是管是CS还是BS应用，都是由若干个.class文件组织而成的一个完整的Java应用程序，当程序在运行时，即会调用该程序的一个入口函数来调用系统的相关功能，而这些功能都被封装在不同的class文件当中，所以经常要从这个class文件中要调用另外一个class文件中的方法，如果另外一个文件不存在的，则会引发系统异常。而程序在启动的时候，并不会一次性加载程序所要用的所有class文件，而是根据程序的需要，通过Java的类加载机制（ClassLoader）来动态加载某个class文件到内存当中的，从而只有class文件被载入到了内存之后，才能被其它class所引用。所以ClassLoader就是用来动态加载class文件到内存当中用的。\n\n**双亲机制**\n\n**_1、原理介绍_**\n\n    ClassLoader使用的是双亲委托模型来搜索类的，每个ClassLoader实例都有一个父类加载器的引用（不是继承的关系，是一个包含的关系），虚拟机内置的类加载器（Bootstrap ClassLoader）本身没有父类加载器，但可以用作其它ClassLoader实例的的父类加载器。当一个ClassLoader实例需要加载某个类时，它会试图亲自搜索某个类之前，先把这个任务委托给它的父类加载器，这个过程是由上至下依次检查的，首先由最顶层的类加载器Bootstrap ClassLoader试图加载，如果没加载到，则把任务转交给Extension ClassLoader试图加载，如果也没加载到，则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常。否则将这个找到的类生成一个类的定义，并将它加载到内存当中，最后返回这个类在内存中的Class实例对象。\n\n**_2、为什么要使用双亲委托这种模型呢？_**\n\n    因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。\n\n**_3、但是JVM在搜索类的时候，又是如何判定两个class是相同的呢？_**\n\n    JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。比如网络上的一个Java类org.classloader.simple.NetClassLoaderSimple，javac编译之后生成字节码文件NetClassLoaderSimple.class，ClassLoaderA和ClassLoaderB这两个类加载器并读取了NetClassLoaderSimple.class文件，并分别定义出了java.lang.Class实例来表示这个类，对于JVM来说，它们是两个不同的实例对象，但它们确实是同一份字节码文件，如果试图将这个Class实例生成具体的对象进行转换时，就会抛运行时异常java.lang.ClassCaseException，提示这是两个不同的类型。\n\n**Android类加载器**\n\n    对于Android而言，最终的apk文件包含的是dex类型的文件，dex文件是将class文件重新打包，打包的规则又不是简单地压缩，而是完全对class文件内部的各种函数表，变量表进行优化，产生一个新的文件，即dex文件。因此加载这种特殊的Class文件就需要特殊的类加载器DexClassLoader。\n\n## 四. 集合框架，list，map，set都有哪些具体的实现类，区别都是什么?\n\n![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：了对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**===****》****TreeSet****两种排序方式：**两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n## 五. concurrentHashmap原理，原子类。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大.\n\n## 六. volatile原理\n\n    在《Java并发编程：核心理论》一文中，我们已经提到过可见性、有序性及原子性问题，通常情况下我们可以通过Synchronized关键字来解决这些个问题，不过如果对Synchronized原理有了解的话，应该知道Synchronized是一个比较重量级的操作，对系统的性能有比较大的影响，所以，如果有其他解决方案，我们通常都避免使用Synchronized来解决问题。而volatile关键字就是Java中提供的另一种解决可见性和有序性问题的方案。对于原子性，需要强调一点，也是大家容易误解的一点：对volatile变量的单次读/写操作可以保证原子性的，如long和double类型变量，但是并不能保证i++这种操作的原子性，因为本质上i++是读、写两次操作。\n\n参考文章[插好眼了等传送](https://link.jianshu.com?t=https://www.cnblogs.com/paddix/p/5428507.html)\n\n## 七. 多线程的使用场景\n\n使用多线程就一定效率高吗？ 有时候使用多线程并不是为了提高效率，而是使得CPU能够同时处理多个事件。\n\n1).为了不阻塞主线程,启动其他线程来做好事的事情,比如APP中耗时操作都不在UI中做.\n\n2).实现更快的应用程序,即主线程专门监听用户请求,子线程用来处理用户请求,以获得大的吞吐量.感觉这种情况下，多线程的效率未必高。 这种情况下的多线程是为了不必等待， 可以并行处理多条数据。\n\n比如JavaWeb的就是主线程专门监听用户的HTTP请求，然后启动子线程去处理用户的HTTP请求。\n\n3).某种虽然优先级很低的服务，但是却要不定时去做。\n\n比如Jvm的垃圾回收。\n\n4.)某种任务，虽然耗时，但是不耗CPU的操作时，开启多个线程，效率会有显著提高。\n\n比如读取文件，然后处理。 磁盘IO是个很耗费时间，但是不耗CPU计算的工作。 所以可以一个线程读取数据，一个线程处理数据。肯定比一个线程读取数据，然后处理效率高。 因为两个线程的时候充分利用了CPU等待磁盘IO的空闲时间。\n\n## 八. JAVA常量池\n\n**_Interger中的128(-128~127)_**\n\na.当数值范围为-128~127时：如果两个new出来Integer对象，即使值相同，通过“==”比较结果为false，但两个对象直接赋值，则通过“==”比较结果为“true，这一点与String非常相似。\n\nb.当数值不在-128~127时，无论通过哪种方式，即使两个对象的值相等，通过“==”比较，其结果为false；\n\nc.当一个Integer对象直接与一个int基本数据类型通过“==”比较，其结果与第一点相同；\n\nd.Integer对象的hash值为数值本身；\n\n**_为什么是-128-127?_**\n\n    在Integer类中有一个静态内部类IntegerCache，在IntegerCache类中有一个Integer数组，用以缓存当数值范围为-128~127时的Integer对象。\n\n## 九. 简单介绍一下java中的泛型，泛型擦除以及相关的概念。\n\n    泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。 Java语言引入泛型的好处是安全简单。\n\n    在Java SE 1.5之前，没有泛型的情况的下，通过对类型Object的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是一个安全隐患。\n\n    泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，提高代码的重用率。\n\n1、泛型的类型参数只能是类类型（包括自定义类），不能是简单类型。\n\n2、同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的。\n\n3、泛型的类型参数可以有多个。\n\n4、泛型的参数类型可以使用extends语句，例如<T extends superclass>。习惯上称为“有界类型”。\n\n5、泛型的参数类型还可以是通配符类型。例如Class<?> classType = Class.forName(\"java.lang.String\");\n\n**泛型擦除以及相关的概念**\n\n    Java中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会在编译器在编译的时候去掉。这个过程就称为类型擦除。\n\n**类型擦除引起的问题及解决方法**\n\n1、先检查，在编译，以及检查编译的对象和引用传递的问题\n\n2、自动类型转换\n\n3、类型擦除与多态的冲突和解决方法\n\n4、泛型类型变量不能是基本数据类型\n\n5、运行时类型查询\n\n6、异常中使用泛型的问题\n\n7、数组（这个不属于类型擦除引起的问题）\n\n9、类型擦除后的冲突\n\n10、泛型在静态方法和静态类中的问题\n\n# Android\n\n## 一. Handler机制\n\n    Android 的消息机制也就是 handler 机制,创建 handler 的时候会创建一个 looper ( 通过 looper.prepare() 来创建 ),looper 一般为主线程 looper.\n\n    handler 通过 send 发送消息 (sendMessage) ,当然 post 一系列方法最终也是通过 send 来实现的,在 send 方法中handler 会通过 enqueueMessage() 方法中的 enqueueMessage(msg,millis )向消息队列 MessageQueue 插入一条消息,同时会把本身的 handler 通过 msg.target = this 传入.\n\n    Looper 是一个死循环,不断的读取MessageQueue中的消息,loop 方法会调用 MessageQueue 的 next 方法来获取新的消息,next 操作是一个阻塞操作,当没有消息的时候 next 方法会一直阻塞,进而导致 loop 一直阻塞,当有消息的时候,Looper 就会处理消息 Looper 收到消息之后就开始处理消息: msg.target.dispatchMessage(msg),当然这里的 msg.target 就是上面传过来的发送这条消息的 handler 对象,这样 handler 发送的消息最终又交给他的dispatchMessage方法来处理了,这里不同的是,handler 的 dispatchMessage 方法是在创建 Handler时所使用的 Looper 中执行的,这样就成功的将代码逻辑切换到了主线程了.\n\n    Handler 处理消息的过程是:首先,检查Message 的 callback 是否为 null,不为 null 就通过 handleCallBack 来处理消息,Message 的 callback 是一个 Runnable 对象,实际上是 handler 的 post 方法所传递的 Runnable 参数.其次是检查 mCallback 是 否为 null,不为 null 就调用 mCallback 的handleMessage 方法来处理消息.\n\n## 二. View的绘制流程\n\n    View的绘制流程：OnMeasure()——>OnLayout()——>OnDraw()\n\n各步骤的主要工作：\n\n**_OnMeasure()：_**\n\n    测量视图大小。从顶层父View到子View递归调用measure方法，measure方法又回调OnMeasure。\n\n**_OnLayout()：_**\n\n    确定View位置，进行页面布局。从顶层父View向子View的递归调用view.layout方法的过程，即父View根据上一步measure子View所得到的布局大小和布局参数，将子View放在合适的位置上。\n\n**_OnDraw()：_**\n\n    绘制视图:ViewRoot创建一个Canvas对象，然后调用OnDraw()。六个步骤：①、绘制视图的背景；②、保存画布的图层（Layer）；③、绘制View的内容；④、绘制View子视图，如果没有就不用；⑤、还原图层（Layer）；⑥、绘制滚动条。\n\n## 三. 事件传递机制\n\n1).Android事件分发机制的本质是要解决：点击事件由哪个对象发出，经过哪些对象，最终达到哪个对象并最终得到处理。这里的对象是指Activity、ViewGroup、View.\n\n2).Android中事件分发顺序：Activity（Window） -> ViewGroup -> View.\n\n3).事件分发过程由dispatchTouchEvent() 、onInterceptTouchEvent()和onTouchEvent()三个方法协助完成\n\n**设置Button按钮来响应点击事件事件传递情况：（如下图）**\n\n布局如下:\n\n![](http://upload-images.jianshu.io/upload_images/4642697-01f23a099103eb82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/210)\n\n最外层：Activiy A，包含两个子View：ViewGroup B、View C\n\n中间层：ViewGroup B，包含一个子View：View C\n\n最内层：View C\n\n假设用户首先触摸到屏幕上View C上的某个点（如图中黄色区域），那么Action_DOWN事件就在该点产生，然后用户移动手指并最后离开屏幕。\n\n**按钮点击事件:**\n\nDOWN事件被传递给C的onTouchEvent方法，该方法返回true，表示处理这个事件;\n\n因为C正在处理这个事件，那么DOWN事件将不再往上传递给B和A的onTouchEvent()；\n\n该事件列的其他事件（Move、Up）也将传递给C的onTouchEvent();\n\n![](http://upload-images.jianshu.io/upload_images/4642697-ca12c00c79780b57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n(记住这个图的传递顺序,面试的时候能够画出来,就很详细了)\n\n## 四. Binder机制\n\n**1.了解Binder**\n\n    在Android系统中，每一个应用程序都运行在独立的进程中，这也保证了当其中一个程序出现异常而不会影响另一个应用程序的正常运转。在许多情况下，我们activity都会与各种系统的service打交道，很显然，我们写的程序中activity与系统service肯定不是同一个进程，但是它们之间是怎样实现通信的呢？所以Binder是android中一种实现进程间通信（IPC）的方式之一。\n\n    1).首先，Binder分为Client和Server两个进程。\n\n    注意，Client和Server是相对的。谁发消息，谁就是Client，谁接收消息，谁就是Server。\n\n    举个例子，两个进程A和B之间使用Binder通信，进程A发消息给进程B，那么这时候A是Binder Client，B是Binder Server；进程B发消息给进程A，那么这时候B是Binder Client，A是Binder Server——其实这么说虽然简单了，但还是不太严谨，我们先这么理解着。\n\n    2).其次，我们看下面这个图（摘自田维术的博客），基本说明白了Binder的组成解构：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-9fed6a1413057558.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/673)\n\n    图中的IPC就是进程间通信的意思。\n\n    图中的ServiceManager，负责把Binder Server注册到一个容器中。\n\n    有人把ServiceManager比喻成电话局，存储着每个住宅的座机电话，还是很恰当的。张三给李四打电话，拨打电话号码，会先转接到电话局，电话局的接线员查到这个电话号码的地址，因为李四的电话号码之前在电话局注册过，所以就能拨通；没注册，就会提示该号码不存在。\n\n    对照着Android Binder机制，对着上面这图，张三就是Binder Client，李四就是Binder Server，电话局就是ServiceManager，电话局的接线员在这个过程中做了很多事情，对应着图中的Binder驱动.\n\n    3).接下来我们看Binder通信的过程，还是摘自田维术博客的一张图：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-6a03bbb4f16108b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/675)\n\n注：图中的SM也就是ServiceManager。\n\n    我们看到，Client想要直接调用Server的add方法，是不可以的，因为它们在不同的进程中，这时候就需要Binder来帮忙了。\n\n    首先是Server在SM这个容器中注册。\n\n    其次，Client想要调用Server的add方法，就需要先获取Server对象， 但是SM不会把真正的Server对象返回给Client，而是把Server的一个代理对象返回给Client，也就是Proxy。\n\n    然后，Client调用Proxy的add方法，SM会帮他去调用Server的add方法，并把结果返回给Client。\n\n    以上这3步，Binder驱动出了很多力，但我们不需要知道Binder驱动的底层实现，涉及到C++的代码了——把有限的时间去做更有意义的事情。\n\n(ps:以上节选自包建强老师的文章[点我点我](https://link.jianshu.com?t=http://www.cnblogs.com/Jax/p/6864103.html)).\n\n**2.为什么android选用Binder来实现进程间通信？**\n\n1).可靠性。在移动设备上，通常采用基于Client-Server的通信方式来实现互联网与设备间的内部通信。目前linux支持IPC包括传统的管道，System V IPC，即消息队列/共享内存/信号量，以及socket中只有socket支持Client-Server的通信方式。Android系统为开发者提供了丰富进程间通信的功能接口，媒体播放，传感器，无线传输。这些功能都由不同的server来管理。开发都只关心将自己应用程序的client与server的通信建立起来便可以使用这个服务。毫无疑问，如若在底层架设一套协议来实现Client-Server通信，增加了系统的复杂性。在资源有限的手机 上来实现这种复杂的环境，可靠性难以保证。\n\n2).传输性能。socket主要用于跨网络的进程间通信和本机上进程间的通信，但传输效率低，开销大。消息队列和管道采用存储-转发方式，即数据先从发送方缓存区拷贝到内核开辟的一块缓存区中，然后从内核缓存区拷贝到接收方缓存区，其过程至少有两次拷贝。虽然共享内存无需拷贝，但控制复杂。比较各种IPC方式的数据拷贝次数。共享内存：0次。Binder：1次。Socket/管道/消息队列：2次。\n\n3).安全性。Android是一个开放式的平台，所以确保应用程序安全是很重要的。Android对每一个安装应用都分配了UID/PID,其中进程的UID是可用来鉴别进程身份。传统的只能由用户在数据包里填写UID/PID，这样不可靠，容易被恶意程序利用。而我们要求由内核来添加可靠的UID。\n\n所以，出于可靠性、传输性、安全性。android建立了一套新的进程间通信方式。\n\n## 五. Android中进程的级别，以及各自的区别。\n\n**1、前台进程**\n\n    用户当前正在做的事情需要这个进程。如果满足下面的条件之一，一个进程就被认为是前台进程：\n\n1).这个进程拥有一个正在与用户交互的Activity(这个Activity的onResume()方法被调用)。\n\n2).这个进程拥有一个绑定到正在与用户交互的activity上的Service。\n\n3).这个进程拥有一个前台运行的Service（service调用了方法startForeground()）.\n\n4).这个进程拥有一个正在执行其任何一个生命周期回调方法（onCreate(),onStart(),或onDestroy()）的Service。\n\n5).这个进程拥有正在执行其onReceive()方法的BroadcastReceiver。\n\n    通常，在任何时间点，只有很少的前台进程存在。它们只有在达到无法调合的矛盾时才会被杀－－如内存太小而不能继续运行时。通常，到了这时，设备就达到了一个内存分页调度状态，所以需要杀一些前台进程来保证用户界面的反应.\n\n**2、可见进程**\n\n    一个进程不拥有运行于前台的组件，但是依然能影响用户所见。满足下列条件时，进程即为可见：\n\n    这个进程拥有一个不在前台但仍可见的Activity(它的onPause()方法被调用)。当一个前台activity启动一个对话框时，就出了这种情况。\n\n**3、服务进程**\n\n    一个可见进程被认为是极其重要的。并且，除非只有杀掉它才可以保证所有前台进程的运行，否则是不能动它的。\n\n    这个进程拥有一个绑定到可见activity的Service。\n\n    一个进程不在上述两种之内，但它运行着一个被startService()所启动的service。\n\n尽管一个服务进程不直接影响用户所见，但是它们通常做一些用户关心的事情（比如播放音乐或下载数据），所以系统不到前台进程和可见进程活不下去时不会杀它。\n\n**4、后台进程**\n\n    一个进程拥有一个当前不可见的activity(activity的onStop()方法被调用)。\n\n    这样的进程们不会直接影响到用户体验，所以系统可以在任意时刻杀了它们从而为前台、可见、以及服务进程们提供存储空间。通常有很多后台进程在运行。它们被保存在一个LRU(最近最少使用)列表中来确保拥有最近刚被看到的activity的进程最后被杀。如果一个activity正确的实现了它的生命周期方法，并保存了它的当前状态，那么杀死它的进程将不会对用户的可视化体验造成影响。因为当用户返回到这个activity时，这个activity会恢复它所有的可见状态。\n\n**5、空进程**\n\n    一个进程不拥有入何active组件。\n\n    保留这类进程的唯一理由是高速缓存，这样可以提高下一次一个组件要运行它时的启动速度。系统经常为了平衡在进程高速缓存和底层的内核高速缓存之间的整体系统资源而杀死它们。\n\n## 六. 线程池的相关知识。\n\n    Android中的线程池都是之间或间接通过配置ThreadPoolExecutor来实现不同特性的线程池.Android中最常见的四类具有不同特性的线程池分别为FixThreadPool、CachedThreadPool、SingleThreadPool、ScheduleThreadExecutor.\n\n**1).FixThreadPool**\n\n    只有核心线程,并且数量固定的,也不会被回收,所有线程都活动时,因为队列没有限制大小,新任务会等待执行.\n\n    优点:更快的响应外界请求.\n\n**2).SingleThreadPool**\n\n    只有一个核心线程,确保所有的任务都在同一线程中按顺序完成.因此不需要处理线程同步的问题.\n\n**3).CachedThreadPool**\n\n    只有非核心线程,最大线程数非常大,所有线程都活动时,会为新任务创建新线程,否则会利用空闲线程(60s空闲时间,过了就会被回收,所以线程池中有0个线程的可能)处理任务.\n\n    优点:任何任务都会被立即执行(任务队列SynchronousQueue相当于一个空集合);比较适合执行大量的耗时较少的任务.\n\n**4).ScheduledThreadPool**\n\n    核心线程数固定,非核心线程(闲着没活干会被立即回收)数没有限制.\n\n    优点:执行定时任务以及有固定周期的重复任务\n\n    参考[Android开发——Android中常见的4种线程池（保证你能看懂并理解）](https://link.jianshu.com?t=http://blog.csdn.net/seu_calvin/article/details/52415337)\n\n## 七. 内存泄露，怎样查找，怎么产生的内存泄露。\n\n**产生的内存泄露**\n\n1).资源对象没关闭造成的内存泄漏\n\n2).构造Adapter时，没有使用缓存的convertView\n\n3).Bitmap对象不在使用时调用recycle()释放内存\n\n4).试着使用关于application的context来替代和activity相关的context\n\n5).注册没取消造成的内存泄漏\n\n6).集合中对象没清理造成的内存泄漏\n\n**查找内存泄漏**\n\n    查找内存泄漏可以使用Android Stdio 自带的Android Profiler工具,也可以使用Square产品的LeadCanary.\n\n## 八. Android优化\n\n**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n## 九. 插件化相关技术，热修补技术是怎样实现的，和插件化有什么区别\n\n**相同点:**\n\n    都使用ClassLoader来实现的加载的新的功能类，都可以使用PathClassLoader与DexClassLoader\n\n**不同点：**\n\n    热修复因为是为了修复Bug的，所以要将新的同名类替代同名的Bug类，要抢先加载新的类而不是Bug类，所以多做两件事：在原先的app打包的时候，阻止相关类去打上CLASS_ISPREVERIFIED标志，还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements，这样才能抢先代替Bug类，完成系统不加载旧的Bug类.\n\n    而插件化只是增肌新的功能类或者是资源文件，所以不涉及抢先加载旧的类这样的使命，就避过了阻止相关类去打上CLASS_ISPREVERIFIED标志和还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements.\n\n    所以插件化比热修复简单，热修复是在插件化的基础上在进行替旧的Bug类\n\n## 十. 怎样计算一张图片的大小，加载bitmap过程（怎样保证不产生内存溢出），二级缓存，LRUCache算法。\n\n**计算一张图片的大小**\n\n    图片占用内存的计算公式：图片高度 * 图片宽度 * 一个像素占用的内存大小.所以，计算图片占用内存大小的时候，要考虑图片所在的目录跟设备密度，这两个因素其实影响的是图片的高宽，android会对图片进行拉升跟压缩。\n\n**加载bitmap过程（怎样保证不产生内存溢出）**\n\n    由于Android对图片使用内存有限制，若是加载几兆的大图片便内存溢出。Bitmap会将图片的所有像素（即长x宽）加载到内存中，如果图片分辨率过大，会直接导致内存OOM，只有在BitmapFactory加载图片时使用BitmapFactory.Options对相关参数进行配置来减少加载的像素。\n\n**BitmapFactory.Options相关参数详解**\n\n(1).Options.inPreferredConfig值来降低内存消耗。\n\n比如：默认值ARGB_8888改为RGB_565,节约一半内存。\n\n(2).设置Options.inSampleSize 缩放比例，对大图片进行压缩 。\n\n(3).设置Options.inPurgeable和inInputShareable：让系统能及时回 收内存。\n\nA：inPurgeable：设置为True时，表示系统内存不足时可以被回 收，设置为False时，表示不能被回收。\n\nB：inInputShareable：设置是否深拷贝，与inPurgeable结合使用，inPurgeable为false时，该参数无意义。\n\n(4).使用decodeStream代替其他方法。\n\ndecodeResource,setImageResource,setImageBitmap等方法\n\n## 十一. LRUCache算法是怎样实现的。\n\n    内部存在一个LinkedHashMap和maxSize，把最近使用的对象用强引用存储在 LinkedHashMap中，给出来put和get方法，每次put图片时计算缓存中所有图片总大小，跟maxSize进行比较，大于maxSize，就将最久添加的图片移除；反之小于maxSize就添加进来。\n\n    之前，我们会使用内存缓存技术实现，也就是软引用或弱引用，在Android 2.3（APILevel 9）开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，这让软引用和弱引用变得不再可靠。\n\n# 算法\n\n## 一. 算法题\n\nm * n的矩阵，能形成几个正方形（2 * 2能形成1个正方形，2 * 3 2个，3 * 3 6个）\n\n计数的关键是要观察到任意一个倾斜的正方形必然唯一内接于一个非倾斜的正方形，而一个非倾斜的边长为k的非倾斜正方形，一条边上有k-1个内点，每个内点恰好确定一个内接于其中的倾斜正方形，加上非倾斜正方形本身，可知，将边长为k的非倾斜正方形数目乘以k，再按k求和即可得到所有正方形的数目。\n\n设2≤n≤m，k≤n-1，则边长为k的非倾斜有\n\n(n-k)(m-k)个，故所有正方形有\n\n∑(m-k)(n-k)k个\n\n例如m=n=4\n\n正方形有3_3_1+2_2_2+1_1_3=20个\n\n# 下面是面试过程中遇到的题目\n\n大多数题目都可以在上面找到答案.\n\n## 电话面试题\n\n### 1.ArrayList 和 Hashmap 简单说一些,区别,底层的数据结构.\n\n### 2.Handler 消息机制\n\n### 3.引起内存泄漏的场景\n\n### 4.多线程的使用场景?\n\n### 5.常用的线程池有哪几种?\n\n### 6.在公司做了什么?团队规模?为什么离职?\n\n## 面试中实际涉及到的问题\n\n**第一轮**\n\n### **1.知道哪些单例模式,写一个线程安全的单例,并分析为什么是线程安全的**?\n```java\npublic class Singleton {\n\t// Private constructor prevents instantiation from other classes\n\tprivate Singleton() { }\n\n\t/**\n\t* SingletonHolder is loaded on the first execution of Singleton.getInstance() \n\t* or the first access to SingletonHolder.INSTANCE, not before.\n\t*/\n\tprivate static class SingletonHolder { \n\t\t\tpublic static final Singleton INSTANCE = new Singleton();\n\t}\n\n\tpublic static Singleton getInstance() {\n\t\t\treturn SingletonHolder.INSTANCE;\n\t}\n}\n```\n### **2.Java中的集合有哪些?解释一下HashMap?底部的数据结构?散列表冲突的处理方法,散列表是一个什么样的数据结构?HashMap是采用什么方法处理冲突的**?\n\n![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n```\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n```\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**TreeSet两种排序方式**：两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\n```\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n```\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\n```\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n```\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\n```\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n```\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n **五. concurrentHashmap原理，原子类**。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大.\n\n### **3.解释一下什么是MVP架构,画出图解,一句话解释MVP和MVC的区别**?\n\n为了解决逻辑处理和UI视图的松散耦合，MVC和MVP的架构模式在很多App中使用比较广泛。\n\n那什么是MVP呢？它又和我们常常听到的MVC有什么关系了以及区别呢？\n\n![MVP和MVC架构图](http://frodoking.github.io/img/android/mvp_mvc_img.png)\n\nMVP 是从经典的模式MVC演变而来，它们的基本思想有相通的地方：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。作为一种新的模式，**MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会从直接Model中读取数据而不是通过 Controller**。\n\n在MVC里，View是可以直接访问Model的！从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。 在MVC模型里，更关注的Model的不变，而同时有多个对Model的不同显示，及View。所以，在MVC模型里，Model不依赖于View，但是View是依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。\n\n**MVP如何解决MVC的问题**？\n\n在MVP里，Presenter完全把Model和View进行了分离，主要的程序逻辑在Presenter里实现。而且，Presenter与具体的View是没有直接关联的，而是通过定义好的接口进行交互，从而使得在变更View时候可以保持Presenter的不变，即重用！ 不仅如此，我们还可以编写测试用的View，模拟用户的各种操作，从而实现对Presenter的测试–而不需要使用自动化的测试工具。 我们甚至可以在Model和View都没有完成时候，就可以通过编写Mock Object（即实现了Model和View的接口，但没有具体的内容的）来测试Presenter的逻辑。 在MVP里，应用程序的逻辑主要在Presenter来实现，其中的View是很薄的一层。因此就有人提出了Presenter First的设计模式，就是根据User Story来首先设计和开发Presenter。在这个过程中，View是很简单的，能够把信息显示清楚就可以了。在后面，根据需要再随便更改View，而对Presenter没有任何的影响了。 如果要实现的UI比较复杂，而且相关的显示逻辑还跟Model有关系，就可以在View和Presenter之间放置一个Adapter。由这个 Adapter来访问Model和View，避免两者之间的关联。而同时，因为Adapter实现了View的接口，从而可以保证与Presenter之间接口的不变。这样就可以保证View和Presenter之间接口的简洁，又不失去UI的灵活性。 在MVP模式里，View只应该有简单的Set/Get的方法，用户输入和设置界面显示的内容，除此就不应该有更多的内容，绝不容许直接访问Model–这就是与MVC很大的不同之处。\n\nMVP的优点：\n\n> 1、模型与视图完全分离，我们可以修改视图而不影响模型；\n> 2、可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部；\n> 3、我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁；\n> 4、如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）。\n\n**使用方法**\n\n1、建立bean\n\n```\n\npublic class UserBean {\n private String mFirstName;\n private String mLastName;\n\n public UserBean(String firstName, String lastName) {\n this. mFirstName = firstName;\n this. mLastName = lastName;\n }\n\n public String getFirstName() {\n return mFirstName;\n }\n\n public String getLastName() {\n return mLastName;\n }\n}\n```\n \n2、建立model接口（处理业务逻辑，这里指数据读写）\n\n```\n\npublic interface IUserModel {\n void setID(int id);\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n\n int getID();\n\n UserBean load(int id);// 通过id读取user信息,返回一个UserBean\n}\n```\n\n3、建立view接口（更新ui中的view状态），这里列出需要操作当前view的方法\n\n``` \n\npublic interface IUserView {\n int getID();\n\n String getFristName();\n\n String getLastName();\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n}\n\n ```\n4、建立presenter（主导器，通过iView和iModel接口操作model和view），activity可以把所有逻辑给presenter处理，这样java逻辑就从手机的activity中分离出来\n\n```\npublic class UserPresenter {\n private IUserView mUserView;\n private IUserModel mUserModel;\n\n public UserPresenter(IUserView view) {\n mUserView = view;\n mUserModel = new UserModel();\n }\n\n public void saveUser( int id, String firstName, String lastName) {\n mUserModel.setID(id);\n mUserModel.setFirstName(firstName);\n mUserModel.setLastName(lastName);\n }\n\n public void loadUser( int id) {\n UserBean user = mUserModel.load(id);\n mUserView.setFirstName(user.getFirstName()); // 通过调用IUserView的方法来更新显示\n mUserView.setLastName(user.getLastName());\n }\n}\n\n ```\n**结束语**\n\nMVP主要解决就是把逻辑层抽出来成P层，要是遇到需求逻辑上的更改就可以只需要修改P层了或者遇到逻辑上的大概我们可以直接从写一个P也可以，很多开发人员把所有的东西都写在了Activity/Fragment里面这样一来遇到频繁改需求或者逻辑越来越复杂的时候，Activity/Fragment里面就会出现过多的混杂逻辑导致出错，所以MVP模式对于APP来对控制逻辑和UI的解耦来说是一个不错的选择！\n\n在这里多说一下，其实MVP只是一个总体的解决方案。在V和P之间其实我们还可以采用事件总线的方案来解决这种高耦合的情况。本人在另外一篇文章中将会讲到[事件总线（otto的bus和eventbus的一个对比分析）](https://frodoking.github.io/2015/03/30/android-eventbus-otto-analysis/)\n\n\n### **4.Handle消息机制?在使用Handler的时候要注意哪些东西,是否会引起内存泄漏?画一下Handler机制的图解**?\n\n![](http://upload-images.jianshu.io/upload_images/1824194-a947dcc5b22f69fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面一共出现了几种类，ActivityThread，Handler，MessageQueue，Looper，msg（Message）,对这些类作简要介绍：\n\nActivityThread：程序的启动入口，为什么要介绍这个类，是因为该类就是我们说的主线程，它对Looper进行操作的。\n\nHandler：字面意思是操控者，该类有比较重要的地方，就是通过handler来发送消息（sendMessage）到MessageQueue和 操作控件的更新（handleMessage）。handler下面持有这MessageQueue和Looper的对象。\n\nMessageQueue：字面意思是消息队列，就是封装Message类。对Message进行插入和取出操作。\n\nMessage：这个类是封装消息体并被发送到MessageQueue中的，给类是通过链表实现的，其好处方便MessageQueue的插入和取出操作。还有一些字段是（int what，Object obj，int arg1，int arg2）。what是用户定义的消息和代码，以便接收者（handler）知道这个是关于什么的。obj是用来传输任意对象的，arg1和arg2是用来传递一些简单的整数类型的。\n\n下面，我们按照启动顺序来进行源码分析：\n\n![](http://upload-images.jianshu.io/upload_images/1824194-298ebb16ce4a3b70.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://raw.githubusercontent.com/bihe0832/Android-System-Related-Charts/master/framework/handler-sequence.jpg)\n\n\n\n### **5.是否做过性能优化?已经采取了哪些措施进行优化**?\n\n**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n### **6.引起内存泄漏的原因是什么?以及你是怎么解决的**?\n\n这些问题应该都是比较基础的问题,每个开发者都应该是非常熟悉并能详细叙述的.这一轮的面试官问的技术都是平时用到的.\n\n**产生的内存泄露**\n\n1).资源对象没关闭造成的内存泄漏\n\n2).构造Adapter时，没有使用缓存的convertView\n\n3).Bitmap对象不在使用时调用recycle()释放内存\n\n4).试着使用关于application的context来替代和activity相关的context\n\n5).注册没取消造成的内存泄漏\n\n6).集合中对象没清理造成的内存泄漏\n\nAndroid的虚拟机是基于寄存器的Dalvik，它的最大堆大小一般是16M，有的机器为24M。因此我们所能利用 的内存空间是有限的。如果我们的内存占用超过了一定的水平就会出现OutOfMemory的错误。\n\n内存溢出的几点原因总结:\n1、**资源释放问题**: 程序代码的问题，长期保持某些资源(如Context)的引用，造成内存泄露，资源得不到释放 \n\n2、**对象内存过大问题**:\n保存了多个耗用内存过大的对象(如Bitmap)，造成内存超出限制\n\n3、**static**:\nstatic是Java中的一个关键字，当用它来修饰成员变量时，那么该变量就属于该类，而不是该类的实例。所以 用static修饰的变量，它的生命周期是很长的，如果用它来引用一些资源耗费过多的实例(Context的情况最多）\n这时就要谨慎对待了。 \n```\npublic class ClassName {\n private static Context mContext;\n//省略 }\n```\n以上的代码是很危险的，如果将Activity赋值到mContext的话。那么即使该Activity已经onDestroy，但是由于 仍有对象保存它的引用，因此该Activity依然不会被释放。\n我们举Android文档中的一个例子。\n```\nprivate static Drawable sBackground; @Override\nprotected void onCreate(Bundle state) {\n\tsuper.onCreate(state);\n\tTextView label = new TextView(this);\n        label.setText(\"Leaks are bad\");\n\tif (sBackground == null) {\n\tsBackground = getDrawable(R.drawable.large_bitmap); }\n\tlabel.setBackgroundDrawable(sBackground);\n\tsetContentView(label); }\n```\nsBackground, 是 一个静态的变量，但是我们发现，我们并没有显式的保存Contex的引用，但是，当Drawable与\n\nView连接之后，Drawable就将View设 置为一个回调，由于View中是包含Context的引用的，所以，实际上我们依\n\n然保存了Context的引用。这个引用链如下: Drawable->TextView->Context\n\n所以，最终该Context也没有得到释放，发生了内存泄露。\n\n**针对static的解决方案**:\n\n第一、应该尽量避免static成员变量引用资源耗费过多的实例，比如Context。\n\n第二、Context尽量使用Application Context，因为Application的Context的生命周期比较长，引用它不会出现内存\n泄露的问题。\n\n第三、使用WeakReference代替强引用。比如可以使用WeakReference<Context> mContextRef; 该部分的详细内容也可以参考Android文档中Article部分。\n\n4、**线程导致内存溢出**:\n线程产生内存泄露的主要原因在于线程生命周期的不可控。我们来考虑下面一段代码。\n```\npublic class MyActivity extends Activity {\n \t@Override\n\tpublic void onCreate(Bundle savedInstanceState) {\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.main);\n\tnew MyThread().start();\n}\nprivate class MyThread extends Thread{\n\t@Override public void run() {\n\tsuper.run();\n\t//do somthing }\n\t} \n}\n```\n这段代码很平常也很简单，是我们经常使用的形式。我们思考一个问题:假设MyThread的run函数是一个很 费时的操作，当我们开启该线程后，将设备的横屏变为了竖屏，一 般情况下当屏幕转换时会重新创建Activity， 按照我们的想法，老的Activity应该会被销毁才对，然而事实上并非如此。\n\n由于我们的线程是Activity的内部类，所以MyThread中保存了Activity的一个引用，当MyThread的run函数没有 结束时，MyThread是不会被销毁的，因此它所引用的老的Activity也不会被销毁，因此就出现了内存泄露的问题。\n\n有些人喜欢用Android提供的AsyncTask，但事实上AsyncTask的问题更加严重，Thread只有在run函数不结束时才出现这种内存泄露问题，然而AsyncTask内部的实现机制是运用了ThreadPoolExcutor,该类产生的Thread对象的生命周期是不确定的，是应用程序无法控制的，因此如果AsyncTask作为Activity的内部类，就更容易出现内存\n\n**泄露的问题**。\n\n针对这种线程导致的内存泄露问题的解决方案: \n\n第一、将线程的内部类，改为静态内部类。\n\n第二、在线程内部采用弱引用保存Context引用。\n\n二、避免内存溢出的方案:\n** 1、图片过大导致内存溢出**: 模拟器的RAM比较小，由于每张图片先前是压缩的情况，放入到Bitmap的时候，大小会变大，导致超出RAM内存\n\n★android 中用bitmap 时很容易内存溢出，报如下错误:Java.lang.OutOfMemoryError : bitmap size exceeds VM budget \n解决: 方法1: 主要是加上这段:等比例缩小图片\n\n1)通过getResource()方法获取资源:\n```\n//解决加载图片 内存溢出的问题 \n//Options 只保存图片尺寸大小，不保存图片到内存\nBitmapFactory.Options options = new BitmapFactory.Options();\noptions.inSampleSize = 2;\n\n//缩放的比例，缩放是很难按准备的比例进行缩放的，其值表明缩放的倍数，SDK中建议其值是2的指数值,值越大会导致图片不清晰\nBitmapFactory.Options opts = new BitmapFactory.Options(); \nopts.inSampleSize = 2;\nBitmap bmp = null;\nbmp = BitmapFactory.decodeResource(getResources(), mImageIds[position],opts); ...\n//回收\nbmp.recycle();\n```\n2)通过Uri取图片资源\n以上代码可以优化内存溢出，但它只是改变图片大小，并不能彻底解决内存溢出。\n3)通过路径获取图片资源\n\n方法2:对图片采用软引用，及时地进行recyle()操作\n\n具体见“各种引用的简单了解”中的示例\n**2、复用listView**: 方法:对复杂的listview进行合理设计与编码:\n```\nprivate ImageView preview;\nBitmapFactory.Options options = new BitmapFactory.Options();\n//图片宽高都为原来的二分之一，即图片为原来的四分之一\noptions.inSampleSize = 2;\nBitmap bitmap = BitmapFactory.decodeStream(cr.openInputStream(uri), null, options); preview.setImageBitmap(bitmap);\nprivate ImageView preview;\nprivate String fileName= \"/sdcard/DCIM/Camera/2010-05-14 16.01.44.jpg\"; BitmapFactory.Options options = new BitmapFactory.Options();\n//图片宽高都为原来的二分之一，即图片为原来的四分之一 \noptions.inSampleSize = 2;\nBitmap b = BitmapFactory.decodeFile(fileName, options);\npreview.setImageBitmap(b); filePath.setText(fileName);\nSoftReference<Bitmap> bitmap;\nbitmap = new SoftReference<Bitmap>(pBitmap);\nif(bitmap != null){\n\tif(bitmap.get() != null && !bitmap.get().isRecycled()){ bitmap.get().recycle();\n\tbitmap= null;\n }\n}\n\nAdapter中:\n\n@Override\npublic View getView(int position, View convertView, ViewGroup parent) {\n\tViewHolder holder;\n\tif(convertView!=null && convertView instanceof LinearLayout){\n\tholder = (ViewHolder) convertView.getTag(); }else{\n\tconvertView = View.inflate(MainActivity.this, R.layout.item, null); holder = new ViewHolder();\n\tholder.tv = (TextView)\nconvertView.findViewById(R.id.tv); convertView.setTag(holder);\n}\nholder.tv.setText(\"XXXX\");\nholder.tv.setTextColor(Color.argb(180, position*4, position*5, 255-position*2)); return convertView;\n\n}\n\nclass ViewHolder{\n\tprivate TextView tv;\n }\n```\n**3、界面切换**\n方法1:单个页面，横竖屏切换N次后 OOM 1、看看页面布局当中有没有大的图片，比如背景图之类的。\n\n去除xml中相关设置，改在程序中设置背景图(放在onCreate()方法中):\n\n在Activity destory时注意，bg.setCallback(null); 防止Activity得不到及时的释放 2\\. 跟上面方法相似，直接把xml配置文件加载成view 再放到一个容器里 然后直接调用 this.setContentView(View view);方法，避免xml的重复加载\n\n方法2: 在页面切换时尽可能少地重复使用一些代码 比如:重复调用数据库，反复使用某些对象等等......\n\n**4、内存分配**: 方法1:Android堆内存也可自己定义大小和优化Dalvik虚拟机的堆内存分配\n\n注意若使用这种方法:project build target 只能选择 <= 2.2 版本，否则编译将通不过。 所以不建议用这种方式\n\n**常见的内存使用不当的情况**\n\n**1、查询数据库没有关闭游标**\n\n程序中经常会进行查询数据库的操作，但是经常会有使用完毕Cursor后没有关闭的情况。如果我们的查询结果集比较小，对内存的消耗不容易被发现，只有在常时间大量操作的情况下才会复现内存问题，这样就会给以后的测试和问题排查带来困难和风险。\n\nDrawable bg = getResources().getDrawable(R.drawable.bg); XXX.setBackgroundDrawable(rlAdDetailone_bg);\nprivate final static int CWJ_HEAP_SIZE= 6*1024*1024;\nprivate final static float TARGET_HEAP_UTILIZATION = 0.75f; VMRuntime.getRuntime().setMinimumHeapSize(CWJ_HEAP_SIZE); VMRuntime.getRuntime().setTargetHeapUtilization(TARGET_HEAP_UTILIZATION);\nCursor cursor = null; try {\ncursor = getContentResolver().query(uri ...); if (cursor != null && cursor.moveToNext()) { ... ...\n}\n} finally {\nif (cursor != null) {\ntry { cursor.close();\n} catch (Exception e) {\n//ignore this }\n} }\n\n**2、构造Adapter时，没有使用缓存的 convertView**\n\n以构造ListView的BaseAdapter为例，在BaseAdapter中提供了方法: public View getView(int position, View convertView, ViewGroup parent)\n\n来向ListView提供每一个item所需要的view对象。初始时ListView会从BaseAdapter中根据当前的屏幕布局实例 化一定数量的 view对象，同时ListView会将这些view对象缓存起来。当向上滚动ListView时，原先位于最上面的 list item的view对象会被回收，然后被用来构造新出现的最下面的list item。这个构造过程就是由getView()方法完成的，getView()的第二个形参 View convertView就是被缓存起来的list item的view对象(初始化时缓存中没有view对 象则convertView是null)。\n由此可以看出，如果我们不去使用convertView，而是每次都在getView()中重新实例化一个View对象的话，即浪费资源也浪费时间，也会使得内存占用越来越大。ListView回收list item的view对象的过程可以查看:\n```\npublic View getView(int position, View convertView, ViewGroup parent) { View view = null;\nif (convertView != null) {\nview = convertView;\n\npopulate(view, getItem(position)); ...\n} else {\nview = new Xxx(...);\n\n...\n}\nreturn view;\n\n}\n```\n**3、Bitmap对象不在使用时调用recycle()释放内存**\n有时我们会手工的操作Bitmap对象，如果一个Bitmap对象比较占内存，当它不在被使用的时候，可以调用\nBitmap.recycle()方法回收此对象的像素所占用的内存，但这不是必须的，视情况而定。\n\n**4、释放对象的引用**\n当一个生命周期较短的对象A，被一个生命周期较长的对象B保有其引用的情况下，在A的生命周期结束时，\n\n要在B中清除掉对A的引用。 示例A:\n```\npublic class DemoActivity extends Activity { ... ...\nprivate Handler mHandler = ... private Object obj;\npublic void operation() {\nobj = initObj();\n...\n[Mark]\nmHandler.post(new Runnable() {\npublic void run() { useObj(obj);\n}\n});\n} }\n```\n我们有一个成员变量 obj，在operation()中我们希望能够将处理obj实例的操作post到某个线程的MessageQueue 中。在以上的代码中，即便是 mHandler所在的线程使用完了obj所引用的对象，但这个对象仍然不会被垃圾回收掉，因为DemoActivity.obj还保有这个对象的引用。 所以如果在DemoActivity中不再使用这个对象了，可以在 [Mark]的位置释放对象的引用，而代码可以修改为:\n```\n... ...\npublic void operation() {\nobj = initObj();\n...\nfinal Object o = obj;\nobj = null;\nmHandler.post(new Runnable() { public void run() {\nuseObj(o); }\n}\n}\n... ...\n```\n示例B: 假设我们希望在锁屏界面(LockScreen)中，监听系统中的电话服务以获取一些信息(如信号强度等)，则可以在\nLockScreen中定义一个PhoneStateListener的对象，同时将它注册到TelephonyManager服务中。对于LockScreen对象，当需要显示锁屏界 面的时候就会创建一个LockScreen对象，而当锁屏界面消失的时候LockScreen对象就会被释放掉。\n但是如果在释放LockScreen对象的时候忘记取消我们之前注册的PhoneStateListener对象，则会导致LockScreen无 法被垃 圾回收。如果不断的使锁屏界面显示和消失，则最终会由于大量的LockScreen对象没有办法被回收而引起OutOfMemory,使得system_process进程挂掉。\n\n**5、其他**\nAndroid应用程序中最典型的需要注意释放资源的情况是在Activity的生命周期中，在onPause()、onStop()、\nonDestroy()方法中需要适当的释放资源的情况。由于此情况很基础，在此不详细说明，具体可以查看官方文档对Activity生命周期的介绍，以明确何时应该释放哪些资源。\n\n## **第二轮**\n\n### 1.关于并发理解多少?说几个并发的集合?\n[Java 并发编程](http://www.cnblogs.com/paddix/p/5374810.html)\n\n**Java 并发编程：核心理论**：\n共享性，互斥性，原子性，可见性，有序性\n\n**什么是并发：**\n同时在做几件事就是并发\n\n**并发的好处**\n**1.提高资源利用率**\n当一个任务并没有完全占用系统资源时，可以利用并发来提高资源利用率，从而能更快的完成任务\n**2.在程序任务上更加精简**\n任务明确分配好，又能同时进行，既提高了效率，逻辑又清晰\n**3.更好的响应程序**\n例如图片的上传，页面正常展示没有卡顿，又能正常上传图片，既保证了页面能正常响应，又保证图片能正常上传\n\n**并发的风险**\n**1.并发的代价**\n需要占用更多资源\n设计好一个并发程序并不容易\n并发的资源交互问题复杂\n\n**2.并发的隐患**\n滥用资源导致系统不稳定\n结果与预期不符\n出现的BUG难以排查\n\n**Java并发集合框架**\n\n我们着重说明一下Java并发的集合框架，就是java.util.concurrent包下的集合类\n\n* 非阻塞队列\n\n> 非阻塞队列就是在队列中没有数据时，对此队列的操作将出现异常或者返回null，无需等待/阻塞的特色。\n\n在JDK的并发包中，常见的非阻塞队列有以下几个： \n- ConcurrentHashMap \n- ConcurrentSkipListMap \n- ConcurrentSkipListSet \n- ConcurrentLinkedQueue \n- ConcurrentLinkedDeque \n- CopyOnWriteArrayList \n- CopyOnWriteArraySet\n\n**ConcurrentHashMap类**\n\n> 这个类是支持并发操作的Map对象，与之对应的不支持并发操作的Map对象是HashMap，Hashtable对象也是Map的一个子类，也是支持并发操作，但是其不支持Iterator并发的删除操作，如果程序中要对map集合做并发以及Iterator并发编辑/删除操作，推荐使用ConcurrentHashMap集合类。\n\nHashMap集合不支持并发示例：\n\n```\npackage com.collections.hashmapdemo;\n\nimport java.util.HashMap;\n\npublic class HashMapDemo {\n    public static HashMap hashMap = new HashMap();\n\n    public static void main(String[] args) {\n        Thread threadA = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for (int i = 0; i < 50000; i++) {\n                    hashMap.put(\"ThreadA\" + (i + 1), \"ThreadA\" + i + 1);\n                    System.out.println(\"ThreadA\" + (i + 1));\n                }\n            }\n        });\n\n        Thread threadB = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for (int i = 0; i < 50000; i++) {\n                    hashMap.put(\"ThreadB\" + (i + 1), \"ThreadB\" + i + 1);\n                    System.out.println(\"ThreadB\" + (i + 1));\n                }\n            }\n        });\n\n        threadA.start();\n        threadB.start();\n    }\n}\n\n```\n\n执行结果 \n有时候程序可以正常执行完，有时候则程序会造成假死的状态，如下图：\n\n![这里写图片描述](http://img.blog.csdn.net/20171018201847398?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uZ2d1b19jaGVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n所以说HashMap不支持多线程并发的操作。\n\nHashtable集合支持并发 \n示例： \n只需要把HashMap示例中public static HashMap hashMap = new HashMap();修改成public static Hashtable hashtable = new Hashtable();即可。 \n我们就说说Hashtable不支持Iterator的编辑/删除操作，示例如下\n\n```\npackage com.collections.hashmapdemo;\n\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.concurrent.TimeUnit;\n\npublic class HashtableNotModifyDemo {\n    public static Hashtable hashtable = new Hashtable();\n    static {\n        for (int i = 0; i < 5; i++) {\n            hashtable.put(\"String\" + (i + 1), i + 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        Thread threadA = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Iterator iterator = hashtable.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        System.out.println(iterator.next());\n                        TimeUnit.SECONDS.sleep(2);\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        Thread threadB = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                hashtable.put(\"z\", \"zValue\");\n            }\n        });\n\n        threadA.start();\n        threadB.start();\n    }\n}\n\n```\n\n执行结果\n\n> String5 \n> java.util.ConcurrentModificationException \n> at java.util.HashtableEnumerator.next(Hashtable.java:1167)atcom.collections.hashmapdemo.HashtableNotModifyDemo1.run(HashtableNotModifyDemo.java:22) \n> at java.lang.Thread.run(Thread.java:745)\n\n说明多线程调用该类的iterator()方法返回Iterator对象后，在调用put方法会报ConcurrentModificationException异常，也就是不支持Iterator并发的编辑/删除操作。如果想实现此功能推荐使用并发集合框架提供的ConcurrentHashMap类。\n\nConcurrentHashMap集合支持并发示例：\n\n> 需要把HashMap示例中public static HashMap hashMap = new HashMap();修改成public \n> static ConcurrentHashMap concurretHashMap = new ConcurrentHashMap();即可。\n\nConcurrentHashMap集合支持Iterator并发操作示例：\n\n> 把类HashtableNotModifyDemo中的public static Hashtable hashtable = new Hashtable();修改为public static ConcurrentHashMap concurretHashMap = new ConcurrentHashMap();测试即可。\n\n**ConcurrentSkipListMap类**\n\n这个并发集合类支持排序功能。一般此集合中存放的对象要实现Comparable接口，方便此集合类排序，如果不实现此接口，则会按照默认排序。\n\n**ConcurrentSkipListSet类**\n\n这个并发集合类不仅支持排序功能，还不允许重复的元素。一般此集合中存放的对象要实现Comparable接口，并且重写equals和hashCode方法。\n\n**ConcurrentLinkedQueue类**\n\n这个并发集合类提供了并发环境的队列操作。\n\n*   poll()当没有获取到数据时返回null，如果有数据则一处表头并将表头数据返回。\n*   element()当没有获取到数据时抛NoSuchElementException异常，如果有数据则返回表头数据。\n*   peek()当没有获取导数据是返回null，获取到数据时则不移除表头，并将表头数据返回。\n\n**ConcurrentLinkedDeque类**\n\nConcurrentLinkedQueue支持对队列头操作，而ConcurrentLinkedDeque也支持队列头和列尾双向操作。\n\n**CopyOnWriteArrayList类**\n\nArrayList是线程不安全的，如果想在并发中实现线程安全，则可以使用CopyOnWriteArrayList类，使用方法和ArrayList无异。\n\n**CopyOnWriteArraySet类**\n\nArraySet是线程不安全的，如果想在并发中实现线程安全，则可以使用CopyOnWriteArraySet类，使用方法和ArraySet无异。\n\n### 2.Handler 消息机制图解?\n\n![](http://upload-images.jianshu.io/upload_images/1824194-a947dcc5b22f69fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面一共出现了几种类，ActivityThread，Handler，MessageQueue，Looper，msg（Message）,对这些类作简要介绍：\n\nActivityThread：程序的启动入口，为什么要介绍这个类，是因为该类就是我们说的主线程，它对Looper进行操作的。\n\nHandler：字面意思是操控者，该类有比较重要的地方，就是通过handler来发送消息（sendMessage）到MessageQueue和 操作控件的更新（handleMessage）。handler下面持有这MessageQueue和Looper的对象。\n\nMessageQueue：字面意思是消息队列，就是封装Message类。对Message进行插入和取出操作。\n\nMessage：这个类是封装消息体并被发送到MessageQueue中的，给类是通过链表实现的，其好处方便MessageQueue的插入和取出操作。还有一些字段是（int what，Object obj，int arg1，int arg2）。what是用户定义的消息和代码，以便接收者（handler）知道这个是关于什么的。obj是用来传输任意对象的，arg1和arg2是用来传递一些简单的整数类型的。\n\n下面，我们按照启动顺序来进行源码分析：\n\n![](http://upload-images.jianshu.io/upload_images/1824194-298ebb16ce4a3b70.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://raw.githubusercontent.com/bihe0832/Android-System-Related-Charts/master/framework/handler-sequence.jpg)\n\n### 3.在项目中做了哪些东西?\n\n负责用户版App社区模块的版本的功能迭代，几个组件的开发与管理。\n\n### 4.画图说明View 事件传递机制?并举一个例子阐述\n\n1).Android事件分发机制的本质是要解决：点击事件由哪个对象发出，经过哪些对象，最终达到哪个对象并最终得到处理。这里的对象是指Activity、ViewGroup、View.\n\n2).Android中事件分发顺序：Activity（Window） -> ViewGroup -> View.\n\n3).事件分发过程由dispatchTouchEvent() 、onInterceptTouchEvent()和onTouchEvent()三个方法协助完成\n\n**设置Button按钮来响应点击事件事件传递情况：（如下图）**\n\n布局如下:\n\n![](http://upload-images.jianshu.io/upload_images/4642697-01f23a099103eb82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/210)\n\n最外层：Activiy A，包含两个子View：ViewGroup B、View C\n\n中间层：ViewGroup B，包含一个子View：View C\n\n最内层：View C\n\n假设用户首先触摸到屏幕上View C上的某个点（如图中黄色区域），那么Action_DOWN事件就在该点产生，然后用户移动手指并最后离开屏幕。\n\n**按钮点击事件:**\n\nDOWN事件被传递给C的onTouchEvent方法，该方法返回true，表示处理这个事件;\n\n因为C正在处理这个事件，那么DOWN事件将不再往上传递给B和A的onTouchEvent()；\n\n该事件列的其他事件（Move、Up）也将传递给C的onTouchEvent();\n\n![](http://upload-images.jianshu.io/upload_images/4642697-ca12c00c79780b57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n(记住这个图的传递顺序,面试的时候能够画出来,就很详细了)\n\n### 5.类加载机制\n\n**一. 类的加载过程**\n\nPerson person = new Person();为例进行说明。\n\n1).因为new用到了Person.class，所以会先找到Person.class文件，并加载到内存中;\n\n2).执行该类中的static代码块，如果有的话，给Person.class类进行初始化;\n\n3).在堆内存中开辟空间分配内存地址;\n\n4).在堆内存中建立对象的特有属性，并进行默认初始化;\n\n5).对属性进行显示初始化;\n\n6).对对象进行构造代码块初始化;\n\n7).对对象进行与之对应的构造函数进行初始化;\n\n8).将内存地址付给栈内存中的p变量\n\n**二.类的加载器**\n\n    大家都知道，当我们写好一个Java程序之后，不是管是CS还是BS应用，都是由若干个.class文件组织而成的一个完整的Java应用程序，当程序在运行时，即会调用该程序的一个入口函数来调用系统的相关功能，而这些功能都被封装在不同的class文件当中，所以经常要从这个class文件中要调用另外一个class文件中的方法，如果另外一个文件不存在的，则会引发系统异常。而程序在启动的时候，并不会一次性加载程序所要用的所有class文件，而是根据程序的需要，通过Java的类加载机制（ClassLoader）来动态加载某个class文件到内存当中的，从而只有class文件被载入到了内存之后，才能被其它class所引用。所以ClassLoader就是用来动态加载class文件到内存当中用的。\n\n**双亲机制**\n\n**_1、原理介绍_**\n\n    ClassLoader使用的是双亲委托模型来搜索类的，每个ClassLoader实例都有一个父类加载器的引用（不是继承的关系，是一个包含的关系），虚拟机内置的类加载器（Bootstrap ClassLoader）本身没有父类加载器，但可以用作其它ClassLoader实例的的父类加载器。当一个ClassLoader实例需要加载某个类时，它会试图亲自搜索某个类之前，先把这个任务委托给它的父类加载器，这个过程是由上至下依次检查的，首先由最顶层的类加载器Bootstrap ClassLoader试图加载，如果没加载到，则把任务转交给Extension ClassLoader试图加载，如果也没加载到，则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常。否则将这个找到的类生成一个类的定义，并将它加载到内存当中，最后返回这个类在内存中的Class实例对象。\n\n**_2、为什么要使用双亲委托这种模型呢？_**\n\n    因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。\n\n**_3、但是JVM在搜索类的时候，又是如何判定两个class是相同的呢？_**\n\n    JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。比如网络上的一个Java类org.classloader.simple.NetClassLoaderSimple，javac编译之后生成字节码文件NetClassLoaderSimple.class，ClassLoaderA和ClassLoaderB这两个类加载器并读取了NetClassLoaderSimple.class文件，并分别定义出了java.lang.Class实例来表示这个类，对于JVM来说，它们是两个不同的实例对象，但它们确实是同一份字节码文件，如果试图将这个Class实例生成具体的对象进行转换时，就会抛运行时异常java.lang.ClassCaseException，提示这是两个不同的类型。\n\n**Android类加载器**\n\n    对于Android而言，最终的apk文件包含的是dex类型的文件，dex文件是将class文件重新打包，打包的规则又不是简单地压缩，而是完全对class文件内部的各种函数表，变量表进行优化，产生一个新的文件，即dex文件。因此加载这种特殊的Class文件就需要特殊的类加载器DexClassLoader。\n\n### 6.如何换肤,换肤插件中存在的问题?\n**1.换肤方案分析**\n\n1.  res下放多种皮肤的资源文件\n\n2.  加载插件apk使用其中的皮肤资源\n\n* 方案一： \n优点：容易实现。 \n缺点：res下放多种皮肤的资源文件，无疑会加大apk文件大小，而且资源文件是写死的，不利于后期拓展，若有其他皮肤需求只能通过版本迭代。 \n* 方案二： \n优点：不会加大apk包，更容易扩展，有新的皮肤只需下载新的插件包即可，无需更新。（相对于方案一） \n缺点：相对于方案一实现较困难，若有更多业务处理需要插件，如使用插件中的四大组件及处理它们的生命周期则是比较麻烦的，需用到动态代理。\n例如:[Android插件化系列第（二）篇---动态加载技术之apk换肤](http://www.jianshu.com/p/d1c6e67f7889)\n\n**2.Android换肤技术总结**\n\n背景\n\n纵观现在各种Android app，其换肤需求可以归为 \n\n- 白天/黑夜主题切换（或者别的名字，通常2套），如同花顺/自选股/天天动听等，UI表现为一个switcher。 \n- 多种主题切换，通常为会员特权，如QQ/QQ空间。\n\n对于第一种来说，目测应该是直接通过本地theme来做的，即所有图片/颜色的资源都在apk里面打包了。\n\n而对于第二种，则相对复杂一些，由于作为一种线上服务，可能上架新皮肤，且那么多皮肤包放在apk里面实在太占体积了，所以皮肤资源会在选择后再进行下载，也就不能直接使用android的那套theme。\n\n**技术方案**\n\n内部资源加载方案和动态下载资源下载两种。\n\n动态下载可以称为一种黑科技了，因为往往需要hack系统的一些方法，所以在部分机型和新的API上有时候可能有坑，但相对好处则很多 \n\n- 图片/色值等资源由于是后台下发的，可以随时更新 \n- APK体积减小 \n- 对应用开发者来说，换肤几乎是透明的，不需要关心有几套皮肤 \n- 可以作为增值服务卖钱！！\n\n**内部资源加载方案**\n\n内部资源加载都是通过android本身那套theme来做的，相对业务开发来说工作量更大（需要定义attr和theme），不同方案类似地都是在BaseActivity里面做setTheme，差别主要在解决以下2个问题的策略： \n\n- setTheme后如何实时刷新，而不用重新创建页面（尤其是listview里面的item）。 \n- 哪些view需要刷新，刷新什么（背景？字体颜色？ImageView的src？）。\n\n**自定义view**\n\n[MultipleTheme](http://xiazai.jb51.net/201703/yuanma/MultipleTheme-master(jb51.net).rar) \n\n做自定义view是为了在setTheme后会去立即刷新，更新页面UI对应资源（如TextView替换背景图和文字颜色），在上述项目中，则是通过对rootView进行遍历，对所有实现了ColorUiInterface的view/viewgroup进行setTheme操作来实现即使刷新的。\n\n显然这样太重了，需要把应用内的各种view/viewgroup进行替换。\n\n手动绑定view和要改变的资源类型\n\n[Colorful](http://xiazai.jb51.net/201703/yuanma/Colorful-master(jb51.net).rar)\n\n这个…我们看看用法吧….\n```\nViewGroupSetter listViewSetter = new ViewGroupSetter(mNewsListView);\n// 绑定ListView的Item View中的news_title视图，在换肤时修改它的text_color属性\nlistViewSetter.childViewTextColor(R.id.news_title, R.attr.text_color);\n\n// 构建Colorful对象来绑定View与属性的对象关系\nmColorful = new Colorful.Builder(this)\n  .backgroundDrawable(R.id.root_view, R.attr.root_view_bg)\n  // 设置view的背景图片\n  .backgroundColor(R.id.change_btn, R.attr.btn_bg)\n  // 设置背景色\n  .textColor(R.id.textview, R.attr.text_color)\n  .setter(listViewSetter) // 手动设置setter\n  .create(); // 设置文本颜色\n```\n我就是想换个皮肤，还得在activity里自己去设置要改变哪个view的什么属性，对应哪个attribute？是不是成本太高了？而且activity的逻辑也很容易被弄得乱七八糟。\n\n**动态资源加载方案**\n\nresource替换\n\n覆盖application的getResource方法，实现自己的resource，优先加载本地皮肤包文件夹下的资源包，对于性能问题，可以通过attribute或者资源名称规范(如需要换肤则用skin_开头)来优化，从而不对不换肤的资源进行额外检查开销。\n\n不过由于Android5.1源码里，drawable初始化的时候调用的是loadDrawable，而不是resource.getDrawable，而loadDrawable是私有的方法，无法覆盖，所以虽然很方便，却无法继续使用（不用关心任何皮肤相关的事情，android:color指定颜色就行了，神奇滴会自动换肤）。\n\n自定义LayoutInflator.Factory\n\n开源项目可参照Android-Skin-Loader。\n\n即setFactory使用自定义的LayoutInflator.Factory，可以重点关注该项目中的SkinInflaterFactory和SkinManager（实现了自己的getColor、getDrawable、getBitmap、getColorStateList等等方法）。\n\n需要自定义一个tag比如app:customStyle，重写所有的style，转成set方法，这样带来的牺牲就是增加了换肤的成本，要写很多style，自己去set，并不完全透明了。\n\nHack Resources internally\n\n黑科技方法，直接对Resources进行hack，Resources.Java:\n```\n// Information about preloaded resources. Note that they are not\n// protected by a lock, because while preloading in zygote we are all\n// single-threaded, and after that these are immutable.\nprivate static final LongSparseArray<Drawable.ConstantState>[] sPreloadedDrawables;\nprivate static final LongSparseArray<Drawable.ConstantState> sPreloadedColorDrawables\n  = new LongSparseArray<Drawable.ConstantState>();\nprivate static final LongSparseArray<ColorStateList> sPreloadedColorStateLists\n  = new LongSparseArray<ColorStateList>();\n```\n直接对Resources里面的这三个LongSparseArray进行替换，由于apk运行时的资源都是从这三个数组里面加载的，所以只要采用interceptor模式：\n\npublic class DrawablePreloadInterceptor extends LongSparseArray<Drawable.ConstantState>\n\n自己实现一个LongSparseArray，并通过反射set回去，就能实现换肤，具体getDrawable等方法里是怎么取preload数组的，可以自己看Resources的源码。\n\n等等，就这么简单？，NONO，少年你太天真了，怎么去加载xml，9patch的padding怎么更新，怎么打包/加载自定义的皮肤包，drawable的状态怎么刷新，等等。这些都是你需要考虑的，在存在插件的app中，还需要考虑是否会互相覆盖resource id的问题，进而需要修改apt，把resource id按位放在2个range。\n\n手Q和独立版QQ空间使用的是这种方案，效果挺好。\n\n**总结**\n\n尽管动态加载方案比较黑科技，可能因为系统API的更改而出问题，但相对来说\n\n**好处有** \n\n- 灵活性高，后台可以随时更新皮肤包 \n- 相对透明，开发者几乎不用关心有几套皮肤，不用去定义各种theme和attr，甚至连皮肤包的打包都可以交给设计或者专门的同学 \n- apk体积节省 \n\n**存在的问题**\n\n没有完善的开源项目，如果我们采用动态加载的第二种方案，需要的项目功能包括： \n\n- 自定义皮肤包结构 \n- 换肤引擎，加载皮肤包资源并load，实时刷新。 \n- 皮肤包打包工具 \n- 对各种rom的兼容\n\n如果有这么一个项目的话，就一劳永逸了，有兴趣的同学可以联系一下，大家一起搞一搞。\n\n内部加载方案大同小异，主要解决的都是即时刷新的问题，然而从目前的一些开源项目来看，仍然没有特别简便的方案。让我选的话，我宁愿让界面重新创建，比如重启activity，或者remove所有view再添加回来（或者你可能想遍历rootview，然后一个个检查是否需要换肤然后set…）。\n\n### 7.hotfix是否用过,原理是否了解?\n\n[Android热修复技术选型——三大流派解析](https://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&mid=2651112709&idx=1&sn=09f82f5e2e8e287904391dbc4b1f83f6&scene=1&srcid=0909KyPp8gx8aLwII2MEYUQ3)\n\n### 8.说说项目中用到了哪些设计模式,说了一下策略模式和观察者模式?\n\n[Android源码设计模式分析项目](https://github.com/simple-android-framework-exchange/android_design_patterns_analysis#schedule)\n\n**1.单例模式（application、eventBus）\n2.builder创建模式（AlertDialog、Glide、OkHttp）\n3.观察者模式（ListView、RxJava，监听事件）\n4.装饰模式（context）\n5.外观模式（contextImpl）\n6.模板方法模式（Activity和Fragment生命周期、AsyncTask、BaseActivity）\n7.策略模式（Volley、属性动画、插值器 Interpolator）\n8.组合模式（View、ViewGroup）\n9.代理模式（binder）\n10.迭代器模式（Iterator）\n11.命令模式（Runnable）\n12.原型模式（Intent）\n13.责任链模式（try-catch语句、有序广播、事件分发机制）\n14.桥接模式bridge（listview和BaseAdapter）\n15.适配器模式（BaseAdapter类）**\n\n### 9.会JS么?有Hybid开发经验么?\n**为什么引入Hybrid开发**\n混合开发是 Native 和 Web 技术一起用，开发者以 Native 代码为主体，在合适的地方部分使用 Web 技术。比如在 Android 中的 Activity 内放置一个 Webview（一个浏览器引擎，只拥有渲染 HTML，CSS 和执行 JavaScript 的核心功能）。这样，部分用户界面就可以在 WebView 中使用 Web 技术实现。\n\n促使我们在移动开发中使用 Web 技术主要动力在于，相比于 Native 技术，Web 技术具有诸多优势：\n\n* 高效率的界面开发：HTML，CSS，JavaScript 的组合被证明在用户界面开发方面具有很高的效率。\n\n* 跨平台：统一的浏览器内核标准，使得 Web 技术具有跨平台特性。iOS 和 Android 可以使用一套代码。\n\n* 热更新：可越过发布渠道自主更新应用。\n\n这些优势都和开发效率有关。Web 技术具有这些优势的原因是，Web 技术是一个开放标准。基于开放的标准已经发展出来庞大生态，而且这个生态从 PC 时代发展至今已积累多年，开发者可以利用生态中产出的各种成果，从而省去很多重复工作。\n\n在大型移动应用的开发中，项目代码庞杂，通常还需要 iOS，Android，移动 Web 和 桌面 Web 全平台支持。相对于同时开发几个版本，使用混合开发显然可以在代码重用、开发成本和效率方面有很大的优势，在权衡性能体验的前提下，使用混合开发是非常现实的选择。\n\n**实现方式**\n一般来讲，也是我目前知道的两种主流的方式就是\n\n1.  js调用Native中的代码\n2.  Schema：WebView拦截页面跳转\n\n第2种方式实现起来很简单，但是一个致命的问题就是这种交互方式是单向的，Html 5无法实现回调。像云音乐App中这种点击跳转到具体页面的功能，Schema的方式确实可以简单实现，而且也非常适合。如果需求变得复杂，假如Html 5需要获取Native App中的用户信息，那么最好使用js调用的方式。\n\n**[JS安全漏洞](http://jaq.alibaba.com/blog.htm?id=48)**\nAndroid API level 16以及之前的版本存在远程代码执行安全漏洞，该漏洞源于程序没有正确限制使用WebView.addJavascriptInterface方法，远程攻击者可通过使用Java Reflection API利用该漏洞执行任意Java对象的方法，简单的说就是通过addJavascriptInterface给WebView加入一个JavaScript桥接接口，JavaScript通过调用这个接口可以直接操作本地的JAVA接口。该漏洞最早公布于CVE-2012-6636【1】，其描述了WebView中addJavascriptInterface API导致的远程代码执行安全漏洞。\n\n**js调用的方式**\n`WebView.addJavascriptInterface(Object o, String interface)`方法注册可供js调用的Java对象\n\n`addJavascriptInterface(mJsBridge, mWindowClientName);`\n\n在mJsBridge对象中封装一些供js调用的Java方法，例如有loading框显示与隐藏，页面关闭的统一动画，dialog的显示，toast的显示，调用native系统的打开相册，打开通讯录，打电话，发短信等\n\n**Schema的方式**\n通过shouldOverrideUrlLoading方法拦截url，如果host是内定的协议就打开对应协议的activity，如果是正常的url的HTTP或者HTTPS就正常loadUrl，否则就是默认是系统协议处理，打开系统页面，例如调起拨打电话。\n```\n\npublic final boolean filter(Context context, String url) {\n   mContext = context;\n if (null == mContext || TextUtils.isEmpty(url)) {\n      return true;\n  }\n   //普通url\n  if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n      return dealWithHttp(url);\n  }\n   //更美协议\n  if (url.startsWith(mProtocolName)) {\n      return dealWithProtocol(url);\n  }\n   //系统协议\n  return dealWithSystemProtocol(url); }\n\n/**\n * 普通url处理 * * @param url\n  * @return\n  */ protected boolean dealWithHttp(String url) {\n   if (null != mOnLoadUrlListener && mWhiteList.inWhiteList(url)) {\n      mOnLoadUrlListener.onLoadUrl(url);\n  }\n   return true; }\n\n/**\n * 协议处理 * * @param url\n  * @return\n  */ protected boolean dealWithProtocol(String url) {\n   try {\n      if (mContext instanceof GMActivity) {\n         ((GMActivity) mContext).startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse(url)), 1024);\n  } else if (mContext instanceof Activity) {\n         ((Activity) mContext).startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse(url)), 1024);\n  }\n   } catch (Exception e) {\n      e.printStackTrace();\n  }\n   return true; }\n\n/**\n * 系统协议处理，eg：tel（拨打电话） * @param url\n  * @return\n  */ protected boolean dealWithSystemProtocol(String url){\n   try {\n      if (mContext instanceof GMActivity) {\n         ((GMActivity) mContext).startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse(url)), 1024);\n  } else if (mContext instanceof Activity) {\n         ((Activity) mContext).startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse(url)), 1024);\n  }\n   } catch (Exception e) {\n      e.printStackTrace();\n  }\n   return true; }\n```\n\n### 10.说一下快排的思想?手写代码\n\n基本思想：选择某个元素作为基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分，最终整个数组将变成有序的。\n\n![](http://img.my.csdn.net/uploads/201209/07/1347009479_6587.jpg)\n\n![](http://ou21vt4uz.bkt.clouddn.com/qickSort.png)\n\n```\npublic static void quickSort(int[] array) {\n    _quickSort(array, 0, array.length - 1);\n    System.out.println(Arrays.toString(array) + \" quickSort\");\n}\nprivate static int getMiddle(int[] list, int low, int high) {\n    int tmp = list[low];    //数组的第一个作为中轴\n    while (low < high) {\n        while (low < high && list[high] >= tmp) {\n            high--;\n        }\n        list[low] = list[high];   //比中轴小的记录移到低端\n        while (low < high && list[low] <= tmp) {\n            low++;\n        }\n        list[high] = list[low];   //比中轴大的记录移到高端\n    }\n    list[low] = tmp;              //中轴记录到尾\n    return low;                  //返回中轴的位置\n}\n\nprivate static void _quickSort(int[] list, int low, int high) {\n    if (low < high) {\n        int middle = getMiddle(list, low, high);  //将list数组进行一分为二\n        _quickSort(list, low, middle - 1);      //对低字表进行递归排序\n        _quickSort(list, middle + 1, high);      //对高字表进行递归排序\n    }\n}\n```\n(1) **枢轴的选取方式的优化**：\n\n枢轴的选取方式有：(1) 固定位置选取；(2) 随机位置选取； (3) 三值取中法 等\n\n固定位置选取：选取当前序列的第一个元素或者最后一个元素作为枢轴，上面的算法的枢轴选取方式即为固定位置选取。该方法不是一个好的选取方案，因为当整个序列有序时，每次分割(partition)操作只会将待排序序列减1，此时为最坏情况，算法复杂度沦为O(n^2)。然而，在待排序的序列中局部有序是相当常见的，所以固定位置选取枢轴不是一种好的选择。\n\n随机位置选取：随机选取当前待排序序列的任意记录作为枢轴。由于采取随机，所以时间性能要强于固定位置选取。\n\n三值取中法： 待排序序列的前(第一个位置)、中(中间位置)、后(最后一个位置)三个记录中的中间值(按大小排序)作为枢轴\n\n三值取中本质上就是随机位置选取，但是由于随机位置选取过程中需要用到随机种子来产生随机数，而三值取中不需要，所以三值取中要优于随机位置选取。\n\n所以优化枢轴的选取方式时，我们选择三值取中的方式。\n\n(2) **优化小数组时的排序方案**：\n\n当局部排序数组长度较小时，采用插入排序，而非快速排序，因为长度分割到够小后，继续分割的效率要低于直接插入排序。\n\n(3) **略去不必要的交换**\n\n略去不必要的交换，将交换操作改为替换操作。\n\n因为交换操作需要进行3次赋值操作，而替换操作只需要进行1次赋值操作。\n\n**_Java实现_**\n\n```\n// 优化的快速排序\nclass OptimizedQuickSorter extends QuickSorter {\n\n    /**\n     * 插入排序最大数组长度值\n     */\n    private static final int MAX_LENGTH_INSERT_SORT = 7;\n\n    /**\n     * 对数组arr[low...high]的子序列作快速排序，使之有序\n     */\n    @Override\n    protected void quickSort(int[] arr, int low, int high) {\n        int pivotLoc; // 记录枢轴(pivot)所在位置\n        if ((high - low + 1) > MAX_LENGTH_INSERT_SORT) {\n            // 待排序数组长度大于临界值，则进行快速排序\n            pivotLoc = partition(arr, low, high); // 将arr[low...high]一分为二,并返回枢轴位置\n\n            quickSort(arr, low, pivotLoc - 1);// 递归遍历arr[low...pivotLoc-1]\n            quickSort(arr, pivotLoc + 1, high); // 递归遍历arr[pivotLoc+1...high]\n        } else {\n            // 2\\. 优化小数组时的排序方案，将快速排序改为插入排序\n            insertSort(arr, low, high); // 对arr[low...high]子序列进行插入排序\n        }\n    }\n\n    /**\n     * 在arr[low...high]中利用三值取中选取枢轴(pivot)，将arr[low...high]分成两部分，\n     * 前半部分的子序列的记录均小于pivot，后半部分的记录均大于pivot;最后返回pivot的位置\n     */\n    @Override\n    protected int partition(int[] arr, int low, int high) {\n        int pivot;\n        pivot = medianOfThree(arr, low, high); // 1\\. 优化排序基准，使用三值取中获取中值\n        while (low < high) { // 从数组的两端向中间扫描 // A\n            while (low < high && arr[high] >= pivot) { // B\n                high--;\n            }\n            // swap(arr, low, high); // 将比枢轴pivot小的元素交换到低位\n            arr[low] = arr[high]; // 3\\. 优化不必要的交换，使用替换而不是交换  // C\n            while (low < high && arr[low] <= pivot) { // D\n                low++;\n            }\n            // swap(arr, low, high); // 将比枢轴pivot大的元素交换到高位\n            arr[high] = arr[low]; // 3\\. 优化不必要的交换，使用替换而不是交换 // E\n        }\n        arr[low] = pivot; // F\n        return low; // 返回一趟下来后枢轴pivot所在的位置\n    }\n\n    /**\n     * 通过三值取中(从arr[low...high]子序列中)获取枢轴pivot的值，让arr[low]变成中值;并返回计算的枢轴(pivot)\n     */\n    private int medianOfThree(int[] arr, int low, int high) {\n        int mid = low + ((high - low) >> 1); // mid = low + (high-low)/2, 中间元素下标\n\n        // 使用三值取中得到枢轴\n        if (arr[low] > arr[high]) { // 目的：让arr[low] <= arr[high]\n            swap(arr, low, high);\n        }\n        if (arr[mid] > arr[high]) { // 目的：让arr[mid] <= arr[high]\n            swap(arr, mid, high);\n        }\n        if (arr[mid] > arr[low]) { // 目的： 让arr[low] >= arr[mid]\n            swap(arr, low, mid);\n        }\n        // 经过上述变化，最终 arr[mid]<=arr[low]<=arr[high]，则arr[low]为中间值\n        return arr[low];\n    }\n\n    /**\n     * 对子序列arr[low...high]进行插入排序\n     */\n    private void insertSort(int[] arr, int low, int high) {\n        int i, j;\n        int tmp;\n        for (i = low + 1; i <= high; i++) { // 从下标low+1开始遍历,因为下标为low的已经排好序\n            if (arr[i] < arr[i - 1]) {\n                // 如果当前下标对应的记录小于前一位记录,则需要插入,否则不需要插入，直接将记录数增加1\n                tmp = arr[i]; // 记录下标i对应的元素\n                for (j = i - 1; j >= low && arr[j] > tmp; j--) {\n                    arr[j + 1] = arr[j]; // 记录后移\n                }\n                arr[j + 1] = tmp; // 插入正确位置\n            }\n        }\n    }\n}\n\n```\n**复杂度**\n\n时间复杂度：\n\n时间复杂度为O(nlogn)，在对快速排序进行各种细节性的优化后，快速排序的性能大大提高，在一般条件下超越了其它排序方法，故得此名。\n\n空间复杂度：\n\n就空间复杂度来说，主要是递归造成的栈空间的使用，最好情况，递归的深度为log2n，其空间复杂度也就为O(logn)，最坏情况，需要进行n‐1递归调用，其空间复杂度为O(n)，平均情况，空间复杂度也为O(logn)。\n\n### 11.堆有哪些数据结构?\n\n对于这轮面试明显感觉到压力,知识的纵向了解也比较深,应该是个leader.\n\n**第三轮**\n\n1.介绍一下在项目中的角色?\n\n2.遇到困难是怎么解决的?\n\n3.如何与人相处,与别人意见相左的时候是怎么解决的,并举生活中的一个例子.\n\n4.有没有压力特别大的时候?\n\n这个应该是项目经理了,问的问题偏向于生活性格方面.\n\n以上面试中问到的题目基本上都可以在上面找到答案,所以做准备是很重要的,但技术是一点点积累的,就算你全会背了,面试过了,真正等到工作的时候还是会捉襟见肘的,所以踏实点吧骚年.\n\n",[[1516950143696,["gengmei_pxf@gengmei123.local",[[1,19192,"\n"]],[19190,19190],[19191,19191]]],[1516950144499,["gengmei_pxf@gengmei123.local",[[1,19193,"\n"]],[19191,19191],[19192,19192]]],[1516950146841,["gengmei_pxf@gengmei123.local",[[1,19192,"7）"]],[19192,19192],[19194,19194]]],[1516950147877,["gengmei_pxf@gengmei123.local",[[1,19194,"。"]],[19194,19194],[19195,19195]]],[1516950150204,["gengmei_pxf@gengmei123.local",[[-1,19193,"）。"]],[19195,19195],[19193,19193]]],[1516950152435,["gengmei_pxf@gengmei123.local",[[1,19193,").###### 单例导致内存泄露\n\n单例模式在Android开发中会经常用到，但是如果使用不当就会导致内存泄露。因为单例的静态特性使得它的生命周期同应用的生命周期一样长，如果一个对象已经没有用处了，但是单例还持有它的引用，那么在整个应用程序的生命周期它都不能正常被回收，从而导致内存泄露。"]],[19193,19193],[19338,19338]]],[1516950157884,["gengmei_pxf@gengmei123.local",[[-1,19195,"###### "]],[19195,19202],[19195,19195]]],[1516950160891,["gengmei_pxf@gengmei123.local",[[1,19333,"\n"]],[19331,19331],[19332,19332]]],[1516950297500,["gengmei_pxf@gengmei123.local",[[1,19332,"```"]],[19332,19332],[19335,19335]]],[1516950298208,["gengmei_pxf@gengmei123.local",[[1,19337,"\n"]],[19335,19335],[19336,19336]]],[1516950299188,["gengmei_pxf@gengmei123.local",[[1,19336,"```"]],[19336,19336],[19339,19339]]],[1516950300553,["gengmei_pxf@gengmei123.local",[[1,19336,"\n"]],[19335,19335],[19336,19336]]],[1516950301094,["gengmei_pxf@gengmei123.local",[[1,19336,"```\npublic class AppSettings {\n\n    private static AppSettings sInstance;\n    private Context mContext;\n\n    private AppSettings(Context context) {\n        this.mContext = context;\n    }\n\n    public static AppSettings getInstance(Context context) {\n        if (sInstance == null) {\n            sInstance = new AppSettings(context);\n        }\n        return sInstance;\n    }\n}\n```"]],[19336,19336],[19715,19715]]],[1516950312262,["gengmei_pxf@gengmei123.local",[[-1,19336,"```\npublic class AppSettings {\n\n    private static AppSettings sInstance;\n    private Context mContext;\n\n    private AppSettings(Context context) {\n        this.mContext = context;\n    }\n\n    public static AppSettings getInstance(Context context) {\n        if (sInstance == null) {\n            sInstance = new AppSettings(context);\n        }\n        return sInstance;\n    }\n}\n```"]],[19715,19715],[19336,19336]]],[1516950317580,["gengmei_pxf@gengmei123.local",[[1,19336,"public class AppSettings {\n\n    private static AppSettings sInstance;\n    private Context mContext;\n\n    private AppSettings(Context context) {\n        this.mContext = context;\n    }\n\n    public static AppSettings getInstance(Context context) {\n        if (sInstance == null) {\n            sInstance = new AppSettings(context);\n        }\n        return sInstance;\n    }\n}"]],[19332,19340],[19711,19711]]],[1516950377463,["gengmei_pxf@gengmei123.local",[[1,19713,"\n"]],[19711,19711],[19712,19712]]],[1516950378036,["gengmei_pxf@gengmei123.local",[[1,19712,"像上面代码中这样的单例，如果我们在调用`getInstance(Context context)`方法的时候传入的`context`参数是`Activity`、`Service`等上下文，就会导致内存泄露。\n\n以`Activity`为例，当我们启动一个`Activity`，并调用`getInstance(Context context)`方法去获取`AppSettings`的单例，传入`Activity.this`作为`context`，这样`AppSettings`类的单例`sInstance`就持有了`Activity`的引用，当我们退出`Activity`时，该`Activity`就没有用了，但是因为`sIntance`作为静态单例（在应用程序的整个生命周期中存在）会继续持有这个`Activity`的引用，导致这个`Activity`对象无法被回收释放，这就造成了内存泄露。\n\n为了避免这样单例导致内存泄露，我们可以将`context`参数改为全局的上下文：\n\n```\nprivate AppSettings(Context context) {\n    this.mContext = context.getApplicationContext();\n}\n```\n\n全局的上下文`Application Context`就是应用程序的上下文，和单例的生命周期一样长，这样就避免了内存泄漏。\n\n单例模式对应应用程序的生命周期，所以我们在构造单例的时候尽量避免使用`Activity`的上下文，而是使用`Application`的上下文。\n\n###### 静态变量导致内存泄露\n\n静态变量存储在方法区，它的生命周期从类加载开始，到整个进程结束。一旦静态变量初始化后，它所持有的引用只有等到进程结束才会释放。\n\n比如下面这样的情况，在`Activity`中为了避免重复的创建`info`，将`sInfo`作为静态变量：\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    private static Info sInfo;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        if (sInfo != null) {\n            sInfo = new Info(this);\n        }\n    }\n}\n\nclass Info {\n    public Info(Activity activity) {\n    }\n}\n```\n\n`Info`作为`Activity`的静态成员，并且持有`Activity`的引用，但是`sInfo`作为静态变量，生命周期肯定比`Activity`长。所以当`Activity`退出后，`sInfo`仍然引用了`Activity`，`Activity`不能被回收，这就导致了内存泄露。\n\n在Android开发中，静态持有很多时候都有可能因为其使用的生命周期不一致而导致内存泄露，所以我们在新建静态持有的变量的时候需要多考虑一下各个成员之间的引用关系，并且尽量少地使用静态持有的变量，以避免发生内存泄露。当然，我们也可以在适当的时候讲静态量重置为null，使其不再持有引用，这样也可以避免内存泄露。\n\n###### 非静态内部类导致内存泄露\n\n非静态内部类（包括匿名内部类）默认就会持有外部类的引用，当非静态内部类对象的生命周期比外部类对象的生命周期长时，就会导致内存泄露。\n\n非静态内部类导致的内存泄露在Android开发中有一种典型的场景就是使用`Handler`，很多开发者在使用`Handler`是这样写的：\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        start();\n    }\n\n    private void start() {\n        Message msg = Message.obtain();\n        msg.what = 1;\n        mHandler.sendMessage(msg);\n    }\n\n    private Handler mHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            if (msg.what == 1) {\n                // 做相应逻辑\n            }\n        }\n    };\n}\n```\n\n也许有人会说，`mHandler`并未作为静态变量持有`Activity`引用，生命周期可能不会比`Activity`长，应该不一定会导致内存泄露呢，显然不是这样的！\n\n熟悉`Handler`消息机制的都知道，`mHandler`会作为成员变量保存在发送的消息`msg`中，即`msg`持有`mHandler`的引用，而`mHandler`是`Activity`的非静态内部类实例，即`mHandler`持有`Activity`的引用，那么我们就可以理解为`msg`间接持有`Activity`的引用。`msg`被发送后先放到消息队列`MessageQueue`中，然后等待`Looper`的轮询处理（`MessageQueue`和`Looper`都是与线程相关联的，`MessageQueue`是`Looper`引用的成员变量，而`Looper`是保存在`ThreadLocal`中的）。那么当`Activity`退出后，`msg`可能仍然存在于消息对列`MessageQueue`中未处理或者正在处理，那么这样就会导致`Activity`无法被回收，以致发生`Activity`的内存泄露。\n\n通常在Android开发中如果要使用内部类，但又要规避内存泄露，一般都会采用_静态内部类+弱引用_的方式。\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    private Handler mHandler;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        mHandler = new MyHandler(this);\n        start();\n    }\n\n    private void start() {\n        Message msg = Message.obtain();\n        msg.what = 1;\n        mHandler.sendMessage(msg);\n    }\n\n    private static class MyHandler extends Handler {\n\n        private WeakReference<MainActivity> activityWeakReference;\n\n        public MyHandler(MainActivity activity) {\n            activityWeakReference = new WeakReference<>(activity);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            MainActivity activity = activityWeakReference.get();\n            if (activity != null) {\n                if (msg.what == 1) {\n                    // 做相应逻辑\n                }\n            }\n        }\n    }\n}\n```\n\n`mHandler`通过弱引用的方式持有`Activity`，当GC执行垃圾回收时，遇到`Activity`就会回收并释放所占据的内存单元。这样就不会发生内存泄露了。\n\n上面的做法确实避免了`Activity`导致的内存泄露，发送的`msg`不再已经没有持有`Activity`的引用了，但是`msg`还是有可能存在消息队列`MessageQueue`中，所以更好的是在`Activity`销毁时就将`mHandler`的回调和发送的消息给移除掉。\n\n```\n@Override\nprotected void onDestroy() {\n    super.onDestroy();\n    mHandler.removeCallbacksAndMessages(null);\n}\n```\n\n非静态内部类造成内存泄露还有一种情况就是使用`Thread`或者`AsyncTask`。\n\n比如在Activity中直接`new`一个子线程`Thread`：\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                // 模拟相应耗时逻辑\n                try {\n                    Thread.sleep(2000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n    }\n}\n```\n\n或者直接新建`AsyncTask`异步任务：\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        new AsyncTask<Void, Void, Void>() {\n            @Override\n            protected Void doInBackground(Void... params) {\n                // 模拟相应耗时逻辑\n                try {\n                    Thread.sleep(2000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                return null;\n            }\n        }.execute();\n    }\n}\n```\n\n很多初学者都会像上面这样新建线程和异步任务，殊不知这样的写法非常地不友好，这种方式新建的子线程`Thread`和`AsyncTask`都是匿名内部类对象，默认就隐式的持有外部`Activity`的引用，导致`Activity`内存泄露。要避免内存泄露的话还是需要像上面`Handler`一样使用_静态内部类+弱应用_的方式（代码就不列了，参考上面`Hanlder`的正确写法）。\n\n###### 未取消注册或回调导致内存泄露\n\n比如我们在`Activity`中注册广播，如果在`Activity`销毁后不取消注册，那么这个刚播会一直存在系统中，同上面所说的非静态内部类一样持有`Activity`引用，导致内存泄露。因此注册广播后在`Activity`销毁后一定要取消注册。\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        this.registerReceiver(mReceiver, new IntentFilter());\n    }\n\n    private BroadcastReceiver mReceiver = new BroadcastReceiver() {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            // 接收到广播需要做的逻辑\n        }\n    };\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        this.unregisterReceiver(mReceiver);\n    }\n}\n```\n\n在注册观察则模式的时候，如果不及时取消也会造成内存泄露。比如使用`Retrofit+RxJava`注册网络请求的观察者回调，同样作为匿名内部类持有外部引用，所以需要记得在不用或者销毁的时候取消注册。\n\n###### Timer和TimerTask导致内存泄露\n\n`Timer`和`TimerTask`在Android中通常会被用来做一些计时或循环任务，比如实现无限轮播的`ViewPager`：\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    private ViewPager mViewPager;\n    private PagerAdapter mAdapter;\n    private Timer mTimer;\n    private TimerTask mTimerTask;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        init();\n        mTimer.schedule(mTimerTask, 3000, 3000);\n    }\n\n    private void init() {\n        mViewPager = (ViewPager) findViewById(R.id.view_pager);\n        mAdapter = new ViewPagerAdapter();\n        mViewPager.setAdapter(mAdapter);\n\n        mTimer = new Timer();\n        mTimerTask = new TimerTask() {\n            @Override\n            public void run() {\n                MainActivity.this.runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        loopViewpager();\n                    }\n                });\n            }\n        };\n    }\n\n    private void loopViewpager() {\n        if (mAdapter.getCount() > 0) {\n            int curPos = mViewPager.getCurrentItem();\n            curPos = (++curPos) % mAdapter.getCount();\n            mViewPager.setCurrentItem(curPos);\n        }\n    }\n\n    private void stopLoopViewPager() {\n        if (mTimer != null) {\n            mTimer.cancel();\n            mTimer.purge();\n            mTimer = null;\n        }\n        if (mTimerTask != null) {\n            mTimerTask.cancel();\n            mTimerTask = null;\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        stopLoopViewPager();\n    }\n}\n```\n\n当我们`Activity`销毁的时，有可能`Timer`还在继续等待执行`TimerTask`，它持有Activity的引用不能被回收，因此当我们Activity销毁的时候要立即`cancel`掉`Timer`和`TimerTask`，以避免发生内存泄漏。\n\n###### 集合中的对象未清理造成内存泄露\n\n这个比较好理解，如果一个对象放入到`ArrayList`、`HashMap`等集合中，这个集合就会持有该对象的引用。当我们不再需要这个对象时，也并没有将它从集合中移除，这样只要集合还在使用（而此对象已经无用了），这个对象就造成了内存泄露。并且如果集合被静态引用的话，集合里面那些没有用的对象更会造成内存泄露了。所以在使用集合时要及时将不用的对象从集合`remove`，或者`clear`集合，以避免内存泄漏。\n\n###### 资源未关闭或释放导致内存泄露\n\n在使用`IO`、`File`流或者`Sqlite`、`Cursor`等资源时要及时关闭。这些资源在进行读写操作时通常都使用了缓冲，如果及时不关闭，这些缓冲对象就会一直被占用而得不到释放，以致发生内存泄露。因此我们在不需要使用它们的时候就及时关闭，以便缓冲能及时得到释放，从而避免内存泄露。\n\n###### 属性动画造成内存泄露\n\n动画同样是一个耗时任务，比如在`Activity`中启动了属性动画（`ObjectAnimator`），但是在销毁的时候，没有调用`cancle`方法，虽然我们看不到动画了，但是这个动画依然会不断地播放下去，动画引用所在的控件，所在的控件引用`Activity`，这就造成`Activity`无法正常释放。因此同样要在`Activity`销毁的时候`cancel`掉属性动画，避免发生内存泄漏。\n\n```\n@Override\nprotected void onDestroy() {\n    super.onDestroy();\n    mAnimator.cancel();\n}\n```\n\n###### WebView造成内存泄露\n\n关于WebView的内存泄露，因为WebView在加载网页后会长期占用内存而不能被释放，因此我们在Activity销毁后要调用它的`destory()`方法来销毁它以释放内存。\n\n另外在查阅`WebView`内存泄露相关资料时看到这种情况：\n\n> `Webview`下面的`Callback`持有`Activity`引用，造成`Webview`内存无法释放，即使是调用了`Webview.destory()`等方法都无法解决问题（Android5.1之后）。\n\n最终的解决方案是：在销毁`WebView`之前需要先将`WebView从`父容器中移除，然后在销毁`WebView`。详细分析过程请参考这篇文章： [](https://link.juejin.im/?target=http%3A%2F%2Fblog.csdn.net%2Fxygy8860%2Farticle%2Fdetails%2F53334476%3Futm_source%3Ditdadao%26amp%3Butm_medium%3Dreferral)[WebView内存泄漏解决方法](https://link.juejin.im/?target=http%3A%2F%2Fblog.csdn.net%2Fxygy8860%2Farticle%2Fdetails%2F53334476)。\n\n```\n@Override\nprotected void onDestroy() {\n    super.onDestroy();\n    // 先从父控件中移除WebView\n    mWebViewContainer.removeView(mWebView);\n    mWebView.stopLoading();\n    mWebView.getSettings().setJavaScriptEnabled(false);\n    mWebView.clearHistory();\n    mWebView.removeAllViews();\n    mWebView.destroy();\n}\n```\n\n##### 总结\n\n内存泄露在Android内存优化是一个比较重要的一个方面，很多时候程序中发生了内存泄露我们不一定就能注意到，所有在编码的过程要养成良好的习惯。总结下来只要做到以下这几点就能避免大多数情况的内存泄漏：\n\n构造单例的时候尽量别用`Activity`的引用；\n静态引用时注意应用对象的置空或者少用静态引用；\n使用静态内部类+软引用代替非静态内部类；\n及时取消广播或者观察者注册；\n耗时任务、属性动画在`Activity`销毁时记得`cancel`；\n文件流、`Cursor`等资源及时关闭；\n`Activity`销毁时`WebView`的移除和销毁。"]],[19712,19712],[29959,29959]]],[1516950381728,["gengmei_pxf@gengmei123.local",[[-1,19710,"`"],[-1,29091," "],[1,29092," "]],[19711,19711],[19710,19710]]],[1516950383595,["gengmei_pxf@gengmei123.local",[[1,19710,"`"],[1,29090," "],[-1,29090," "]],[19710,19710],[19711,19711]]],[1516950401183,["gengmei_pxf@gengmei123.local",[[-1,20394,"##"],[-1,29091," "],[1,29092," "]],[20394,20396],[20394,20394]]],[1516950402612,["gengmei_pxf@gengmei123.local",[[-1,20390,"####"]],[20394,20394],[20390,20390]]],[1516950404733,["gengmei_pxf@gengmei123.local",[[1,20390,"8)"]],[20390,20390],[20392,20392]]],[1516950531962,["gengmei_pxf@gengmei123.local",[[-1,21227,"######"],[1,21233,"9)"]],[21227,21233],[21229,21229]]],[1516951237663,["gengmei_pxf@gengmei123.local",[[-1,25336,"######"],[1,25342,"10（"]],[25336,25342],[25339,25339]]],[1516951238488,["gengmei_pxf@gengmei123.local",[[-1,25338,"（"]],[25339,25339],[25338,25338]]],[1516951239101,["gengmei_pxf@gengmei123.local",[[1,25338,"）"]],[25338,25338],[25339,25339]]],[1516951240239,["gengmei_pxf@gengmei123.local",[[-1,25338,"）"]],[25339,25339],[25338,25338]]],[1516951241237,["gengmei_pxf@gengmei123.local",[[1,25338,")"]],[25338,25338],[25339,25339]]],[1516951665525,["gengmei_pxf@gengmei123.local",[[-1,26199,"######"],[1,26205,"11）"]],[26199,26205],[26202,26202]]],[1516951667304,["gengmei_pxf@gengmei123.local",[[-1,26201,"）"]],[26202,26202],[26201,26201]]],[1516951668333,["gengmei_pxf@gengmei123.local",[[1,26201,")"]],[26201,26201],[26202,26202]]],[1516951677139,["gengmei_pxf@gengmei123.local",[[-1,28436,"######"],[1,28442,"12)"]],[28436,28442],[28439,28439]]],[1516951794147,["gengmei_pxf@gengmei123.local",[[-1,28748,"######"],[1,28754,"13)"]],[28748,28754],[28751,28751]]],[1516951888685,["gengmei_pxf@gengmei123.local",[[-1,29657,"#####"]],[29657,29662],[29657,29657]]],[1516951889461,["gengmei_pxf@gengmei123.local",[[-1,29656,"\n"]],[29657,29657],[29656,29656]]],[1516951892722,["gengmei_pxf@gengmei123.local",[[1,29656,"\"\""]],[29656,29656],[29658,29658]]],[1516951893835,["gengmei_pxf@gengmei123.local",[[-1,29656,"\"\""]],[29658,29658],[29656,29656]]],[1516951895001,["gengmei_pxf@gengmei123.local",[[1,29656,"**"]],[29656,29656],[29658,29658]]],[1516951898091,["gengmei_pxf@gengmei123.local",[[1,29661,"**"]],[29661,29661],[29663,29663]]],[1516951900333,["gengmei_pxf@gengmei123.local",[[-1,29658," "]],[29659,29659],[29658,29658]]],[1516952086150,["gengmei_pxf@gengmei123.local",[[-1,28037,"###### "],[1,28044,"12）"]],[28037,28044],[28040,28040]]],[1516952090614,["gengmei_pxf@gengmei123.local",[[-1,28263,"###### "],[1,28270,"13）"]],[28263,28270],[28266,28266]]],[1516952094521,["gengmei_pxf@gengmei123.local",[[-1,28429,"2"]],[28430,28430],[28429,28429]]],[1516952094708,["gengmei_pxf@gengmei123.local",[[1,28429,"4"]],[28429,28429],[28430,28430]]],[1516952097905,["gengmei_pxf@gengmei123.local",[[-1,28741,"3"]],[28742,28742],[28741,28741]]],[1516952098157,["gengmei_pxf@gengmei123.local",[[1,28741,"5"]],[28741,28741],[28742,28742]]],[1516952138872,["gengmei_pxf@gengmei123.local",[[-1,26202," "]],[26203,26203],[26202,26202]]],[1516952158426,["gengmei_pxf@gengmei123.local",[[-1,26200,"1)"],[1,26202,"0) "]],[26199,26202],[26203,26203]]],[1516952160224,["gengmei_pxf@gengmei123.local",[[-1,26200,"0"]],[26201,26201],[26200,26200]]],[1516952160450,["gengmei_pxf@gengmei123.local",[[1,26200,"1"]],[26200,26200],[26201,26201]]],[1516952169290,["gengmei_pxf@gengmei123.local",[[-1,28038,"2）"],[1,28040,"0) "]],[28037,28040],[28041,28041]]],[1516952171383,["gengmei_pxf@gengmei123.local",[[-1,28038,"0"]],[28039,28039],[28038,28038]]],[1516952171612,["gengmei_pxf@gengmei123.local",[[1,28038,"2"]],[28038,28038],[28039,28039]]],[1516966864603,["gengmei_pxf@gengmei123.local",[[-1,12310," Android 的消息机制也就是 handler 机制,创建 handler 的时候会创建一个 looper ( 通过 l"],[1,12372,"* 首先L"],[-1,12387," 来创建 ),looper 一般为主线程 "],[1,12408,"会在当前线程保存一个"],[-1,12414,".\n\n    handler 通过 send 发送消息 (sendMessage) ,当然 post 一系列方法最终也是通过 send 来实现的,在 send 方法中handler 会通过 enqueueM"],[1,12517,"对象，并且会维护一个消息队列m"],[-1,12523,"() 方法中的 enq"],[1,12534,"Q"],[-1,12538,"Message(msg,millis )向消息队列 M"],[1,12565,"，而且规定了m"],[-1,12576," 插入一条消息,同时会把本身的 handler 通过 msg.target = this 传入.\n\n    "],[1,12630,"在每个线程中只会存在唯一的一个\n\n* "],[-1,12636," 是一个死循环,不断的读取MessageQueue中的消息,loop 方法会调用 "],[1,12677,".loop()方法会使线程进入一个无限循环，不断地从消息队列中获取消息，之后回调msg.target.disPatch"],[-1,12684,"Queue 的 next "],[-1,12699,"来获取新的消息,next 操作是一个阻塞操作,当没有消息的时候 next 方法会一直阻塞,进而导致 "],[1,12749,"。\n\n* 我们在实例化handler的过程中，会先得到当前所在线程的"],[-1,12753," 一直阻塞,当有消息的时候,L"],[1,12768,"er对象，之后得到与该l"],[-1,12773," 就会处理消息 Looper 收到消息之后就开始处理消息: msg.target.dispatch"],[1,12822,"对象相对应的消息队列。（代码见handler的构造方法）\n\n* 当我们发送消息的时候，即handler.send"],[-1,12829,"(msg),当然这里的 msg."],[1,12845,"或者handler.post，会将msg中的"],[-1,12851," 就是上面传过来的发送这条消息的 "],[1,12868,"赋值为handler自身，之后加入到消息队列中。\n\n* 在第三步实现实例化"],[-1,12875," 对象,这样 "],[1,12882,"的过程中，我们一般会重写"],[-1,12889," 发送的消息最终又交给他的dispatch"],[-1,12919,"来处理了,这里不同的是,handler 的 disp"],[1,12945,"（使用post方法需要实现run方法），而这些方法将会在第二步中的msg.target.disP"],[-1,12956," "],[-1,12959,"是在创建 Handler时所使用的 Looper 中执行的,这样就成功的将代码逻辑切换到了主线程了.\n\n    "],[1,13015,"中被回调，从而实现了message从一个线程到另外一个线程的传递。\n\n[**"],[1,13022,"机制？"],[-1,13023,"处理消息的过程是:首先,检查"],[-1,13044," 的 callback 是否为 null,不为 null 就通过 h"],[1,13078,"Queue，Looper等**](https://github.com/pxfile/note_accumulate/blob/master/Interview-Q-A/H"],[-1,13083,"CallBack 来处理消息,"],[1,13098,"r%E6%9C%BA%E5%88%B6%EF%BC%9F%20"],[-1,13105," 的 callback 是一个 Runnable 对象,实际上是 handler 的 post 方法所传递的 Runnable 参数.其次是检查 mCallback 是 否为 null,不为 null 就调用 mCallback 的h"],[1,13222,"Queue%EF%BC%8CLooper%E7%AD%89/H"],[1,13227,"r%E6%9C%BA%E5%88%B6%EF%BC%9F%20"],[-1,13234," 方法来处理消息."],[1,13243,"Queue%EF%BC%8CLooper%E7%AD%89.md)"]],[12310,13243],[13054,13054]]]]],["61496cf4-c152-4c12-9b5d-1a5a14613bb4",1520589806432,"# JAVA\n\n## 一. 类的加载过程，Person person = new Person();为例进行说明。\n\n1).因为new用到了Person.class，所以会先找到Person.class文件，并加载到内存中;\n\n2).执行该类中的static代码块，如果有的话，给Person.class类进行初始化;\n\n3).在堆内存中开辟空间分配内存地址;\n\n4).在堆内存中建立对象的特有属性，并进行默认初始化;\n\n5).对属性进行显示初始化;\n\n6).对对象进行构造代码块初始化;\n\n7).对对象进行与之对应的构造函数进行初始化;\n\n8).将内存地址付给栈内存中的p变量\n\n## 二. JVM相关知识，GC机制。\n\n**JVM基本构成**\n\n![](http://upload-images.jianshu.io/upload_images/4642697-bbcb5924cdaf30f8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/473)\n\n从上图可知，JVM主要包括四个部分：\n\n    1.类加载器（ClassLoader）:在JVM启动时或者在类运行时将需要的class加载到JVM中。（下图表示了从java源文件到JVM的整个过程，可配合理解。 \n\n![](http://upload-images.jianshu.io/upload_images/4642697-1cf5f815751beeab.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400)\n\n    2.执行引擎：负责执行class文件中包含的字节码指令；\n\n    3.内存区（也叫运行时数据区）：是在JVM运行的时候操作所分配的内存区。运行时内存区主要可以划分为5个区域，如图：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-160b9ba3bfeaf8f5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/376)\n\n*   方法区(Method Area)：用于存储类结构信息的地方，包括常量池、静态变量、构造函数等。虽然JVM规范把方法区描述为堆的一个逻辑部分， 但它却有个别名non-heap（非堆），所以大家不要搞混淆了。方法区还包含一个运行时常量池。\n\n*   java堆(Heap)：存储java实例或者对象的地方。这块是GC的主要区域。从存储的内容我们可以很容易知道，方法区和堆是被所有java线程共享的。\n\n*   java栈(Stack)：java栈总是和线程关联在一起，每当创建一个线程时，JVM就会为这个线程创建一个对应的java栈。在这个java栈中又会包含多个栈帧，每运行一个方法就创建一个栈帧，用于存储局部变量表、操作栈、方法返回值等。每一个方法从调用直至执行完成的过程，就对应一个栈帧在java栈中入栈到出栈的过程。所以java栈是现成私有的。\n\n*   程序计数器(PC Register)：用于保存当前线程执行的内存地址。由于JVM程序是多线程执行的（线程轮流切换），所以为了保证线程切换回来后，还能恢复到原先状态，就需要一个独立的计数器，记录之前中断的地方，可见程序计数器也是线程私有的。\n\n*   本地方法栈(Native Method Stack)：和java栈的作用差不多，只不过是为JVM使用到的native方法服务的。\n\n        4.本地方法接口：主要是调用C或C++实现的本地方法及返回结果。\n\n**GC机制**\n\n    垃圾收集器一般必须完成两件事：检测出垃圾；回收垃圾。怎么检测出垃圾？一般有以下几种方法：\n\n**_引用计数法：_**\n\n    给一个对象添加引用计数器，每当有个地方引用它，计数器就加1；引用失效就减1。好了，问题来了，如果我有两个对象A和B，互相引用，除此之外，没有其他任何对象引用它们，实际上这两个对象已经无法访问，即是我们说的垃圾对象。但是互相引用，计数不为0，导致无法回收，所以还有另一种方法：\n\n**_可达性分析算法：_**\n\n    以根集对象为起始点进行搜索，如果有对象不可达的话，即是垃圾对象。这里的根集一般包括java栈中引用的对象、方法区常良池中引用的对象、本地方法中引用的对象等。\n\n    总之，JVM在做垃圾回收的时候，会检查堆中的所有对象是否会被这些根集对象引用，不能够被引用的对象就会被垃圾收集器回收。一般回收算法也有如下几种：\n\n1).标记-清除（Mark-sweep）\n\n2).复制（Copying\n\n3).标记-整理（Mark-Compact）\n\n4).分代收集算法\n\n具体的解释可以参考本篇文章[还不点我?](https://link.jianshu.com?t=http://blog.csdn.net/tonytfjing/article/details/44278233)\n\n## 三. 类的加载器，双亲机制，Android的类加载器。\n\n**类的加载器**\n\n    大家都知道，当我们写好一个Java程序之后，不是管是CS还是BS应用，都是由若干个.class文件组织而成的一个完整的Java应用程序，当程序在运行时，即会调用该程序的一个入口函数来调用系统的相关功能，而这些功能都被封装在不同的class文件当中，所以经常要从这个class文件中要调用另外一个class文件中的方法，如果另外一个文件不存在的，则会引发系统异常。而程序在启动的时候，并不会一次性加载程序所要用的所有class文件，而是根据程序的需要，通过Java的类加载机制（ClassLoader）来动态加载某个class文件到内存当中的，从而只有class文件被载入到了内存之后，才能被其它class所引用。所以ClassLoader就是用来动态加载class文件到内存当中用的。\n\n**双亲机制**\n\n**_1、原理介绍_**\n\n    ClassLoader使用的是双亲委托模型来搜索类的，每个ClassLoader实例都有一个父类加载器的引用（不是继承的关系，是一个包含的关系），虚拟机内置的类加载器（Bootstrap ClassLoader）本身没有父类加载器，但可以用作其它ClassLoader实例的的父类加载器。当一个ClassLoader实例需要加载某个类时，它会试图亲自搜索某个类之前，先把这个任务委托给它的父类加载器，这个过程是由上至下依次检查的，首先由最顶层的类加载器Bootstrap ClassLoader试图加载，如果没加载到，则把任务转交给Extension ClassLoader试图加载，如果也没加载到，则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常。否则将这个找到的类生成一个类的定义，并将它加载到内存当中，最后返回这个类在内存中的Class实例对象。\n\n**_2、为什么要使用双亲委托这种模型呢？_**\n\n    因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。\n\n**_3、但是JVM在搜索类的时候，又是如何判定两个class是相同的呢？_**\n\n    JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。比如网络上的一个Java类org.classloader.simple.NetClassLoaderSimple，javac编译之后生成字节码文件NetClassLoaderSimple.class，ClassLoaderA和ClassLoaderB这两个类加载器并读取了NetClassLoaderSimple.class文件，并分别定义出了java.lang.Class实例来表示这个类，对于JVM来说，它们是两个不同的实例对象，但它们确实是同一份字节码文件，如果试图将这个Class实例生成具体的对象进行转换时，就会抛运行时异常java.lang.ClassCaseException，提示这是两个不同的类型。\n\n**Android类加载器**\n\n    对于Android而言，最终的apk文件包含的是dex类型的文件，dex文件是将class文件重新打包，打包的规则又不是简单地压缩，而是完全对class文件内部的各种函数表，变量表进行优化，产生一个新的文件，即dex文件。因此加载这种特殊的Class文件就需要特殊的类加载器DexClassLoader。\n\n## 四. 集合框架，list，map，set都有哪些具体的实现类，区别都是什么?\n\n![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：了对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**===****》****TreeSet****两种排序方式：**两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n## 五. concurrentHashmap原理，原子类。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大.\n\n## 六. volatile原理\n\n    在《Java并发编程：核心理论》一文中，我们已经提到过可见性、有序性及原子性问题，通常情况下我们可以通过Synchronized关键字来解决这些个问题，不过如果对Synchronized原理有了解的话，应该知道Synchronized是一个比较重量级的操作，对系统的性能有比较大的影响，所以，如果有其他解决方案，我们通常都避免使用Synchronized来解决问题。而volatile关键字就是Java中提供的另一种解决可见性和有序性问题的方案。对于原子性，需要强调一点，也是大家容易误解的一点：对volatile变量的单次读/写操作可以保证原子性的，如long和double类型变量，但是并不能保证i++这种操作的原子性，因为本质上i++是读、写两次操作。\n\n参考文章[插好眼了等传送](https://link.jianshu.com?t=https://www.cnblogs.com/paddix/p/5428507.html)\n\n## 七. 多线程的使用场景\n\n使用多线程就一定效率高吗？ 有时候使用多线程并不是为了提高效率，而是使得CPU能够同时处理多个事件。\n\n1).为了不阻塞主线程,启动其他线程来做好事的事情,比如APP中耗时操作都不在UI中做.\n\n2).实现更快的应用程序,即主线程专门监听用户请求,子线程用来处理用户请求,以获得大的吞吐量.感觉这种情况下，多线程的效率未必高。 这种情况下的多线程是为了不必等待， 可以并行处理多条数据。\n\n比如JavaWeb的就是主线程专门监听用户的HTTP请求，然后启动子线程去处理用户的HTTP请求。\n\n3).某种虽然优先级很低的服务，但是却要不定时去做。\n\n比如Jvm的垃圾回收。\n\n4.)某种任务，虽然耗时，但是不耗CPU的操作时，开启多个线程，效率会有显著提高。\n\n比如读取文件，然后处理。 磁盘IO是个很耗费时间，但是不耗CPU计算的工作。 所以可以一个线程读取数据，一个线程处理数据。肯定比一个线程读取数据，然后处理效率高。 因为两个线程的时候充分利用了CPU等待磁盘IO的空闲时间。\n\n## 八. JAVA常量池\n\n**_Interger中的128(-128~127)_**\n\na.当数值范围为-128~127时：如果两个new出来Integer对象，即使值相同，通过“==”比较结果为false，但两个对象直接赋值，则通过“==”比较结果为“true，这一点与String非常相似。\n\nb.当数值不在-128~127时，无论通过哪种方式，即使两个对象的值相等，通过“==”比较，其结果为false；\n\nc.当一个Integer对象直接与一个int基本数据类型通过“==”比较，其结果与第一点相同；\n\nd.Integer对象的hash值为数值本身；\n\n**_为什么是-128-127?_**\n\n    在Integer类中有一个静态内部类IntegerCache，在IntegerCache类中有一个Integer数组，用以缓存当数值范围为-128~127时的Integer对象。\n\n## 九. 简单介绍一下java中的泛型，泛型擦除以及相关的概念。\n\n    泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。 Java语言引入泛型的好处是安全简单。\n\n    在Java SE 1.5之前，没有泛型的情况的下，通过对类型Object的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是一个安全隐患。\n\n    泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，提高代码的重用率。\n\n1、泛型的类型参数只能是类类型（包括自定义类），不能是简单类型。\n\n2、同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的。\n\n3、泛型的类型参数可以有多个。\n\n4、泛型的参数类型可以使用extends语句，例如<T extends superclass>。习惯上称为“有界类型”。\n\n5、泛型的参数类型还可以是通配符类型。例如Class<?> classType = Class.forName(\"java.lang.String\");\n\n**泛型擦除以及相关的概念**\n\n    Java中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会在编译器在编译的时候去掉。这个过程就称为类型擦除。\n\n**类型擦除引起的问题及解决方法**\n\n1、先检查，在编译，以及检查编译的对象和引用传递的问题\n\n2、自动类型转换\n\n3、类型擦除与多态的冲突和解决方法\n\n4、泛型类型变量不能是基本数据类型\n\n5、运行时类型查询\n\n6、异常中使用泛型的问题\n\n7、数组（这个不属于类型擦除引起的问题）\n\n9、类型擦除后的冲突\n\n10、泛型在静态方法和静态类中的问题\n\n# Android\n\n## 一. Handler机制\n\n   * 首先Looper.prepare()会在当前线程保存一个looper对象，并且会维护一个消息队列messageQueue，而且规定了messageQueue在每个线程中只会存在唯一的一个\n\n* Looper.loop()方法会使线程进入一个无限循环，不断地从消息队列中获取消息，之后回调msg.target.disPatchMessage方法。\n\n* 我们在实例化handler的过程中，会先得到当前所在线程的looper对象，之后得到与该looper对象相对应的消息队列。（代码见handler的构造方法）\n\n* 当我们发送消息的时候，即handler.sendMessage或者handler.post，会将msg中的target赋值为handler自身，之后加入到消息队列中。\n\n* 在第三步实现实例化handler的过程中，我们一般会重写handlerMessage方法（使用post方法需要实现run方法），而这些方法将会在第二步中的msg.target.disPatchMessage方法中被回调，从而实现了message从一个线程到另外一个线程的传递。\n\n[**Handler机制？ MessageQueue，Looper等**](https://github.com/pxfile/note_accumulate/blob/master/Interview-Q-A/Handler%E6%9C%BA%E5%88%B6%EF%BC%9F%20MessageQueue%EF%BC%8CLooper%E7%AD%89/Handler%E6%9C%BA%E5%88%B6%EF%BC%9F%20MessageQueue%EF%BC%8CLooper%E7%AD%89.md)\n\n## 二. View的绘制流程\n\n    View的绘制流程：OnMeasure()——>OnLayout()——>OnDraw()\n\n各步骤的主要工作：\n\n**_OnMeasure()：_**\n\n    测量视图大小。从顶层父View到子View递归调用measure方法，measure方法又回调OnMeasure。\n\n**_OnLayout()：_**\n\n    确定View位置，进行页面布局。从顶层父View向子View的递归调用view.layout方法的过程，即父View根据上一步measure子View所得到的布局大小和布局参数，将子View放在合适的位置上。\n\n**_OnDraw()：_**\n\n    绘制视图:ViewRoot创建一个Canvas对象，然后调用OnDraw()。六个步骤：①、绘制视图的背景；②、保存画布的图层（Layer）；③、绘制View的内容；④、绘制View子视图，如果没有就不用；⑤、还原图层（Layer）；⑥、绘制滚动条。\n\n## 三. 事件传递机制\n\n1).Android事件分发机制的本质是要解决：点击事件由哪个对象发出，经过哪些对象，最终达到哪个对象并最终得到处理。这里的对象是指Activity、ViewGroup、View.\n\n2).Android中事件分发顺序：Activity（Window） -> ViewGroup -> View.\n\n3).事件分发过程由dispatchTouchEvent() 、onInterceptTouchEvent()和onTouchEvent()三个方法协助完成\n\n**设置Button按钮来响应点击事件事件传递情况：（如下图）**\n\n布局如下:\n\n![](http://upload-images.jianshu.io/upload_images/4642697-01f23a099103eb82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/210)\n\n最外层：Activiy A，包含两个子View：ViewGroup B、View C\n\n中间层：ViewGroup B，包含一个子View：View C\n\n最内层：View C\n\n假设用户首先触摸到屏幕上View C上的某个点（如图中黄色区域），那么Action_DOWN事件就在该点产生，然后用户移动手指并最后离开屏幕。\n\n**按钮点击事件:**\n\nDOWN事件被传递给C的onTouchEvent方法，该方法返回true，表示处理这个事件;\n\n因为C正在处理这个事件，那么DOWN事件将不再往上传递给B和A的onTouchEvent()；\n\n该事件列的其他事件（Move、Up）也将传递给C的onTouchEvent();\n\n![](http://upload-images.jianshu.io/upload_images/4642697-ca12c00c79780b57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n(记住这个图的传递顺序,面试的时候能够画出来,就很详细了)\n\n## 四. Binder机制\n\n**1.了解Binder**\n\n    在Android系统中，每一个应用程序都运行在独立的进程中，这也保证了当其中一个程序出现异常而不会影响另一个应用程序的正常运转。在许多情况下，我们activity都会与各种系统的service打交道，很显然，我们写的程序中activity与系统service肯定不是同一个进程，但是它们之间是怎样实现通信的呢？所以Binder是android中一种实现进程间通信（IPC）的方式之一。\n\n    1).首先，Binder分为Client和Server两个进程。\n\n    注意，Client和Server是相对的。谁发消息，谁就是Client，谁接收消息，谁就是Server。\n\n    举个例子，两个进程A和B之间使用Binder通信，进程A发消息给进程B，那么这时候A是Binder Client，B是Binder Server；进程B发消息给进程A，那么这时候B是Binder Client，A是Binder Server——其实这么说虽然简单了，但还是不太严谨，我们先这么理解着。\n\n    2).其次，我们看下面这个图（摘自田维术的博客），基本说明白了Binder的组成解构：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-9fed6a1413057558.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/673)\n\n    图中的IPC就是进程间通信的意思。\n\n    图中的ServiceManager，负责把Binder Server注册到一个容器中。\n\n    有人把ServiceManager比喻成电话局，存储着每个住宅的座机电话，还是很恰当的。张三给李四打电话，拨打电话号码，会先转接到电话局，电话局的接线员查到这个电话号码的地址，因为李四的电话号码之前在电话局注册过，所以就能拨通；没注册，就会提示该号码不存在。\n\n    对照着Android Binder机制，对着上面这图，张三就是Binder Client，李四就是Binder Server，电话局就是ServiceManager，电话局的接线员在这个过程中做了很多事情，对应着图中的Binder驱动.\n\n    3).接下来我们看Binder通信的过程，还是摘自田维术博客的一张图：\n\n![](http://upload-images.jianshu.io/upload_images/4642697-6a03bbb4f16108b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/675)\n\n注：图中的SM也就是ServiceManager。\n\n    我们看到，Client想要直接调用Server的add方法，是不可以的，因为它们在不同的进程中，这时候就需要Binder来帮忙了。\n\n    首先是Server在SM这个容器中注册。\n\n    其次，Client想要调用Server的add方法，就需要先获取Server对象， 但是SM不会把真正的Server对象返回给Client，而是把Server的一个代理对象返回给Client，也就是Proxy。\n\n    然后，Client调用Proxy的add方法，SM会帮他去调用Server的add方法，并把结果返回给Client。\n\n    以上这3步，Binder驱动出了很多力，但我们不需要知道Binder驱动的底层实现，涉及到C++的代码了——把有限的时间去做更有意义的事情。\n\n(ps:以上节选自包建强老师的文章[点我点我](https://link.jianshu.com?t=http://www.cnblogs.com/Jax/p/6864103.html)).\n\n**2.为什么android选用Binder来实现进程间通信？**\n\n1).可靠性。在移动设备上，通常采用基于Client-Server的通信方式来实现互联网与设备间的内部通信。目前linux支持IPC包括传统的管道，System V IPC，即消息队列/共享内存/信号量，以及socket中只有socket支持Client-Server的通信方式。Android系统为开发者提供了丰富进程间通信的功能接口，媒体播放，传感器，无线传输。这些功能都由不同的server来管理。开发都只关心将自己应用程序的client与server的通信建立起来便可以使用这个服务。毫无疑问，如若在底层架设一套协议来实现Client-Server通信，增加了系统的复杂性。在资源有限的手机 上来实现这种复杂的环境，可靠性难以保证。\n\n2).传输性能。socket主要用于跨网络的进程间通信和本机上进程间的通信，但传输效率低，开销大。消息队列和管道采用存储-转发方式，即数据先从发送方缓存区拷贝到内核开辟的一块缓存区中，然后从内核缓存区拷贝到接收方缓存区，其过程至少有两次拷贝。虽然共享内存无需拷贝，但控制复杂。比较各种IPC方式的数据拷贝次数。共享内存：0次。Binder：1次。Socket/管道/消息队列：2次。\n\n3).安全性。Android是一个开放式的平台，所以确保应用程序安全是很重要的。Android对每一个安装应用都分配了UID/PID,其中进程的UID是可用来鉴别进程身份。传统的只能由用户在数据包里填写UID/PID，这样不可靠，容易被恶意程序利用。而我们要求由内核来添加可靠的UID。\n\n所以，出于可靠性、传输性、安全性。android建立了一套新的进程间通信方式。\n\n## 五. Android中进程的级别，以及各自的区别。\n\n**1、前台进程**\n\n    用户当前正在做的事情需要这个进程。如果满足下面的条件之一，一个进程就被认为是前台进程：\n\n1).这个进程拥有一个正在与用户交互的Activity(这个Activity的onResume()方法被调用)。\n\n2).这个进程拥有一个绑定到正在与用户交互的activity上的Service。\n\n3).这个进程拥有一个前台运行的Service（service调用了方法startForeground()）.\n\n4).这个进程拥有一个正在执行其任何一个生命周期回调方法（onCreate(),onStart(),或onDestroy()）的Service。\n\n5).这个进程拥有正在执行其onReceive()方法的BroadcastReceiver。\n\n    通常，在任何时间点，只有很少的前台进程存在。它们只有在达到无法调合的矛盾时才会被杀－－如内存太小而不能继续运行时。通常，到了这时，设备就达到了一个内存分页调度状态，所以需要杀一些前台进程来保证用户界面的反应.\n\n**2、可见进程**\n\n    一个进程不拥有运行于前台的组件，但是依然能影响用户所见。满足下列条件时，进程即为可见：\n\n    这个进程拥有一个不在前台但仍可见的Activity(它的onPause()方法被调用)。当一个前台activity启动一个对话框时，就出了这种情况。\n\n**3、服务进程**\n\n    一个可见进程被认为是极其重要的。并且，除非只有杀掉它才可以保证所有前台进程的运行，否则是不能动它的。\n\n    这个进程拥有一个绑定到可见activity的Service。\n\n    一个进程不在上述两种之内，但它运行着一个被startService()所启动的service。\n\n尽管一个服务进程不直接影响用户所见，但是它们通常做一些用户关心的事情（比如播放音乐或下载数据），所以系统不到前台进程和可见进程活不下去时不会杀它。\n\n**4、后台进程**\n\n    一个进程拥有一个当前不可见的activity(activity的onStop()方法被调用)。\n\n    这样的进程们不会直接影响到用户体验，所以系统可以在任意时刻杀了它们从而为前台、可见、以及服务进程们提供存储空间。通常有很多后台进程在运行。它们被保存在一个LRU(最近最少使用)列表中来确保拥有最近刚被看到的activity的进程最后被杀。如果一个activity正确的实现了它的生命周期方法，并保存了它的当前状态，那么杀死它的进程将不会对用户的可视化体验造成影响。因为当用户返回到这个activity时，这个activity会恢复它所有的可见状态。\n\n**5、空进程**\n\n    一个进程不拥有入何active组件。\n\n    保留这类进程的唯一理由是高速缓存，这样可以提高下一次一个组件要运行它时的启动速度。系统经常为了平衡在进程高速缓存和底层的内核高速缓存之间的整体系统资源而杀死它们。\n\n## 六. 线程池的相关知识。\n\n    Android中的线程池都是之间或间接通过配置ThreadPoolExecutor来实现不同特性的线程池.Android中最常见的四类具有不同特性的线程池分别为FixThreadPool、CachedThreadPool、SingleThreadPool、ScheduleThreadExecutor.\n\n**1).FixThreadPool**\n\n    只有核心线程,并且数量固定的,也不会被回收,所有线程都活动时,因为队列没有限制大小,新任务会等待执行.\n\n    优点:更快的响应外界请求.\n\n**2).SingleThreadPool**\n\n    只有一个核心线程,确保所有的任务都在同一线程中按顺序完成.因此不需要处理线程同步的问题.\n\n**3).CachedThreadPool**\n\n    只有非核心线程,最大线程数非常大,所有线程都活动时,会为新任务创建新线程,否则会利用空闲线程(60s空闲时间,过了就会被回收,所以线程池中有0个线程的可能)处理任务.\n\n    优点:任何任务都会被立即执行(任务队列SynchronousQueue相当于一个空集合);比较适合执行大量的耗时较少的任务.\n\n**4).ScheduledThreadPool**\n\n    核心线程数固定,非核心线程(闲着没活干会被立即回收)数没有限制.\n\n    优点:执行定时任务以及有固定周期的重复任务\n\n    参考[Android开发——Android中常见的4种线程池（保证你能看懂并理解）](https://link.jianshu.com?t=http://blog.csdn.net/seu_calvin/article/details/52415337)\n\n## 七. 内存泄露，怎样查找，怎么产生的内存泄露。\n\n**产生的内存泄露**\n\n1).资源对象没关闭造成的内存泄漏\n\n2).构造Adapter时，没有使用缓存的convertView\n\n3).Bitmap对象不在使用时调用recycle()释放内存\n\n4).试着使用关于application的context来替代和activity相关的context\n\n5).注册没取消造成的内存泄漏\n\n6).集合中对象没清理造成的内存泄漏\n\n7).单例导致内存泄露\n\n单例模式在Android开发中会经常用到，但是如果使用不当就会导致内存泄露。因为单例的静态特性使得它的生命周期同应用的生命周期一样长，如果一个对象已经没有用处了，但是单例还持有它的引用，那么在整个应用程序的生命周期它都不能正常被回收，从而导致内存泄露。\n```\npublic class AppSettings {\n\n    private static AppSettings sInstance;\n    private Context mContext;\n\n    private AppSettings(Context context) {\n        this.mContext = context;\n    }\n\n    public static AppSettings getInstance(Context context) {\n        if (sInstance == null) {\n            sInstance = new AppSettings(context);\n        }\n        return sInstance;\n    }\n}\n```\n像上面代码中这样的单例，如果我们在调用`getInstance(Context context)`方法的时候传入的`context`参数是`Activity`、`Service`等上下文，就会导致内存泄露。\n\n以`Activity`为例，当我们启动一个`Activity`，并调用`getInstance(Context context)`方法去获取`AppSettings`的单例，传入`Activity.this`作为`context`，这样`AppSettings`类的单例`sInstance`就持有了`Activity`的引用，当我们退出`Activity`时，该`Activity`就没有用了，但是因为`sIntance`作为静态单例（在应用程序的整个生命周期中存在）会继续持有这个`Activity`的引用，导致这个`Activity`对象无法被回收释放，这就造成了内存泄露。\n\n为了避免这样单例导致内存泄露，我们可以将`context`参数改为全局的上下文：\n\n```\nprivate AppSettings(Context context) {\n    this.mContext = context.getApplicationContext();\n}\n```\n\n全局的上下文`Application Context`就是应用程序的上下文，和单例的生命周期一样长，这样就避免了内存泄漏。\n\n单例模式对应应用程序的生命周期，所以我们在构造单例的时候尽量避免使用`Activity`的上下文，而是使用`Application`的上下文。\n\n8) 静态变量导致内存泄露\n\n静态变量存储在方法区，它的生命周期从类加载开始，到整个进程结束。一旦静态变量初始化后，它所持有的引用只有等到进程结束才会释放。\n\n比如下面这样的情况，在`Activity`中为了避免重复的创建`info`，将`sInfo`作为静态变量：\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    private static Info sInfo;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        if (sInfo != null) {\n            sInfo = new Info(this);\n        }\n    }\n}\n\nclass Info {\n    public Info(Activity activity) {\n    }\n}\n```\n\n`Info`作为`Activity`的静态成员，并且持有`Activity`的引用，但是`sInfo`作为静态变量，生命周期肯定比`Activity`长。所以当`Activity`退出后，`sInfo`仍然引用了`Activity`，`Activity`不能被回收，这就导致了内存泄露。\n\n在Android开发中，静态持有很多时候都有可能因为其使用的生命周期不一致而导致内存泄露，所以我们在新建静态持有的变量的时候需要多考虑一下各个成员之间的引用关系，并且尽量少地使用静态持有的变量，以避免发生内存泄露。当然，我们也可以在适当的时候讲静态量重置为null，使其不再持有引用，这样也可以避免内存泄露。\n\n9) 非静态内部类导致内存泄露\n\n非静态内部类（包括匿名内部类）默认就会持有外部类的引用，当非静态内部类对象的生命周期比外部类对象的生命周期长时，就会导致内存泄露。\n\n非静态内部类导致的内存泄露在Android开发中有一种典型的场景就是使用`Handler`，很多开发者在使用`Handler`是这样写的：\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        start();\n    }\n\n    private void start() {\n        Message msg = Message.obtain();\n        msg.what = 1;\n        mHandler.sendMessage(msg);\n    }\n\n    private Handler mHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            if (msg.what == 1) {\n                // 做相应逻辑\n            }\n        }\n    };\n}\n```\n\n也许有人会说，`mHandler`并未作为静态变量持有`Activity`引用，生命周期可能不会比`Activity`长，应该不一定会导致内存泄露呢，显然不是这样的！\n\n熟悉`Handler`消息机制的都知道，`mHandler`会作为成员变量保存在发送的消息`msg`中，即`msg`持有`mHandler`的引用，而`mHandler`是`Activity`的非静态内部类实例，即`mHandler`持有`Activity`的引用，那么我们就可以理解为`msg`间接持有`Activity`的引用。`msg`被发送后先放到消息队列`MessageQueue`中，然后等待`Looper`的轮询处理（`MessageQueue`和`Looper`都是与线程相关联的，`MessageQueue`是`Looper`引用的成员变量，而`Looper`是保存在`ThreadLocal`中的）。那么当`Activity`退出后，`msg`可能仍然存在于消息对列`MessageQueue`中未处理或者正在处理，那么这样就会导致`Activity`无法被回收，以致发生`Activity`的内存泄露。\n\n通常在Android开发中如果要使用内部类，但又要规避内存泄露，一般都会采用_静态内部类+弱引用_的方式。\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    private Handler mHandler;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        mHandler = new MyHandler(this);\n        start();\n    }\n\n    private void start() {\n        Message msg = Message.obtain();\n        msg.what = 1;\n        mHandler.sendMessage(msg);\n    }\n\n    private static class MyHandler extends Handler {\n\n        private WeakReference<MainActivity> activityWeakReference;\n\n        public MyHandler(MainActivity activity) {\n            activityWeakReference = new WeakReference<>(activity);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            MainActivity activity = activityWeakReference.get();\n            if (activity != null) {\n                if (msg.what == 1) {\n                    // 做相应逻辑\n                }\n            }\n        }\n    }\n}\n```\n\n`mHandler`通过弱引用的方式持有`Activity`，当GC执行垃圾回收时，遇到`Activity`就会回收并释放所占据的内存单元。这样就不会发生内存泄露了。\n\n上面的做法确实避免了`Activity`导致的内存泄露，发送的`msg`不再已经没有持有`Activity`的引用了，但是`msg`还是有可能存在消息队列`MessageQueue`中，所以更好的是在`Activity`销毁时就将`mHandler`的回调和发送的消息给移除掉。\n\n```\n@Override\nprotected void onDestroy() {\n    super.onDestroy();\n    mHandler.removeCallbacksAndMessages(null);\n}\n```\n\n非静态内部类造成内存泄露还有一种情况就是使用`Thread`或者`AsyncTask`。\n\n比如在Activity中直接`new`一个子线程`Thread`：\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                // 模拟相应耗时逻辑\n                try {\n                    Thread.sleep(2000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n    }\n}\n```\n\n或者直接新建`AsyncTask`异步任务：\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        new AsyncTask<Void, Void, Void>() {\n            @Override\n            protected Void doInBackground(Void... params) {\n                // 模拟相应耗时逻辑\n                try {\n                    Thread.sleep(2000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                return null;\n            }\n        }.execute();\n    }\n}\n```\n\n很多初学者都会像上面这样新建线程和异步任务，殊不知这样的写法非常地不友好，这种方式新建的子线程`Thread`和`AsyncTask`都是匿名内部类对象，默认就隐式的持有外部`Activity`的引用，导致`Activity`内存泄露。要避免内存泄露的话还是需要像上面`Handler`一样使用_静态内部类+弱应用_的方式（代码就不列了，参考上面`Hanlder`的正确写法）。\n\n10) 未取消注册或回调导致内存泄露\n\n比如我们在`Activity`中注册广播，如果在`Activity`销毁后不取消注册，那么这个刚播会一直存在系统中，同上面所说的非静态内部类一样持有`Activity`引用，导致内存泄露。因此注册广播后在`Activity`销毁后一定要取消注册。\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        this.registerReceiver(mReceiver, new IntentFilter());\n    }\n\n    private BroadcastReceiver mReceiver = new BroadcastReceiver() {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            // 接收到广播需要做的逻辑\n        }\n    };\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        this.unregisterReceiver(mReceiver);\n    }\n}\n```\n\n在注册观察则模式的时候，如果不及时取消也会造成内存泄露。比如使用`Retrofit+RxJava`注册网络请求的观察者回调，同样作为匿名内部类持有外部引用，所以需要记得在不用或者销毁的时候取消注册。\n\n11) Timer和TimerTask导致内存泄露\n\n`Timer`和`TimerTask`在Android中通常会被用来做一些计时或循环任务，比如实现无限轮播的`ViewPager`：\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    private ViewPager mViewPager;\n    private PagerAdapter mAdapter;\n    private Timer mTimer;\n    private TimerTask mTimerTask;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        init();\n        mTimer.schedule(mTimerTask, 3000, 3000);\n    }\n\n    private void init() {\n        mViewPager = (ViewPager) findViewById(R.id.view_pager);\n        mAdapter = new ViewPagerAdapter();\n        mViewPager.setAdapter(mAdapter);\n\n        mTimer = new Timer();\n        mTimerTask = new TimerTask() {\n            @Override\n            public void run() {\n                MainActivity.this.runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        loopViewpager();\n                    }\n                });\n            }\n        };\n    }\n\n    private void loopViewpager() {\n        if (mAdapter.getCount() > 0) {\n            int curPos = mViewPager.getCurrentItem();\n            curPos = (++curPos) % mAdapter.getCount();\n            mViewPager.setCurrentItem(curPos);\n        }\n    }\n\n    private void stopLoopViewPager() {\n        if (mTimer != null) {\n            mTimer.cancel();\n            mTimer.purge();\n            mTimer = null;\n        }\n        if (mTimerTask != null) {\n            mTimerTask.cancel();\n            mTimerTask = null;\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        stopLoopViewPager();\n    }\n}\n```\n\n当我们`Activity`销毁的时，有可能`Timer`还在继续等待执行`TimerTask`，它持有Activity的引用不能被回收，因此当我们Activity销毁的时候要立即`cancel`掉`Timer`和`TimerTask`，以避免发生内存泄漏。\n\n12) 集合中的对象未清理造成内存泄露\n\n这个比较好理解，如果一个对象放入到`ArrayList`、`HashMap`等集合中，这个集合就会持有该对象的引用。当我们不再需要这个对象时，也并没有将它从集合中移除，这样只要集合还在使用（而此对象已经无用了），这个对象就造成了内存泄露。并且如果集合被静态引用的话，集合里面那些没有用的对象更会造成内存泄露了。所以在使用集合时要及时将不用的对象从集合`remove`，或者`clear`集合，以避免内存泄漏。\n\n13）资源未关闭或释放导致内存泄露\n\n在使用`IO`、`File`流或者`Sqlite`、`Cursor`等资源时要及时关闭。这些资源在进行读写操作时通常都使用了缓冲，如果及时不关闭，这些缓冲对象就会一直被占用而得不到释放，以致发生内存泄露。因此我们在不需要使用它们的时候就及时关闭，以便缓冲能及时得到释放，从而避免内存泄露。\n\n14) 属性动画造成内存泄露\n\n动画同样是一个耗时任务，比如在`Activity`中启动了属性动画（`ObjectAnimator`），但是在销毁的时候，没有调用`cancle`方法，虽然我们看不到动画了，但是这个动画依然会不断地播放下去，动画引用所在的控件，所在的控件引用`Activity`，这就造成`Activity`无法正常释放。因此同样要在`Activity`销毁的时候`cancel`掉属性动画，避免发生内存泄漏。\n\n```\n@Override\nprotected void onDestroy() {\n    super.onDestroy();\n    mAnimator.cancel();\n}\n```\n\n15) WebView造成内存泄露\n\n关于WebView的内存泄露，因为WebView在加载网页后会长期占用内存而不能被释放，因此我们在Activity销毁后要调用它的`destory()`方法来销毁它以释放内存。\n\n另外在查阅`WebView`内存泄露相关资料时看到这种情况：\n\n> `Webview`下面的`Callback`持有`Activity`引用，造成`Webview`内存无法释放，即使是调用了`Webview.destory()`等方法都无法解决问题（Android5.1之后）。\n\n最终的解决方案是：在销毁`WebView`之前需要先将`WebView从`父容器中移除，然后在销毁`WebView`。详细分析过程请参考这篇文章： [](https://link.juejin.im/?target=http%3A%2F%2Fblog.csdn.net%2Fxygy8860%2Farticle%2Fdetails%2F53334476%3Futm_source%3Ditdadao%26amp%3Butm_medium%3Dreferral)[WebView内存泄漏解决方法](https://link.juejin.im/?target=http%3A%2F%2Fblog.csdn.net%2Fxygy8860%2Farticle%2Fdetails%2F53334476)。\n\n```\n@Override\nprotected void onDestroy() {\n    super.onDestroy();\n    // 先从父控件中移除WebView\n    mWebViewContainer.removeView(mWebView);\n    mWebView.stopLoading();\n    mWebView.getSettings().setJavaScriptEnabled(false);\n    mWebView.clearHistory();\n    mWebView.removeAllViews();\n    mWebView.destroy();\n}\n```\n**总结**\n\n内存泄露在Android内存优化是一个比较重要的一个方面，很多时候程序中发生了内存泄露我们不一定就能注意到，所有在编码的过程要养成良好的习惯。总结下来只要做到以下这几点就能避免大多数情况的内存泄漏：\n\n构造单例的时候尽量别用`Activity`的引用；\n静态引用时注意应用对象的置空或者少用静态引用；\n使用静态内部类+软引用代替非静态内部类；\n及时取消广播或者观察者注册；\n耗时任务、属性动画在`Activity`销毁时记得`cancel`；\n文件流、`Cursor`等资源及时关闭；\n`Activity`销毁时`WebView`的移除和销毁。\n\n**查找内存泄漏**\n\n    查找内存泄漏可以使用Android Stdio 自带的Android Profiler工具,也可以使用Square产品的LeadCanary.\n\n## 八. Android优化\n\n**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n## 九. 插件化相关技术，热修补技术是怎样实现的，和插件化有什么区别\n\n**相同点:**\n\n    都使用ClassLoader来实现的加载的新的功能类，都可以使用PathClassLoader与DexClassLoader\n\n**不同点：**\n\n    热修复因为是为了修复Bug的，所以要将新的同名类替代同名的Bug类，要抢先加载新的类而不是Bug类，所以多做两件事：在原先的app打包的时候，阻止相关类去打上CLASS_ISPREVERIFIED标志，还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements，这样才能抢先代替Bug类，完成系统不加载旧的Bug类.\n\n    而插件化只是增肌新的功能类或者是资源文件，所以不涉及抢先加载旧的类这样的使命，就避过了阻止相关类去打上CLASS_ISPREVERIFIED标志和还有在热修复时动态改变BaseDexClassLoader对象间接引用的dexElements.\n\n    所以插件化比热修复简单，热修复是在插件化的基础上在进行替旧的Bug类\n\n## 十. 怎样计算一张图片的大小，加载bitmap过程（怎样保证不产生内存溢出），二级缓存，LRUCache算法。\n\n**计算一张图片的大小**\n\n    图片占用内存的计算公式：图片高度 * 图片宽度 * 一个像素占用的内存大小.所以，计算图片占用内存大小的时候，要考虑图片所在的目录跟设备密度，这两个因素其实影响的是图片的高宽，android会对图片进行拉升跟压缩。\n\n**加载bitmap过程（怎样保证不产生内存溢出）**\n\n    由于Android对图片使用内存有限制，若是加载几兆的大图片便内存溢出。Bitmap会将图片的所有像素（即长x宽）加载到内存中，如果图片分辨率过大，会直接导致内存OOM，只有在BitmapFactory加载图片时使用BitmapFactory.Options对相关参数进行配置来减少加载的像素。\n\n**BitmapFactory.Options相关参数详解**\n\n(1).Options.inPreferredConfig值来降低内存消耗。\n\n比如：默认值ARGB_8888改为RGB_565,节约一半内存。\n\n(2).设置Options.inSampleSize 缩放比例，对大图片进行压缩 。\n\n(3).设置Options.inPurgeable和inInputShareable：让系统能及时回 收内存。\n\nA：inPurgeable：设置为True时，表示系统内存不足时可以被回 收，设置为False时，表示不能被回收。\n\nB：inInputShareable：设置是否深拷贝，与inPurgeable结合使用，inPurgeable为false时，该参数无意义。\n\n(4).使用decodeStream代替其他方法。\n\ndecodeResource,setImageResource,setImageBitmap等方法\n\n## 十一. LRUCache算法是怎样实现的。\n\n    内部存在一个LinkedHashMap和maxSize，把最近使用的对象用强引用存储在 LinkedHashMap中，给出来put和get方法，每次put图片时计算缓存中所有图片总大小，跟maxSize进行比较，大于maxSize，就将最久添加的图片移除；反之小于maxSize就添加进来。\n\n    之前，我们会使用内存缓存技术实现，也就是软引用或弱引用，在Android 2.3（APILevel 9）开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，这让软引用和弱引用变得不再可靠。\n\n# 算法\n\n## 一. 算法题\n\nm * n的矩阵，能形成几个正方形（2 * 2能形成1个正方形，2 * 3 2个，3 * 3 6个）\n\n计数的关键是要观察到任意一个倾斜的正方形必然唯一内接于一个非倾斜的正方形，而一个非倾斜的边长为k的非倾斜正方形，一条边上有k-1个内点，每个内点恰好确定一个内接于其中的倾斜正方形，加上非倾斜正方形本身，可知，将边长为k的非倾斜正方形数目乘以k，再按k求和即可得到所有正方形的数目。\n\n设2≤n≤m，k≤n-1，则边长为k的非倾斜有\n\n(n-k)(m-k)个，故所有正方形有\n\n∑(m-k)(n-k)k个\n\n例如m=n=4\n\n正方形有3_3_1+2_2_2+1_1_3=20个\n\n# 下面是面试过程中遇到的题目\n\n大多数题目都可以在上面找到答案.\n\n## 电话面试题\n\n### 1.ArrayList 和 Hashmap 简单说一些,区别,底层的数据结构.\n\n### 2.Handler 消息机制\n\n### 3.引起内存泄漏的场景\n\n### 4.多线程的使用场景?\n\n### 5.常用的线程池有哪几种?\n\n### 6.在公司做了什么?团队规模?为什么离职?\n\n## 面试中实际涉及到的问题\n\n**第一轮**\n\n### **1.知道哪些单例模式,写一个线程安全的单例,并分析为什么是线程安全的**?\n```java\npublic class Singleton {\n\t// Private constructor prevents instantiation from other classes\n\tprivate Singleton() { }\n\n\t/**\n\t* SingletonHolder is loaded on the first execution of Singleton.getInstance() \n\t* or the first access to SingletonHolder.INSTANCE, not before.\n\t*/\n\tprivate static class SingletonHolder { \n\t\t\tpublic static final Singleton INSTANCE = new Singleton();\n\t}\n\n\tpublic static Singleton getInstance() {\n\t\t\treturn SingletonHolder.INSTANCE;\n\t}\n}\n```\n### **2.Java中的集合有哪些?解释一下HashMap?底部的数据结构?散列表冲突的处理方法,散列表是一个什么样的数据结构?HashMap是采用什么方法处理冲突的**?\n\n![](http://ou21vt4uz.bkt.clouddn.com/Collection.png)\n\n1、特点：存储对象；长度可变；存储对象的类型可不同；\n\n2、集合框架：\n\n**2**）**Collection**\n\n（1）List：有序的；元素可重复，有索引\n```\n（add(index, element)、add(index, Collection)、remove(index)、set(index,element)、get(index)、subList(from, to)、listIterator()）\n\n①**ArrayList**：底层是数组结构，查询快，增删慢，不同步。\n\n②**LinkedList**：底层是链表结构，增删快，查询慢，不同步\n\naddFist();addLast() getFirst();getLast() \n\nremoveFirst();removeLast() 获取并删除元素，无元素将抛异常：NoSuchElementException\n\n替代的方法(JDK1.6)：\n\nofferFirst();offerLast();\n\npeekFirst();peekLast();无元素返回null\n\npollFirst();pollLast();删除并返回此元素，无元素返回null\n\n```\n\n③**Vector**：底层是数组结构，线程同步，被ArrayList取代了\n\n注：对于判断是否存在，以及删除等操作，以依赖的方法是元素的hashCode和equals方法\n\nArrayList判断是否存在和删除操作依赖的是equals方法\n\n（2）**Set**：无序的，无索引，元素不可重复\n\n①**HashSet**：底层是哈希表，线程不同步，无序、高效\n\n保证元素唯一性：通过元素的hashCode和equals方法。若hashCode值相同，则会判断equals的结果是否为true；hashCode不同，不会调用equals方法\n\n**LinkedHashSet**：有序，是HashSet的子类\n\n②**TreeSet**：底层是二叉树，可对元素进行排序，默认是自然顺序\n\n保证唯一性：Comparable接口的compareTo方法的返回值\n\n**TreeSet两种排序方式**：两种方式都存在时，以比较器为主\n\n第一种：自然排序（默认排序）：\n\n添加的对象需要实现Comparable接口，覆盖compareTo方法\n\n第二种：比较器\n\n添加的元素自身不具备比较性或不是想要的比较方式。将比较器作为参数传递进去。\n\n定义一个类，实现Comparator接口，覆盖compare方法。当主要条件相同时，比较次要条件。\n\n**3**）**Map** **集合：**\n\n（1）**HashTable**：底层数据结构是哈希表，不可存入null键和null值。同步的\n\nProperties继承自HashTable，可保存在流中或从流中加载，是集合和IO流的结合产物\n\n（2）**HashMap**：底层数据结构是哈希表；允许使用null键和null值，不同步，效率高\n\n**TreeMap**：\n\n底层数据结构时二叉树，不同步，可排序\n\n与Set很像，Set底层就是使用了Map集合\n\n方法：\n\n```\nV put(K key, V value) ; void putAll(Map m)\n\nvoid clear(); V remove(Object key)\n\nboolean containsKey(Object key); containsValue(Object key); isEmpty()\n\nV get(Object key); int size(); Collection<V> values()\n\nSet<K> keySet(); Set<Map.Entry<K,V>> entrySet()\n\n```\n\n2.3、**Map集合两种取出方式**：\n\n第一种：Set<K> keySet()\n\n取出Map集合中的所有键放于Set集合中，然后再通过键取出对应的值\n\n```\nSet<String> keySet = map.keySet();\n\nIterator<String> it = keySet.iterator();\n\nwhile(it.hasNext()){\n\nString key = it.next();\n\nString value = map.get(key);\n\n//…..\n\n}\n```\n\n第二种：Set<Map.Entry<K,V>> entrySet()\n\n取出Map集合中键值对的映射放于Set集合中，然后通过Map集合中的内部接口，然后通过其中的方法取出\n\n```\nSet<Map.Entry<String,String>> entrySet = map.entrySet();\n\nIterator<Map.Entry<String,String>> it = entrySet.iterator();\n\nWhile(it.hasNext()){\n\nMap.Entry<String,String> entry = it.next();\n\nString key = entry.getKey();\n\nString value = entry.getValue();\n\n//……\n\n}\n```\n\n2.4、**Collection和Map的区别**：\n\nCollection：单列集合，一次存一个元素\n\nMap：双列集合，一次存一对集合，两个元素（对象）存在着映射关系\n\n2.5、**集合工具类**：\n\nCollections：操作集合（一般是list集合）的工具类。方法全为静态的\n\nsort(List list);对list集合进行排序; sort(List list, Comparator c) 按指定比较器排序\n\nfill(List list, T obj);将集合元素替换为指定对象；\n\nswap(List list, int I, int j)交换集合指定位置的元素\n\nshuffle(List list); 随机对集合元素排序\n\nreverseOrder() ：返回比较器，强行逆转实现Comparable接口的对象自然顺序\n\nreverseOrder(Comparator c)：返回比较器，强行逆转指定比较器的顺序\n\n2.6、**Collection和Collections的区别**：\n\nCollections：java.util下的工具类，实现对集合的查找、排序、替换、线程安全化等操作。\n\nCollection：是java.util下的接口，是各种单列集合的父接口，实现此接口的有List和Set集合，存储对象并对其进行操作。\n\n3、**Arrays**：\n\n用于操作数组对象的工具类，全为静态方法\n\nasList()：将数组转为list集合\n\n好处：可通过list集合的方法操作数组中的元素：\n\nisEmpty()、contains()、indexOf()、set()\n\n弊端：数组长度固定，不可使用集合的增删操作。\n\n如果数组中存储的是基本数据类型，asList会将数组整体作为一个元素存入集合\n\n集合转为数组：Collection.toArray()；\n\n好处：限定了对集合中的元素进行增删操作，只需获取元素\n\n1.List,Set都是继承自Collection接口，Map则不是;\n\n2.List特点：元素有放入顺序，元素可重复;\n\nSet特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法;\n\n另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值）。\n\n3.Set和List对比：\n\nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n\nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n\n4.Map适合储存键值对的数据。\n\n5.线程安全集合类与非线程安全集合类\n\nLinkedList、ArrayList、HashSet是非线程安全的，Vector是线程安全的;\n\nHashMap是非线程安全的，HashTable是线程安全的;\n\nStringBuilder是非线程安全的，StringBuffer是线程安全的。\n\n下面是这些类具体的使用介绍：\n\n**ArrayList与LinkedList的区别和适用场景**\n\n**_Arraylist：_**\n\n优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n\n缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。\n\n**_LinkedList：_**\n\n优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n\n缺点：因为LinkedList要移动指针,所以查询操作性能比较低。\n\n适用场景分析：\n\n当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。\n\n**ArrayList与Vector的区别和适用场景**\n\nArrayList有三个构造方法：\n\n```\npublic ArrayList(int initialCapacity)//构造一个具有指定初始容量的空列表。    \npublic ArrayList()//构造一个初始容量为10的空列表。    \npublic ArrayList(Collection<? extends E> c)//构造一个包含指定 collection 的元素的列表   \n\n```\n\nVector有四个构造方法：\n\n```\npublic Vector()//使用指定的初始容量和等于零的容量增量构造一个空向量。    \npublic Vector(int initialCapacity)//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    \npublic Vector(Collection<? extends E> c)//构造一个包含指定 collection 中的元素的向量    \npublic Vector(int initialCapacity,int capacityIncrement)//使用指定的初始容量和容量增量构造一个空的向量    \n\n```\n\n**ArrayList和Vector都是用数组实现的，主要有这么三个区别：**\n\n1).Vector是多线程安全的，线程安全就是说多线程访问同一代码，不会产生不确定的结果。而ArrayList不是，这个可以从源码中看出，Vector类中的方法很多有synchronized进行修饰，这样就导致了Vector在效率上无法与ArrayList相比；\n\n2).两个都是采用的线性连续空间存储元素，但是当空间不足的时候，两个类的增加方式是不同。\n\n3).Vector可以设置增长因子，而ArrayList不可以。\n\n4).Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n**适用场景：**\n\n1.Vector是线程同步的，所以它也是线程安全的，而ArrayList是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用ArrayList效率比较高。\n\n2.如果集合中的元素的数目大于目前集合数组的长度时，在集合中使用数据量比较大的数据，用Vector有一定的优势。\n\n**HashSet与Treeset的适用场景**\n\n1.TreeSet 是二叉树（红黑树的树据结构）实现的,Treeset中的数据是自动排好序的，不允许放入null值。\n\n2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束。\n\n3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。\n\n**适用场景分析:**\n\nHashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。\n\n**HashMap与TreeMap、HashTable的区别及适用场景**\n\n**_HashMap 非线程安全_**  \n\nHashMap：基于哈希表(散列表)实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。其中散列表的冲突处理主要分两种，一种是开放定址法，另一种是链表法。HashMap的实现中采用的是链表法。\n\nTreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n\n**适用场景分析：**\n\nHashMap和HashTable:HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。\n\nHashMap：适用于Map中插入、删除和定位元素。\n\nTreemap：适用于按自然顺序或自定义顺序遍历键(key)。\n\n(ps:其实我们工作的过程中对集合的使用是很频繁的,稍加注意并总结积累一下,在面试的时候应该会回答的很轻松)\n\n **五. concurrentHashmap原理，原子类**。\n\n    ConcurrentHashMap作为一种线程安全且高效的哈希表的解决方案，尤其其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大.\n\n### **3.解释一下什么是MVP架构,画出图解,一句话解释MVP和MVC的区别**?\n\n为了解决逻辑处理和UI视图的松散耦合，MVC和MVP的架构模式在很多App中使用比较广泛。\n\n那什么是MVP呢？它又和我们常常听到的MVC有什么关系了以及区别呢？\n\n![MVP和MVC架构图](http://frodoking.github.io/img/android/mvp_mvc_img.png)\n\nMVP 是从经典的模式MVC演变而来，它们的基本思想有相通的地方：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。作为一种新的模式，**MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会从直接Model中读取数据而不是通过 Controller**。\n\n在MVC里，View是可以直接访问Model的！从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。 在MVC模型里，更关注的Model的不变，而同时有多个对Model的不同显示，及View。所以，在MVC模型里，Model不依赖于View，但是View是依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。\n\n**MVP如何解决MVC的问题**？\n\n在MVP里，Presenter完全把Model和View进行了分离，主要的程序逻辑在Presenter里实现。而且，Presenter与具体的View是没有直接关联的，而是通过定义好的接口进行交互，从而使得在变更View时候可以保持Presenter的不变，即重用！ 不仅如此，我们还可以编写测试用的View，模拟用户的各种操作，从而实现对Presenter的测试–而不需要使用自动化的测试工具。 我们甚至可以在Model和View都没有完成时候，就可以通过编写Mock Object（即实现了Model和View的接口，但没有具体的内容的）来测试Presenter的逻辑。 在MVP里，应用程序的逻辑主要在Presenter来实现，其中的View是很薄的一层。因此就有人提出了Presenter First的设计模式，就是根据User Story来首先设计和开发Presenter。在这个过程中，View是很简单的，能够把信息显示清楚就可以了。在后面，根据需要再随便更改View，而对Presenter没有任何的影响了。 如果要实现的UI比较复杂，而且相关的显示逻辑还跟Model有关系，就可以在View和Presenter之间放置一个Adapter。由这个 Adapter来访问Model和View，避免两者之间的关联。而同时，因为Adapter实现了View的接口，从而可以保证与Presenter之间接口的不变。这样就可以保证View和Presenter之间接口的简洁，又不失去UI的灵活性。 在MVP模式里，View只应该有简单的Set/Get的方法，用户输入和设置界面显示的内容，除此就不应该有更多的内容，绝不容许直接访问Model–这就是与MVC很大的不同之处。\n\nMVP的优点：\n\n> 1、模型与视图完全分离，我们可以修改视图而不影响模型；\n> 2、可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部；\n> 3、我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁；\n> 4、如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）。\n\n**使用方法**\n\n1、建立bean\n\n```\n\npublic class UserBean {\n private String mFirstName;\n private String mLastName;\n\n public UserBean(String firstName, String lastName) {\n this. mFirstName = firstName;\n this. mLastName = lastName;\n }\n\n public String getFirstName() {\n return mFirstName;\n }\n\n public String getLastName() {\n return mLastName;\n }\n}\n```\n \n2、建立model接口（处理业务逻辑，这里指数据读写）\n\n```\n\npublic interface IUserModel {\n void setID(int id);\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n\n int getID();\n\n UserBean load(int id);// 通过id读取user信息,返回一个UserBean\n}\n```\n\n3、建立view接口（更新ui中的view状态），这里列出需要操作当前view的方法\n\n``` \n\npublic interface IUserView {\n int getID();\n\n String getFristName();\n\n String getLastName();\n\n void setFirstName(String firstName);\n\n void setLastName(String lastName);\n}\n\n ```\n4、建立presenter（主导器，通过iView和iModel接口操作model和view），activity可以把所有逻辑给presenter处理，这样java逻辑就从手机的activity中分离出来\n\n```\npublic class UserPresenter {\n private IUserView mUserView;\n private IUserModel mUserModel;\n\n public UserPresenter(IUserView view) {\n mUserView = view;\n mUserModel = new UserModel();\n }\n\n public void saveUser( int id, String firstName, String lastName) {\n mUserModel.setID(id);\n mUserModel.setFirstName(firstName);\n mUserModel.setLastName(lastName);\n }\n\n public void loadUser( int id) {\n UserBean user = mUserModel.load(id);\n mUserView.setFirstName(user.getFirstName()); // 通过调用IUserView的方法来更新显示\n mUserView.setLastName(user.getLastName());\n }\n}\n\n ```\n**结束语**\n\nMVP主要解决就是把逻辑层抽出来成P层，要是遇到需求逻辑上的更改就可以只需要修改P层了或者遇到逻辑上的大概我们可以直接从写一个P也可以，很多开发人员把所有的东西都写在了Activity/Fragment里面这样一来遇到频繁改需求或者逻辑越来越复杂的时候，Activity/Fragment里面就会出现过多的混杂逻辑导致出错，所以MVP模式对于APP来对控制逻辑和UI的解耦来说是一个不错的选择！\n\n在这里多说一下，其实MVP只是一个总体的解决方案。在V和P之间其实我们还可以采用事件总线的方案来解决这种高耦合的情况。本人在另外一篇文章中将会讲到[事件总线（otto的bus和eventbus的一个对比分析）](https://frodoking.github.io/2015/03/30/android-eventbus-otto-analysis/)\n\n\n### **4.Handle消息机制?在使用Handler的时候要注意哪些东西,是否会引起内存泄漏?画一下Handler机制的图解**?\n\n![](http://upload-images.jianshu.io/upload_images/1824194-a947dcc5b22f69fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面一共出现了几种类，ActivityThread，Handler，MessageQueue，Looper，msg（Message）,对这些类作简要介绍：\n\nActivityThread：程序的启动入口，为什么要介绍这个类，是因为该类就是我们说的主线程，它对Looper进行操作的。\n\nHandler：字面意思是操控者，该类有比较重要的地方，就是通过handler来发送消息（sendMessage）到MessageQueue和 操作控件的更新（handleMessage）。handler下面持有这MessageQueue和Looper的对象。\n\nMessageQueue：字面意思是消息队列，就是封装Message类。对Message进行插入和取出操作。\n\nMessage：这个类是封装消息体并被发送到MessageQueue中的，给类是通过链表实现的，其好处方便MessageQueue的插入和取出操作。还有一些字段是（int what，Object obj，int arg1，int arg2）。what是用户定义的消息和代码，以便接收者（handler）知道这个是关于什么的。obj是用来传输任意对象的，arg1和arg2是用来传递一些简单的整数类型的。\n\n下面，我们按照启动顺序来进行源码分析：\n\n![](http://upload-images.jianshu.io/upload_images/1824194-298ebb16ce4a3b70.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://raw.githubusercontent.com/bihe0832/Android-System-Related-Charts/master/framework/handler-sequence.jpg)\n\n\n\n### **5.是否做过性能优化?已经采取了哪些措施进行优化**?\n\n**性能优化**\n\n    1).节制的使用Service 如果应用程序需要使用Service来执行后台任务的话，只有当任务正在执行的时候才应该让Service运行起来。当启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，系统可以在LRUcache当中缓存的进程数量也会减少，导致切换程序的时候耗费更多性能。我们可以使用IntentService，当后台任务执行结束后会自动停止，避免了Service的内存泄漏。\n\n    2).当界面不可见时释放内存 当用户打开了另外一个程序，我们的程序界面已经不可见的时候，我们应当将所有和界面相关的资源进行释放。重写Activity的onTrimMemory()方法，然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发说明用户离开了程序，此时就可以进行资源释放操作了。\n\n    3).当内存紧张时释放内存 onTrimMemory()方法还有很多种其他类型的回调，可以在手机内存降低的时候及时通知我们，我们应该根据回调中传入的级别来去决定如何释放应用程序的资源。\n\n    4).避免在Bitmap上浪费内存 读取一个Bitmap图片的时候，千万不要去加载不需要的分辨率。可以压缩图片等操作。\n\n    5).使用优化过的数据集合 Android提供了一系列优化过后的数据集合工具类，如SparseArray、SparseBooleanArray、LongSparseArray，使用这些API可以让我们的程序更加高效。HashMap工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。\n\n**布局优化**\n\n1).重用布局文件\n\n    标签可以允许在一个布局当中引入另一个布局，那么比如说我们程序的所有界面都有一个公共的部分，这个时候最好的做法就是将这个公共的部分提取到一个独立的布局中，然后每个界面的布局文件当中来引用这个公共的布局。\n\n    Tips:如果我们要在标签中覆写layout属性，必须要将layout_width和layout_height这两个属性也进行覆写，否则覆写效果将不会生效。\n\n    标签是作为标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时引用文件时产生多余的布局嵌套。布局嵌套越多，解析起来就越耗时，性能就越差。因此编写布局文件时应该让嵌套的层数越少越好。\n\n    举例：比如在LinearLayout里边使用一个布局。里边又有一个LinearLayout，那么其实就存在了多余的布局嵌套，使用merge可以解决这个问题。\n\n2).仅在需要时才加载布局\n\n    某个布局当中的元素不是一起显示出来的，普通情况下只显示部分常用的元素，而那些不常用的元素只有在用户进行特定操作时才会显示出来。\n\n    举例：填信息时不是需要全部填的，有一个添加更多字段的选项，当用户需要添加其他信息的时候，才将另外的元素显示到界面上。用VISIBLE性能表现一般，可以用ViewStub。ViewStub也是View的一种，但是没有大小，没有绘制功能，也不参与布局，资源消耗非常低，可以认为完全不影响性能。\n\n```\n<ViewStub   \n    android:id=\"@+id/view_stub\"  \n    android:layout=\"@layout/profile_extra\"  \n    android:layout_width=\"match_parent\"  \n    android:layout_height=\"wrap_content\"  \n    />  \n\npublic void onMoreClick() {  \n    ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);  \n    if (viewStub != null) {  \n        View inflatedView = viewStub.inflate();  \n        editExtra1 = (EditText) inflatedView.findViewById(R.id.edit_extra1);  \n        editExtra2 = (EditText) inflatedView.findViewById(R.id.edit_extra2);  \n        editExtra3 = (EditText) inflatedView.findViewById(R.id.edit_extra3);  \n    }  \n}  \n\n```\n\n    tips：ViewStub所加载的布局是不可以使用标签的，因此这有可能导致加载出来出来的布局存在着多余的嵌套结构。\n\n**高性能编码优化**\n\n    都是一些微优化，在性能方面看不出有什么显著的提升的。使用合适的算法和数据结构是优化程序性能的最主要手段。\n\n1).避免创建不必要的对象 不必要的对象我们应该避免创建：\n\n    如果有需要拼接的字符串，那么可以优先考虑使用StringBuffer或者StringBuilder来进行拼接，而不是加号连接符，因为使用加号连接符会创建多余的对象，拼接的字符串越长，加号连接符的性能越低。\n\n    当一个方法的返回值是String的时候，通常需要去判断一下这个String的作用是什么，如果明确知道调用方会将返回的String再进行拼接操作的话，可以考虑返回一个StringBuffer对象来代替，因为这样可以将一个对象的引用进行返回，而返回String的话就是创建了一个短生命周期的临时对象。\n\n    尽可能地少创建临时对象，越少的对象意味着越少的GC操作。\n\n2).在没有特殊原因的情况下，尽量使用基本数据类型来代替封装数据类型，int比Integer要更加有效，其它数据类型也是一样。\n\n    基本数据类型的数组也要优于对象数据类型的数组。另外两个平行的数组要比一个封装好的对象数组更加高效，举个例子，Foo[]和Bar[]这样的数组，使用起来要比Custom(Foo,Bar)[]这样的一个数组高效的多。\n\n3).静态优于抽象\n\n    如果你并不需要访问一个对系那个中的某些字段，只是想调用它的某些方法来去完成一项通用的功能，那么可以将这个方法设置成静态方法，调用速度提升15%-20%，同时也不用为了调用这个方法去专门创建对象了，也不用担心调用这个方法后是否会改变对象的状态(静态方法无法访问非静态字段)。\n\n4).对常量使用static final修饰符\n\n```\nstatic int intVal = 42;  \nstatic String strVal = \"Hello, world!\";  \n\n```\n\n    编译器会为上面的代码生成一个初始方法，称为方法，该方法会在定义类第一次被使用的时候调用。这个方法会将42的值赋值到intVal当中，从字符串常量表中提取一个引用赋值到strVal上。当赋值完成后，我们就可以通过字段搜寻的方式去访问具体的值了。\n\nfinal进行优化:\n\n```\nstatic final int intVal = 42;  \nstatic final String strVal = \"Hello, world!\";  \n\n```\n\n    这样，定义类就不需要方法了，因为所有的常量都会在dex文件的初始化器当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal会用一种相对轻量级的字符串常量方式，而不是字段搜寻的方式。\n\n    这种优化方式只对基本数据类型以及String类型的常量有效，对于其他数据类型的常量是无效的。\n\n5).使用增强型for循环语法\n\n```\nstatic class Counter {  \nint mCount;  \n}  \n\nCounter[] mArray = ...  \n\npublic void zero() {  \nint sum = 0;  \nfor (int i = 0; i < mArray.length; ++i) {  \n    sum += mArray[i].mCount;  \n}  }  \n\npublic void one() {  \nint sum = 0;  \nCounter[] localArray = mArray;  \nint len = localArray.length;  \nfor (int i = 0; i < len; ++i) {  \n    sum += localArray[i].mCount;  \n}  \n}  \n\npublic void two() {  \nint sum = 0;  \nfor (Counter a : mArray) {  \n    sum += a.mCount;  \n}  \n}  \n\n```\n\n    zero()最慢，每次都要计算mArray的长度，one()相对快得多，two()fangfa在没有JIT(Just In Time Compiler)的设备上是运行最快的，而在有JIT的设备上运行效率和one()方法不相上下，需要注意这种写法需要JDK1.5之后才支持。\n\n    Tips:ArrayList手写的循环比增强型for循环更快，其他的集合没有这种情况。因此默认情况下使用增强型for循环，而遍历ArrayList使用传统的循环方式。\n\n6).多使用系统封装好的API\n\n    系统提供不了的Api完成不了我们需要的功能才应该自己去写，因为使用系统的Api很多时候比我们自己写的代码要快得多，它们的很多功能都是通过底层的汇编模式执行的。 举个例子，实现数组拷贝的功能，使用循环的方式来对数组中的每一个元素一一进行赋值当然可行，但是直接使用系统中提供的System.arraycopy()方法会让执行效率快9倍以上。\n\n7).避免在内部调用Getters/Setters方法\n\n    面向对象中封装的思想是不要把类内部的字段暴露给外部，而是提供特定的方法来允许外部操作相应类的内部字段。但在Android中，字段搜寻比方法调用效率高得多，我们直接访问某个字段可能要比通过getters方法来去访问这个字段快3到7倍。但是编写代码还是要按照面向对象思维的，我们应该在能优化的地方进行优化，比如避免在内部调用getters/setters方法。\n\n### **6.引起内存泄漏的原因是什么?以及你是怎么解决的**?\n\n这些问题应该都是比较基础的问题,每个开发者都应该是非常熟悉并能详细叙述的.这一轮的面试官问的技术都是平时用到的.\n\n**产生的内存泄露**\n\n1).资源对象没关闭造成的内存泄漏\n\n2).构造Adapter时，没有使用缓存的convertView\n\n3).Bitmap对象不在使用时调用recycle()释放内存\n\n4).试着使用关于application的context来替代和activity相关的context\n\n5).注册没取消造成的内存泄漏\n\n6).集合中对象没清理造成的内存泄漏\n\nAndroid的虚拟机是基于寄存器的Dalvik，它的最大堆大小一般是16M，有的机器为24M。因此我们所能利用 的内存空间是有限的。如果我们的内存占用超过了一定的水平就会出现OutOfMemory的错误。\n\n内存溢出的几点原因总结:\n1、**资源释放问题**: 程序代码的问题，长期保持某些资源(如Context)的引用，造成内存泄露，资源得不到释放 \n\n2、**对象内存过大问题**:\n保存了多个耗用内存过大的对象(如Bitmap)，造成内存超出限制\n\n3、**static**:\nstatic是Java中的一个关键字，当用它来修饰成员变量时，那么该变量就属于该类，而不是该类的实例。所以 用static修饰的变量，它的生命周期是很长的，如果用它来引用一些资源耗费过多的实例(Context的情况最多）\n这时就要谨慎对待了。 \n```\npublic class ClassName {\n private static Context mContext;\n//省略 }\n```\n以上的代码是很危险的，如果将Activity赋值到mContext的话。那么即使该Activity已经onDestroy，但是由于 仍有对象保存它的引用，因此该Activity依然不会被释放。\n我们举Android文档中的一个例子。\n```\nprivate static Drawable sBackground; @Override\nprotected void onCreate(Bundle state) {\n\tsuper.onCreate(state);\n\tTextView label = new TextView(this);\n        label.setText(\"Leaks are bad\");\n\tif (sBackground == null) {\n\tsBackground = getDrawable(R.drawable.large_bitmap); }\n\tlabel.setBackgroundDrawable(sBackground);\n\tsetContentView(label); }\n```\nsBackground, 是 一个静态的变量，但是我们发现，我们并没有显式的保存Contex的引用，但是，当Drawable与\n\nView连接之后，Drawable就将View设 置为一个回调，由于View中是包含Context的引用的，所以，实际上我们依\n\n然保存了Context的引用。这个引用链如下: Drawable->TextView->Context\n\n所以，最终该Context也没有得到释放，发生了内存泄露。\n\n**针对static的解决方案**:\n\n第一、应该尽量避免static成员变量引用资源耗费过多的实例，比如Context。\n\n第二、Context尽量使用Application Context，因为Application的Context的生命周期比较长，引用它不会出现内存\n泄露的问题。\n\n第三、使用WeakReference代替强引用。比如可以使用WeakReference<Context> mContextRef; 该部分的详细内容也可以参考Android文档中Article部分。\n\n4、**线程导致内存溢出**:\n线程产生内存泄露的主要原因在于线程生命周期的不可控。我们来考虑下面一段代码。\n```\npublic class MyActivity extends Activity {\n \t@Override\n\tpublic void onCreate(Bundle savedInstanceState) {\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.main);\n\tnew MyThread().start();\n}\nprivate class MyThread extends Thread{\n\t@Override public void run() {\n\tsuper.run();\n\t//do somthing }\n\t} \n}\n```\n这段代码很平常也很简单，是我们经常使用的形式。我们思考一个问题:假设MyThread的run函数是一个很 费时的操作，当我们开启该线程后，将设备的横屏变为了竖屏，一 般情况下当屏幕转换时会重新创建Activity， 按照我们的想法，老的Activity应该会被销毁才对，然而事实上并非如此。\n\n由于我们的线程是Activity的内部类，所以MyThread中保存了Activity的一个引用，当MyThread的run函数没有 结束时，MyThread是不会被销毁的，因此它所引用的老的Activity也不会被销毁，因此就出现了内存泄露的问题。\n\n有些人喜欢用Android提供的AsyncTask，但事实上AsyncTask的问题更加严重，Thread只有在run函数不结束时才出现这种内存泄露问题，然而AsyncTask内部的实现机制是运用了ThreadPoolExcutor,该类产生的Thread对象的生命周期是不确定的，是应用程序无法控制的，因此如果AsyncTask作为Activity的内部类，就更容易出现内存\n\n**泄露的问题**。\n\n针对这种线程导致的内存泄露问题的解决方案: \n\n第一、将线程的内部类，改为静态内部类。\n\n第二、在线程内部采用弱引用保存Context引用。\n\n二、避免内存溢出的方案:\n** 1、图片过大导致内存溢出**: 模拟器的RAM比较小，由于每张图片先前是压缩的情况，放入到Bitmap的时候，大小会变大，导致超出RAM内存\n\n★android 中用bitmap 时很容易内存溢出，报如下错误:Java.lang.OutOfMemoryError : bitmap size exceeds VM budget \n解决: 方法1: 主要是加上这段:等比例缩小图片\n\n1)通过getResource()方法获取资源:\n```\n//解决加载图片 内存溢出的问题 \n//Options 只保存图片尺寸大小，不保存图片到内存\nBitmapFactory.Options options = new BitmapFactory.Options();\noptions.inSampleSize = 2;\n\n//缩放的比例，缩放是很难按准备的比例进行缩放的，其值表明缩放的倍数，SDK中建议其值是2的指数值,值越大会导致图片不清晰\nBitmapFactory.Options opts = new BitmapFactory.Options(); \nopts.inSampleSize = 2;\nBitmap bmp = null;\nbmp = BitmapFactory.decodeResource(getResources(), mImageIds[position],opts); ...\n//回收\nbmp.recycle();\n```\n2)通过Uri取图片资源\n以上代码可以优化内存溢出，但它只是改变图片大小，并不能彻底解决内存溢出。\n3)通过路径获取图片资源\n\n方法2:对图片采用软引用，及时地进行recyle()操作\n\n具体见“各种引用的简单了解”中的示例\n**2、复用listView**: 方法:对复杂的listview进行合理设计与编码:\n```\nprivate ImageView preview;\nBitmapFactory.Options options = new BitmapFactory.Options();\n//图片宽高都为原来的二分之一，即图片为原来的四分之一\noptions.inSampleSize = 2;\nBitmap bitmap = BitmapFactory.decodeStream(cr.openInputStream(uri), null, options); preview.setImageBitmap(bitmap);\nprivate ImageView preview;\nprivate String fileName= \"/sdcard/DCIM/Camera/2010-05-14 16.01.44.jpg\"; BitmapFactory.Options options = new BitmapFactory.Options();\n//图片宽高都为原来的二分之一，即图片为原来的四分之一 \noptions.inSampleSize = 2;\nBitmap b = BitmapFactory.decodeFile(fileName, options);\npreview.setImageBitmap(b); filePath.setText(fileName);\nSoftReference<Bitmap> bitmap;\nbitmap = new SoftReference<Bitmap>(pBitmap);\nif(bitmap != null){\n\tif(bitmap.get() != null && !bitmap.get().isRecycled()){ bitmap.get().recycle();\n\tbitmap= null;\n }\n}\n\nAdapter中:\n\n@Override\npublic View getView(int position, View convertView, ViewGroup parent) {\n\tViewHolder holder;\n\tif(convertView!=null && convertView instanceof LinearLayout){\n\tholder = (ViewHolder) convertView.getTag(); }else{\n\tconvertView = View.inflate(MainActivity.this, R.layout.item, null); holder = new ViewHolder();\n\tholder.tv = (TextView)\nconvertView.findViewById(R.id.tv); convertView.setTag(holder);\n}\nholder.tv.setText(\"XXXX\");\nholder.tv.setTextColor(Color.argb(180, position*4, position*5, 255-position*2)); return convertView;\n\n}\n\nclass ViewHolder{\n\tprivate TextView tv;\n }\n```\n**3、界面切换**\n方法1:单个页面，横竖屏切换N次后 OOM 1、看看页面布局当中有没有大的图片，比如背景图之类的。\n\n去除xml中相关设置，改在程序中设置背景图(放在onCreate()方法中):\n\n在Activity destory时注意，bg.setCallback(null); 防止Activity得不到及时的释放 2\\. 跟上面方法相似，直接把xml配置文件加载成view 再放到一个容器里 然后直接调用 this.setContentView(View view);方法，避免xml的重复加载\n\n方法2: 在页面切换时尽可能少地重复使用一些代码 比如:重复调用数据库，反复使用某些对象等等......\n\n**4、内存分配**: 方法1:Android堆内存也可自己定义大小和优化Dalvik虚拟机的堆内存分配\n\n注意若使用这种方法:project build target 只能选择 <= 2.2 版本，否则编译将通不过。 所以不建议用这种方式\n\n**常见的内存使用不当的情况**\n\n**1、查询数据库没有关闭游标**\n\n程序中经常会进行查询数据库的操作，但是经常会有使用完毕Cursor后没有关闭的情况。如果我们的查询结果集比较小，对内存的消耗不容易被发现，只有在常时间大量操作的情况下才会复现内存问题，这样就会给以后的测试和问题排查带来困难和风险。\n\nDrawable bg = getResources().getDrawable(R.drawable.bg); XXX.setBackgroundDrawable(rlAdDetailone_bg);\nprivate final static int CWJ_HEAP_SIZE= 6*1024*1024;\nprivate final static float TARGET_HEAP_UTILIZATION = 0.75f; VMRuntime.getRuntime().setMinimumHeapSize(CWJ_HEAP_SIZE); VMRuntime.getRuntime().setTargetHeapUtilization(TARGET_HEAP_UTILIZATION);\nCursor cursor = null; try {\ncursor = getContentResolver().query(uri ...); if (cursor != null && cursor.moveToNext()) { ... ...\n}\n} finally {\nif (cursor != null) {\ntry { cursor.close();\n} catch (Exception e) {\n//ignore this }\n} }\n\n**2、构造Adapter时，没有使用缓存的 convertView**\n\n以构造ListView的BaseAdapter为例，在BaseAdapter中提供了方法: public View getView(int position, View convertView, ViewGroup parent)\n\n来向ListView提供每一个item所需要的view对象。初始时ListView会从BaseAdapter中根据当前的屏幕布局实例 化一定数量的 view对象，同时ListView会将这些view对象缓存起来。当向上滚动ListView时，原先位于最上面的 list item的view对象会被回收，然后被用来构造新出现的最下面的list item。这个构造过程就是由getView()方法完成的，getView()的第二个形参 View convertView就是被缓存起来的list item的view对象(初始化时缓存中没有view对 象则convertView是null)。\n由此可以看出，如果我们不去使用convertView，而是每次都在getView()中重新实例化一个View对象的话，即浪费资源也浪费时间，也会使得内存占用越来越大。ListView回收list item的view对象的过程可以查看:\n```\npublic View getView(int position, View convertView, ViewGroup parent) { View view = null;\nif (convertView != null) {\nview = convertView;\n\npopulate(view, getItem(position)); ...\n} else {\nview = new Xxx(...);\n\n...\n}\nreturn view;\n\n}\n```\n**3、Bitmap对象不在使用时调用recycle()释放内存**\n有时我们会手工的操作Bitmap对象，如果一个Bitmap对象比较占内存，当它不在被使用的时候，可以调用\nBitmap.recycle()方法回收此对象的像素所占用的内存，但这不是必须的，视情况而定。\n\n**4、释放对象的引用**\n当一个生命周期较短的对象A，被一个生命周期较长的对象B保有其引用的情况下，在A的生命周期结束时，\n\n要在B中清除掉对A的引用。 示例A:\n```\npublic class DemoActivity extends Activity { ... ...\nprivate Handler mHandler = ... private Object obj;\npublic void operation() {\nobj = initObj();\n...\n[Mark]\nmHandler.post(new Runnable() {\npublic void run() { useObj(obj);\n}\n});\n} }\n```\n我们有一个成员变量 obj，在operation()中我们希望能够将处理obj实例的操作post到某个线程的MessageQueue 中。在以上的代码中，即便是 mHandler所在的线程使用完了obj所引用的对象，但这个对象仍然不会被垃圾回收掉，因为DemoActivity.obj还保有这个对象的引用。 所以如果在DemoActivity中不再使用这个对象了，可以在 [Mark]的位置释放对象的引用，而代码可以修改为:\n```\n... ...\npublic void operation() {\nobj = initObj();\n...\nfinal Object o = obj;\nobj = null;\nmHandler.post(new Runnable() { public void run() {\nuseObj(o); }\n}\n}\n... ...\n```\n示例B: 假设我们希望在锁屏界面(LockScreen)中，监听系统中的电话服务以获取一些信息(如信号强度等)，则可以在\nLockScreen中定义一个PhoneStateListener的对象，同时将它注册到TelephonyManager服务中。对于LockScreen对象，当需要显示锁屏界 面的时候就会创建一个LockScreen对象，而当锁屏界面消失的时候LockScreen对象就会被释放掉。\n但是如果在释放LockScreen对象的时候忘记取消我们之前注册的PhoneStateListener对象，则会导致LockScreen无 法被垃 圾回收。如果不断的使锁屏界面显示和消失，则最终会由于大量的LockScreen对象没有办法被回收而引起OutOfMemory,使得system_process进程挂掉。\n\n**5、其他**\nAndroid应用程序中最典型的需要注意释放资源的情况是在Activity的生命周期中，在onPause()、onStop()、\nonDestroy()方法中需要适当的释放资源的情况。由于此情况很基础，在此不详细说明，具体可以查看官方文档对Activity生命周期的介绍，以明确何时应该释放哪些资源。\n\n## **第二轮**\n\n### 1.关于并发理解多少?说几个并发的集合?\n[Java 并发编程](http://www.cnblogs.com/paddix/p/5374810.html)\n\n**Java 并发编程：核心理论**：\n共享性，互斥性，原子性，可见性，有序性\n\n**什么是并发：**\n同时在做几件事就是并发\n\n**并发的好处**\n**1.提高资源利用率**\n当一个任务并没有完全占用系统资源时，可以利用并发来提高资源利用率，从而能更快的完成任务\n**2.在程序任务上更加精简**\n任务明确分配好，又能同时进行，既提高了效率，逻辑又清晰\n**3.更好的响应程序**\n例如图片的上传，页面正常展示没有卡顿，又能正常上传图片，既保证了页面能正常响应，又保证图片能正常上传\n\n**并发的风险**\n**1.并发的代价**\n需要占用更多资源\n设计好一个并发程序并不容易\n并发的资源交互问题复杂\n\n**2.并发的隐患**\n滥用资源导致系统不稳定\n结果与预期不符\n出现的BUG难以排查\n\n**Java并发集合框架**\n\n我们着重说明一下Java并发的集合框架，就是java.util.concurrent包下的集合类\n\n* 非阻塞队列\n\n> 非阻塞队列就是在队列中没有数据时，对此队列的操作将出现异常或者返回null，无需等待/阻塞的特色。\n\n在JDK的并发包中，常见的非阻塞队列有以下几个： \n- ConcurrentHashMap \n- ConcurrentSkipListMap \n- ConcurrentSkipListSet \n- ConcurrentLinkedQueue \n- ConcurrentLinkedDeque \n- CopyOnWriteArrayList \n- CopyOnWriteArraySet\n\n**ConcurrentHashMap类**\n\n> 这个类是支持并发操作的Map对象，与之对应的不支持并发操作的Map对象是HashMap，Hashtable对象也是Map的一个子类，也是支持并发操作，但是其不支持Iterator并发的删除操作，如果程序中要对map集合做并发以及Iterator并发编辑/删除操作，推荐使用ConcurrentHashMap集合类。\n\nHashMap集合不支持并发示例：\n\n```\npackage com.collections.hashmapdemo;\n\nimport java.util.HashMap;\n\npublic class HashMapDemo {\n    public static HashMap hashMap = new HashMap();\n\n    public static void main(String[] args) {\n        Thread threadA = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for (int i = 0; i < 50000; i++) {\n                    hashMap.put(\"ThreadA\" + (i + 1), \"ThreadA\" + i + 1);\n                    System.out.println(\"ThreadA\" + (i + 1));\n                }\n            }\n        });\n\n        Thread threadB = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for (int i = 0; i < 50000; i++) {\n                    hashMap.put(\"ThreadB\" + (i + 1), \"ThreadB\" + i + 1);\n                    System.out.println(\"ThreadB\" + (i + 1));\n                }\n            }\n        });\n\n        threadA.start();\n        threadB.start();\n    }\n}\n\n```\n\n执行结果 \n有时候程序可以正常执行完，有时候则程序会造成假死的状态，如下图：\n\n![这里写图片描述](http://img.blog.csdn.net/20171018201847398?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uZ2d1b19jaGVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n所以说HashMap不支持多线程并发的操作。\n\nHashtable集合支持并发 \n示例： \n只需要把HashMap示例中public static HashMap hashMap = new HashMap();修改成public static Hashtable hashtable = new Hashtable();即可。 \n我们就说说Hashtable不支持Iterator的编辑/删除操作，示例如下\n\n```\npackage com.collections.hashmapdemo;\n\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.concurrent.TimeUnit;\n\npublic class HashtableNotModifyDemo {\n    public static Hashtable hashtable = new Hashtable();\n    static {\n        for (int i = 0; i < 5; i++) {\n            hashtable.put(\"String\" + (i + 1), i + 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        Thread threadA = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Iterator iterator = hashtable.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        System.out.println(iterator.next());\n                        TimeUnit.SECONDS.sleep(2);\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        Thread threadB = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                hashtable.put(\"z\", \"zValue\");\n            }\n        });\n\n        threadA.start();\n        threadB.start();\n    }\n}\n\n```\n\n执行结果\n\n> String5 \n> java.util.ConcurrentModificationException \n> at java.util.HashtableEnumerator.next(Hashtable.java:1167)atcom.collections.hashmapdemo.HashtableNotModifyDemo1.run(HashtableNotModifyDemo.java:22) \n> at java.lang.Thread.run(Thread.java:745)\n\n说明多线程调用该类的iterator()方法返回Iterator对象后，在调用put方法会报ConcurrentModificationException异常，也就是不支持Iterator并发的编辑/删除操作。如果想实现此功能推荐使用并发集合框架提供的ConcurrentHashMap类。\n\nConcurrentHashMap集合支持并发示例：\n\n> 需要把HashMap示例中public static HashMap hashMap = new HashMap();修改成public \n> static ConcurrentHashMap concurretHashMap = new ConcurrentHashMap();即可。\n\nConcurrentHashMap集合支持Iterator并发操作示例：\n\n> 把类HashtableNotModifyDemo中的public static Hashtable hashtable = new Hashtable();修改为public static ConcurrentHashMap concurretHashMap = new ConcurrentHashMap();测试即可。\n\n**ConcurrentSkipListMap类**\n\n这个并发集合类支持排序功能。一般此集合中存放的对象要实现Comparable接口，方便此集合类排序，如果不实现此接口，则会按照默认排序。\n\n**ConcurrentSkipListSet类**\n\n这个并发集合类不仅支持排序功能，还不允许重复的元素。一般此集合中存放的对象要实现Comparable接口，并且重写equals和hashCode方法。\n\n**ConcurrentLinkedQueue类**\n\n这个并发集合类提供了并发环境的队列操作。\n\n*   poll()当没有获取到数据时返回null，如果有数据则一处表头并将表头数据返回。\n*   element()当没有获取到数据时抛NoSuchElementException异常，如果有数据则返回表头数据。\n*   peek()当没有获取导数据是返回null，获取到数据时则不移除表头，并将表头数据返回。\n\n**ConcurrentLinkedDeque类**\n\nConcurrentLinkedQueue支持对队列头操作，而ConcurrentLinkedDeque也支持队列头和列尾双向操作。\n\n**CopyOnWriteArrayList类**\n\nArrayList是线程不安全的，如果想在并发中实现线程安全，则可以使用CopyOnWriteArrayList类，使用方法和ArrayList无异。\n\n**CopyOnWriteArraySet类**\n\nArraySet是线程不安全的，如果想在并发中实现线程安全，则可以使用CopyOnWriteArraySet类，使用方法和ArraySet无异。\n\n### 2.Handler 消息机制图解?\n\n![](http://upload-images.jianshu.io/upload_images/1824194-a947dcc5b22f69fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面一共出现了几种类，ActivityThread，Handler，MessageQueue，Looper，msg（Message）,对这些类作简要介绍：\n\nActivityThread：程序的启动入口，为什么要介绍这个类，是因为该类就是我们说的主线程，它对Looper进行操作的。\n\nHandler：字面意思是操控者，该类有比较重要的地方，就是通过handler来发送消息（sendMessage）到MessageQueue和 操作控件的更新（handleMessage）。handler下面持有这MessageQueue和Looper的对象。\n\nMessageQueue：字面意思是消息队列，就是封装Message类。对Message进行插入和取出操作。\n\nMessage：这个类是封装消息体并被发送到MessageQueue中的，给类是通过链表实现的，其好处方便MessageQueue的插入和取出操作。还有一些字段是（int what，Object obj，int arg1，int arg2）。what是用户定义的消息和代码，以便接收者（handler）知道这个是关于什么的。obj是用来传输任意对象的，arg1和arg2是用来传递一些简单的整数类型的。\n\n下面，我们按照启动顺序来进行源码分析：\n\n![](http://upload-images.jianshu.io/upload_images/1824194-298ebb16ce4a3b70.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://raw.githubusercontent.com/bihe0832/Android-System-Related-Charts/master/framework/handler-sequence.jpg)\n\n### 3.在项目中做了哪些东西?\n\n负责用户版App社区模块的版本的功能迭代，几个组件的开发与管理。\n\n### 4.画图说明View 事件传递机制?并举一个例子阐述\n\n1).Android事件分发机制的本质是要解决：点击事件由哪个对象发出，经过哪些对象，最终达到哪个对象并最终得到处理。这里的对象是指Activity、ViewGroup、View.\n\n2).Android中事件分发顺序：Activity（Window） -> ViewGroup -> View.\n\n3).事件分发过程由dispatchTouchEvent() 、onInterceptTouchEvent()和onTouchEvent()三个方法协助完成\n\n**设置Button按钮来响应点击事件事件传递情况：（如下图）**\n\n布局如下:\n\n![](http://upload-images.jianshu.io/upload_images/4642697-01f23a099103eb82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/210)\n\n最外层：Activiy A，包含两个子View：ViewGroup B、View C\n\n中间层：ViewGroup B，包含一个子View：View C\n\n最内层：View C\n\n假设用户首先触摸到屏幕上View C上的某个点（如图中黄色区域），那么Action_DOWN事件就在该点产生，然后用户移动手指并最后离开屏幕。\n\n**按钮点击事件:**\n\nDOWN事件被传递给C的onTouchEvent方法，该方法返回true，表示处理这个事件;\n\n因为C正在处理这个事件，那么DOWN事件将不再往上传递给B和A的onTouchEvent()；\n\n该事件列的其他事件（Move、Up）也将传递给C的onTouchEvent();\n\n![](http://upload-images.jianshu.io/upload_images/4642697-ca12c00c79780b57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n(记住这个图的传递顺序,面试的时候能够画出来,就很详细了)\n\n### 5.类加载机制\n\n**一. 类的加载过程**\n\nPerson person = new Person();为例进行说明。\n\n1).因为new用到了Person.class，所以会先找到Person.class文件，并加载到内存中;\n\n2).执行该类中的static代码块，如果有的话，给Person.class类进行初始化;\n\n3).在堆内存中开辟空间分配内存地址;\n\n4).在堆内存中建立对象的特有属性，并进行默认初始化;\n\n5).对属性进行显示初始化;\n\n6).对对象进行构造代码块初始化;\n\n7).对对象进行与之对应的构造函数进行初始化;\n\n8).将内存地址付给栈内存中的p变量\n\n**二.类的加载器**\n\n    大家都知道，当我们写好一个Java程序之后，不是管是CS还是BS应用，都是由若干个.class文件组织而成的一个完整的Java应用程序，当程序在运行时，即会调用该程序的一个入口函数来调用系统的相关功能，而这些功能都被封装在不同的class文件当中，所以经常要从这个class文件中要调用另外一个class文件中的方法，如果另外一个文件不存在的，则会引发系统异常。而程序在启动的时候，并不会一次性加载程序所要用的所有class文件，而是根据程序的需要，通过Java的类加载机制（ClassLoader）来动态加载某个class文件到内存当中的，从而只有class文件被载入到了内存之后，才能被其它class所引用。所以ClassLoader就是用来动态加载class文件到内存当中用的。\n\n**双亲机制**\n\n**_1、原理介绍_**\n\n    ClassLoader使用的是双亲委托模型来搜索类的，每个ClassLoader实例都有一个父类加载器的引用（不是继承的关系，是一个包含的关系），虚拟机内置的类加载器（Bootstrap ClassLoader）本身没有父类加载器，但可以用作其它ClassLoader实例的的父类加载器。当一个ClassLoader实例需要加载某个类时，它会试图亲自搜索某个类之前，先把这个任务委托给它的父类加载器，这个过程是由上至下依次检查的，首先由最顶层的类加载器Bootstrap ClassLoader试图加载，如果没加载到，则把任务转交给Extension ClassLoader试图加载，如果也没加载到，则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常。否则将这个找到的类生成一个类的定义，并将它加载到内存当中，最后返回这个类在内存中的Class实例对象。\n\n**_2、为什么要使用双亲委托这种模型呢？_**\n\n    因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。\n\n**_3、但是JVM在搜索类的时候，又是如何判定两个class是相同的呢？_**\n\n    JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。比如网络上的一个Java类org.classloader.simple.NetClassLoaderSimple，javac编译之后生成字节码文件NetClassLoaderSimple.class，ClassLoaderA和ClassLoaderB这两个类加载器并读取了NetClassLoaderSimple.class文件，并分别定义出了java.lang.Class实例来表示这个类，对于JVM来说，它们是两个不同的实例对象，但它们确实是同一份字节码文件，如果试图将这个Class实例生成具体的对象进行转换时，就会抛运行时异常java.lang.ClassCaseException，提示这是两个不同的类型。\n\n**Android类加载器**\n\n    对于Android而言，最终的apk文件包含的是dex类型的文件，dex文件是将class文件重新打包，打包的规则又不是简单地压缩，而是完全对class文件内部的各种函数表，变量表进行优化，产生一个新的文件，即dex文件。因此加载这种特殊的Class文件就需要特殊的类加载器DexClassLoader。\n\n### 6.如何换肤,换肤插件中存在的问题?\n**1.换肤方案分析**\n\n1.  res下放多种皮肤的资源文件\n\n2.  加载插件apk使用其中的皮肤资源\n\n* 方案一： \n优点：容易实现。 \n缺点：res下放多种皮肤的资源文件，无疑会加大apk文件大小，而且资源文件是写死的，不利于后期拓展，若有其他皮肤需求只能通过版本迭代。 \n* 方案二： \n优点：不会加大apk包，更容易扩展，有新的皮肤只需下载新的插件包即可，无需更新。（相对于方案一） \n缺点：相对于方案一实现较困难，若有更多业务处理需要插件，如使用插件中的四大组件及处理它们的生命周期则是比较麻烦的，需用到动态代理。\n例如:[Android插件化系列第（二）篇---动态加载技术之apk换肤](http://www.jianshu.com/p/d1c6e67f7889)\n\n**2.Android换肤技术总结**\n\n背景\n\n纵观现在各种Android app，其换肤需求可以归为 \n\n- 白天/黑夜主题切换（或者别的名字，通常2套），如同花顺/自选股/天天动听等，UI表现为一个switcher。 \n- 多种主题切换，通常为会员特权，如QQ/QQ空间。\n\n对于第一种来说，目测应该是直接通过本地theme来做的，即所有图片/颜色的资源都在apk里面打包了。\n\n而对于第二种，则相对复杂一些，由于作为一种线上服务，可能上架新皮肤，且那么多皮肤包放在apk里面实在太占体积了，所以皮肤资源会在选择后再进行下载，也就不能直接使用android的那套theme。\n\n**技术方案**\n\n内部资源加载方案和动态下载资源下载两种。\n\n动态下载可以称为一种黑科技了，因为往往需要hack系统的一些方法，所以在部分机型和新的API上有时候可能有坑，但相对好处则很多 \n\n- 图片/色值等资源由于是后台下发的，可以随时更新 \n- APK体积减小 \n- 对应用开发者来说，换肤几乎是透明的，不需要关心有几套皮肤 \n- 可以作为增值服务卖钱！！\n\n**内部资源加载方案**\n\n内部资源加载都是通过android本身那套theme来做的，相对业务开发来说工作量更大（需要定义attr和theme），不同方案类似地都是在BaseActivity里面做setTheme，差别主要在解决以下2个问题的策略： \n\n- setTheme后如何实时刷新，而不用重新创建页面（尤其是listview里面的item）。 \n- 哪些view需要刷新，刷新什么（背景？字体颜色？ImageView的src？）。\n\n**自定义view**\n\n[MultipleTheme](http://xiazai.jb51.net/201703/yuanma/MultipleTheme-master(jb51.net).rar) \n\n做自定义view是为了在setTheme后会去立即刷新，更新页面UI对应资源（如TextView替换背景图和文字颜色），在上述项目中，则是通过对rootView进行遍历，对所有实现了ColorUiInterface的view/viewgroup进行setTheme操作来实现即使刷新的。\n\n显然这样太重了，需要把应用内的各种view/viewgroup进行替换。\n\n手动绑定view和要改变的资源类型\n\n[Colorful](http://xiazai.jb51.net/201703/yuanma/Colorful-master(jb51.net).rar)\n\n这个…我们看看用法吧….\n```\nViewGroupSetter listViewSetter = new ViewGroupSetter(mNewsListView);\n// 绑定ListView的Item View中的news_title视图，在换肤时修改它的text_color属性\nlistViewSetter.childViewTextColor(R.id.news_title, R.attr.text_color);\n\n// 构建Colorful对象来绑定View与属性的对象关系\nmColorful = new Colorful.Builder(this)\n  .backgroundDrawable(R.id.root_view, R.attr.root_view_bg)\n  // 设置view的背景图片\n  .backgroundColor(R.id.change_btn, R.attr.btn_bg)\n  // 设置背景色\n  .textColor(R.id.textview, R.attr.text_color)\n  .setter(listViewSetter) // 手动设置setter\n  .create(); // 设置文本颜色\n```\n我就是想换个皮肤，还得在activity里自己去设置要改变哪个view的什么属性，对应哪个attribute？是不是成本太高了？而且activity的逻辑也很容易被弄得乱七八糟。\n\n**动态资源加载方案**\n\nresource替换\n\n覆盖application的getResource方法，实现自己的resource，优先加载本地皮肤包文件夹下的资源包，对于性能问题，可以通过attribute或者资源名称规范(如需要换肤则用skin_开头)来优化，从而不对不换肤的资源进行额外检查开销。\n\n不过由于Android5.1源码里，drawable初始化的时候调用的是loadDrawable，而不是resource.getDrawable，而loadDrawable是私有的方法，无法覆盖，所以虽然很方便，却无法继续使用（不用关心任何皮肤相关的事情，android:color指定颜色就行了，神奇滴会自动换肤）。\n\n自定义LayoutInflator.Factory\n\n开源项目可参照Android-Skin-Loader。\n\n即setFactory使用自定义的LayoutInflator.Factory，可以重点关注该项目中的SkinInflaterFactory和SkinManager（实现了自己的getColor、getDrawable、getBitmap、getColorStateList等等方法）。\n\n需要自定义一个tag比如app:customStyle，重写所有的style，转成set方法，这样带来的牺牲就是增加了换肤的成本，要写很多style，自己去set，并不完全透明了。\n\nHack Resources internally\n\n黑科技方法，直接对Resources进行hack，Resources.Java:\n```\n// Information about preloaded resources. Note that they are not\n// protected by a lock, because while preloading in zygote we are all\n// single-threaded, and after that these are immutable.\nprivate static final LongSparseArray<Drawable.ConstantState>[] sPreloadedDrawables;\nprivate static final LongSparseArray<Drawable.ConstantState> sPreloadedColorDrawables\n  = new LongSparseArray<Drawable.ConstantState>();\nprivate static final LongSparseArray<ColorStateList> sPreloadedColorStateLists\n  = new LongSparseArray<ColorStateList>();\n```\n直接对Resources里面的这三个LongSparseArray进行替换，由于apk运行时的资源都是从这三个数组里面加载的，所以只要采用interceptor模式：\n\npublic class DrawablePreloadInterceptor extends LongSparseArray<Drawable.ConstantState>\n\n自己实现一个LongSparseArray，并通过反射set回去，就能实现换肤，具体getDrawable等方法里是怎么取preload数组的，可以自己看Resources的源码。\n\n等等，就这么简单？，NONO，少年你太天真了，怎么去加载xml，9patch的padding怎么更新，怎么打包/加载自定义的皮肤包，drawable的状态怎么刷新，等等。这些都是你需要考虑的，在存在插件的app中，还需要考虑是否会互相覆盖resource id的问题，进而需要修改apt，把resource id按位放在2个range。\n\n手Q和独立版QQ空间使用的是这种方案，效果挺好。\n\n**总结**\n\n尽管动态加载方案比较黑科技，可能因为系统API的更改而出问题，但相对来说\n\n**好处有** \n\n- 灵活性高，后台可以随时更新皮肤包 \n- 相对透明，开发者几乎不用关心有几套皮肤，不用去定义各种theme和attr，甚至连皮肤包的打包都可以交给设计或者专门的同学 \n- apk体积节省 \n\n**存在的问题**\n\n没有完善的开源项目，如果我们采用动态加载的第二种方案，需要的项目功能包括： \n\n- 自定义皮肤包结构 \n- 换肤引擎，加载皮肤包资源并load，实时刷新。 \n- 皮肤包打包工具 \n- 对各种rom的兼容\n\n如果有这么一个项目的话，就一劳永逸了，有兴趣的同学可以联系一下，大家一起搞一搞。\n\n内部加载方案大同小异，主要解决的都是即时刷新的问题，然而从目前的一些开源项目来看，仍然没有特别简便的方案。让我选的话，我宁愿让界面重新创建，比如重启activity，或者remove所有view再添加回来（或者你可能想遍历rootview，然后一个个检查是否需要换肤然后set…）。\n\n### 7.hotfix是否用过,原理是否了解?\n\n[Android热修复技术选型——三大流派解析](https://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&mid=2651112709&idx=1&sn=09f82f5e2e8e287904391dbc4b1f83f6&scene=1&srcid=0909KyPp8gx8aLwII2MEYUQ3)\n\n### 8.说说项目中用到了哪些设计模式,说了一下策略模式和观察者模式?\n\n[Android源码设计模式分析项目](https://github.com/simple-android-framework-exchange/android_design_patterns_analysis#schedule)\n\n**1.单例模式（application、eventBus）\n2.builder创建模式（AlertDialog、Glide、OkHttp）\n3.观察者模式（ListView、RxJava，监听事件）\n4.装饰模式（context）\n5.外观模式（contextImpl）\n6.模板方法模式（Activity和Fragment生命周期、AsyncTask、BaseActivity）\n7.策略模式（Volley、属性动画、插值器 Interpolator）\n8.组合模式（View、ViewGroup）\n9.代理模式（binder）\n10.迭代器模式（Iterator）\n11.命令模式（Runnable）\n12.原型模式（Intent）\n13.责任链模式（try-catch语句、有序广播、事件分发机制）\n14.桥接模式bridge（listview和BaseAdapter）\n15.适配器模式（BaseAdapter类）**\n\n### 9.会JS么?有Hybid开发经验么?\n**为什么引入Hybrid开发**\n混合开发是 Native 和 Web 技术一起用，开发者以 Native 代码为主体，在合适的地方部分使用 Web 技术。比如在 Android 中的 Activity 内放置一个 Webview（一个浏览器引擎，只拥有渲染 HTML，CSS 和执行 JavaScript 的核心功能）。这样，部分用户界面就可以在 WebView 中使用 Web 技术实现。\n\n促使我们在移动开发中使用 Web 技术主要动力在于，相比于 Native 技术，Web 技术具有诸多优势：\n\n* 高效率的界面开发：HTML，CSS，JavaScript 的组合被证明在用户界面开发方面具有很高的效率。\n\n* 跨平台：统一的浏览器内核标准，使得 Web 技术具有跨平台特性。iOS 和 Android 可以使用一套代码。\n\n* 热更新：可越过发布渠道自主更新应用。\n\n这些优势都和开发效率有关。Web 技术具有这些优势的原因是，Web 技术是一个开放标准。基于开放的标准已经发展出来庞大生态，而且这个生态从 PC 时代发展至今已积累多年，开发者可以利用生态中产出的各种成果，从而省去很多重复工作。\n\n在大型移动应用的开发中，项目代码庞杂，通常还需要 iOS，Android，移动 Web 和 桌面 Web 全平台支持。相对于同时开发几个版本，使用混合开发显然可以在代码重用、开发成本和效率方面有很大的优势，在权衡性能体验的前提下，使用混合开发是非常现实的选择。\n\n**实现方式**\n一般来讲，也是我目前知道的两种主流的方式就是\n\n1.  js调用Native中的代码\n2.  Schema：WebView拦截页面跳转\n\n第2种方式实现起来很简单，但是一个致命的问题就是这种交互方式是单向的，Html 5无法实现回调。像云音乐App中这种点击跳转到具体页面的功能，Schema的方式确实可以简单实现，而且也非常适合。如果需求变得复杂，假如Html 5需要获取Native App中的用户信息，那么最好使用js调用的方式。\n\n**[JS安全漏洞](http://jaq.alibaba.com/blog.htm?id=48)**\nAndroid API level 16以及之前的版本存在远程代码执行安全漏洞，该漏洞源于程序没有正确限制使用WebView.addJavascriptInterface方法，远程攻击者可通过使用Java Reflection API利用该漏洞执行任意Java对象的方法，简单的说就是通过addJavascriptInterface给WebView加入一个JavaScript桥接接口，JavaScript通过调用这个接口可以直接操作本地的JAVA接口。该漏洞最早公布于CVE-2012-6636【1】，其描述了WebView中addJavascriptInterface API导致的远程代码执行安全漏洞。\n\n**js调用的方式**\n`WebView.addJavascriptInterface(Object o, String interface)`方法注册可供js调用的Java对象\n\n`addJavascriptInterface(mJsBridge, mWindowClientName);`\n\n在mJsBridge对象中封装一些供js调用的Java方法，例如有loading框显示与隐藏，页面关闭的统一动画，dialog的显示，toast的显示，调用native系统的打开相册，打开通讯录，打电话，发短信等\n\n**Schema的方式**\n通过shouldOverrideUrlLoading方法拦截url，如果host是内定的协议就打开对应协议的activity，如果是正常的url的HTTP或者HTTPS就正常loadUrl，否则就是默认是系统协议处理，打开系统页面，例如调起拨打电话。\n```\n\npublic final boolean filter(Context context, String url) {\n   mContext = context;\n if (null == mContext || TextUtils.isEmpty(url)) {\n      return true;\n  }\n   //普通url\n  if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n      return dealWithHttp(url);\n  }\n   //更美协议\n  if (url.startsWith(mProtocolName)) {\n      return dealWithProtocol(url);\n  }\n   //系统协议\n  return dealWithSystemProtocol(url); }\n\n/**\n * 普通url处理 * * @param url\n  * @return\n  */ protected boolean dealWithHttp(String url) {\n   if (null != mOnLoadUrlListener && mWhiteList.inWhiteList(url)) {\n      mOnLoadUrlListener.onLoadUrl(url);\n  }\n   return true; }\n\n/**\n * 协议处理 * * @param url\n  * @return\n  */ protected boolean dealWithProtocol(String url) {\n   try {\n      if (mContext instanceof GMActivity) {\n         ((GMActivity) mContext).startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse(url)), 1024);\n  } else if (mContext instanceof Activity) {\n         ((Activity) mContext).startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse(url)), 1024);\n  }\n   } catch (Exception e) {\n      e.printStackTrace();\n  }\n   return true; }\n\n/**\n * 系统协议处理，eg：tel（拨打电话） * @param url\n  * @return\n  */ protected boolean dealWithSystemProtocol(String url){\n   try {\n      if (mContext instanceof GMActivity) {\n         ((GMActivity) mContext).startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse(url)), 1024);\n  } else if (mContext instanceof Activity) {\n         ((Activity) mContext).startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse(url)), 1024);\n  }\n   } catch (Exception e) {\n      e.printStackTrace();\n  }\n   return true; }\n```\n\n### 10.说一下快排的思想?手写代码\n\n基本思想：选择某个元素作为基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分，最终整个数组将变成有序的。\n\n![](http://img.my.csdn.net/uploads/201209/07/1347009479_6587.jpg)\n\n![](http://ou21vt4uz.bkt.clouddn.com/qickSort.png)\n\n```\npublic static void quickSort(int[] array) {\n    _quickSort(array, 0, array.length - 1);\n    System.out.println(Arrays.toString(array) + \" quickSort\");\n}\nprivate static int getMiddle(int[] list, int low, int high) {\n    int tmp = list[low];    //数组的第一个作为中轴\n    while (low < high) {\n        while (low < high && list[high] >= tmp) {\n            high--;\n        }\n        list[low] = list[high];   //比中轴小的记录移到低端\n        while (low < high && list[low] <= tmp) {\n            low++;\n        }\n        list[high] = list[low];   //比中轴大的记录移到高端\n    }\n    list[low] = tmp;              //中轴记录到尾\n    return low;                  //返回中轴的位置\n}\n\nprivate static void _quickSort(int[] list, int low, int high) {\n    if (low < high) {\n        int middle = getMiddle(list, low, high);  //将list数组进行一分为二\n        _quickSort(list, low, middle - 1);      //对低字表进行递归排序\n        _quickSort(list, middle + 1, high);      //对高字表进行递归排序\n    }\n}\n```\n(1) **枢轴的选取方式的优化**：\n\n枢轴的选取方式有：(1) 固定位置选取；(2) 随机位置选取； (3) 三值取中法 等\n\n固定位置选取：选取当前序列的第一个元素或者最后一个元素作为枢轴，上面的算法的枢轴选取方式即为固定位置选取。该方法不是一个好的选取方案，因为当整个序列有序时，每次分割(partition)操作只会将待排序序列减1，此时为最坏情况，算法复杂度沦为O(n^2)。然而，在待排序的序列中局部有序是相当常见的，所以固定位置选取枢轴不是一种好的选择。\n\n随机位置选取：随机选取当前待排序序列的任意记录作为枢轴。由于采取随机，所以时间性能要强于固定位置选取。\n\n三值取中法： 待排序序列的前(第一个位置)、中(中间位置)、后(最后一个位置)三个记录中的中间值(按大小排序)作为枢轴\n\n三值取中本质上就是随机位置选取，但是由于随机位置选取过程中需要用到随机种子来产生随机数，而三值取中不需要，所以三值取中要优于随机位置选取。\n\n所以优化枢轴的选取方式时，我们选择三值取中的方式。\n\n(2) **优化小数组时的排序方案**：\n\n当局部排序数组长度较小时，采用插入排序，而非快速排序，因为长度分割到够小后，继续分割的效率要低于直接插入排序。\n\n(3) **略去不必要的交换**\n\n略去不必要的交换，将交换操作改为替换操作。\n\n因为交换操作需要进行3次赋值操作，而替换操作只需要进行1次赋值操作。\n\n**_Java实现_**\n\n```\n// 优化的快速排序\nclass OptimizedQuickSorter extends QuickSorter {\n\n    /**\n     * 插入排序最大数组长度值\n     */\n    private static final int MAX_LENGTH_INSERT_SORT = 7;\n\n    /**\n     * 对数组arr[low...high]的子序列作快速排序，使之有序\n     */\n    @Override\n    protected void quickSort(int[] arr, int low, int high) {\n        int pivotLoc; // 记录枢轴(pivot)所在位置\n        if ((high - low + 1) > MAX_LENGTH_INSERT_SORT) {\n            // 待排序数组长度大于临界值，则进行快速排序\n            pivotLoc = partition(arr, low, high); // 将arr[low...high]一分为二,并返回枢轴位置\n\n            quickSort(arr, low, pivotLoc - 1);// 递归遍历arr[low...pivotLoc-1]\n            quickSort(arr, pivotLoc + 1, high); // 递归遍历arr[pivotLoc+1...high]\n        } else {\n            // 2\\. 优化小数组时的排序方案，将快速排序改为插入排序\n            insertSort(arr, low, high); // 对arr[low...high]子序列进行插入排序\n        }\n    }\n\n    /**\n     * 在arr[low...high]中利用三值取中选取枢轴(pivot)，将arr[low...high]分成两部分，\n     * 前半部分的子序列的记录均小于pivot，后半部分的记录均大于pivot;最后返回pivot的位置\n     */\n    @Override\n    protected int partition(int[] arr, int low, int high) {\n        int pivot;\n        pivot = medianOfThree(arr, low, high); // 1\\. 优化排序基准，使用三值取中获取中值\n        while (low < high) { // 从数组的两端向中间扫描 // A\n            while (low < high && arr[high] >= pivot) { // B\n                high--;\n            }\n            // swap(arr, low, high); // 将比枢轴pivot小的元素交换到低位\n            arr[low] = arr[high]; // 3\\. 优化不必要的交换，使用替换而不是交换  // C\n            while (low < high && arr[low] <= pivot) { // D\n                low++;\n            }\n            // swap(arr, low, high); // 将比枢轴pivot大的元素交换到高位\n            arr[high] = arr[low]; // 3\\. 优化不必要的交换，使用替换而不是交换 // E\n        }\n        arr[low] = pivot; // F\n        return low; // 返回一趟下来后枢轴pivot所在的位置\n    }\n\n    /**\n     * 通过三值取中(从arr[low...high]子序列中)获取枢轴pivot的值，让arr[low]变成中值;并返回计算的枢轴(pivot)\n     */\n    private int medianOfThree(int[] arr, int low, int high) {\n        int mid = low + ((high - low) >> 1); // mid = low + (high-low)/2, 中间元素下标\n\n        // 使用三值取中得到枢轴\n        if (arr[low] > arr[high]) { // 目的：让arr[low] <= arr[high]\n            swap(arr, low, high);\n        }\n        if (arr[mid] > arr[high]) { // 目的：让arr[mid] <= arr[high]\n            swap(arr, mid, high);\n        }\n        if (arr[mid] > arr[low]) { // 目的： 让arr[low] >= arr[mid]\n            swap(arr, low, mid);\n        }\n        // 经过上述变化，最终 arr[mid]<=arr[low]<=arr[high]，则arr[low]为中间值\n        return arr[low];\n    }\n\n    /**\n     * 对子序列arr[low...high]进行插入排序\n     */\n    private void insertSort(int[] arr, int low, int high) {\n        int i, j;\n        int tmp;\n        for (i = low + 1; i <= high; i++) { // 从下标low+1开始遍历,因为下标为low的已经排好序\n            if (arr[i] < arr[i - 1]) {\n                // 如果当前下标对应的记录小于前一位记录,则需要插入,否则不需要插入，直接将记录数增加1\n                tmp = arr[i]; // 记录下标i对应的元素\n                for (j = i - 1; j >= low && arr[j] > tmp; j--) {\n                    arr[j + 1] = arr[j]; // 记录后移\n                }\n                arr[j + 1] = tmp; // 插入正确位置\n            }\n        }\n    }\n}\n\n```\n**复杂度**\n\n时间复杂度：\n\n时间复杂度为O(nlogn)，在对快速排序进行各种细节性的优化后，快速排序的性能大大提高，在一般条件下超越了其它排序方法，故得此名。\n\n空间复杂度：\n\n就空间复杂度来说，主要是递归造成的栈空间的使用，最好情况，递归的深度为log2n，其空间复杂度也就为O(logn)，最坏情况，需要进行n‐1递归调用，其空间复杂度为O(n)，平均情况，空间复杂度也为O(logn)。\n\n### 11.堆有哪些数据结构?\n\n对于这轮面试明显感觉到压力,知识的纵向了解也比较深,应该是个leader.\n\n**第三轮**\n\n1.介绍一下在项目中的角色?\n\n2.遇到困难是怎么解决的?\n\n3.如何与人相处,与别人意见相左的时候是怎么解决的,并举生活中的一个例子.\n\n4.有没有压力特别大的时候?\n\n这个应该是项目经理了,问的问题偏向于生活性格方面.\n\n以上面试中问到的题目基本上都可以在上面找到答案,所以做准备是很重要的,但技术是一点点积累的,就算你全会背了,面试过了,真正等到工作的时候还是会捉襟见肘的,所以踏实点吧骚年.\n\n",[[1520589803293,["gengmei_pxf@gengmei123.local",[[1,13912,"\n"]],[13910,13910],[13911,13911]]],[1520589803588,["gengmei_pxf@gengmei123.local",[[1,13913,"\n"]],[13911,13911],[13912,13912]]],[1520589804217,["gengmei_pxf@gengmei123.local",[[1,13912,"https://upload-images.jianshu.io/upload_images/944365-aea821bbb613c195.png"]],[13912,13912],[13986,13986]]],[1520589806988,["gengmei_pxf@gengmei123.local",[[-1,13912,"https://upload-images.jianshu.io/upload_images/944365-aea821bbb613c195.png"]],[13986,13986],[13912,13912]]],[1520589810531,["gengmei_pxf@gengmei123.local",[[1,13912,"![]()"]],[13912,13912],[13917,13917]]],[1520589811590,["gengmei_pxf@gengmei123.local",[[1,13916,"https://upload-images.jianshu.io/upload_images/944365-aea821bbb613c195.png"]],[13916,13916],[13990,13990]]],[1520589828342,["gengmei_pxf@gengmei123.local",[[1,13914,"onTouchEvent"]],[13914,13914],[13926,13926]]],[1520589832293,["gengmei_pxf@gengmei123.local",[[1,13783,"onInterceptTouchEvent"]],[13783,13783],[13804,13804]]],[1520589843902,["gengmei_pxf@gengmei123.local",[[-1,13933,"![onTouchEvent](https://upload-images.jianshu.io/upload_images/944365-aea821bbb613c195.png)"]],[13933,14024],[13933,13933]]],[1520589844309,["gengmei_pxf@gengmei123.local",[[-1,13934,"\n"]],[13933,13933],[13932,13932]]],[1520589844711,["gengmei_pxf@gengmei123.local",[[-1,13933,"\n"]],[13932,13932],[13931,13931]]],[1520589849417,["gengmei_pxf@gengmei123.local",[[1,14379,"\n"]],[14377,14377],[14378,14378]]],[1520589849602,["gengmei_pxf@gengmei123.local",[[1,14380,"\n"]],[14378,14378],[14379,14379]]],[1520589850021,["gengmei_pxf@gengmei123.local",[[1,14379,"![onTouchEvent](https://upload-images.jianshu.io/upload_images/944365-aea821bbb613c195.png)"]],[14379,14379],[14470,14470]]]]]]}
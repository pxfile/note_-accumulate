{"compress":true,"commitItems":[["bedf3bb8-c196-40fd-9db5-d93ddea4206b",1521687919925,"",[[1521687890664,["gengmei_pxf@gengmei123.local",[[1,0,"面试题5\n===\n\n\n### 如何单独对ListView上的一个item进行更新"]],[0,0],[40,40]]],[1521687892560,["gengmei_pxf@gengmei123.local",[[-1,12,"##"]],[14,14],[12,12]]],[1521687893967,["gengmei_pxf@gengmei123.local",[[1,38,"\n\n"]],[38,38],[39,39]]],[1521687894263,["gengmei_pxf@gengmei123.local",[[1,40,"\n"]],[39,39],[40,40]]],[1521687908290,["gengmei_pxf@gengmei123.local",[[-1,40,"\n"],[1,41,"·"]],[40,40],[41,41]]],[1521687909151,["gengmei_pxf@gengmei123.local",[[-1,40,"·"]],[41,41],[40,40]]],[1521687910113,["gengmei_pxf@gengmei123.local",[[-1,39,"\n"],[1,40,"```"]],[40,40],[42,42]]],[1521687910414,["gengmei_pxf@gengmei123.local",[[1,42,"\n\n"]],[42,42],[43,43]]],[1521687910597,["gengmei_pxf@gengmei123.local",[[1,44,"\n"]],[43,43],[44,44]]],[1521687910826,["gengmei_pxf@gengmei123.local",[[1,45,"\n"]],[44,44],[45,45]]],[1521687911672,["gengmei_pxf@gengmei123.local",[[-1,45,"\n"]],[45,45],[44,44]]],[1521687912290,["gengmei_pxf@gengmei123.local",[[-1,44,"\n"],[1,45,"```"]],[44,44],[47,47]]],[1521687913292,["gengmei_pxf@gengmei123.local",[[1,43,"/** * 第一种方法 更新对应view的内容 * * @param position 要更新的位置 */  private  void  updateSingle(int position) { /**第一个可见的位置**/  int firstVisiblePosition = listView.getFirstVisiblePosition(); /**最后一个可见的位置**/  int lastVisiblePosition = listView.getLastVisiblePosition(); /**在看见范围内才更新，不可见的滑动后自动会调用getView方法更新**/  if (position >= firstVisiblePosition && position <= lastVisiblePosition) { /**获取指定位置view对象**/ View view = listView.getChildAt(position - firstVisiblePosition); TextView textView = (TextView) view.findViewById(R.id.textView); textView.setText(datas.get(position)); }"]],[43,43],[605,605]]],[1521687923985,["gengmei_pxf@gengmei123.local",[[-1,43,"/** * 第一种方法 更新对应view的内容 * * @param position 要更新的位置 */  private  void  updateSingle(int position) { /**第一个可见的位置**/  int firstVisiblePosition = listView.getFirstVisiblePosition(); /**最后一个可见的位置**/  int lastVisiblePosition = listView.getLastVisiblePosition(); /**在看见范围内才更新，不可见的滑动后自动会调用getView方法更新**/  if (position >= firstVisiblePosition && position <= lastVisiblePosition) { /**获取指定位置view对象**/ View view = listView.getChildAt(position - firstVisiblePosition); TextView textView = (TextView) view.findViewById(R.id.textView); textView.setText(datas.get(position)); }"]],[605,605],[43,43]]],[1521687933952,["gengmei_pxf@gengmei123.local",[[1,43,"/**\n     * 第一种方法 更新对应view的内容\n     *\n     * @param position 要更新的位置\n     */\n    private void updateSingle(int position) {\n        /**第一个可见的位置**/\n        int firstVisiblePosition = listView.getFirstVisiblePosition();\n        /**最后一个可见的位置**/\n        int lastVisiblePosition = listView.getLastVisiblePosition();\n\n        /**在看见范围内才更新，不可见的滑动后自动会调用getView方法更新**/\n        if (position >= firstVisiblePosition && position <= lastVisiblePosition) {\n            /**获取指定位置view对象**/\n            View view = listView.getChildAt(position - firstVisiblePosition);\n            TextView textView = (TextView) view.findViewById(R.id.textView);\n            textView.setText(datas.get(position));\n        }"]],[43,43],[728,728]]],[1521687948373,["gengmei_pxf@gengmei123.local",[[1,39,"\n"]],[38,38],[39,39]]],[1521687948925,["gengmei_pxf@gengmei123.local",[[1,40,"\n"]],[39,39],[40,40]]],[1521687953006,["gengmei_pxf@gengmei123.local",[[1,40,"*  第一种方法 更新对应view的内容"]],[40,40],[60,60]]],[1521687957476,["gengmei_pxf@gengmei123.local",[[1,754,"\n\n"]],[754,754],[755,755]]],[1521687976254,["gengmei_pxf@gengmei123.local",[[-1,755,"\n"],[1,756,"* # 通过ViewHolder去设置值"]],[755,755],[775,775]]],[1521687978476,["gengmei_pxf@gengmei123.local",[[-1,756," #"]],[758,758],[756,756]]],[1521687984598,["gengmei_pxf@gengmei123.local",[[1,757," 第一种方法"]],[756,756],[762,762]]],[1521687986115,["gengmei_pxf@gengmei123.local",[[-1,758,"一"]],[759,759],[758,758]]],[1521687986488,["gengmei_pxf@gengmei123.local",[[1,758,"er"]],[758,758],[760,760]]],[1521687986993,["gengmei_pxf@gengmei123.local",[[-1,758,"er"]],[760,760],[758,758]]],[1521687988121,["gengmei_pxf@gengmei123.local",[[1,758,"二"]],[758,758],[759,759]]],[1521687989519,["gengmei_pxf@gengmei123.local",[[1,779,"\n\n"]],[779,779],[780,780]]],[1521687990920,["gengmei_pxf@gengmei123.local",[[-1,780,"\n"],[1,781,"```"]],[780,780],[783,783]]],[1521687991236,["gengmei_pxf@gengmei123.local",[[1,783,"\n\n"]],[783,783],[784,784]]],[1521687991459,["gengmei_pxf@gengmei123.local",[[1,785,"\n"]],[784,784],[785,785]]],[1521687992125,["gengmei_pxf@gengmei123.local",[[-1,785,"\n"],[1,786,"```"]],[785,785],[788,788]]],[1521688033972,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "]],[757,757],[764,764]]],[1521688033972,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "]],[764,764],[757,757]]],[1521688031790,["gengmei_pxf@gengmei123.local",[[1,784," /**\n     * 第二种方法 找出对应的ViewHolder，通过ViewHolder去设置值\n     *\n     * @param position 要更新的位置\n     */\n    private void updateOne(int position) {\n        /**第一个可见的位置**/\n        int firstVisiblePosition = listView.getFirstVisiblePosition();\n        /**最后一个可见的位置**/\n        int lastVisiblePosition = listView.getLastVisiblePosition();\n\n        /**在看见范围内才更新，不可见的滑动后自动会调用getView方法更新**/\n        if (position >= firstVisiblePosition && position <= lastVisiblePosition) {\n            /**获取指定位置view对象**/\n            View view = listView.getChildAt(position - firstVisiblePosition);\n            /**通过ViewHolder找出缓存的对应控件**/\n            TextView textView = CommonViewHolder.get(view, R.id.textView);\n            textView.setText(datas.get(position));\n\n        }\n    }"]],[784,784],[1533,1533]]],[1521688093969,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "]],[757,757],[764,764]]],[1521688093969,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "]],[764,764],[757,757]]],[1521688048771,["gengmei_pxf@gengmei123.local",[[1,1537,"\n\n"]],[1537,1537],[1538,1538]]],[1521688050462,["gengmei_pxf@gengmei123.local",[[-1,1538,"\n"],[1,1539,"* # 方法三：调用一次getView()方法"]],[1538,1538],[1561,1561]]],[1521688053314,["gengmei_pxf@gengmei123.local",[[-1,1540,"# "]],[1542,1542],[1540,1540]]],[1521688066766,["gengmei_pxf@gengmei123.local",[[1,1540,"第二种"],[-1,1542,"三"]],[1540,1543],[1545,1545]]],[1521688068163,["gengmei_pxf@gengmei123.local",[[-1,1541,"二"]],[1542,1542],[1541,1541]]],[1521688070070,["gengmei_pxf@gengmei123.local",[[1,1541,"三"]],[1541,1541],[1542,1542]]],[1521688071831,["gengmei_pxf@gengmei123.local",[[1,1561,"\n\n"]],[1561,1561],[1562,1562]]],[1521688072474,["gengmei_pxf@gengmei123.local",[[1,1563,"\n"]],[1562,1562],[1563,1563]]],[1521688074062,["gengmei_pxf@gengmei123.local",[[-1,1563,"\n"],[1,1564,"···"]],[1563,1563],[1566,1566]]],[1521688075088,["gengmei_pxf@gengmei123.local",[[-1,1563,"···"]],[1566,1566],[1563,1563]]],[1521688076555,["gengmei_pxf@gengmei123.local",[[-1,1562,"\n"],[1,1563,"```"]],[1563,1563],[1565,1565]]],[1521688077012,["gengmei_pxf@gengmei123.local",[[1,1565,"\n\n"]],[1565,1565],[1566,1566]]],[1521688077217,["gengmei_pxf@gengmei123.local",[[1,1567,"\n"]],[1566,1566],[1567,1567]]],[1521688078185,["gengmei_pxf@gengmei123.local",[[-1,1567,"\n"],[1,1568,"```"]],[1567,1567],[1570,1570]]],[1521688131585,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "]],[757,757],[764,764]]],[1521688131585,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "]],[764,764],[757,757]]],[1521688130826,["gengmei_pxf@gengmei123.local",[[1,1566,"/**\n     * 第三种方法 调用一次getView()方法；Google推荐的做法\n     *\n     * @param position 要更新的位置\n     */\n    private void updateItem(int position) {\n        /**第一个可见的位置**/\n        int firstVisiblePosition = listView.getFirstVisiblePosition();\n        /**最后一个可见的位置**/\n        int lastVisiblePosition = listView.getLastVisiblePosition();\n\n        /**在看见范围内才更新，不可见的滑动后自动会调用getView方法更新**/\n        if (position >= firstVisiblePosition && position <= lastVisiblePosition) {\n            /**获取指定位置view对象**/\n            View view = listView.getChildAt(position - firstVisiblePosition);\n            commonAdapter.getView(position, view, listView);\n        }\n    }"]],[1566,1566],[2204,2204]]],[1521688226094,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "]],[757,757],[764,764]]],[1521688226094,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "]],[764,764],[757,757]]],[1521688217124,["gengmei_pxf@gengmei123.local",[[1,2208,"\n\n这三种方法的核心就是找出你要更新Item的contentView.然后再去操作。因为ListView默认只会加载一屏的数据，所以要判断其可见范围。不可见的在滑动的时候getView会自动调用更新数据。最后要强调的一点就是关于布局优化，最好将item的高度设置为一个固定的值，这样能减少getView的调用次数。因为一个不确定的值，ListView会频繁调用多次getView去确定其高度和渲染。"]],[2208,2208],[2406,2406]]],[1521688220185,["gengmei_pxf@gengmei123.local",[[1,2209,"\n"]],[2208,2208],[2209,2209]]],[1521688223964,["gengmei_pxf@gengmei123.local",[[1,2209,"* 总结"]],[2209,2209],[2213,2213]]],[1521688224849,["gengmei_pxf@gengmei123.local",[[1,2214,"\n"]],[2213,2213],[2214,2214]]],[1521688326025,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2413,"\n"]],[757,757],[2414,2414]]],[1521688326025,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2412,"\n"]],[2414,2414],[757,757]]],[1521688317546,["gengmei_pxf@gengmei123.local",[[1,2413,"\n"]],[2412,2412],[2413,2413]]],[1521688318012,["gengmei_pxf@gengmei123.local",[[1,2414,"\n"]],[2413,2413],[2414,2414]]],[1521688318613,["gengmei_pxf@gengmei123.local",[[1,2414,"### 设计师只给了一套1280*800的UI图标注，如何进行其它分辨率尺寸屏幕的适配？\n\n| 名称 | 像素密度范围 | 图片大小 |\n| :-: | :-: | :-: |\n| mdpi | 120dp~160dp | 48×48px |\n| hdpi | 160dp~240dp | 72×72px |\n| xhdpi | 240dp~320dp | 96×96px |\n| xxhdpi | 320dp~480dp | 144×144px |\n| xxxhdpi | 480dp~640dp | 192×192px |\n\n以 720*1080 5英寸为例：\n(720^2 + 1080^2)开方=260\n放在xhdpi中。\n\n本题中同理可以算得 293，还是xhdpi中。"]],[2414,2414],[2754,2754]]],[1521688321316,["gengmei_pxf@gengmei123.local",[[-1,2415,"##"]],[2417,2417],[2415,2415]]],[1521689226049,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2413,"\n"]],[757,757],[2414,2414]]],[1521689226049,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2412,"\n"]],[2414,2414],[757,757]]],[1521689199528,["gengmei_pxf@gengmei123.local",[[1,2753,"\n"]],[2752,2752],[2753,2753]]],[1521689200912,["gengmei_pxf@gengmei123.local",[[1,2754,"\n"]],[2753,2753],[2754,2754]]],[1521689201820,["gengmei_pxf@gengmei123.local",[[-1,2754,"\n"],[1,2755,"￥"]],[2754,2754],[2755,2755]]],[1521689202586,["gengmei_pxf@gengmei123.local",[[-1,2754,"￥"]],[2755,2755],[2754,2754]]],[1521689203970,["gengmei_pxf@gengmei123.local",[[-1,2753,"\n"],[1,2754,"# # HandlerThread"]],[2754,2754],[2770,2770]]],[1521689206024,["gengmei_pxf@gengmei123.local",[[-1,2753,"# "]],[2755,2755],[2753,2753]]],[1521689206815,["gengmei_pxf@gengmei123.local",[[1,2753,"\n"]],[2753,2753],[2754,2754]]],[1521689208613,["gengmei_pxf@gengmei123.local",[[1,2769,"\n\n"]],[2769,2769],[2770,2770]]],[1521689208991,["gengmei_pxf@gengmei123.local",[[1,2771,"\n"]],[2770,2770],[2771,2771]]],[1521689282154,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2413,"\n"]],[757,757],[2414,2414]]],[1521689282154,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2412,"\n"]],[2414,2414],[757,757]]],[1521689234766,["gengmei_pxf@gengmei123.local",[[1,2771,"# 一.介绍\n\n           HandlerThread继承自Thread，当线程开启时，也就是它run方法运行起来后，线程同时创建了一个含有消息队列的Looper，并对外提供自己这个Looper对象的get方法，这就是它和普通Thread唯一不同的地方。\n\n# 二.好处\n\n1.开发中如果多次使用类似new Thread(){...}.start()这种方式开启一个子线程，会创建多个匿名线程，使得程序运行起来越来越慢，而HandlerThread自带Looper使他可以通过消息来多次重复使用当前线程，节省开支；\n\n2.android系统提供的Handler类内部的Looper默认绑定的是UI线程的消息队列，对于非UI线程又想使用消息机制，那么HandlerThread内部的Looper是最合适的，它不会干扰或阻塞UI线程。\n\n# 三.用法\n\n# HandlerThread既然本质是Thread，为何前面加了一个Handler？\n\n# android中Handler类本质上就是从它内部的Looper中不断取消息，\n\n# 然后触发它内部的Callback接口的handleMessage方法，让用户去实现对消息的具体处理。而HandlerThread本身自带Looper,只要它实现了Callback接口，那么HandlerThread也可以在自己线程内处理自己线程发出的消息，\n\n充分实现非UI线程中较低开支下的消息处理。\n\nhandlerThread = new HandlerThread(\"AsynTaskThread\");\nhandlerThread.start();\nnetworkHandler = new NetworkHandler(handlerThread.getLooper());"]],[2771,2771],[3533,3533]]],[1521689237338,["gengmei_pxf@gengmei123.local",[[1,2772,"#"],[-1,2779,"           "],[1,2790,"           "]],[2771,2771],[2772,2772]]],[1521689239275,["gengmei_pxf@gengmei123.local",[[1,2907,"#"]],[2907,2907],[2908,2908]]],[1521689242859,["gengmei_pxf@gengmei123.local",[[1,3146,"#"]],[3146,3146],[3147,3147]]],[1521689251303,["gengmei_pxf@gengmei123.local",[[1,3155,"#"]],[3155,3155],[3156,3156]]],[1521689259253,["gengmei_pxf@gengmei123.local",[[-1,3154,"##"]],[3156,3156],[3154,3154]]],[1521689260504,["gengmei_pxf@gengmei123.local",[[1,3154,"*"]],[3154,3154],[3155,3155]]],[1521689264104,["gengmei_pxf@gengmei123.local",[[-1,3199,"#"],[1,3200,"*"]],[3199,3200],[3200,3200]]],[1521689268136,["gengmei_pxf@gengmei123.local",[[-1,3242,"#"],[1,3243,"*"]],[3242,3243],[3243,3243]]],[1521689272655,["gengmei_pxf@gengmei123.local",[[1,3374,"* "]],[3374,3374],[3376,3376]]],[1521689274375,["gengmei_pxf@gengmei123.local",[[1,3398,"··"]],[3398,3398],[3400,3400]]],[1521689275181,["gengmei_pxf@gengmei123.local",[[-1,3398,"··"]],[3400,3400],[3398,3398]]],[1521689276453,["gengmei_pxf@gengmei123.local",[[1,3398,"````"]],[3398,3398],[3402,3402]]],[1521689277357,["gengmei_pxf@gengmei123.local",[[-1,3401,"`"]],[3402,3402],[3401,3401]]],[1521689279612,["gengmei_pxf@gengmei123.local",[[1,3542,"\n"]],[3541,3541],[3542,3542]]],[1521689280415,["gengmei_pxf@gengmei123.local",[[-1,3542,"\n"],[1,3543,"```"]],[3542,3542],[3545,3545]]],[1521689702170,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2413,"\n"]],[757,757],[2414,2414]]],[1521689702171,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2412,"\n"]],[2414,2414],[757,757]]],[1521689680254,["gengmei_pxf@gengmei123.local",[[1,3545,"\n\n# Android6.0运行时权限解决方案\n\n[![96](https://upload.jianshu.io/users/upload_avatars/2810405/85eda170-7242-4f5f-b099-9c1990c010f0.jpg?imageMogr2/auto-orient/strip|imageView2/1/w/96/h/96)](https://www.jianshu.com/u/1695117cc969) \n\n[uncochen](https://www.jianshu.com/u/1695117cc969) 关注\n\n2016.09.12 18:30* 字数 862 阅读 9532评论 10喜欢 48\n\n最近几天测试说我们的app在6.0的机型上经常崩溃,发现是6.0新的运行时权限的问题,这里给大家分享下我们适配6.0运行时权限的方案\n\n## 6.0之前的权限模型\n\n*   在`AndroidManifest`中声明可能用到的所有权限\n*   用户在安装时,系统展示所有权限,用户安装即授予所有权限,取消则拒绝安装\n\n## 6.0新的运行时权限\n\n*   将权限分为一般权限和危险权限两种,一般权限跟以前一样在`AndroidManifest`声明,危险权限需要开发者在代码中手动的动态申请\n*   动态申请权限,系统弹出对话框,用户可点击确定或拒绝,系统提供用户的选择回调,从而开发者处理相应的逻辑\n*   用户可以选择拒绝并不再提醒\n\n![](https://upload-images.jianshu.io/upload_images/2810405-668e6bed2a7074ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/366)\n\n## 运行时权限分类\n\n*   危险权限\n\n危险权限即需要动态申请的权限,一共9组,取得一组中某一个权限的授权,则自动拥有该组的所有授权\n\n```\n身体传感器\n日历\n摄像头\n通讯录\n地理位置\n麦克风\n电话\n短信\n存储空间\n\n```\n\n具体为:\n\n![](https://upload-images.jianshu.io/upload_images/2810405-21aaade062be609d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/639)\n\n*   一般权限\n\n除上面的危险权限之外的权限即为一般权限(普通权限)\n\n## 暂时不做运行时权限适配的方案(不推荐)\n\n如果暂时还不想适配6.0运行时权限,但是又想要app可以在6.0及以上机型运行,那我们可以将目标版本改为23以下,如:`targetSdkVersion 22`,这样做的效果:\n\n*   不管是6.0以下还是以上的机型都可以运行,跟之前一样权限在安装时一次性授予\n*   由于6.0机型在设置中可以进行权限管理,用户可以取消该应用的某个权限,但是app并不知道该权限被取消,此时app会崩溃(合理的try可以避免)\n\n![](https://upload-images.jianshu.io/upload_images/2810405-2b9b09f9be81474b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/366)\n\n## 适配6.0运行时权限推荐()\n\nok,这才是这篇文章的重点,前面的都是废话呢,23333,下面使用开源库`PermissionsDispatcher`来适配运行时权限.\n开源库地址:[https://github.com/hotchemi/PermissionsDispatcher](https://link.jianshu.com/?t=https://github.com/hotchemi/PermissionsDispatcher)\n\n*   效果图:\n\n![](https://upload-images.jianshu.io/upload_images/2810405-7e652a769ec48353.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/368)\n\n1,将`targetSdkVersion`升级为23及以上,如`targetSdkVersion 23`\n\n2,依赖开源库`PermissionsDispatcher`\nproject.gradle\n\n```\nbuildscript {\n    dependencies {\n        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'\n    }\n}\n\n```\n\napp.gradle\n\n```\napply plugin: 'android-apt'\n\ndependencies {\n    compile 'com.github.hotchemi:permissionsdispatcher:${latest.version}'\n    apt 'com.github.hotchemi:permissionsdispatcher-processor:${latest.version}'\n}\n\n```\n\n3,在需要运行时权限的Activity或Fragment中动态申请权限\n\n提供四种注解:\n\n```\n @RuntimePermissions 标记需要运行时判断的类(用于动态生成代理类)           \n @NeedsPermission 标记需要检查权限的方法\n @OnShowRationale 授权提示回调\n @OnPermissionDenied 授权被拒绝回调\n @OnNeverAskAgain 授权被拒绝并不再提醒回调\n\n```\n\n具体代码如下,关键代码都写了注释\n\n```\n@RuntimePermissions\npublic class PremissionsActivity extends IBaseActivity {\nprivate static final int CALL_CAMERA_REQUEST_CODE = 1;\n@Bind(R.id.btn_camera)\nButton mBtnCamera;\n@Bind(R.id.iv_logo)\nCircleImageView mIvLogo;\n\n@Override\nprotected void init() {\n\n}\n\n@Override\npublic int initLayout() {\n    return R.layout.activity_pre;\n}\n\n@OnClick(R.id.btn_camera)\npublic void onClick() {\n    PremissionsActivityPermissionsDispatcher.callPhoneWithCheck(this);//发起权限申请\n}\n\n@Override\npublic void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[]\n        grantResults) {\n    super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n    PremissionsActivityPermissionsDispatcher.onRequestPermissionsResult(this, requestCode, grantResults);//将回调交给代理类处理\n}\n\n@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    switch (requestCode) {\n        case CALL_CAMERA_REQUEST_CODE:\n            if (resultCode == Activity.RESULT_OK) {\n                Bitmap bmap = data.getParcelableExtra(\"data\");\n                mIvLogo.setImageBitmap(bmap);\n                IToast.show(\"头像保存成功\");\n            }\n\n            break;\n    }\n}\n\n@NeedsPermission(Manifest.permission.CAMERA)//权限申请成功\nvoid callPhone() {\n    Intent openCameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n    startActivityForResult(openCameraIntent, CALL_CAMERA_REQUEST_CODE);\n}\n\n@OnShowRationale(Manifest.permission.CAMERA)//申请前告知用户为什么需要该权限\nvoid showRationaleForCamera(PermissionRequest request) {\n    showRationaleDialog(\"使用此功能需要打开照相机的权限\", request);\n}\n\n@OnPermissionDenied(Manifest.permission.CAMERA)//被拒绝\nvoid onCameraDenied() {\n    IToast.show(\"你拒绝了权限，该功能不可用\");\n}\n\n@OnNeverAskAgain(Manifest.permission.CAMERA)//被拒绝并且勾选了不再提醒\nvoid onCameraNeverAskAgain() {\n    AskForPermission();\n}\n\n/**\n * 告知用户具体需要权限的原因\n * @param messageResId\n * @param request\n */\nprivate void showRationaleDialog(String messageResId, final PermissionRequest request) {\n    new AlertDialog.Builder(this)\n            .setPositiveButton(\"确定\", new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(@NonNull DialogInterface dialog, int which) {\n                    request.proceed();//请求权限\n                }\n            })\n            .setNegativeButton(\"取消\", new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(@NonNull DialogInterface dialog, int which) {\n                    request.cancel();\n                }\n            })\n            .setCancelable(false)\n            .setMessage(messageResId)\n            .show();\n}\n\n/**\n * 被拒绝并且不再提醒,提示用户去设置界面重新打开权限\n */\nprivate void AskForPermission() {\n    AlertDialog.Builder builder = new AlertDialog.Builder(this);\n    builder.setTitle(\"当前应用缺少拍照权限,请去设置界面打开\\n打开之后按两次返回键可回到该应用哦\");\n    builder.setNegativeButton(\"取消\", new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialog, int which) {\n\n        }\n    });\n    builder.setPositiveButton(\"设置\", new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialog, int which) {\n            Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n            intent.setData(Uri.parse(\"package:\" + getPackageName())); // 根据包名打开对应的设置界面\n            startActivity(intent);\n        }\n    });\n    builder.create().show();\n}\n\n}\n\n```\n\n关于上面的代码:\n\n*   `OnShowRationale`注解方法里的代码不是必须的,可以直接在该位置使用`request.proceed()`发起权限申请,我这里申请之前弹出对话框告知用户具体需要权限的原因,点击确定再发起权限申请\n*   `OnNeverAskAgain`注解方法里的代码也不是必须的,可以简单的处理,如弹土司告知用户\"需要权限才可以完成拍照\".我这里是引导用户去权限设置界面手动打开拍照权限\n\n* * *\n\n经过以上的处理,我们的app可以在6.0以下和6.0及以上的手机上顺利运行,并且更加符合动态权限的思想(需要的时候才去申请权限),用户在设置里取消授权,app也不会崩溃,并且有友好的提示及引导."]],[3545,3545],[9838,9838]]],[1521689689511,["gengmei_pxf@gengmei123.local",[[-1,3569,"[![96](https://upload.jianshu.io/users/upload_avatars/2810405/85eda170-7242-4f5f-b099-9c1990c010f0.jpg?imageMogr2/auto-orient/strip|imageView2/1/w/96/h/96)](https://www.jianshu.com/u/1695117cc969) \n\n[uncochen](https://www.jianshu.com/u/1695117cc969) 关注\n\n2016.09.12 18:30* 字数 862 阅读 9532评论 10喜欢 48\n\n最近几天测试说我们的app在6.0的机型上经常崩溃,发现是6.0新的运行时权限的问题,这里给大家分享下我们适配6.0运行时权限的方案"]],[3569,3933],[3569,3569]]],[1521689689975,["gengmei_pxf@gengmei123.local",[[-1,3570,"\n"]],[3569,3569],[3568,3568]]],[1521689690493,["gengmei_pxf@gengmei123.local",[[-1,3569,"\n"]],[3568,3568],[3567,3567]]],[1521689729241,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2413,"\n"],[-1,3545,"\n"],[1,9473,"\n"]],[757,757],[9474,9474]]],[1521689729241,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2412,"\n"],[1,3545,"\n"],[-1,9472,"\n"]],[9474,9474],[757,757]]],[1521689728170,["gengmei_pxf@gengmei123.local",[[1,4626,"PermissionsDispatcher"]],[4626,4626],[4647,4647]]],[1521689789252,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2414,"\n"],[-1,3546,"\n"],[1,4626,"("],[-1,4647,"("],[1,9494,"\n"]],[757,757],[9495,9495]]],[1521689789252,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2413,"\n"],[1,3546,"\n"],[-1,4625,"("],[1,4647,"("],[-1,9493,"\n"]],[9495,9495],[757,757]]],[1521689779446,["gengmei_pxf@gengmei123.local",[[1,9494,"\n"]],[9493,9493],[9494,9494]]],[1521689779766,["gengmei_pxf@gengmei123.local",[[1,9495,"\n"]],[9494,9494],[9495,9495]]],[1521689780161,["gengmei_pxf@gengmei123.local",[[1,9495,"### EventBus的机制是什么？和Handler的区别怎样？\n\n`EventBus`是采用观察者模式实现的事件订阅总线，可以用在应用程序中，组件之间，线程之间的通信，并且由于事件可以是任意类型的对象，所以使用起来更加的方便快捷。\n`Handler`是 Android 的消息机制，集中解决线程间通信问题。\n\n### 17\\. RxJava的机制是什么？\n\nRxJava是使用Java语言，以**响应式编程思维**来进行编程的Java类库。参考`ReactiveX`。"]],[9495,9495],[9731,9731]]],[1521689781832,["gengmei_pxf@gengmei123.local",[[-1,9496,"##"]],[9498,9498],[9496,9496]]],[1521689784927,["gengmei_pxf@gengmei123.local",[[-1,9651,"##"]],[9653,9653],[9651,9651]]],[1521689789134,["gengmei_pxf@gengmei123.local",[[-1,9651," 17\\."]],[9652,9656],[9651,9651]]],[1521689909257,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2414,"\n"],[-1,3546,"\n"],[1,4626,"("],[-1,4647,"("],[1,9494,"\n"]],[757,757],[9495,9495]]],[1521689909258,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2413,"\n"],[1,3546,"\n"],[-1,4625,"("],[1,4647,"("],[-1,9493,"\n"]],[9495,9495],[757,757]]],[1521689880172,["gengmei_pxf@gengmei123.local",[[1,9723,"\n"]],[9722,9722],[9723,9723]]],[1521689880538,["gengmei_pxf@gengmei123.local",[[1,9724,"\n"]],[9723,9723],[9724,9724]]],[1521689881016,["gengmei_pxf@gengmei123.local",[[1,9724,"### 18\\. Butterknife的机制是什么？\n\nJava Annotation Processing技术，[在Java代码编译成Java字节码的时候就已经处理了@Bind](mailto:%E5%9C%A8Java%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E6%88%90Java%E5%AD%97%E8%8A%82%E7%A0%81%E7%9A%84%E6%97%B6%E5%80%99%E5%B0%B1%E5%B7%B2%E7%BB%8F%E5%A4%84%E7%90%86%E4%BA%86@Bind)、@OnClick（ButterKnife还支持很多其他的注解）这些注解了。\n\n> **Annotation processing 是javac中用于编译时扫描和解析Java注解的工具**\n> Annotation processing是在编译阶段执行的，它的原理就是读入Java源代码，解析注解，然后生成新的Java代码。新生成的Java代码最后被编译成Java字节码，注解解析器（Annotation Processor）不能改变读入的Java 类，比如不能加入或删除Java方法。\n> 参考：[ButterKnife框架原理](http://bxbxbai.github.io/2016/03/12/how-butterknife-works/)\n\n### 19\\. Okhttp是基于HTTP连接还是Socket连接？\n\n基于`Http`的。\n\n### 20\\. 例举一种ORM框架，说说它的优缺点。\n\n我熟悉的两种`GreenDao3`和`AndroidActive`，GreenDao 比较常规，注解不多（我这里都是指3.0版本后，之前的版本在生存实体的时候略显麻烦。），AndroidActive 相对而言注解较多，最后的综合性能上 GreenDao 排第一毫无争议。硬要说缺点的话就是 GreenDao 体积稍大。"]],[9724,9724],[10564,10564]]],[1521689883666,["gengmei_pxf@gengmei123.local",[[-1,9725,"##"]],[9725,9727],[9725,9725]]],[1521689886356,["gengmei_pxf@gengmei123.local",[[-1,9726,"18\\. "]],[9726,9731],[9726,9726]]],[1521689892100,["gengmei_pxf@gengmei123.local",[[-1,10032,">"],[1,10033,"*"]],[10032,10033],[10033,10033]]],[1521689895556,["gengmei_pxf@gengmei123.local",[[-1,10087,">"],[1,10088,"*"]],[10087,10088],[10088,10088]]],[1521689898772,["gengmei_pxf@gengmei123.local",[[-1,10236,">"],[1,10237,"*"]],[10236,10237],[10237,10237]]],[1521689904386,["gengmei_pxf@gengmei123.local",[[-1,10321,"## 19\\."]],[10321,10328],[10321,10321]]],[1521689911036,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2414,"\n"],[-1,3546,"\n"],[1,4626,"("],[-1,4647,"("],[1,9494,"\n"]],[757,757],[9495,9495]]],[1521689911036,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2413,"\n"],[1,3546,"\n"],[-1,4625,"("],[1,4647,"("],[-1,9493,"\n"]],[9495,9495],[757,757]]],[1521689909450,["gengmei_pxf@gengmei123.local",[[-1,10363,"## 20\\."]],[10363,10371],[10364,10364]]],[1521690130111,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2414,"\n"],[-1,3546,"\n"],[1,4626,"("],[-1,4647,"("],[1,9494,"\n"]],[757,757],[9495,9495]]],[1521690130111,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2413,"\n"],[1,3546,"\n"],[-1,4625,"("],[1,4647,"("],[-1,9493,"\n"]],[9495,9495],[757,757]]],[1521690103805,["gengmei_pxf@gengmei123.local",[[1,10384,"\n"]],[10382,10382],[10383,10383]]],[1521690104173,["gengmei_pxf@gengmei123.local",[[1,10385,"\n"]],[10383,10383],[10384,10384]]],[1521690104690,["gengmei_pxf@gengmei123.local",[[1,10384,"其全称叫做对象关系映射（Object Relation Mapping），是一种程序设计技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。从效果上说，它其实是创建了一个可在编程语言里使用的“虚拟对象数据库”。\n面向对象是从软件工程基本原则(如耦合、聚合、封装)的基础上发展起来的，而关系数据库则是从数学理论发展而来的.  两者之间是不匹配的.而ORM作为项目中间件形式实现数据在不同场景下数据关系映射. 对象关系映射是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术.ORM就是这样而来的。\n\n下面先列出几个ORM框架：[ORMLite](http://ormlite.com/)、[greendao](http://greendao-orm.com/)、[ormndroid](https://github.com/roscopeco/ormdroid)、[androrm](http://www.androrm.com/)、[ActiveAndroid](http://www.activeandroid.com/)\n\n其中以前最早接触过ormlite，GreenDao了解过，其他的几个真没怎么见过。所以这里主要介绍ormlite和GreenDao。\n\n最开始现在stackoverflow输入sqlite orm关键字，搜索出了一些相关的文章：[http://stackoverflow.com/search?q=sqlite+orm](http://stackoverflow.com/search?q=sqlite+orm) ，你会发现很有趣的是，ormlite的作者[Gray](http://stackoverflow.com/users/179850/gray)和greenDao的开发团队[green robot](http://stackoverflow.com/users/551269/greenrobot)同时出现在一些帖子中，向提问者推荐他们的框架。当然也会有一些热心的朋友推荐ormdroid。其实不论在stackoverflow上还是官网上，greenDao的团队的比较都是针对ORMLite的，可见，其主要的竞争对手，或许称互相促进者更合适，毕竟他们没有什么商业利益，完全开源。所以开源的ORM框架中，ormLite和greenDao是最火的。"]],[10384,10384],[11385,11385]]],[1521690107948,["gengmei_pxf@gengmei123.local",[[1,10495,"\n"],[-1,10550," "],[1,10551," "],[-1,11063," "],[1,11064," "]],[10495,10495],[10496,10496]]],[1521690113791,["gengmei_pxf@gengmei123.local",[[1,10384,"* "]],[10384,10384],[10386,10386]]],[1521690115911,["gengmei_pxf@gengmei123.local",[[1,10498,"* "]],[10498,10498],[10500,10500]]],[1521690119416,["gengmei_pxf@gengmei123.local",[[1,10647,"* "]],[10647,10647],[10649,10649]]],[1521690123045,["gengmei_pxf@gengmei123.local",[[1,10864,"* "]],[10864,10864],[10866,10866]]],[1521690125119,["gengmei_pxf@gengmei123.local",[[1,10934,"* "]],[10934,10934],[10936,10936]]],[1521690128603,["gengmei_pxf@gengmei123.local",[[1,11398,"* "]],[11398,11398],[11400,11400]]],[1521690236778,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2414,"\n"],[-1,3546,"\n"],[1,4626,"("],[-1,4647,"("],[1,9494,"\n"]],[757,757],[9495,9495]]],[1521690236779,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2413,"\n"],[1,3546,"\n"],[-1,4625,"("],[1,4647,"("],[-1,9493,"\n"]],[9495,9495],[757,757]]],[1521690213319,["gengmei_pxf@gengmei123.local",[[1,11560,"\n"]],[11559,11559],[11560,11560]]],[1521690213639,["gengmei_pxf@gengmei123.local",[[1,11561,"\n"]],[11560,11560],[11561,11561]]],[1521690214053,["gengmei_pxf@gengmei123.local",[[1,11561,"**ormlite**\n基于注解和反射的的方式,导致ormlite性能有着一定的损失(注解其实也是利用了反射的原理) \n\n**优点：**\n文档较全面，社区活跃，有好的维护，使用简单，易上手。 \n\n**缺点：**\n基于反射，效率较低 \n\n**GreenDao** \n\n官网中明确指明了其首要设计目标:\nMaximum performance (probably the fastest ORM for Android):系能最大化\nEasy to use APIs：便于使用\nHighly optimized for Android：对于Android高度优化\nMinimal memory consumption：最小化内存开销\nSmall library size, focus on the essentials：较小的文件体积，只集中在必要的部分上。\n\n**优点：**\n效率很高，插入和更新的速度是sqlite的2倍，加载实体的速度是ormlite的4.5倍。[官网测试结果：http:/](http://greendao-orm.com/features/)\n\n[/greendao-orm.com/features/](http://greendao-orm.com/features/)\n文件较小（<100K），占用更少的内存 ，但是需要create Dao，\n操作实体灵活：支持get，update，delete等操作 \n\n**缺点：**\n\n学习成本较高。其中使用了一个java工程根据一些属性和规则去generate一些基础代码，类似于javaBean但会有一些规则，另外还有QueryBuilder、Dao等API，所以首先要明白整个过程，才能方便使用。没有ORMLite那样封装的完整，不过greenDao的官网上也提到了这一点，正是基于generator而不是反射，才使得其效率高的多。\n\n 另外GreenDao支持Protocol buffers协议数据的直接存储 ，如果通过protobuf协议和服务器交互，不需要任何的映射。 \n\n[Protocol Buffers](https://code.google.com/p/protobuf/)协议：以一种高效可扩展的对结构化数据进行编码的方式。google内部的RPC协议和文件格式大部分都是使用它。\nRPC：远程过程调用（Remote Procedure Call，RPC）是一个计算机通信协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。\n\n可能因为GreenDao的效率高，而且需要学习成本高点，所以个人还是有兴趣学一学的。接下来会发布一些GreenDao更详细的文章，有对官方文档的翻译还有代码的简单讲解。"]],[11561,11561],[12722,12722]]],[1521690227912,["gengmei_pxf@gengmei123.local",[[1,11562," *"]],[11561,11561],[11563,11563]]],[1521690229151,["gengmei_pxf@gengmei123.local",[[1,11625," *"]],[11624,11624],[11626,11626]]],[1521690230225,["gengmei_pxf@gengmei123.local",[[1,11664," *"]],[11663,11663],[11665,11665]]],[1521690231584,["gengmei_pxf@gengmei123.local",[[-1,11664," *"]],[11665,11665],[11663,11663]]],[1521690232144,["gengmei_pxf@gengmei123.local",[[-1,11625," *"]],[11626,11626],[11624,11624]]],[1521690234960,["gengmei_pxf@gengmei123.local",[[-1,11562," *"]],[11563,11563],[11561,11561]]],[1521690261377,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2414,"\n"],[-1,3546,"\n"],[1,4626,"("],[-1,4647,"("],[1,9494,"\n"]],[757,757],[9495,9495]]],[1521690261377,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2413,"\n"],[1,3546,"\n"],[-1,4625,"("],[1,4647,"("],[-1,9493,"\n"]],[9495,9495],[757,757]]],[1521690257277,["gengmei_pxf@gengmei123.local",[[1,11561,"\n"]],[11560,11560],[11561,11561]]],[1521690259983,["gengmei_pxf@gengmei123.local",[[1,11561,"## ORMLite和GreenDao做个简单的比较"]],[11561,11561],[11587,11587]]],[1521690260645,["gengmei_pxf@gengmei123.local",[[1,11588,"\n"]],[11587,11587],[11588,11588]]],[1521690424810,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2414,"\n"],[-1,3546,"\n"],[1,4626,"("],[-1,4647,"("],[1,9494,"\n"]],[757,757],[9495,9495]]],[1521690424810,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2413,"\n"],[1,3546,"\n"],[-1,4625,"("],[1,4647,"("],[-1,9493,"\n"]],[9495,9495],[757,757]]],[1521690416767,["gengmei_pxf@gengmei123.local",[[1,12751,"\n"]],[12750,12750],[12751,12751]]],[1521690416919,["gengmei_pxf@gengmei123.local",[[1,12752,"\n"]],[12751,12751],[12752,12752]]],[1521690417428,["gengmei_pxf@gengmei123.local",[[1,12752,"*   Bitmap 使用时候注意什么？\n\n*   Oom 是否可以try catch ？\n\n*   内存泄露如何产生？\n\n*   适配器模式，装饰者模式，外观模式的异同？\n\n*   ANR 如何产生？\n\n*   String buffer 与string builder 的区别？\n\n*   如何保证线程安全？\n\n*   java四中引用\n\n*   Jni 用过么？\n\n*   多进程场景遇见过么？\n\n*   关于handler，在任何地方new handler 都是什么线程下\n\n*   sqlite升级，增加字段的语句\n\n*   bitmap recycler 相关\n\n*   强引用置为null，会不会被回收？\n\n*   glide 使用什么缓存？\n\n*   Glide 内存缓存如何控制大小？\n\n*   如何保证多线程读写文件的安全？"]],[12752,12752],[13124,13124]]],[1521690664817,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2414,"\n"],[-1,3546,"\n"],[1,4626,"("],[-1,4647,"("],[1,9494,"\n"]],[757,757],[9495,9495]]],[1521690664817,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2413,"\n"],[1,3546,"\n"],[-1,4625,"("],[1,4647,"("],[-1,9493,"\n"]],[9495,9495],[757,757]]],[1521690652746,["gengmei_pxf@gengmei123.local",[[1,12798,"try catch 是可以解决oom后出现的崩溃，然后采取补救的措施，例如缩小图片，减少内存占用。但是这并不是解决oom的根本方法，要解决oom还必须知道oom的出现原因，来提前做出应对措施。"]],[12798,12798],[12894,12894]]],[1521690656827,["gengmei_pxf@gengmei123.local",[[-1,12774,"*"],[1,12775,"#"]],[12774,12775],[12775,12775]]],[1521690658911,["gengmei_pxf@gengmei123.local",[[1,12895,"\n"]],[12894,12894],[12895,12895]]],[1521690890835,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2414,"\n"],[-1,3546,"\n"],[1,4626,"("],[-1,4647,"("],[1,9494,"\n"]],[757,757],[9495,9495]]],[1521690890835,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2413,"\n"],[1,3546,"\n"],[-1,4625,"("],[1,4647,"("],[-1,9493,"\n"]],[9495,9495],[757,757]]],[1521690855820,["gengmei_pxf@gengmei123.local",[[-1,12752,"*"],[1,12753,"#"]],[12752,12753],[12753,12753]]],[1521690857849,["gengmei_pxf@gengmei123.local",[[1,12774,"\n"]],[12773,12773],[12774,12774]]],[1521690858072,["gengmei_pxf@gengmei123.local",[[1,12775,"\n"]],[12774,12774],[12775,12775]]],[1521690858955,["gengmei_pxf@gengmei123.local",[[1,12774,"高效地加载大图片。\n\n　　BitmapFactory类提供了一些加载图片的方法：decodeByteArray(), decodeFile(), decodeResource(), 等等。\n\n　　为了避免占用较大内存，经常使用BitmapFactory.Options 类，设置inJustDecodeBounds属性为true。\n\n// BitmapFactory.Options options = new BitmapFactory.Options();\noptions.inJustDecodeBounds =true;\nBitmapFactory.decodeResource(getResources(), R.id.myimage, options);\n\n　　为了避免java.lang.OutOfMemory 的异常，我们在真正decode图片之前检查它的尺寸，除非你确定这个数据源提供了准确无误的图片且不会导致占用过多的内存。\n\n加载一个按比例缩小的版本到内存中。例如，如果把一个原图是1024*768 pixel的图片显示到ImageView为128*96 pixel的缩略图就没有必要把整张图片都加载到内存中。为了告诉解码器去加载一个较小的图片到内存，需要在你的BitmapFactory.Options 中设置 inSampleSize 为true 。例如, 一个分辨率为2048x1536 的图片，如果设置inSampleSize 为4，那么会产出一个大概为512x384的图片。加载这张小的图片仅仅使用大概0.75MB，如果是加载全图那么大概要花费12MB(假设bitmap的配置是ARGB_8888).\n\n2   不要在主线程处理图片。\n\n　　众所周知的问题，不再赘述。\n\n　　注意两点：1\\.  为了保证使用的资源能被回收，建议使用WeakReference, 以应用内存内存紧张时，回收部分资源，保证程序进程不被杀死。\n\n　　　　　2\\.  避免异步任务的长时间耗时操作，在任务执行结束后，及时释放资源。\n\n3   管理Bitmap内存。\n\n　　在Android开发中，加载一个图片到界面很容易，但如果一次加载大量图片就复杂多了。在很多情况下（比如：ListView,GridView或ViewPager），能够滚动的组件需要加载的图片几乎是无限多的。\n\n　　有些组件的child view在不显示时会回收，并循环使用，如果没有任何对bitmap的持久引用的话，垃圾回收器会释放你加载的bitmap。这没什么问题，但当这些图片再次显示的时候，要想避免重复处理这些图片，从而达到加载流畅的效果，就要使用内存缓存和本地缓存了，这些缓存可以让你快速加载处理过的图片。\n\n3.1 内存缓存\n\n　　内存缓存以牺牲内存的代价，带来快速的图片访问。LruCache类（API Level 4之前可以使用Support Library）非常适合图片缓存任务，在一个LinkedHashMap中保存着对Bitmap的强引用，当缓存数量超过容器容量时，删除最近最少使用的成员（LRU）。\n\n　　注意：在过去，非常流行用SoftReference或WeakReference来实现图片的内存缓存，但现在不再推荐使用这个方法了。因为从Android 2.3 （API Level 9）之后，垃圾回收器会更积极的回收soft/weak的引用，这将导致使用soft/weak引用的缓存几乎没有缓存效果。顺带一提，在Android3.0（API Level 11）以前，bitmap是储存在native 内存中的，所以系统以不可预见的方式来释放bitmap，这可能会导致短时间超过内存限制从而造成崩溃。\n\n　　为了给LruCache一个合适的容量，需要考虑很多因素，比如：\n\n    　　你其它的Activity 和/或 Application是怎样使用内存的？\n\n    　　屏幕一次显示多少图片？需要多少图片为显示到屏幕做准备？\n\n    　　屏幕的大小(size)和密度(density)是多少？像Galaxy Nexus这样高密度（xhdpi）的屏幕在缓存相同数量的图片时，就需要比低密度屏幕Nexus S（hdpi）更大的内存。\n\n    　　每个图片的尺寸多大，相关配置怎样的，占用多大内存？\n\n    　　图片的访问频率高不高？不同图片的访问频率是否不一样？如果是，你可能会把某些图片一直缓存在内存中，或需要多种不同缓存策略的LruCache。\n\n    　　你能平衡图片的质量和数量吗？有时候，缓存多个质量低的图片是很有用的，而质量高的图片应该（像下载文件一样）在后台任务中加载。\n\n　　这里没有适应所有应用的特定大小或公式，只能通过分析具体的使用方法，来得出合适的解决方案。缓存太小的话没有实际用处，还会增加额外开销；缓存太大的话，会再一次造成OutOfMemory异常，并给应用的其他部分留下很少的内存。\n\n3.2 使用磁盘缓存\n\n　　内存缓存能够加快对最近显示过的图片的访问速度，然而你不能认为缓存中的图片全是有效的。像GridView这样需要大量数据的组件是很容易填满内存缓存的。你的应用可能会被别的任务打断（比如一个来电），它可能会在后台被杀掉，其内存缓存当然也被销毁了。当用户恢复你的应用时，应用将重新处理之前缓存的每一张图片。\n\n　　在这个情形中，使用磁盘缓存可以持久的储存处理过的图片，并且缩短加载内存缓存中无效的图片的时间。当然从磁盘加载图片比从内存中加载图片要慢的多，并且由于磁盘读取的时间是不确定的，所以要在后台线程进行磁盘加载。\n\n注意：如果以更高的频率访问图片，比如图片墙应用，使用ContentProvider可能更适合储存图片缓存。"]],[12774,12774],[15165,15165]]],[1521690873926,["gengmei_pxf@gengmei123.local",[[1,12774,"#"],[-1,12864," "],[1,12865," "],[-1,12908," "],[1,12909," "],[-1,13136," "],[1,13137," "],[-1,13337," 中设置 "],[1,13342," 中设置 "],[-1,13354," "],[1,13355," "],[-1,13360," "],[1,13361," "],[-1,13365," "],[1,13366," "],[-1,13381," "],[1,13382," "],[-1,13402," "],[1,13403," "],[-1,13493,"  "],[1,13495,"  "],[-1,13537," "],[1,13538," "],[-1,13570," "],[1,13571," "],[-1,13611," "],[1,13612," "],[-1,13646,"  "],[1,13648,"  "],[-1,13926," "],[1,13927," "],[-1,14157," "],[1,14158," "],[-1,14277," "],[1,14278," "],[-1,14364,"    "],[1,14368,"    "],[-1,14382," 和/或 "],[1,14387," 和/或 "],[-1,14409,"    "],[1,14413,"    "],[-1,14444,"    "],[1,14448,"    "],[-1,14547,"    "],[1,14551,"    "],[-1,14580,"    "],[1,14584,"    "],[-1,14657,"    "],[1,14661,"    "],[-1,14843," "],[1,14844," # "]],[12774,12774],[12777,12777]]],[1521690877356,["gengmei_pxf@gengmei123.local",[[1,13495,"## "]],[13495,13495],[13498,13498]]],[1521690881074,["gengmei_pxf@gengmei123.local",[[1,13651,"## "]],[13651,13651],[13654,13654]]],[1521690883708,["gengmei_pxf@gengmei123.local",[[1,13932,"### "]],[13932,13932],[13936,13936]]],[1521690888293,["gengmei_pxf@gengmei123.local",[[1,14853,"## "]],[14853,14853],[14856,14856]]],[1521690890034,["gengmei_pxf@gengmei123.local",[[1,14855,"#"]],[14855,14855],[14856,14856]]],[1521690950834,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2414,"\n"],[-1,3546,"\n"],[1,4626,"("],[-1,4647,"("],[1,9495,"\n"],[1,12775,"# "],[-1,13493,"2 "],[1,13497," 2"],[-1,13649,"3 "],[1,13653," 3"],[-1,13930,"3."],[1,13936,"3."],[-1,14851,"3."],[1,14857,"3."],[-1,14858," #"]],[757,757],[14858,14858]]],[1521690950834,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2413,"\n"],[1,3546,"\n"],[-1,4625,"("],[1,4647,"("],[-1,9494,"\n"],[-1,12775,"# "],[1,13495,"2 "],[-1,13497," 2"],[1,13651,"3 "],[-1,13653," 3"],[1,13932,"3."],[-1,13936,"3."],[1,14853,"3."],[-1,14857,"3."],[1,14860," #"]],[14858,14858],[757,757]]],[1521690942847,["gengmei_pxf@gengmei123.local",[[-1,15306,"*"]],[15307,15307],[15306,15306]]],[1521690943640,["gengmei_pxf@gengmei123.local",[[1,15306,"#"]],[15306,15306],[15307,15307]]],[1521690947759,["gengmei_pxf@gengmei123.local",[[-1,15321,"*"]],[15322,15322],[15321,15321]]],[1521690948265,["gengmei_pxf@gengmei123.local",[[1,15321,"#"]],[15321,15321],[15322,15322]]],[1521690962379,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2414,"\n"],[-1,3546,"\n"],[1,4626,"("],[-1,4647,"("],[1,9495,"\n"],[1,12775,"# "],[-1,13493,"2 "],[1,13497," 2"],[-1,13649,"3 "],[1,13653," 3"],[-1,13930,"3."],[1,13936,"3."],[-1,14851,"3."],[1,14857,"3."],[-1,14858," #"]],[757,757],[14858,14858]]],[1521690962379,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2413,"\n"],[1,3546,"\n"],[-1,4625,"("],[1,4647,"("],[-1,9494,"\n"],[-1,12775,"# "],[1,13495,"2 "],[-1,13497," 2"],[1,13651,"3 "],[-1,13653," 3"],[1,13932,"3."],[-1,13936,"3."],[1,14853,"3."],[-1,14857,"3."],[1,14860," #"]],[14858,14858],[757,757]]],[1521690950870,["gengmei_pxf@gengmei123.local",[[1,15347,"\n"]],[15346,15346],[15347,15347]]],[1521690951363,["gengmei_pxf@gengmei123.local",[[1,15348,"\n"]],[15347,15347],[15348,15348]]],[1521690952086,["gengmei_pxf@gengmei123.local",[[1,15347,"概念：\n适配器模式，一个适配允许通常因为接口不兼容而不能在一起工作的类工作在一起，做法是将类自己的接口包裹在一个已存在的类中。\n\n装饰器模式，原有的不能满足现有的需求，对原有的进行增强。\n\n代理模式，同一个类而去调用另一个类的方法，不对这个方法进行直接操作。\n\n外观模式，我们通过外观的包装，使应用程序只能看到外观对象，而不会看到具体的细节对象，这样无疑会降低应用程序的复杂度，并且提高了程序的可维护性。\n\n区别：\n代理模式是与原对象实现同一个接口，必须要实现原接口和持有真实的对象，才能称之为代理类。代理模式一定是自身持有这个对象，不需要从外部传入。用代理模式，代理类可以对它的客户隐藏一个对象的具体信息。因此，当使用代理模式的时候，我们常常在一个代理类中创建一个对象的实例。\n\n装饰模式的一定是从外部传入，并且可以没有顺序，按照代码的实际需求随意挑换顺序。当我们使用装饰器模式的时候，我们通常的做法是将原始对象作为一个参数传给装饰者的构造器。\n\n适配器类则是匹配新接口，从代码上的特点来说，适配类持有新的目标对象（对象适配器）。\n\n代理模式注重的是隔离限制，关注于控制对对象的访问，让外部不能访问你实际的调用对象，比如权限控制。代理和真实对象之间的的关系通常在编译时就已经确定了。\n装饰模式注重的是功能的拓展，关注于在一个对象上动态的添加方法，在同一个方法下实现更多的功能。装饰者能够在运行时递归地被构造。 \n适配器模式注重的是接口的兼容。 \n外观模式注重的是多个类的集成、统一适配。"]],[15347,15347],[15991,15991]]],[1521690955079,["gengmei_pxf@gengmei123.local",[[1,15347,"#"],[-1,15952," "],[1,15953," "],[-1,15969," "],[1,15970," # "]],[15347,15347],[15350,15350]]],[1521690958417,["gengmei_pxf@gengmei123.local",[[1,15554,"## "]],[15554,15554],[15557,15557]]],[1521691082404,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2414,"\n"],[-1,3546,"\n"],[1,4626,"("],[-1,4647,"("],[1,9495,"\n"],[1,12775,"# "],[-1,13493,"2 "],[1,13497," 2"],[-1,13649,"3 "],[1,13653," 3"],[-1,13930,"3."],[1,13936,"3."],[-1,14851,"3."],[1,14857,"3."],[-1,14858," #"],[1,15348,"# "],[-1,15552,"区别"],[1,15557,"区别"],[1,15958,""],[-1,15973," #"]],[757,757],[15973,15973]]],[1521691082404,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2413,"\n"],[1,3546,"\n"],[-1,4625,"("],[1,4647,"("],[-1,9494,"\n"],[-1,12775,"# "],[1,13495,"2 "],[-1,13497," 2"],[1,13651,"3 "],[-1,13653," 3"],[1,13932,"3."],[-1,13936,"3."],[1,14853,"3."],[-1,14857,"3."],[1,14860," #"],[-1,15348,"# "],[1,15554,"区别"],[-1,15557,"区别"],[-1,15960,""],[1,15975," #"]],[15973,15973],[757,757]]],[1521691033430,["gengmei_pxf@gengmei123.local",[[-1,16054,"*"],[1,16055,"#"]],[16054,16055],[16055,16055]]],[1521691035310,["gengmei_pxf@gengmei123.local",[[1,16069,"\n"]],[16067,16067],[16068,16068]]],[1521691035778,["gengmei_pxf@gengmei123.local",[[1,16070,"\n"]],[16068,16068],[16069,16069]]],[1521691036165,["gengmei_pxf@gengmei123.local",[[1,16069,"# Android 里面的 Handler 究竟是如何保证线程安全的？"]],[16069,16069],[16104,16104]]],[1521691038424,["gengmei_pxf@gengmei123.local",[[1,16070,"#"]],[16070,16070],[16071,16071]]],[1521691048634,["gengmei_pxf@gengmei123.local",[[1,16107,"\n"]],[16105,16105],[16106,16106]]],[1521691049236,["gengmei_pxf@gengmei123.local",[[1,16106,"关键在于handler操作的MessageQueue是线程安全的，请看MessageQueue的message入队方法，看到synchronized关键字没有"]],[16106,16106],[16185,16185]]],[1521691142392,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2414,"\n"],[-1,3546,"\n"],[1,4626,"("],[-1,4647,"("],[1,9495,"\n"],[1,12775,"# "],[-1,13493,"2 "],[1,13497," 2"],[-1,13649,"3 "],[1,13653," 3"],[-1,13930,"3."],[1,13936,"3."],[-1,14851,"3."],[1,14857,"3."],[-1,14858," #"],[1,15348,"# "],[-1,15552,"区别"],[1,15557,"区别"],[1,15958,""],[-1,15973," #"]],[757,757],[15973,15973]]],[1521691142392,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2413,"\n"],[1,3546,"\n"],[-1,4625,"("],[1,4647,"("],[-1,9494,"\n"],[-1,12775,"# "],[1,13495,"2 "],[-1,13497," 2"],[1,13651,"3 "],[-1,13653," 3"],[1,13932,"3."],[-1,13936,"3."],[1,14853,"3."],[-1,14857,"3."],[1,14860," #"],[-1,15348,"# "],[1,15554,"区别"],[-1,15557,"区别"],[-1,15960,""],[1,15975," #"]],[15973,15973],[757,757]]],[1521691135725,["gengmei_pxf@gengmei123.local",[[1,16068,"android的UI操作不是线程安全的，同时也只有主线程才能够操作UI，同时主线程对于UI操作有一定的时间限制（最长5秒）。为了能够做一些比较耗时的操作（比如下载、打开大文件等），android提供了一些列机制。\n\n线程安全：如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的，或者说:一个类或者程序所提供的接口对于线程来说是原子操作或者多个线程之间的切换不会导致该接口的执行结果存在二义性,也就是说我们不用考虑同步的问题 。 \n\n当一个程序第一次启动的时候，Android会启动一个LINUX进程和一个主线程。默认的情况下，所有该程序的组件都将在该进程和线程中运行 。主线程（Main Thread）主要负责处理与UI相关的事件，如：用户的按键事件，用户接触屏幕的事件以及屏幕绘图事 件，并把相关的事件分发到对应的组件进行处理。所以主线程通常又被叫做UI线 程。UI线程才能与Android UI工具包中的组件进行交互，在开发Android应用时必须遵守单线程模型的原则： Android UI操作并不是线程安全的并且这些操作必须在UI线程中执行。  \n\n当主线程正在做一些比较耗时的操作的时候，如正从网络上下载一个大图片，或者访问数据库，由于主线程被这些耗时的操作阻塞住，无法及时的响 应用户的事件，从用户的角度看会觉得程序已经死掉。如果程序长时间不响应，用户还可能得重启系统。为了避免这样的情况，Android设 置了一个5秒 的超时时间，一旦用户的事件由于主线程阻塞而超过5秒 钟没有响应，Android会弹出一个应用程序没有响应的对话框。\n\nAndroid的UI是单线程(Single-threaded)的。为了避免拖住GUI，一些较费时的对象应该交给独立的线程去执行。但幕后的线程来执行UI对象，Android就会发出错误讯息 CalledFromWrongThreadException。 \n\n通过创建一个Handler子类的对象，每个acvivity只需一个Handler对象。后台进程可通过两种方式Handler进行通信：message和Runnable对象，其结果实质都是将在Handler的队列中放入内容，message是放置信息，可以传递一些参数，Handler获取这些信息并将判度如何处理，而Runnable则是直接给出处理的方法。队列就是依次执行，Handler会处理完一个消息或者执行完某个处理在进行下一步，这样不会出现多个线程同时要求进行UI处理而引发的混乱现象。\n\n这些队列中的内容（无论Message还是Runnable）可以要求马上执行，延迟一定时间执行或者指定某个时刻执行，如果将他们放置在队列头，则表示具有最高有限级别，立即执行。这些函数包括有:sendMessage(), sendMessageAtFrontOfQueue(), sendMessageAtTime(), sendMessageDelayed()以及用于在队列中加入Runnable的post(), postAtFrontOfQueue(), postAtTime(),postDelay()。"]],[16068,16068],[17434,17434]]],[1521691262408,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2414,"\n"],[-1,3546,"\n"],[1,4626,"("],[-1,4647,"("],[1,9495,"\n"],[1,12775,"# "],[-1,13493,"2 "],[1,13497," 2"],[-1,13649,"3 "],[1,13653," 3"],[-1,13930,"3."],[1,13936,"3."],[-1,14851,"3."],[1,14857,"3."],[-1,14858," #"],[1,15348,"# "],[-1,15552,"区别"],[1,15557,"区别"],[1,15958,""],[-1,15973," #"]],[757,757],[15973,15973]]],[1521691262408,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2413,"\n"],[1,3546,"\n"],[-1,4625,"("],[1,4647,"("],[-1,9494,"\n"],[-1,12775,"# "],[1,13495,"2 "],[-1,13497," 2"],[1,13651,"3 "],[-1,13653," 3"],[1,13932,"3."],[-1,13936,"3."],[1,14853,"3."],[-1,14857,"3."],[1,14860," #"],[-1,15348,"# "],[1,15554,"区别"],[-1,15557,"区别"],[-1,15960,""],[1,15975," #"]],[15973,15973],[757,757]]],[1521691261022,["gengmei_pxf@gengmei123.local",[[-1,16606,"  "],[1,16608,"  "],[1,17723,"\n"]],[17724,17724],[17725,17725]]],[1521691261206,["gengmei_pxf@gengmei123.local",[[1,17726,"\n"]],[17725,17725],[17726,17726]]],[1521691262103,["gengmei_pxf@gengmei123.local",[[1,17725," \n\n# [Android图片加载框架最全解析（三），深入探究Glide的缓存机制](http://blog.csdn.net/sinyu890807/article/details/54895665)"]],[17725,17725],[17826,17826]]],[1521691322505,[null,[[-1,757," 二一"],[1,760,"第二"],[1,763," "],[-1,2215,"\n"],[1,2414,"\n"],[-1,3546,"\n"],[1,4626,"("],[-1,4647,"("],[1,9495,"\n"],[1,12775,"# "],[-1,13493,"2 "],[1,13497," 2"],[-1,13649,"3 "],[1,13653," 3"],[-1,13930,"3."],[1,13936,"3."],[-1,14851,"3."],[1,14857,"3."],[-1,14858," #"],[1,15348,"# "],[-1,15552,"区别"],[1,15557,"区别"],[1,15958,""],[-1,15973," #"]],[757,757],[15973,15973]]],[1521691322505,[null,[[1,757," 二一"],[-1,757,"第二"],[-1,762," "],[1,2215,"\n"],[-1,2413,"\n"],[1,3546,"\n"],[-1,4625,"("],[1,4647,"("],[-1,9494,"\n"],[-1,12775,"# "],[1,13495,"2 "],[-1,13497," 2"],[1,13651,"3 "],[-1,13653," 3"],[1,13932,"3."],[-1,13936,"3."],[1,14853,"3."],[-1,14857,"3."],[1,14860," #"],[-1,15348,"# "],[1,15554,"区别"],[-1,15557,"区别"],[-1,15960,""],[1,15975," #"]],[15973,15973],[757,757]]],[1521691264655,["gengmei_pxf@gengmei123.local",[[-1,17725," "],[1,17726," "],[-1,17728,"# "]],[17730,17730],[17728,17728]]],[1521691265052,["gengmei_pxf@gengmei123.local",[[-1,17727,"\n"]],[17728,17728],[17727,17727]]],[1521691265443,["gengmei_pxf@gengmei123.local",[[-1,17726,"\n"]],[17727,17727],[17726,17726]]]]]]}
{"compress":true,"commitItems":[["ca7617e8-db4f-4d73-8e9a-8bebfe2ed3cb",1521872569325,"",[[1521872529809,["gengmei_pxf@gengmei123.local",[[1,0,"Android 内置和外置存储卡\n===\n\n\n# [彻底理解android中的内部存储与外部存储](http://www.androidchina.net/4106.html)\n\n[ 新手入门](http://www.androidchina.net/dev/beginner)  [AndroidChina](http://www.androidchina.net/author/androidchina)  2年前 (2016-01-09)  19650浏览  [0评论](http://www.androidchina.net/4106.html#comments)\n\n我们先来考虑这样一个问题：\n\n打开手机设置，选择应用管理，选择任意一个App，然后你会看到两个按钮，一个是清除缓存，另一个是清除数据，那么当我们点击清除缓存的时候清除的是哪里的数据？当我们点击清除数据的时候又是清除的哪里的数据？读完本文相信你会有答案。\n\n在android开发中我们常常听到这样几个概念，内存，内部存储，外部存储，很多人常常将这三个东西搞混，那么我们今天就先来详细说说这三个东西是怎么回事？\n\n内存，我们在英文中称作memory，内部存储，我们称为InternalStorage，外部存储我们称为ExternalStorage，这在英文中本不会产生歧义，但是当我们翻译为中文之后，前两个都简称为内存，于是，混了。\n\n那么究竟什么是内部存储什么是外部存储呢？\n\n首先我们打开DDMS，有一个File Explorer，如下：\n\n![](http://img.blog.csdn.net/20151211224232123?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n这里有三个文件夹需要我们重视，一个是data，一个是mnt，一个是storage，我们下面就详细说说这三个文件夹。\n\n## 1.内部存储\n\ndata文件夹就是我们常说的内部存储，当我们打开data文件夹之后（没有root的手机不能打开该文件夹），里边有两个文件夹值得我们关注，如下：\n\n![](http://img.blog.csdn.net/20151211224609474?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n一个文件夹是app文件夹，还有一个文件夹就是data文件夹，app文件夹里存放着我们所有安装的app的apk文件，其实，当我们调试一个app的时候，可以看到控制台输出的内容，有一项是uploading …..就是上传我们的apk到这个文件夹，上传成功之后才开始安装。另一个重要的文件夹就是data文件夹了，这个文件夹里边都是一些包名，打开这些包名之后我们会看到这样的一些文件：\n\n1.data/data/包名/shared_prefs\n2.data/data/包名/databases\n3.data/data/包名/files\n\n4.data/data/包名/cache\n\n如果打开过data文件，应该都知道这些文件夹是干什么用的，我们在使用sharedPreferenced的时候，将数据持久化存储于本地，其实就是存在这个文件中的xml文件里，我们App里边的数据库文件就存储于databases文件夹中，还有我们的普通数据存储在files中，缓存文件存储在cache文件夹中，存储在这里的文件我们都称之为内部存储。\n\n## 2.外部存储\n\n外部存储才是我们平时操作最多的，外部存储一般就是我们上面看到的storage文件夹，当然也有可能是mnt文件夹，这个不同厂家有可能不一样。\n\n一般来说，在storage文件夹中有一个sdcard文件夹，这个文件夹中的文件又分为两类，一类是公有目录，还有一类是私有目录，其中的公有目录有九大类，比如DCIM、DOWNLOAD等这种系统为我们创建的文件夹，私有目录就是Android这个文件夹，这个文件夹打开之后里边有一个data文件夹，打开这个data文件夹，里边有许多包名组成的文件夹。\n\n说到这里，我想大家应该已经可以分清楚什么是内部存储什么是外部存储了吧？好，分清楚之后我们就要看看怎么来操作内部存储和外部存储了。\n\n## 3.操作存储空间\n\n首先，经过上面的分析，大家已经明白了，什么是内部存储，什么是外部存储，以及这两种存储方式分别存储在什么位置，一般来说，我们不会自己去操作内部存储空间，没有root权限的话，我们也没法操作内部存储空间，事实上内部存储主要是由系统来维护的。不过在代码中我们是可以访问到这个文件夹的。由于内部存储空间有限，在开发中我们一般都是操作外部存储空间，Google官方建议我们App的数据应该存储在外部存储的私有目录中该App的包名下，这样当用户卸载掉App之后，相关的数据会一并删除，如果你直接在/storage/sdcard目录下创建了一个应用的文件夹，那么当你删除应用的时候，这个文件夹就不会被删除。\n\n经过以上的介绍，我们可以总结出下面一个表格：\n\n![](http://img.blog.csdn.net/20151212091841385?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n一目了然，什么是内部存储，什么是外部存储。\n\n如果按照路径的特征，我们又可以将文件存储的路径分为两大类，一类是路径中含有包名的，一类是路径中不含有包名的，含有包名的路径，因为和某个App有关，所以对这些文件夹的访问都是调用Context里边的方法，而不含有包名的路径，和某一个App无关，我们可以通过Environment中的方法来访问。如下图：\n\n![](http://img.blog.csdn.net/20151212094211922?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n大家看到，有包名的路径我们都是调用Context中的方法来获得，没有包名的路径，我们直接调用Environment中的方法获得，那么其中有两个方法需要传入一个String类型的参数，这个参数我们使用了Environment中的常量，参数的意思是我们要访问这个路径下的哪个文件夹，比如getExternalFilesDir方法，我们看看它的源码：\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n | \n\n`/**`\n\n`*`\n\n`* @param type The type of files directory to return.  May be null for`\n\n`* the root of the files directory or one of`\n\n`* the following Environment constants for a subdirectory:`\n\n`* {@link android.os.Environment#DIRECTORY_MUSIC},`\n\n`* {@link android.os.Environment#DIRECTORY_PODCASTS},`\n\n`* {@link android.os.Environment#DIRECTORY_RINGTONES},`\n\n`* {@link android.os.Environment#DIRECTORY_ALARMS},`\n\n`* {@link android.os.Environment#DIRECTORY_NOTIFICATIONS},`\n\n`* {@link android.os.Environment#DIRECTORY_PICTURES}, or`\n\n`* {@link android.os.Environment#DIRECTORY_MOVIES}.`\n\n`*`\n\n`* @return The path of the directory holding application files`\n\n`* on external storage.  Returns null if external storage is not currently`\n\n`* mounted so it could not ensure the path exists; you will need to call`\n\n`* this method again when it is available.`\n\n`*`\n\n`* @see #getFilesDir`\n\n`* @see android.os.Environment#getExternalStoragePublicDirectory`\n\n`*/`\n\n`@Nullable`\n\n`public` `abstract` `File getExternalFilesDir(``@Nullable` `String type);`\n\n |\n\n它的注释非常多，我这里只列出其中一部分，我们看到，我们可以访问files文件夹下的Music文件夹、Movies文件夹等等好几种。\n\n说到这里，我想大家对内部存储、外部存储该有了一个清晰的认识了吧。我们在开发中，不建议往内部存储中写太多的数据，毕竟空间有限。外部存储在使用的时候最好能够将文件存放在私有目录下，这样有利于系统维护，也避免用户的反感。\n\n现在我们再来看看我们一开始提出的问题，当我们点击清除数据的时候清除的是哪里的数据呢？毫无疑问，当然是内部存储目录中相应的files和cache文件夹中的文件和外部存储中相应的files和cache文件夹中的文件，至于这些文件夹的路径我想你应该已经明白了。\n\n好了，最后再送给大家一个文件操作工具类：\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n146\n\n147\n\n148\n\n149\n\n150\n\n151\n\n152\n\n153\n\n154\n\n155\n\n156\n\n157\n\n158\n\n159\n\n160\n\n161\n\n162\n\n163\n\n164\n\n165\n\n166\n\n167\n\n168\n\n169\n\n170\n\n171\n\n172\n\n173\n\n174\n\n175\n\n176\n\n177\n\n178\n\n179\n\n180\n\n181\n\n182\n\n183\n\n184\n\n185\n\n186\n\n187\n\n188\n\n189\n\n190\n\n191\n\n192\n\n193\n\n194\n\n195\n\n196\n\n197\n\n198\n\n199\n\n200\n\n201\n\n202\n\n203\n\n204\n\n205\n\n206\n\n207\n\n208\n\n209\n\n210\n\n211\n\n212\n\n213\n\n214\n\n215\n\n216\n\n217\n\n218\n\n219\n\n220\n\n221\n\n222\n\n223\n\n224\n\n225\n\n226\n\n227\n\n228\n\n229\n\n230\n\n231\n\n232\n\n233\n\n234\n\n235\n\n236\n\n237\n\n238\n\n239\n\n240\n\n241\n\n242\n\n243\n\n244\n\n245\n\n246\n\n247\n\n248\n\n249\n\n250\n\n251\n\n252\n\n253\n\n254\n\n255\n\n | \n\n`public` `class` `SDCardHelper {`\n\n`// 判断SD卡是否被挂载`\n\n`public` `static` `boolean` `isSDCardMounted() {`\n\n`// return Environment.getExternalStorageState().equals(\"mounted\");`\n\n`return` `Environment.getExternalStorageState().equals(`\n\n`Environment.MEDIA_MOUNTED);`\n\n`}`\n\n`// 获取SD卡的根目录`\n\n`public` `static` `String getSDCardBaseDir() {`\n\n`if` `(isSDCardMounted()) {`\n\n`return` `Environment.getExternalStorageDirectory().getAbsolutePath();`\n\n`}`\n\n`return` `null``;`\n\n`}`\n\n`// 获取SD卡的完整空间大小，返回MB`\n\n`public` `static` `long` `getSDCardSize() {`\n\n`if` `(isSDCardMounted()) {`\n\n`StatFs fs = ``new` `StatFs(getSDCardBaseDir());`\n\n`long` `count = fs.getBlockCountLong();`\n\n`long` `size = fs.getBlockSizeLong();`\n\n`return` `count * size / ``1024` `/ ``1024``;`\n\n`}`\n\n`return` `0``;`\n\n`}`\n\n`// 获取SD卡的剩余空间大小`\n\n`public` `static` `long` `getSDCardFreeSize() {`\n\n`if` `(isSDCardMounted()) {`\n\n`StatFs fs = ``new` `StatFs(getSDCardBaseDir());`\n\n`long` `count = fs.getFreeBlocksLong();`\n\n`long` `size = fs.getBlockSizeLong();`\n\n`return` `count * size / ``1024` `/ ``1024``;`\n\n`}`\n\n`return` `0``;`\n\n`}`\n\n`// 获取SD卡的可用空间大小`\n\n`public` `static` `long` `getSDCardAvailableSize() {`\n\n`if` `(isSDCardMounted()) {`\n\n`StatFs fs = ``new` `StatFs(getSDCardBaseDir());`\n\n`long` `count = fs.getAvailableBlocksLong();`\n\n`long` `size = fs.getBlockSizeLong();`\n\n`return` `count * size / ``1024` `/ ``1024``;`\n\n`}`\n\n`return` `0``;`\n\n`}`\n\n`// 往SD卡的公有目录下保存文件`\n\n`public` `static` `boolean` `saveFileToSDCardPublicDir(``byte``[] data, String type, String fileName) {`\n\n`BufferedOutputStream bos = ``null``;`\n\n`if` `(isSDCardMounted()) {`\n\n`File file = Environment.getExternalStoragePublicDirectory(type);`\n\n`try` `{`\n\n`bos = ``new` `BufferedOutputStream(``new` `FileOutputStream(``new` `File(file, fileName)));`\n\n`bos.write(data);`\n\n`bos.flush();`\n\n`return` `true``;`\n\n`} ``catch` `(Exception e) {`\n\n`e.printStackTrace();`\n\n`} ``finally` `{`\n\n`try` `{`\n\n`bos.close();`\n\n`} ``catch` `(IOException e) {`\n\n`// TODO Auto-generated catch block`\n\n`e.printStackTrace();`\n\n`}`\n\n`}`\n\n`}`\n\n`return` `false``;`\n\n`}`\n\n`// 往SD卡的自定义目录下保存文件`\n\n`public` `static` `boolean` `saveFileToSDCardCustomDir(``byte``[] data, String dir, String fileName) {`\n\n`BufferedOutputStream bos = ``null``;`\n\n`if` `(isSDCardMounted()) {`\n\n`File file = ``new` `File(getSDCardBaseDir() + File.separator + dir);`\n\n`if` `(!file.exists()) {`\n\n`file.mkdirs();``// 递归创建自定义目录`\n\n`}`\n\n`try` `{`\n\n`bos = ``new` `BufferedOutputStream(``new` `FileOutputStream(``new` `File(file, fileName)));`\n\n`bos.write(data);`\n\n`bos.flush();`\n\n`return` `true``;`\n\n`} ``catch` `(Exception e) {`\n\n`e.printStackTrace();`\n\n`} ``finally` `{`\n\n`try` `{`\n\n`bos.close();`\n\n`} ``catch` `(IOException e) {`\n\n`// TODO Auto-generated catch block`\n\n`e.printStackTrace();`\n\n`}`\n\n`}`\n\n`}`\n\n`return` `false``;`\n\n`}`\n\n`// 往SD卡的私有Files目录下保存文件`\n\n`public` `static` `boolean` `saveFileToSDCardPrivateFilesDir(``byte``[] data, String type, String fileName, Context context) {`\n\n`BufferedOutputStream bos = ``null``;`\n\n`if` `(isSDCardMounted()) {`\n\n`File file = context.getExternalFilesDir(type);`\n\n`try` `{`\n\n`bos = ``new` `BufferedOutputStream(``new` `FileOutputStream(``new` `File(file, fileName)));`\n\n`bos.write(data);`\n\n`bos.flush();`\n\n`return` `true``;`\n\n`} ``catch` `(Exception e) {`\n\n`e.printStackTrace();`\n\n`} ``finally` `{`\n\n`try` `{`\n\n`bos.close();`\n\n`} ``catch` `(IOException e) {`\n\n`// TODO Auto-generated catch block`\n\n`e.printStackTrace();`\n\n`}`\n\n`}`\n\n`}`\n\n`return` `false``;`\n\n`}`\n\n`// 往SD卡的私有Cache目录下保存文件`\n\n`public` `static` `boolean` `saveFileToSDCardPrivateCacheDir(``byte``[] data, String fileName, Context context) {`\n\n`BufferedOutputStream bos = ``null``;`\n\n`if` `(isSDCardMounted()) {`\n\n`File file = context.getExternalCacheDir();`\n\n`try` `{`\n\n`bos = ``new` `BufferedOutputStream(``new` `FileOutputStream(``new` `File(file, fileName)));`\n\n`bos.write(data);`\n\n`bos.flush();`\n\n`return` `true``;`\n\n`} ``catch` `(Exception e) {`\n\n`e.printStackTrace();`\n\n`} ``finally` `{`\n\n`try` `{`\n\n`bos.close();`\n\n`} ``catch` `(IOException e) {`\n\n`// TODO Auto-generated catch block`\n\n`e.printStackTrace();`\n\n`}`\n\n`}`\n\n`}`\n\n`return` `false``;`\n\n`}`\n\n`// 保存bitmap图片到SDCard的私有Cache目录`\n\n`public` `static` `boolean` `saveBitmapToSDCardPrivateCacheDir(Bitmap bitmap, String fileName, Context context) {`\n\n`if` `(isSDCardMounted()) {`\n\n`BufferedOutputStream bos = ``null``;`\n\n`// 获取私有的Cache缓存目录`\n\n`File file = context.getExternalCacheDir();`\n\n`try` `{`\n\n`bos = ``new` `BufferedOutputStream(``new` `FileOutputStream(``new` `File(file, fileName)));`\n\n`if` `(fileName != ``null` `&& (fileName.contains(``\".png\"``) || fileName.contains(``\".PNG\"``))) {`\n\n`bitmap.compress(Bitmap.CompressFormat.PNG, ``100``, bos);`\n\n`} ``else` `{`\n\n`bitmap.compress(Bitmap.CompressFormat.JPEG, ``100``, bos);`\n\n`}`\n\n`bos.flush();`\n\n`} ``catch` `(Exception e) {`\n\n`e.printStackTrace();`\n\n`} ``finally` `{`\n\n`if` `(bos != ``null``) {`\n\n`try` `{`\n\n`bos.close();`\n\n`} ``catch` `(IOException e) {`\n\n`e.printStackTrace();`\n\n`}`\n\n`}`\n\n`}`\n\n`return` `true``;`\n\n`} ``else` `{`\n\n`return` `false``;`\n\n`}`\n\n`}`\n\n`// 从SD卡获取文件`\n\n`public` `static` `byte``[] loadFileFromSDCard(String fileDir) {`\n\n`BufferedInputStream bis = ``null``;`\n\n`ByteArrayOutputStream baos = ``new` `ByteArrayOutputStream();`\n\n`try` `{`\n\n`bis = ``new` `BufferedInputStream(``new` `FileInputStream(``new` `File(fileDir)));`\n\n`byte``[] buffer = ``new` `byte``[``8` `* ``1024``];`\n\n`int` `c = ``0``;`\n\n`while` `((c = bis.read(buffer)) != -``1``) {`\n\n`baos.write(buffer, ``0``, c);`\n\n`baos.flush();`\n\n`}`\n\n`return` `baos.toByteArray();`\n\n`} ``catch` `(Exception e) {`\n\n`e.printStackTrace();`\n\n`} ``finally` `{`\n\n`try` `{`\n\n`baos.close();`\n\n`bis.close();`\n\n`} ``catch` `(IOException e) {`\n\n`e.printStackTrace();`\n\n`}`\n\n`}`\n\n`return` `null``;`\n\n`}`\n\n`// 从SDCard中寻找指定目录下的文件，返回Bitmap`\n\n`public` `Bitmap loadBitmapFromSDCard(String filePath) {`\n\n`byte``[] data = loadFileFromSDCard(filePath);`\n\n`if` `(data != ``null``) {`\n\n`Bitmap bm = BitmapFactory.decodeByteArray(data, ``0``, data.length);`\n\n`if` `(bm != ``null``) {`\n\n`return` `bm;`\n\n`}`\n\n`}`\n\n`return` `null``;`\n\n`}`\n\n`// 获取SD卡公有目录的路径`\n\n`public` `static` `String getSDCardPublicDir(String type) {`\n\n`return` `Environment.getExternalStoragePublicDirectory(type).toString();`\n\n`}`\n\n`// 获取SD卡私有Cache目录的路径`\n\n`public` `static` `String getSDCardPrivateCacheDir(Context context) {`\n\n`return` `context.getExternalCacheDir().getAbsolutePath();`\n\n`}`\n\n`// 获取SD卡私有Files目录的路径`\n\n`public` `static` `String getSDCardPrivateFilesDir(Context context, String type) {`\n\n`return` `context.getExternalFilesDir(type).getAbsolutePath();`\n\n`}`\n\n`public` `static` `boolean` `isFileExist(String filePath) {`\n\n`File file = ``new` `File(filePath);`\n\n`return` `file.isFile();`\n\n`}`\n\n`// 从sdcard中删除文件`\n\n`public` `static` `boolean` `removeFileFromSDCard(String filePath) {`\n\n`File file = ``new` `File(filePath);`\n\n`if` `(file.exists()) {`\n\n`try` `{`\n\n`file.delete();`\n\n`return` `true``;`\n\n`} ``catch` `(Exception e) {`\n\n`return` `false``;`\n\n`}`\n\n`} ``else` `{`\n\n`return` `false``;`\n\n`}`\n\n`}`\n\n`}`\n\n |"]],[0,0],[12601,12601]]],[1521872532397,["gengmei_pxf@gengmei123.local",[[-1,24," "],[-1,91," "],[1,92," "],[-1,140," "],[1,141," "],[-1,204,"  "],[1,206,"  "],[-1,222,"  "],[1,224,"  "],[-1,231,"  "],[1,233,"  "],[-1,3043," "],[1,3044," "],[-1,3050," "],[1,3051," "],[-1,3055," The "],[1,3060," The "],[-1,3064," of "],[1,3068," of "],[-1,3073," "],[1,3074," "],[-1,3083," to "],[1,3087," to "],[-1,3094,"  May be "],[1,3103,"  May be "],[-1,3107," "],[1,3108," "],[-1,3116," the "],[1,3121," the "],[-1,3125," of the "],[1,3133," of the "],[-1,3138," "],[1,3139," "],[-1,3148," or one "],[1,3156," or one "],[-1,3163," the "],[1,3168," the "],[-1,3177," "],[1,3178," "],[-1,3189," "],[1,3190," "],[-1,3199," for a "],[1,3206," for a "],[-1,3224," "],[1,3225," "],[-1,3231," "],[1,3232," "],[-1,3277," "],[1,3278," "],[-1,3284," "],[1,3285," "],[-1,3333," "],[1,3334," "],[-1,3340," "],[1,3341," "],[-1,3390," "],[1,3391," "],[-1,3397," "],[1,3398," "],[-1,3444," "],[1,3445," "],[-1,3451," "],[1,3452," "],[-1,3505," "],[1,3506," "],[-1,3512," "],[1,3513," "],[-1,3556," "],[1,3557," "],[-1,3564," "],[1,3565," "],[-1,3571," "],[1,3572," "],[-1,3623," "],[1,3624," "],[-1,3631," The "],[1,3636," The "],[-1,3640," of the "],[1,3648," of the "],[-1,3657," "],[1,3658," "],[-1,3665," "],[1,3666," "],[-1,3677," "],[1,3678," "],[-1,3688," on "],[1,3692," on "],[-1,3700," "],[1,3701," "],[-1,3709,"  "],[1,3711,"  "],[-1,3718," "],[1,3719," "],[-1,3723," if "],[1,3727," if "],[-1,3735," "],[1,3736," "],[-1,3743," is not "],[1,3751," is not "],[-1,3765," "],[1,3766," "],[-1,3773," so it "],[1,3780," so it "],[-1,3785," not "],[1,3790," not "],[-1,3796," the "],[1,3801," the "],[-1,3805," "],[1,3806," "],[-1,3813," you "],[1,3818," you "],[-1,3822," "],[1,3823," "],[-1,3827," to "],[1,3831," to "],[-1,3840," "],[1,3841," "],[-1,3845," "],[1,3846," "],[-1,3852," "],[1,3853," "],[-1,3858," "],[1,3859," "],[-1,3863," it is "],[1,3870," it is "],[-1,3890," "],[1,3891," "],[-1,3895," "],[1,3896," "],[-1,3913," "],[1,3914," "],[-1,3918," "],[1,3919," "],[-1,4005," "],[1,4006," "],[-1,4016," "],[1,4017," "],[-1,4022," "],[1,4023," "],[-1,4055," "],[1,4056," "],[-1,4063," "],[1,4064," "],[-1,5588," "],[1,5589," "],[-1,5596," "],[1,5597," "],[-1,5610," "],[1,5611," "],[-1,5618," "],[1,5619," "],[-1,5640," "],[1,5641," "],[-1,5649," "],[1,5650," "],[-1,5659," "],[1,5660," "],[-1,5678," "],[1,5679," "],[-1,5686," "],[1,5687," "],[-1,5693," "],[1,5694," "],[-1,5761," "],[1,5762," "],[-1,5850," "],[1,5851," "],[-1,5871," "],[1,5872," "],[-1,5880," "],[1,5881," "],[-1,5888," "],[1,5889," "],[-1,5907," "],[1,5908," "],[-1,5916," "],[1,5917," "],[-1,5937," "],[1,5938," "],[-1,5950," "],[1,5951," "],[-1,6028," "],[1,6029," "],[-1,6048," "],[1,6049," "],[-1,6077," "],[1,6078," "],[-1,6086," "],[1,6087," "],[-1,6093," "],[1,6094," "],[-1,6110," "],[1,6111," "],[-1,6119," "],[1,6120," "],[-1,6140," "],[1,6141," "],[-1,6152," fs = "],[1,6158," fs = "],[-1,6164," "],[1,6165," "],[-1,6202," "],[1,6203," "],[-1,6209," = "],[1,6212," = "],[-1,6244," "],[1,6245," "],[-1,6250," = "],[1,6253," = "],[-1,6286," "],[1,6287," "],[-1,6293," * "],[1,6296," * "],[-1,6300," / "],[1,6303," / "],[-1,6310," `/ "],[1,6314," `/ "],[-1,6339," "],[1,6340," "],[-1,6356," "],[1,6357," "],[-1,6380," "],[1,6381," "],[-1,6389," "],[1,6390," "],[-1,6396," "],[1,6397," "],[-1,6417," "],[1,6418," "],[-1,6426," "],[1,6427," "],[-1,6447," "],[1,6448," "],[-1,6459," fs = "],[1,6465," fs = "],[-1,6471," "],[1,6472," "],[-1,6509," "],[1,6510," "],[-1,6516," = "],[1,6519," = "],[-1,6551," "],[1,6552," "],[-1,6557," = "],[1,6560," = "],[-1,6593," "],[1,6594," "],[-1,6600," * "],[1,6603," * "],[-1,6607," / "],[1,6610," / "],[-1,6617," `/ "],[1,6621," `/ "],[-1,6646," "],[1,6647," "],[-1,6663," "],[1,6664," "],[-1,6687," "],[1,6688," "],[-1,6696," "],[1,6697," "],[-1,6703," "],[1,6704," "],[-1,6729," "],[1,6730," "],[-1,6738," "],[1,6739," "],[-1,6759," "],[1,6760," "],[-1,6771," fs = "],[1,6777," fs = "],[-1,6783," "],[1,6784," "],[-1,6821," "],[1,6822," "],[-1,6828," = "],[1,6831," = "],[-1,6868," "],[1,6869," "],[-1,6874," = "],[1,6877," = "],[-1,6910," "],[1,6911," "],[-1,6917," * "],[1,6920," * "],[-1,6924," / "],[1,6927," / "],[-1,6934," `/ "],[1,6938," `/ "],[-1,6963," "],[1,6964," "],[-1,6980," "],[1,6981," "],[-1,7006," "],[1,7007," "],[-1,7015," "],[1,7016," "],[-1,7025," "],[1,7026," "],[-1,7063," "],[1,7064," "],[-1,7069," "],[1,7070," "],[-1,7076," "],[1,7077," "],[-1,7089," "],[1,7090," "],[-1,7099," "],[1,7100," "],[-1,7125," bos = "],[1,7132," bos = "],[-1,7148," "],[1,7149," "],[-1,7169," "],[1,7170," "],[-1,7179," "],[1,7180," "],[-1,7184," = "],[1,7187," = "],[-1,7247," "],[1,7248," "],[-1,7257," = "],[1,7260," = "],[-1,7266," "],[1,7267," "],[-1,7295," "],[1,7296," "],[-1,7320," "],[1,7321," "],[-1,7332," "],[1,7333," "],[-1,7392," "],[1,7393," "],[-1,7406," "],[1,7407," "],[-1,7415," "],[1,7416," "],[-1,7427," e) "],[1,7431," e) "],[-1,7461," "],[1,7462," "],[-1,7472," "],[1,7473," "],[-1,7483," "],[1,7484," "],[-1,7507," "],[1,7508," "],[-1,7516," "],[1,7517," "],[-1,7530," e) "],[1,7534," e) "],[-1,7541," "],[1,7542," "],[-1,7546," "],[1,7547," "],[-1,7561," "],[1,7562," "],[-1,7567," "],[1,7568," "],[-1,7623," "],[1,7624," "],[-1,7644," "],[1,7645," "],[-1,7671," "],[1,7672," "],[-1,7680," "],[1,7681," "],[-1,7690," "],[1,7691," "],[-1,7728," "],[1,7729," "],[-1,7734," "],[1,7735," "],[-1,7741," "],[1,7742," "],[-1,7753," "],[1,7754," "],[-1,7763," "],[1,7764," "],[-1,7789," bos = "],[1,7796," bos = "],[-1,7812," "],[1,7813," "],[-1,7833," "],[1,7834," "],[-1,7843," "],[1,7844," "],[-1,7848," = "],[1,7851," = "],[-1,7857," "],[1,7858," "],[-1,7882," + "],[1,7885," + "],[-1,7899," + "],[1,7902," + "],[-1,7914," "],[1,7915," "],[-1,7932," "],[1,7933," "],[-1,7956," "],[1,7957," "],[-1,7979," "],[1,7980," "],[-1,7989," = "],[1,7992," = "],[-1,7998," "],[1,7999," "],[-1,8027," "],[1,8028," "],[-1,8052," "],[1,8053," "],[-1,8064," "],[1,8065," "],[-1,8124," "],[1,8125," "],[-1,8138," "],[1,8139," "],[-1,8147," "],[1,8148," "],[-1,8159," e) "],[1,8163," e) "],[-1,8193," "],[1,8194," "],[-1,8204," "],[1,8205," "],[-1,8215," "],[1,8216," "],[-1,8239," "],[1,8240," "],[-1,8248," "],[1,8249," "],[-1,8262," e) "],[1,8266," e) "],[-1,8273," "],[1,8274," "],[-1,8278," "],[1,8279," "],[-1,8293," "],[1,8294," "],[-1,8299," "],[1,8300," "],[-1,8355," "],[1,8356," "],[-1,8376," "],[1,8377," "],[-1,8407," "],[1,8408," "],[-1,8416," "],[1,8417," "],[-1,8426," "],[1,8427," "],[-1,8470," "],[1,8471," "],[-1,8483," "],[1,8484," "],[-1,8489," "],[1,8490," "],[-1,8496," "],[1,8497," "],[-1,8506," "],[1,8507," "],[-1,8514," "],[1,8515," "],[-1,8523," "],[1,8524," "],[-1,8549," bos = "],[1,8556," bos = "],[-1,8572," "],[1,8573," "],[-1,8593," "],[1,8594," "],[-1,8603," "],[1,8604," "],[-1,8608," = "],[1,8611," = "],[-1,8653," "],[1,8654," "],[-1,8663," = "],[1,8666," = "],[-1,8672," "],[1,8673," "],[-1,8701," "],[1,8702," "],[-1,8726," "],[1,8727," "],[-1,8738," "],[1,8739," "],[-1,8798," "],[1,8799," "],[-1,8812," "],[1,8813," "],[-1,8821," "],[1,8822," "],[-1,8833," e) "],[1,8837," e) "],[-1,8867," "],[1,8868," "],[-1,8878," "],[1,8879," "],[-1,8889," "],[1,8890," "],[-1,8913," "],[1,8914," "],[-1,8922," "],[1,8923," "],[-1,8936," e) "],[1,8940," e) "],[-1,8947," "],[1,8948," "],[-1,8952," "],[1,8953," "],[-1,8967," "],[1,8968," "],[-1,8973," "],[1,8974," "],[-1,9029," "],[1,9030," "],[-1,9050," "],[1,9051," "],[-1,9081," "],[1,9082," "],[-1,9090," "],[1,9091," "],[-1,9100," "],[1,9101," "],[-1,9144," "],[1,9145," "],[-1,9157," "],[1,9158," "],[-1,9167," "],[1,9168," "],[-1,9175," "],[1,9176," "],[-1,9184," "],[1,9185," "],[-1,9210," bos = "],[1,9217," bos = "],[-1,9233," "],[1,9234," "],[-1,9254," "],[1,9255," "],[-1,9264," "],[1,9265," "],[-1,9269," = "],[1,9272," = "],[-1,9310," "],[1,9311," "],[-1,9320," = "],[1,9323," = "],[-1,9329," "],[1,9330," "],[-1,9358," "],[1,9359," "],[-1,9383," "],[1,9384," "],[-1,9395," "],[1,9396," "],[-1,9455," "],[1,9456," "],[-1,9469," "],[1,9470," "],[-1,9478," "],[1,9479," "],[-1,9490," e) "],[1,9494," e) "],[-1,9524," "],[1,9525," "],[-1,9535," "],[1,9536," "],[-1,9546," "],[1,9547," "],[-1,9570," "],[1,9571," "],[-1,9579," "],[1,9580," "],[-1,9593," e) "],[1,9597," e) "],[-1,9604," "],[1,9605," "],[-1,9609," "],[1,9610," "],[-1,9624," "],[1,9625," "],[-1,9630," "],[1,9631," "],[-1,9686," "],[1,9687," "],[-1,9707," "],[1,9708," "],[-1,9746," "],[1,9747," "],[-1,9755," "],[1,9756," "],[-1,9765," "],[1,9766," "],[-1,9807," "],[1,9808," "],[-1,9822," "],[1,9823," "],[-1,9832," "],[1,9833," "],[-1,9840," "],[1,9841," "],[-1,9849," "],[1,9850," "],[-1,9858," "],[1,9859," "],[-1,9879," "],[1,9880," "],[-1,9905," bos = "],[1,9912," bos = "],[-1,9927," "],[1,9928," "],[-1,9950," "],[1,9951," "],[-1,9955," = "],[1,9958," = "],[-1,9996," "],[1,9997," "],[-1,10006," = "],[1,10009," = "],[-1,10015," "],[1,10016," "],[-1,10044," "],[1,10045," "],[-1,10069," "],[1,10070," "],[-1,10081," "],[1,10082," "],[-1,10101," "],[1,10102," "],[-1,10112," != "],[1,10116," != "],[-1,10127," "],[1,10128," "],[-1,10158," || "],[1,10162," || "],[-1,10193," "],[1,10194," "],[-1,10241," "],[1,10242," "],[-1,10250," "],[1,10251," "],[-1,10261," "],[1,10262," "],[-1,10269," "],[1,10270," "],[-1,10319," "],[1,10320," "],[-1,10328," "],[1,10329," "],[-1,10360," "],[1,10361," "],[-1,10369," "],[1,10370," "],[-1,10381," e) "],[1,10385," e) "],[-1,10415," "],[1,10416," "],[-1,10426," "],[1,10427," "],[-1,10436," "],[1,10437," "],[-1,10442," != "],[1,10446," != "],[-1,10455," "],[1,10456," "],[-1,10465," "],[1,10466," "],[-1,10489," "],[1,10490," "],[-1,10498," "],[1,10499," "],[-1,10512," e) "],[1,10516," e) "],[-1,10567," "],[1,10568," "],[-1,10581," "],[1,10582," "],[-1,10589," "],[1,10590," "],[-1,10603," "],[1,10604," "],[-1,10629," "],[1,10630," "],[-1,10649," "],[1,10650," "],[-1,10658," "],[1,10659," "],[-1,10668," "],[1,10669," "],[-1,10694," "],[1,10695," "],[-1,10703," "],[1,10704," "],[-1,10728," bis = "],[1,10735," bis = "],[-1,10769," "],[1,10770," "],[-1,10774," = "],[1,10777," = "],[-1,10783," "],[1,10784," "],[-1,10817," "],[1,10818," "],[-1,10827," = "],[1,10830," = "],[-1,10836," "],[1,10837," "],[-1,10864," "],[1,10865," "],[-1,10888," "],[1,10889," "],[-1,10918," "],[1,10919," "],[-1,10925," = "],[1,10928," = "],[-1,10934," "],[1,10935," "],[-1,10947," `* "],[1,10951," `* "],[-1,10969," `c = "],[1,10975," `c = "],[-1,10991," "],[1,10992," "],[-1,10996," = "],[1,10999," = "],[-1,11016," != "],[1,11020," != "],[-1,11027," "],[1,11028," "],[-1,11051," "],[1,11052," "],[-1,11058," "],[1,11059," "],[-1,11095," "],[1,11096," "],[-1,11121," "],[1,11122," "],[-1,11130," "],[1,11131," "],[-1,11142," e) "],[1,11146," e) "],[-1,11176," "],[1,11177," "],[-1,11187," "],[1,11188," "],[-1,11198," "],[1,11199," "],[-1,11239," "],[1,11240," "],[-1,11248," "],[1,11249," "],[-1,11262," e) "],[1,11266," e) "],[-1,11312," "],[1,11313," "],[-1,11332," "],[1,11333," "],[-1,11371," "],[1,11372," "],[-1,11379," "],[1,11380," "],[-1,11407," "],[1,11408," "],[-1,11417," "],[1,11418," "],[-1,11431," "],[1,11432," "],[-1,11436," = "],[1,11439," = "],[-1,11475," "],[1,11476," "],[-1,11482," != "],[1,11486," != "],[-1,11495," "],[1,11496," "],[-1,11507," bm = "],[1,11513," bm = "],[-1,11548," "],[1,11549," "],[-1,11555," "],[1,11556," "],[-1,11576," "],[1,11577," "],[-1,11581," != "],[1,11585," != "],[-1,11594," "],[1,11595," "],[-1,11607," "],[1,11608," "],[-1,11633," "],[1,11634," "],[-1,11653," "],[1,11654," "],[-1,11677," "],[1,11678," "],[-1,11686," "],[1,11687," "],[-1,11694," "],[1,11695," "],[-1,11720," "],[1,11721," "],[-1,11726," "],[1,11727," "],[-1,11739," "],[1,11740," "],[-1,11815," "],[1,11816," "],[-1,11844," "],[1,11845," "],[-1,11853," "],[1,11854," "],[-1,11861," "],[1,11862," "],[-1,11894," "],[1,11895," "],[-1,11903," "],[1,11904," "],[-1,11916," "],[1,11917," "],[-1,11977," "],[1,11978," "],[-1,12006," "],[1,12007," "],[-1,12015," "],[1,12016," "],[-1,12023," "],[1,12024," "],[-1,12056," "],[1,12057," "],[-1,12065," "],[1,12066," "],[-1,12072," "],[1,12073," "],[-1,12078," "],[1,12079," "],[-1,12091," "],[1,12092," "],[-1,12161," "],[1,12162," "],[-1,12170," "],[1,12171," "],[-1,12180," "],[1,12181," "],[-1,12200," "],[1,12201," "],[-1,12210," "],[1,12211," "],[-1,12220," "],[1,12221," "],[-1,12225," = "],[1,12228," = "],[-1,12234," "],[1,12235," "],[-1,12262," "],[1,12263," "],[-1,12289," "],[1,12290," "],[-1,12313," "],[1,12314," "],[-1,12322," "],[1,12323," "],[-1,12332," "],[1,12333," "],[-1,12361," "],[1,12362," "],[-1,12371," "],[1,12372," "],[-1,12381," "],[1,12382," "],[-1,12386," = "],[1,12389," = "],[-1,12395," "],[1,12396," "],[-1,12419," "],[1,12420," "],[-1,12436," "],[1,12437," "],[-1,12446," "],[1,12447," "],[-1,12478," "],[1,12479," "],[-1,12492," "],[1,12493," "],[-1,12501," "],[1,12502," "],[-1,12513," e) "],[1,12517," e) "],[-1,12529," "],[1,12530," "],[-1,12549," "],[1,12550," "],[-1,12557," "],[1,12558," "],[-1,12571," "],[1,12572," "]],[25,25],[24,24]]],[1521872532539,["gengmei_pxf@gengmei123.local",[[-1,23,"#"]],[24,24],[23,23]]],[1521872542120,["gengmei_pxf@gengmei123.local",[[-1,88,"[ 新手入门](http://www.androidchina.net/dev/beginner)  [AndroidChina](http://www.androidchina.net/author/androidchina)  2年前 (2016-01-09)  19650浏览  [0评论](http://www.androidchina.net/4106.html#comments)"]],[88,284],[88,88]]],[1521872542619,["gengmei_pxf@gengmei123.local",[[-1,89,"\n"]],[88,88],[87,87]]],[1521872542979,["gengmei_pxf@gengmei123.local",[[-1,88,"\n"]],[87,87],[86,86]]],[1521872554451,["gengmei_pxf@gengmei123.local",[[-1,2737,"| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n | \n\n"]],[2736,2828],[2736,2736]]],[1521872556207,["gengmei_pxf@gengmei123.local",[[1,2736,"·"]],[2736,2736],[2737,2737]]],[1521872557394,["gengmei_pxf@gengmei123.local",[[-1,2736,"·"]],[2737,2737],[2736,2736]]],[1521872558877,["gengmei_pxf@gengmei123.local",[[1,2736,"```"]],[2736,2736],[2739,2739]]],[1521872562780,["gengmei_pxf@gengmei123.local",[[-1,3784," |"]],[3786,3786],[3784,3784]]],[1521872563682,["gengmei_pxf@gengmei123.local",[[-1,3785,"\n"]],[3784,3784],[3783,3783]]],[1521872564645,["gengmei_pxf@gengmei123.local",[[1,3783,"```"]],[3783,3783],[3786,3786]]],[1521872583437,["gengmei_pxf@gengmei123.local",[[-1,4114,"\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n146\n\n147\n\n148\n\n149\n\n150\n\n151\n\n152\n\n153\n\n154\n\n155\n\n156\n\n157\n\n158\n\n159\n\n160\n\n161\n\n162\n\n163\n\n164\n\n165\n\n166\n\n167\n\n168\n\n169\n\n170\n\n171\n\n172\n\n173\n\n174\n\n175\n\n176\n\n177\n\n178\n\n179\n\n180\n\n181\n\n182\n\n183\n\n184\n\n185\n\n186\n\n187\n\n188\n\n189\n\n190\n\n191\n\n192\n\n193\n\n194\n\n195\n\n196\n\n197\n\n198\n\n199\n\n200\n\n201\n\n202\n\n203\n\n204\n\n205\n\n206\n\n207\n\n208\n\n209\n\n210\n\n211\n\n212\n\n213\n\n214\n\n215\n\n216\n\n217\n\n218\n\n219\n\n220\n\n221\n\n222\n\n223\n\n224\n\n225\n\n226\n\n227\n\n228\n\n229\n\n230\n\n231\n\n232\n\n233\n\n234\n\n235\n\n236\n\n237\n\n238\n\n239\n\n240\n\n241\n\n242\n\n243\n\n244\n\n245\n\n246\n\n247\n\n248\n\n249\n\n250\n\n251\n\n252\n\n253\n\n254\n\n255\n\n | "],[1,5289,"```"]],[4114,5289],[4117,4117]]],[1521872594986,["gengmei_pxf@gengmei123.local",[[-1,11138," |"]],[11140,11140],[11138,11138]]],[1521872596903,["gengmei_pxf@gengmei123.local",[[-1,11137,"\n"],[1,11138,"```"]],[11137,11137],[11140,11140]]],[1521872618536,["gengmei_pxf@gengmei123.local",[[-1,2736,"```\n`/**`\n\n`*`\n\n`* @param type The type of files directory to return.  May be null for`\n\n`* the root of the files directory or one of`\n\n`* the following Environment constants for a subdirectory:`\n\n`* {@link android.os.Environment#DIRECTORY_MUSIC},`\n\n`* {@link android.os.Environment#DIRECTORY_PODCASTS},`\n\n`* {@link android.os.Environment#DIRECTORY_RINGTONES},`\n\n`* {@link android.os.Environment#DIRECTORY_ALARMS},`\n\n`* {@link android.os.Environment#DIRECTORY_NOTIFICATIONS},`\n\n`* {@link android.os.Environment#DIRECTORY_PICTURES}, or`\n\n`* {@link android.os.Environment#DIRECTORY_MOVIES}.`\n\n`*`\n\n`* @return The path of the directory holding application files`\n\n`* on external storage.  Returns null if external storage is not currently`\n\n`* mounted so it could not ensure the path exists; you will need to call`\n\n`* this method again when it is available.`\n\n`*`\n\n`* @see #getFilesDir`\n\n`* @see android.os.Environment#getExternalStoragePublicDirectory`\n\n`*/`\n\n`@Nullable`\n\n`public` `abstract` `File getExternalFilesDir(``@Nullable` `String type);`\n```"]],[2736,3786],[2736,2736]]],[1521872619320,["gengmei_pxf@gengmei123.local",[[-1,2737,"\n"]],[2736,2736],[2735,2735]]],[1521872622664,["gengmei_pxf@gengmei123.local",[[-1,2736,"\n"]],[2736,2736],[2735,2735]]],[1521872632136,["gengmei_pxf@gengmei123.local",[[-1,3068,"public` `class` `SDCardHelper {`\n\n`// 判断SD卡是否被挂载`\n\n`public` `static` `boolean` `isSDCardMounted() {`\n\n`// return Environment.getExternalStorageState().equals(\"mounted\");`\n\n`return` `Environment.getExternalStorageState().equals(`\n\n`Environment.MEDIA_MOUNTED);`\n\n`}`\n\n`// 获取SD卡的根目录`\n\n`public` `static` `String getSDCardBaseDir() {`\n\n`if` `(isSDCardMounted()) {`\n\n`return` `Environment.getExternalStorageDirectory().getAbsolutePath();`\n\n`}`\n\n`return` `null``;`\n\n`}`\n\n`// 获取SD卡的完整空间大小，返回MB`\n\n`public` `static` `long` `getSDCardSize() {`\n\n`if` `(isSDCardMounted()) {`\n\n`StatFs fs = ``new` `StatFs(getSDCardBaseDir());`\n\n`long` `count = fs.getBlockCountLong();`\n\n`long` `size = fs.getBlockSizeLong();`\n\n`return` `count * size / ``1024` `/ ``1024``;`\n\n`}`\n\n`return` `0``;`\n\n`}`\n\n`// 获取SD卡的剩余空间大小`\n\n`public` `static` `long` `getSDCardFreeSize() {`\n\n`if` `(isSDCardMounted()) {`\n\n`StatFs fs = ``new` `StatFs(getSDCardBaseDir());`\n\n`long` `count = fs.getFreeBlocksLong();`\n\n`long` `size = fs.getBlockSizeLong();`\n\n`return` `count * size / ``1024` `/ ``1024``;`\n\n`}`\n\n`return` `0``;`\n\n`}`\n\n`// 获取SD卡的可用空间大小`\n\n`public` `static` `long` `getSDCardAvailableSize() {`\n\n`if` `(isSDCardMounted()) {`\n\n`StatFs fs = ``new` `StatFs(getSDCardBaseDir());`\n\n`long` `count = fs.getAvailableBlocksLong();`\n\n`long` `size = fs.getBlockSizeLong();`\n\n`return` `count * size / ``1024` `/ ``1024``;`\n\n`}`\n\n`return` `0``;`\n\n`}`\n\n`// 往SD卡的公有目录下保存文件`\n\n`public` `static` `boolean` `saveFileToSDCardPublicDir(``byte``[] data, String type, String fileName) {`\n\n`BufferedOutputStream bos = ``null``;`\n\n`if` `(isSDCardMounted()) {`\n\n`File file = Environment.getExternalStoragePublicDirectory(type);`\n\n`try` `{`\n\n`bos = ``new` `BufferedOutputStream(``new` `FileOutputStream(``new` `File(file, fileName)));`\n\n`bos.write(data);`\n\n`bos.flush();`\n\n`return` `true``;`\n\n`} ``catch` `(Exception e) {`\n\n`e.printStackTrace();`\n\n`} ``finally` `{`\n\n`try` `{`\n\n`bos.close();`\n\n`} ``catch` `(IOException e) {`\n\n`// TODO Auto-generated catch block`\n\n`e.printStackTrace();`\n\n`}`\n\n`}`\n\n`}`\n\n`return` `false``;`\n\n`}`\n\n`// 往SD卡的自定义目录下保存文件`\n\n`public` `static` `boolean` `saveFileToSDCardCustomDir(``byte``[] data, String dir, String fileName) {`\n\n`BufferedOutputStream bos = ``null``;`\n\n`if` `(isSDCardMounted()) {`\n\n`File file = ``new` `File(getSDCardBaseDir() + File.separator + dir);`\n\n`if` `(!file.exists()) {`\n\n`file.mkdirs();``// 递归创建自定义目录`\n\n`}`\n\n`try` `{`\n\n`bos = ``new` `BufferedOutputStream(``new` `FileOutputStream(``new` `File(file, fileName)));`\n\n`bos.write(data);`\n\n`bos.flush();`\n\n`return` `true``;`\n\n`} ``catch` `(Exception e) {`\n\n`e.printStackTrace();`\n\n`} ``finally` `{`\n\n`try` `{`\n\n`bos.close();`\n\n`} ``catch` `(IOException e) {`\n\n`// TODO Auto-generated catch block`\n\n`e.printStackTrace();`\n\n`}`\n\n`}`\n\n`}`\n\n`return` `false``;`\n\n`}`\n\n`// 往SD卡的私有Files目录下保存文件`\n\n`public` `static` `boolean` `saveFileToSDCardPrivateFilesDir(``byte``[] data, String type, String fileName, Context context) {`\n\n`BufferedOutputStream bos = ``null``;`\n\n`if` `(isSDCardMounted()) {`\n\n`File file = context.getExternalFilesDir(type);`\n\n`try` `{`\n\n`bos = ``new` `BufferedOutputStream(``new` `FileOutputStream(``new` `File(file, fileName)));`\n\n`bos.write(data);`\n\n`bos.flush();`\n\n`return` `true``;`\n\n`} ``catch` `(Exception e) {`\n\n`e.printStackTrace();`\n\n`} ``finally` `{`\n\n`try` `{`\n\n`bos.close();`\n\n`} ``catch` `(IOException e) {`\n\n`// TODO Auto-generated catch block`\n\n`e.printStackTrace();`\n\n`}`\n\n`}`\n\n`}`\n\n`return` `false``;`\n\n`}`\n\n`// 往SD卡的私有Cache目录下保存文件`\n\n`public` `static` `boolean` `saveFileToSDCardPrivateCacheDir(``byte``[] data, String fileName, Context context) {`\n\n`BufferedOutputStream bos = ``null``;`\n\n`if` `(isSDCardMounted()) {`\n\n`File file = context.getExternalCacheDir();`\n\n`try` `{`\n\n`bos = ``new` `BufferedOutputStream(``new` `FileOutputStream(``new` `File(file, fileName)));`\n\n`bos.write(data);`\n\n`bos.flush();`\n\n`return` `true``;`\n\n`} ``catch` `(Exception e) {`\n\n`e.printStackTrace();`\n\n`} ``finally` `{`\n\n`try` `{`\n\n`bos.close();`\n\n`} ``catch` `(IOException e) {`\n\n`// TODO Auto-generated catch block`\n\n`e.printStackTrace();`\n\n`}`\n\n`}`\n\n`}`\n\n`return` `false``;`\n\n`}`\n\n`// 保存bitmap图片到SDCard的私有Cache目录`\n\n`public` `static` `boolean` `saveBitmapToSDCardPrivateCacheDir(Bitmap bitmap, String fileName, Context context) {`\n\n`if` `(isSDCardMounted()) {`\n\n`BufferedOutputStream bos = ``null``;`\n\n`// 获取私有的Cache缓存目录`\n\n`File file = context.getExternalCacheDir();`\n\n`try` `{`\n\n`bos = ``new` `BufferedOutputStream(``new` `FileOutputStream(``new` `File(file, fileName)));`\n\n`if` `(fileName != ``null` `&& (fileName.contains(``\".png\"``) || fileName.contains(``\".PNG\"``))) {`\n\n`bitmap.compress(Bitmap.CompressFormat.PNG, ``100``, bos);`\n\n`} ``else` `{`\n\n`bitmap.compress(Bitmap.CompressFormat.JPEG, ``100``, bos);`\n\n`}`\n\n`bos.flush();`\n\n`} ``catch` `(Exception e) {`\n\n`e.printStackTrace();`\n\n`} ``finally` `{`\n\n`if` `(bos != ``null``) {`\n\n`try` `{`\n\n`bos.close();`\n\n`} ``catch` `(IOException e) {`\n\n`e.printStackTrace();`\n\n`}`\n\n`}`\n\n`}`\n\n`return` `true``;`\n\n`} ``else` `{`\n\n`return` `false``;`\n\n`}`\n\n`}`\n\n`// 从SD卡获取文件`\n\n`public` `static` `byte``[] loadFileFromSDCard(String fileDir) {`\n\n`BufferedInputStream bis = ``null``;`\n\n`ByteArrayOutputStream baos = ``new` `ByteArrayOutputStream();`\n\n`try` `{`\n\n`bis = ``new` `BufferedInputStream(``new` `FileInputStream(``new` `File(fileDir)));`\n\n`byte``[] buffer = ``new` `byte``[``8` `* ``1024``];`\n\n`int` `c = ``0``;`\n\n`while` `((c = bis.read(buffer)) != -``1``) {`\n\n`baos.write(buffer, ``0``, c);`\n\n`baos.flush();`\n\n`}`\n\n`return` `baos.toByteArray();`\n\n`} ``catch` `(Exception e) {`\n\n`e.printStackTrace();`\n\n`} ``finally` `{`\n\n`try` `{`\n\n`baos.close();`\n\n`bis.close();`\n\n`} ``catch` `(IOException e) {`\n\n`e.printStackTrace();`\n\n`}`\n\n`}`\n\n`return` `null``;`\n\n`}`\n\n`// 从SDCard中寻找指定目录下的文件，返回Bitmap`\n\n`public` `Bitmap loadBitmapFromSDCard(String filePath) {`\n\n`byte``[] data = loadFileFromSDCard(filePath);`\n\n`if` `(data != ``null``) {`\n\n`Bitmap bm = BitmapFactory.decodeByteArray(data, ``0``, data.length);`\n\n`if` `(bm != ``null``) {`\n\n`return` `bm;`\n\n`}`\n\n`}`\n\n`return` `null``;`\n\n`}`\n\n`// 获取SD卡公有目录的路径`\n\n`public` `static` `String getSDCardPublicDir(String type) {`\n\n`return` `Environment.getExternalStoragePublicDirectory(type).toString();`\n\n`}`\n\n`// 获取SD卡私有Cache目录的路径`\n\n`public` `static` `String getSDCardPrivateCacheDir(Context context) {`\n\n`return` `context.getExternalCacheDir().getAbsolutePath();`\n\n`}`\n\n`// 获取SD卡私有Files目录的路径`\n\n`public` `static` `String getSDCardPrivateFilesDir(Context context, String type) {`\n\n`return` `context.getExternalFilesDir(type).getAbsolutePath();`\n\n`}`\n\n`public` `static` `boolean` `isFileExist(String filePath) {`\n\n`File file = ``new` `File(filePath);`\n\n`return` `file.isFile();`\n\n`}`\n\n`// 从sdcard中删除文件`\n\n`public` `static` `boolean` `removeFileFromSDCard(String filePath) {`\n\n`File file = ``new` `File(filePath);`\n\n`if` `(file.exists()) {`\n\n`try` `{`\n\n`file.delete();`\n\n`return` `true``;`\n\n`} ``catch` `(Exception e) {`\n\n`return` `false``;`\n\n`}`\n\n`} ``else` `{`\n\n`return` `false``;`\n\n`}`\n\n`}`\n\n`}`\n`"]],[3066,10084],[3066,3066]]],[1521872651435,["gengmei_pxf@gengmei123.local",[[1,3066,"public class SDCardHelper {\n \n     // 判断SD卡是否被挂载\n     public static boolean isSDCardMounted() {\n         // return Environment.getExternalStorageState().equals(\"mounted\");\n         return Environment.getExternalStorageState().equals(\n         Environment.MEDIA_MOUNTED);\n    }\n \n    // 获取SD卡的根目录\n    public static String getSDCardBaseDir() {\n         if (isSDCardMounted()) {\n               return Environment.getExternalStorageDirectory().getAbsolutePath();\n         }\n         return null;\n    }\n \n    // 获取SD卡的完整空间大小，返回MB\n    public static long getSDCardSize() {\n         if (isSDCardMounted()) {\n              StatFs fs = new StatFs(getSDCardBaseDir());\n              long count = fs.getBlockCountLong();\n              long size = fs.getBlockSizeLong();\n              return count * size / 1024 / 1024;\n         }\n         return 0;\n    }\n \n    // 获取SD卡的剩余空间大小\n    public static long getSDCardFreeSize() {\n         if (isSDCardMounted()) {\n               StatFs fs = new StatFs(getSDCardBaseDir());\n               long count = fs.getFreeBlocksLong();\n               long size = fs.getBlockSizeLong();\n               return count * size / 1024 / 1024;\n         }\n         return 0;\n    }\n \n    // 获取SD卡的可用空间大小\n    public static long getSDCardAvailableSize() {\n         if (isSDCardMounted()) {\n               StatFs fs = new StatFs(getSDCardBaseDir());\n               long count = fs.getAvailableBlocksLong();\n               long size = fs.getBlockSizeLong();\n               return count * size / 1024 / 1024;\n         }\n         return 0;\n    }\n \n    // 往SD卡的公有目录下保存文件\n    public static boolean saveFileToSDCardPublicDir(byte[] data, String type, String fileName) {\n         BufferedOutputStream bos = null;\n         if (isSDCardMounted()) {\n               File file = Environment.getExternalStoragePublicDirectory(type);\n               try {\n                    bos = new BufferedOutputStream(new FileOutputStream(new File(file, fileName)));\n                    bos.write(data);\n                    bos.flush();\n                    return true;\n               } catch (Exception e) {\n                    e.printStackTrace();\n               } finally {\n                    try {\n                          bos.close();\n                    } catch (IOException e) {\n                          // TODO Auto-generated catch block\n                          e.printStackTrace();\n                    }\n               }\n          }\n          return false;\n     }\n \n     // 往SD卡的自定义目录下保存文件\n     public static boolean saveFileToSDCardCustomDir(byte[] data, String dir, String fileName) {\n          BufferedOutputStream bos = null;\n          if (isSDCardMounted()) {\n                File file = new File(getSDCardBaseDir() + File.separator + dir);\n                if (!file.exists()) {\n                      file.mkdirs();// 递归创建自定义目录\n                }\n                try {\n                      bos = new BufferedOutputStream(new FileOutputStream(new File(file, fileName)));\n                      bos.write(data);\n                      bos.flush();\n                      return true;\n                } catch (Exception e) {\n                      e.printStackTrace();\n                } finally {\n                      try {\n                            bos.close();\n                      } catch (IOException e) {\n                            // TODO Auto-generated catch block\n                            e.printStackTrace();\n                      }\n                }\n           }\n           return false;\n     }\n \n     // 往SD卡的私有Files目录下保存文件\n     public static boolean saveFileToSDCardPrivateFilesDir(byte[] data, String type, String fileName, Context context) {\n         BufferedOutputStream bos = null;\n         if (isSDCardMounted()) {\n               File file = context.getExternalFilesDir(type);\n               try {\n                      bos = new BufferedOutputStream(new FileOutputStream(new File(file, fileName)));\n                      bos.write(data);\n                      bos.flush();\n                      return true;\n               } catch (Exception e) {\n                      e.printStackTrace();\n               } finally {\n                      try {\n                            bos.close();\n                      } catch (IOException e) {\n                            // TODO Auto-generated catch block\n                            e.printStackTrace();\n                      }\n               }\n          }\n          return false;\n     }\n \n     // 往SD卡的私有Cache目录下保存文件\n     public static boolean saveFileToSDCardPrivateCacheDir(byte[] data, String fileName, Context context) {\n          BufferedOutputStream bos = null;\n          if (isSDCardMounted()) {\n                File file = context.getExternalCacheDir();\n                try {\n                      bos = new BufferedOutputStream(new FileOutputStream(new File(file, fileName)));\n                      bos.write(data);\n                      bos.flush();\n                      return true;\n                } catch (Exception e) {\n                      e.printStackTrace();\n                } finally {\n                      try {\n                            bos.close();\n                      } catch (IOException e) {\n                            // TODO Auto-generated catch block\n                            e.printStackTrace();\n                      }\n               }\n          }\n          return false;\n     }\n \n     // 保存bitmap图片到SDCard的私有Cache目录\n     public static boolean saveBitmapToSDCardPrivateCacheDir(Bitmap bitmap, String fileName, Context context) {\n          if (isSDCardMounted()) {\n                BufferedOutputStream bos = null;\n                // 获取私有的Cache缓存目录\n                File file = context.getExternalCacheDir();\n \n                try {\n                       bos = new BufferedOutputStream(new FileOutputStream(new File(file, fileName)));\n                       if (fileName != null && (fileName.contains(\".png\") || fileName.contains(\".PNG\"))) {\n                              bitmap.compress(Bitmap.CompressFormat.PNG, 100, bos);\n                       } else {\n                              bitmap.compress(Bitmap.CompressFormat.JPEG, 100, bos);\n                       }\n                       bos.flush();\n                } catch (Exception e) {\n                       e.printStackTrace();\n                } finally {\n                       if (bos != null) {\n                            try {\n                                 bos.close();\n                            } catch (IOException e) {\n                                 e.printStackTrace();\n                            }\n                       }\n                 }\n                 return true;\n          } else {\n                return false;\n          }\n     }\n \n     // 从SD卡获取文件\n     public static byte[] loadFileFromSDCard(String fileDir) {\n          BufferedInputStream bis = null;\n          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n \n          try {\n                bis = new BufferedInputStream(new FileInputStream(new File(fileDir)));\n                byte[] buffer = new byte[8 * 1024];\n                int c = 0;\n                while ((c = bis.read(buffer)) != -1) {\n                     baos.write(buffer, 0, c);\n                     baos.flush();\n                }\n                return baos.toByteArray();\n          } catch (Exception e) {\n                e.printStackTrace();\n          } finally {\n                try {\n                     baos.close();\n                     bis.close();\n                } catch (IOException e) {\n                     e.printStackTrace();\n                }\n          }\n          return null;\n     }\n \n     // 从SDCard中寻找指定目录下的文件，返回Bitmap\n     public Bitmap loadBitmapFromSDCard(String filePath) {\n          byte[] data = loadFileFromSDCard(filePath);\n          if (data != null) {\n               Bitmap bm = BitmapFactory.decodeByteArray(data, 0, data.length);\n               if (bm != null) {\n                     return bm;\n               }\n          }\n          return null;\n     }\n \n     // 获取SD卡公有目录的路径\n     public static String getSDCardPublicDir(String type) {\n          return Environment.getExternalStoragePublicDirectory(type).toString();\n     }\n \n     // 获取SD卡私有Cache目录的路径\n     public static String getSDCardPrivateCacheDir(Context context) {\n          return context.getExternalCacheDir().getAbsolutePath();\n     }\n \n     // 获取SD卡私有Files目录的路径\n     public static String getSDCardPrivateFilesDir(Context context, String type) {\n          return context.getExternalFilesDir(type).getAbsolutePath();\n     }\n \n     public static boolean isFileExist(String filePath) {\n          File file = new File(filePath);\n          return file.isFile();\n     }\n \n     // 从sdcard中删除文件\n     public static boolean removeFileFromSDCard(String filePath) {\n          File file = new File(filePath);\n          if (file.exists()) {\n               try {\n                     file.delete();\n                     return true;\n               } catch (Exception e) {\n                     return false;\n               }\n          } else {\n               return false;\n          }\n     }\n}"]],[3066,3066],[12154,12154]]],[1521872668719,["gengmei_pxf@gengmei123.local",[[1,2931,"**"]],[2931,2931],[2933,2933]]],[1521872687056,["gengmei_pxf@gengmei123.local",[[1,3019,"**"]],[3019,3019],[3021,3021]]],[1521872701589,["gengmei_pxf@gengmei123.local",[[-1,2956,"毫无疑问，当然"]],[2956,2963],[2956,2956]]],[1521872707349,["gengmei_pxf@gengmei123.local",[[-1,3015,"至于这些文件夹的路径我想你应该已经明白了"]],[3015,3035],[3015,3015]]],[1521872727372,["gengmei_pxf@gengmei123.local",[[1,2930,"\n"]],[2930,2930],[2931,2931]]],[1521872728182,["gengmei_pxf@gengmei123.local",[[-1,2930,"\n"]],[2931,2931],[2930,2930]]],[1521872728956,["gengmei_pxf@gengmei123.local",[[1,2931,"\n"]],[2931,2931],[2932,2932]]],[1521872729596,["gengmei_pxf@gengmei123.local",[[1,2932,"\n"]],[2932,2932],[2933,2933]]],[1521872732967,["gengmei_pxf@gengmei123.local",[[1,2932,"****"]],[2932,2932],[2936,2936]]],[1521872734231,["gengmei_pxf@gengmei123.local",[[1,2934,"清除缓存"]],[2934,2934],[2938,2938]]],[1521872736047,["gengmei_pxf@gengmei123.local",[[1,2940," "]],[2940,2940],[2941,2941]]],[1521872737779,["gengmei_pxf@gengmei123.local",[[1,2942,"\n"]],[2941,2941],[2942,2942]]],[1521872771941,["gengmei_pxf@gengmei123.local",[[1,2942,"外部存储中相应的files和cache文件夹中的文件"]],[2942,2942],[2968,2968]]],[1521872778738,["gengmei_pxf@gengmei123.local",[[-1,2971,"当我们点击"]],[2971,2976],[2971,2971]]],[1521872785617,["gengmei_pxf@gengmei123.local",[[-1,2975,"的时候清除的是哪里的数据呢？"]],[2975,2989],[2975,2975]]],[1521872787884,["gengmei_pxf@gengmei123.local",[[1,2975,"**"]],[2975,2975],[2977,2977]]],[1521872789529,["gengmei_pxf@gengmei123.local",[[1,2977,"\n"]],[2977,2977],[2978,2978]]],[1521872792546,["gengmei_pxf@gengmei123.local",[[-1,3034,"**，"]],[3037,3037],[3034,3034]]],[1521872798185,["gengmei_pxf@gengmei123.local",[[1,2932,"\n"]],[2932,2932],[2933,2933]]],[1521872799401,["gengmei_pxf@gengmei123.local",[[1,2970,"\n"]],[2970,2970],[2971,2971]]],[1521872819175,["gengmei_pxf@gengmei123.local",[[1,2935,"* "]],[2933,2933],[2935,2935]]],[1521872821206,["gengmei_pxf@gengmei123.local",[[1,2975,"* "]],[2973,2973],[2975,2975]]],[1521872829254,[null,[[1,2934," "],[-1,2936," "],[1,2974," "],[-1,2976," "]],[2934,2934],[2976,2976]]],[1521872829254,[null,[[-1,2934," "],[1,2937," "],[-1,2974," "],[1,2977," "]],[2976,2976],[2934,2934]]],[1521872827860,["gengmei_pxf@gengmei123.local",[[-1,22,"\n"]],[22,22],[21,21]]],[1521872921340,[null,[[1,2933," "],[-1,2935," "],[1,2973," "],[-1,2975," "]],[2933,2933],[2975,2975]]],[1521872921340,[null,[[-1,2933," "],[1,2936," "],[-1,2973," "],[1,2976," "]],[2975,2975],[2933,2933]]],[1521872901637,["gengmei_pxf@gengmei123.local",[[1,1834,"**"]],[1834,1834],[1836,1836]]],[1521872904437,["gengmei_pxf@gengmei123.local",[[1,1850,"**"]],[1850,1850],[1852,1852]]],[1521872913502,["gengmei_pxf@gengmei123.local",[[1,1874,"**"]],[1874,1874],[1876,1876]]],[1521872918352,["gengmei_pxf@gengmei123.local",[[1,2032,"**"]],[2032,2032],[2034,2034]]],[1521872981332,[null,[[1,2941," "],[-1,2943," "],[1,2981," "],[-1,2983," "]],[2941,2941],[2983,2983]]],[1521872981332,[null,[[-1,2941," "],[1,2944," "],[-1,2981," "],[1,2984," "]],[2983,2983],[2941,2941]]],[1521872974792,["gengmei_pxf@gengmei123.local",[[1,12167,"\n\n![这里写图片描述](http://img.blog.csdn.net/20171124105256092?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTk4NzY4NzExNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n* * *\n\n**总结：** \n1\\. 重要内容当你的信息不希望用户能够触碰到，可以使用内置存储 \n2\\. 当你的信息没有那么敏感，建议使用外置存储器包名路径"]],[12167,12167],[12440,12440]]],[1521873001211,[null,[[1,2941," "],[-1,2943," "],[1,2981," "],[-1,2983," "],[-1,12168,"\n"],[1,12441,"\n"]],[2941,2941],[12442,12442]]],[1521873001211,[null,[[-1,2941," "],[1,2944," "],[-1,2981," "],[1,2984," "],[1,12168,"\n"],[-1,12440,"\n"]],[12442,12442],[2941,2941]]],[1521872996083,["gengmei_pxf@gengmei123.local",[[-1,12170,"这里写图片描述"],[-1,12375," "],[1,12376," "],[-1,12409," "],[1,12410," huo"]],[12170,12177],[12173,12173]]],[1521872997689,["gengmei_pxf@gengmei123.local",[[-1,12170,"huo"]],[12173,12173],[12170,12170]]],[1521873000333,["gengmei_pxf@gengmei123.local",[[1,12170,"获取路径"]],[12170,12170],[12174,12174]]],[1521873031426,[null,[[1,2941," "],[-1,2943," "],[1,2981," "],[-1,2983," "],[-1,12168,"\n"],[1,12170,"["],[1,12174,"]("],[1,12369,"*"],[-1,12370," "],[1,12403,"储"],[-1,12404,"huo "],[1,12438,"\n"]],[2941,2941],[12439,12439]]],[1521873031426,[null,[[-1,2941," "],[1,2944," "],[-1,2981," "],[1,2984," "],[1,12168,"\n"],[-1,12169,"["],[-1,12174,"]("],[-1,12371,"*"],[1,12373," "],[-1,12405,"储"],[1,12407,"huo "],[-1,12437,"\n"]],[12439,12439],[2941,2941]]],[1521873026704,["gengmei_pxf@gengmei123.local",[[-1,12433,"包名路径"]],[12433,12437],[12433,12433]]]]]]}